<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simple &amp; Freedom</title>
  
  <subtitle>Learn and live.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://arvin-he.github.io/"/>
  <updated>2017-09-08T03:51:39.707Z</updated>
  <id>http://arvin-he.github.io/</id>
  
  <author>
    <name>Arvin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>怎样避免陷入无止境地看教程的陷阱</title>
    <link href="http://arvin-he.github.io/2017/09/08/learn-minds-2017-06-19/"/>
    <id>http://arvin-he.github.io/2017/09/08/learn-minds-2017-06-19/</id>
    <published>2017-09-08T03:51:39.704Z</published>
    <updated>2017-09-08T03:51:39.707Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/09/08/learn-minds-2017-06-19/1.jpeg" alt=""></p><p>我们可能都曾遇到过这样的情况：学习编程的时候，一个教程接着一个教程地学，但是不清楚自己学到什么了程度。然后你开始自我怀疑：“这太难了。”或“也许编程不适合我。”我知道你懂这种感受。</p><p>我自己在最近就切身体会到了这种感觉。我本身算是个比较自信的PHP攻城狮，打算学习Python—尤其是Django。</p><p>我搜索了一些相关资料并找到了看似完美的教程，足够复杂富有挑战，又足够简单不至于击垮我的兴趣。</p><p>作为一个基于项目实战的教程，我对完成后的项目相当喜欢。我认为将它添加到我的成长作品集会是很酷的一件事。</p><p>跟着教程做到接近80%的时候，我突然产生了一股自我怀疑。我已经看了视频教程并一个个字敲了所有的代码，我已经有了一个简单的项目可以展示给他人，可为什么我感觉反倒没有刚开始那样好？</p><p><img src="/2017/09/08/learn-minds-2017-06-19/2.jpg" alt=""></p><p>跟着这个教程又花了几个星期的晚上，我有了一个漂亮的完工项目。即便如此，我还是觉得在没有指南的情况下我是不具备重新实现这个项目的技能的。所以，将它放到我的作品集里真的好吗？</p><p>将一个在外观和功能上与别人的一模一样的项目展示出来真的说服力吗？而且代码和GitHub教程上的一模一样。</p><p>如你所见，跟着教程学习，接触到新的技能，是很棒的。但是只跟着教程学习，你无法掌握作为一名合格的初级工程师所需的更多技能，我指的是：</p><ul><li>设计和组织项目</li><li>了解哪些工具对于一个具体项目是最佳选择</li><li>尝试通过搜索来解决遇到的一些问题</li><li>解决在实际项目开发中无可避免的一些问题</li></ul><h2 id="教程是快速上手的好办法"><a href="#教程是快速上手的好办法" class="headerlink" title="教程是快速上手的好办法"></a>教程是快速上手的好办法</h2><hr><p>为了避免大家误解，交代一下相关背景，我是一个29岁的初级码农，目前在一家软件开发公司工作。我在一年前转行进入编程行业，</p><p>很多新手码农一样，在开始学习高级教程之前我先完成基础的教程。我主要是学习PHP（因为在我开始学习编程的时候听说PHP是全世界最好的语言），我很快就熟悉了语法和一些基本用法。</p><p>大概花了9个月的时间，我完成了足够多的教程，有了足够的理解，也有了足够的动力去说服一家软件开发公司给我提供一份工作。（你可以通过这篇文章了解到我是如何说服老板给我工作机会的 take a chance on me and pay me to learn to code.）</p><p>让我能在如此短的时间内得到一份编程工作，得益于我创建的可以展示的实际项目。值得注意的是，是<strong>我自己</strong>的项目，而不是跟着教程复制粘贴的那种。</p><h2 id="教程也只能帮你到这里了-之后你需要开发实际项目"><a href="#教程也只能帮你到这里了-之后你需要开发实际项目" class="headerlink" title="教程也只能帮你到这里了 之后你需要开发实际项目"></a>教程也只能帮你到这里了 之后你需要开发实际项目</h2><hr><p><img src="/2017/09/08/learn-minds-2017-06-19/3.jpeg" alt=""></p><p>不要理解错了我的意思–教程是很棒的，尤其是在新手学习基础的情况下。当然，教程的质量是良莠不齐的，解释的详细程度也大相径庭。但是一个教程接着一个教程的学习是无法让你成为一个专业的开发者的。</p><p>你必须开发自己的项目。一旦你对你选择的语言的语法和基本的实现有了一定的认识，你就可以开始开发属于自己的东西了，不再是“手把手”式的学习。</p><p>当我向别人说这些的时候，通常得到的回应是：“开发什么呢？我一点想法都没有。”</p><p>额，实际上没人指望你创造出什么牛逼的东西来，而且你应该不具备这样的技能去做这样的事情，就算你有想法。</p><p>这里有一份清单，列出了你可以开发的500个项目，有例子: <a href="http://rosettacode.org/wiki/Category:Programming_Tasks" target="_blank" rel="external">http://rosettacode.org/wiki/Category:Programming_Tasks</a> 。</p><p>你也可以开发类似博客这样的项目。是的，有无数个教程都是基于构建博客的。你可能还会复制、粘贴一些代码，这也许不是一个令人印象深刻的项目，但是。。。</p><p>开发属于<strong>你自己的博客</strong>。坐下来，在开始之前，制定好每一步的计划和特色功能。搜索并选择一门你想用的语言和框架。了解怎么安装需要的工具，构建开发环境，通过包管理工具安装所需的依赖等。当你卡在某个环节时，Google或者通过可靠的技术社区去解决你遇到的一些问题。</p><p>通过这样的方式你的学习效率可能比跟着任何一个教程学习都快很多,你自己开发的项目的在你作品中的价值也远远大于其他几十个跟着教程做的项目的总和。</p><p>取决于你选择的项目的复杂程度，在你找工作的时候你的个人作品集里可能就不再需要其他的东西了，只是可能。你的代码可能不是非常出色，但这是你自己写的代码。你可以解释每一行代码的意义，你可以解释你是如何实现的和为什么这样做。</p><p>同时，你也证明了你可以管理一个项目，单独完成，学习需要的新技能，并递交最终完成的产品。对于潜在的雇主而言，你现在拥有了几项有价值的技能。</p><p>如果花12到18月的时间去学习，还没有找到一份工作，或者说你总感觉实际尚未成熟，<strong>别灰心，不要放弃</strong>。不要开始有这样的想法：你需要花动辄上万的学费去参加什么牛逼的培训班。只需要开始开发你自己的东西你就会惊讶于你进步的速度！</p><blockquote><p>通过freeCodeCamp找到工作的人数在不断增长可能也是因为它基于项目的学习方式。freeCodeCamp是一个不错的学习平台，不过本文就不替原作者多做宣传了。本文翻译自 <a href="https://medium.freecodecamp.com/how-to-dig-yourself-out-of-the-coding-tutorial-rut-7d3b2232f234" target="_blank" rel="external">https://medium.freecodecamp.com/how-to-dig-yourself-out-of-the-coding-tutorial-rut-7d3b2232f234</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2017/09/08/learn-minds-2017-06-19/1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可能都曾遇到过这样的情况：学习编程的时候，一个教程接着一个教程地学，但是不清楚自己学到什么了程度。然后你开始自我怀疑：“这太难了。”或
      
    
    </summary>
    
      <category term="life" scheme="http://arvin-he.github.io/categories/life/"/>
    
    
      <category term="思想" scheme="http://arvin-he.github.io/tags/%E6%80%9D%E6%83%B3/"/>
    
      <category term="方法" scheme="http://arvin-he.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python程序打包问题</title>
    <link href="http://arvin-he.github.io/2017/09/01/py-packproblems-2017-09-01/"/>
    <id>http://arvin-he.github.io/2017/09/01/py-packproblems-2017-09-01/</id>
    <published>2017-09-01T06:33:39.000Z</published>
    <updated>2017-09-08T03:51:39.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ImportError-DLL-load-failed-The-specified-module-could-not-be-found"><a href="#ImportError-DLL-load-failed-The-specified-module-could-not-be-found" class="headerlink" title="ImportError: DLL load failed: The specified module could not be found."></a>ImportError: DLL load failed: The specified module could not be found.</h3><p>win7-64bit或win10-64bit打包python32位程序在win7-32bit系统上运行报错:ImportError: DLL load failed: The specified module could not be found.</p><p>Finally,I find the solution:<br>Install <a href="https://www.microsoft.com/de-at/download/details.aspx?id=48145" target="_blank" rel="external">Microsoft Visual C++ 2015 Redistributable Update 3 x86</a>.</p><p>注意:</p><ol><li>选择X86版本</li><li>vc_redist.x86.exe 一定要选择update 3版本,之前的版本还是会报错.</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://github.com/tensorflow/tensorflow/issues/7995" target="_blank" rel="external">stackoverflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ImportError-DLL-load-failed-The-specified-module-could-not-be-found&quot;&gt;&lt;a href=&quot;#ImportError-DLL-load-failed-The-specified-module-coul
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://arvin-he.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中关于在GUI应用程序读取stdin内容</title>
    <link href="http://arvin-he.github.io/2017/08/30/py-stdin-2017-08-30/"/>
    <id>http://arvin-he.github.io/2017/08/30/py-stdin-2017-08-30/</id>
    <published>2017-08-30T02:11:08.000Z</published>
    <updated>2017-09-08T03:51:39.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>键盘输入的字符串是保存在stdin中的,我在程序中如何将stdin中数据拿到并赋给一个变量? 之前我是通过sys.stdin.readline()来读取stdin中的数据的,但是导致界面卡死,我想问一下你有什么办法?我google一下,没有找到我想要的</p><p>data = input()<br>用 sys.stdin.readline 或 input, 都只能读取整行数据. 如果没有按回车键, 调用是阻塞不返回的.</p><p>这就是为什么程序界面被卡死的原因.</p><p>Qt 里还有个键盘事件的钩子. 需要在终端键盘输入时, 可能需要配置一下.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">QtCore.pyqtRemoveInputHook()</div><div class="line">code.InteractiveConsole(_locals).interact()</div><div class="line">QtCore.pyqtRestoreInputHook()</div></pre></td></tr></table></figure></p><p>当QtCore模块第一次导入时，它会安装一个Python输入钩子（即它设置Python的PyOS_InputHook变量的值）。这允许在应用程序运行时在解释器提示符处输入命令。然后可以动态创建新的Qt对象并调用任何现有的Qt对象的方法。输入钩子可能会导致某些类型的应用程序出现问题，特别是那些通过不同手段提供类似设备的应用程序。此功能删除PyQt安装的输入钩。</p><p>对于图形界面程序, 最合理的做法还是只用输入控件, LineEdit 等, 不用控制台, 也就是不用 sys.stdin<br>Qt 处理键盘消息应该用键盘事件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;键盘输入的字符串是保存在stdin中的,我在程序中如何将stdin中数据拿到并赋给一个变量? 之前我是通过sys.stdin.readlin
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://arvin-he.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统之镜像备份</title>
    <link href="http://arvin-he.github.io/2017/08/28/linux-backup-2017-08-28/"/>
    <id>http://arvin-he.github.io/2017/08/28/linux-backup-2017-08-28/</id>
    <published>2017-08-28T05:51:53.000Z</published>
    <updated>2017-09-08T03:51:39.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算文件拷贝的进度"><a href="#计算文件拷贝的进度" class="headerlink" title="计算文件拷贝的进度"></a>计算文件拷贝的进度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dd_process.sh</span></div><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="comment">####dd 命令反映进度####</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"需要 盘符名 镜像名"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">dupath=`du -m --total / --exclude=proc --exclude=media |grep 总用量 |cut -f 1`</div><div class="line"><span class="built_in">echo</span> <span class="string">"根文件大小为<span class="variable">$dupath</span> M"</span></div><div class="line"><span class="built_in">let</span> SIZE=<span class="variable">$dupath</span>+200</div><div class="line">    <span class="keyword">while</span> <span class="literal">true</span></div><div class="line">    <span class="keyword">do</span></div><div class="line">    dusize=`du -hm /media/Lark/<span class="variable">$1</span>/<span class="variable">$2</span> |cut -f 1`</div><div class="line">    <span class="built_in">echo</span> <span class="string">"生成文件大小为 <span class="variable">$dusize</span> M"</span></div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$dusize</span> == <span class="variable">$SIZE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"文件生成成功！"</span></div><div class="line">        <span class="built_in">exit</span> 0</div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="keyword">done</span></div></pre></td></tr></table></figure><h3 id="将根文件备份到u盘"><a href="#将根文件备份到u盘" class="headerlink" title="将根文件备份到u盘"></a>将根文件备份到u盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="comment">#################################</span></div><div class="line"><span class="comment">###  get img to u_disk                                 ### </span></div><div class="line"><span class="comment">### 功能：将根文件备份到u盘                      ###  </span></div><div class="line"><span class="comment">#################################</span></div><div class="line"><span class="comment">#卸载备份区，保证/media/Lark下只挂载u盘</span></div><div class="line"><span class="keyword">if</span> [ -d /media/Lark/.linuxroot ];<span class="keyword">then</span></div><div class="line">/bin/umount /media/Lark/.linuxroot</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -ne 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"请切换root权限执行"</span></div><div class="line"><span class="built_in">exit</span> -5</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"请输入 u盘名 镜像名称!"</span></div><div class="line"><span class="built_in">exit</span> -7</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#检测出u盘个数及盘符名</span></div><div class="line"></div><div class="line">LS_MEDIA_LARK=`ls /media/Lark`</div><div class="line">SELECTED_DISK=</div><div class="line">counter=0</div><div class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /media/Lark`</div><div class="line"><span class="keyword">do</span></div><div class="line">counter=`expr <span class="variable">$counter</span> + 1`</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#echo $counter</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$counter</span> == 0 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="comment">#没有U盘插入，退出</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"没有插入u盘或者没有挂载盘符！！请检测u盘是否可正常识别!"</span></div><div class="line"><span class="built_in">exit</span> -1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#echo "LS_MEDIA_LARK is $LS_MEDIA_LARK "</span></div><div class="line">DISK1=`<span class="built_in">echo</span> <span class="variable">$LS_MEDIA_LARK</span>|awk -F <span class="string">' '</span> <span class="string">'&#123;print $1&#125;'</span>`</div><div class="line">DISK2=`<span class="built_in">echo</span> <span class="variable">$LS_MEDIA_LARK</span>|awk -F <span class="string">' '</span> <span class="string">'&#123;print $2&#125;'</span>`</div><div class="line"><span class="comment">#echo "DISK1 is $DISK1,DISK2 is $DISK2"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"检测目前根文件大小"</span></div><div class="line">dupath=`du -m --total / --exclude=proc --exclude=media |grep 总用量 |cut -f 1`</div><div class="line"><span class="built_in">echo</span> <span class="string">"根文件大小为<span class="variable">$dupath</span> M"</span></div><div class="line"><span class="comment">#size=2700</span></div><div class="line"><span class="comment">#if [ $dupath -gt $size ];then</span></div><div class="line"><span class="comment">#echo "注意：当前系统生成镜像大于3GB，生成镜像文件不可使用Lark升级工具烧写，但可使用原厂工具烧写"</span></div><div class="line"><span class="comment">#exit 0</span></div><div class="line"><span class="comment">#fi</span></div><div class="line"><span class="comment">#TODO :校验U盘可用空间，与根文件做对比</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"####生成根文件镜像####"</span></div><div class="line"><span class="built_in">let</span> SIZE=<span class="variable">$dupath</span>+10</div><div class="line"><span class="built_in">echo</span> <span class="string">"生成文件大小为<span class="variable">$SIZE</span> M"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"步骤一:选择存放镜像的U盘"</span></div><div class="line"><span class="keyword">if</span> <span class="literal">false</span>;<span class="keyword">then</span></div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$DISK2</span>"</span> ] ;<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"共检测出u盘 <span class="variable">$counter</span>个：请选择1.<span class="variable">$DISK1</span> 2.<span class="variable">$DISK2</span>"</span></div><div class="line"><span class="built_in">read</span> CHOICE</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="variable">$CHOICE</span> <span class="keyword">in</span></div><div class="line">1) </div><div class="line"><span class="built_in">echo</span> <span class="string">"你选择的u盘为<span class="variable">$DISK1</span>"</span></div><div class="line">SELECTED_DISK=<span class="variable">$DISK1</span></div><div class="line">;;</div><div class="line">2)</div><div class="line"><span class="built_in">echo</span> <span class="string">"你选择的u盘为<span class="variable">$DISK2</span>"</span></div><div class="line">SELECTED_DISK=<span class="variable">$DISK2</span></div><div class="line">;;</div><div class="line">*)</div><div class="line"><span class="built_in">echo</span> <span class="string">"选择错误"</span></div><div class="line"><span class="built_in">exit</span> -2</div><div class="line">;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="keyword">else</span></div><div class="line">SELECTED_DISK=<span class="variable">$DISK1</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">SELECTED_DISK=<span class="variable">$1</span></div><div class="line"><span class="comment">#检测所选u盘是剩余空间</span></div><div class="line"></div><div class="line">DISK_SPACE=`df -hm /media/Lark/<span class="variable">$SELECTED_DISK</span> | sed -n <span class="string">"2p"</span> | awk <span class="string">'&#123;print $4&#125;'</span>`</div><div class="line"><span class="built_in">echo</span> <span class="string">"剩余空间为 <span class="variable">$DISK_SPACE</span> M"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$SIZE</span> -gt <span class="variable">$DISK_SPACE</span> ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"根文件大小大于备份区最大空间，请删减可删减的文件进行备份"</span></div><div class="line"><span class="built_in">exit</span> -3</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"步骤二:切换到U盘目录，且创建镜像文件，请耐心等待"</span></div><div class="line"><span class="built_in">cd</span>  /media/Lark/<span class="variable">$SELECTED_DISK</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="literal">false</span>;<span class="keyword">then</span></div><div class="line"><span class="comment">#后台检测，一旦U盘断开，或者卸载，则退出此次操作</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">while</span> <span class="literal">true</span></div><div class="line"><span class="keyword">do</span></div><div class="line">CHECK_DISK=/media/Lark/<span class="variable">$SELECTED_DISK</span></div><div class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$CHECK_DISK</span> ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"u盘已断开，请检测其连接性并重新执行"</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="built_in">exit</span> -4</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$FLAGS</span> == 1 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line">&#125;&amp;</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">IMAGE_NAME=<span class="variable">$2</span><span class="string">".tmp"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span>  <span class="string">"步骤三:生成镜像名:<span class="variable">$IMAGE_NAME</span>"</span></div><div class="line">touch <span class="variable">$IMAGE_NAME</span></div><div class="line"><span class="built_in">echo</span>  <span class="string">"步骤四：生成指定大小空文件"</span></div><div class="line">dd <span class="keyword">if</span>=/dev/zero of=<span class="variable">$IMAGE_NAME</span> bs=1M count=<span class="variable">$SIZE</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? == 0 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span>  <span class="string">"步骤五：格式化镜像文件"</span></div><div class="line">mkfs.ext4 -F -L .linuxroot <span class="variable">$IMAGE_NAME</span></div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"dd 操作失误"</span></div><div class="line"><span class="built_in">exit</span> -1;</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? == 0 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"步骤六：挂载镜像文件到mnt目录"</span></div><div class="line">        mount -o loop <span class="variable">$IMAGE_NAME</span> /mnt</div><div class="line"></div><div class="line">    <span class="keyword">if</span> [ $? == 0 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"步骤七：同步根分区到mnt"</span></div><div class="line">rsync -axv / /mnt</div><div class="line"><span class="keyword">fi</span> </div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"同步完成"</span></div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"同步失败，请重新执行"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? == 0 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="comment">#echo "请卸载U盘"</span></div><div class="line"><span class="built_in">cd</span> /tmp</div><div class="line">umount /mnt</div><div class="line"><span class="keyword">if</span> [ $? == 0 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"挂载点已卸载"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span> <span class="string">" 镜像已生成！"</span></div><div class="line">sleep 3</div><div class="line"><span class="comment">#fuser -km /media/Lark/$SELECTED_DISK</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"镜像修正以便烧写"</span></div><div class="line">mv /media/Lark/<span class="variable">$SELECTED_DISK</span>/<span class="variable">$IMAGE_NAME</span> /media/Lark/<span class="variable">$SELECTED_DISK</span>/<span class="variable">$2</span><span class="string">".img"</span></div><div class="line">umount /media/Lark/<span class="variable">$SELECTED_DISK</span></div><div class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$SELECTED_DISK</span> 已卸载成功"</span> </div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"请卸载并拔除U盘"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><h3 id="系统备份"><a href="#系统备份" class="headerlink" title="系统备份"></a>系统备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -d /media/Lark/.linuxroot ];<span class="keyword">then</span></div><div class="line">/bin/umount /media/Lark/.linuxroot</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"检测目前根文件大小"</span></div><div class="line">dupath=`du -m --total / --exclude=proc --exclude=media |grep 总用量 |cut -f 1`</div><div class="line">    fssize=<span class="variable">$dupath</span></div><div class="line">size=2500</div><div class="line"><span class="keyword">if</span> [ <span class="variable">$fssize</span> -gt <span class="variable">$size</span> ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"根文件大小大于备份区最大空间，请删减可删减的文件进行备份"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"检测系统一致性"</span></div><div class="line">/sbin/e2fsck -f -y  /dev/mmcblk0p6</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"一致性检测失败，请检测重试"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"扩展备份区到最大限额2.8G"</span></div><div class="line">/sbin/resize2fs /dev/mmcblk0p6 2600M</div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"扩大分区失败，请重试"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"挂载系统备份区"</span></div><div class="line"></div><div class="line">/bin/mount -o loop /dev/block/mtd/by-name/linuxfsbk /mnt</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"挂载系统备份区失败，请重试"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"同步当前系统"</span></div><div class="line"></div><div class="line">/usr/bin/rsync -axv --delete / /mnt </div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"同步当前系统失败，请重试"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"卸载系统备份区"</span></div><div class="line">/bin/umount /mnt</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"卸载系统备份区失败，请重试"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"同步完成"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"卸载系统备份区"</span></div><div class="line">/bin/umount /mnt</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"卸载系统备份区失败，请重试"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"系统备份成功 "</span></div><div class="line"></div><div class="line">sleep 2</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算文件拷贝的进度&quot;&gt;&lt;a href=&quot;#计算文件拷贝的进度&quot; class=&quot;headerlink&quot; title=&quot;计算文件拷贝的进度&quot;&gt;&lt;/a&gt;计算文件拷贝的进度&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://arvin-he.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Web之REST概念</title>
    <link href="http://arvin-he.github.io/2017/08/25/web-rest-2017-08-25/"/>
    <id>http://arvin-he.github.io/2017/08/25/web-rest-2017-08-25/</id>
    <published>2017-08-25T08:52:13.000Z</published>
    <updated>2017-09-08T03:51:40.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="REST当中为什么要使用HTTP-PUT"><a href="#REST当中为什么要使用HTTP-PUT" class="headerlink" title="REST当中为什么要使用HTTP PUT"></a>REST当中为什么要使用HTTP PUT</h3><p>REST(Representational State Transfer)是<strong>网络服务接口</strong>的一种<strong>风格</strong>，并不是一个标准，就web service而言，REST要比SOAP（SOAP是标准，不是风格）轻量得多，容易得多。我记得我最初开始接触web service的时候，所有的材料上来就是一大堆的名词，SOAP, WSDL,看得头都要大了，后来提出来的REST就容易理解得多，虽然目前SOAP在企业级的web service中还有一席之地，但是在公共的Internet上，不是REST的服务实在不好意思和人打招呼，我们经常可以看到评价某某服务是RESTful的，但是从来没有听说某某服务是SOAPful的 :-)<br>微软对REST的支持有点晚，自.NET3.5开始，WCF也可以提供RESTful接口。当然，REST不光限于web service，网页服务也可以RESTful，微软的ASP.NET MVC框架提供了直接的REST支持。</p><p>因为REST只是风格，不是标准，所以有的方面容易有误解，比如说创建和更新某个URI代表的资源的时候，是用HTTP的PUT还是POST命令。REST常用的四种HTTP命令，GET、DELETE、PUT和POST，对于GET和DELETE，一个是获取资源，一个是删除资源，没什么异议，问题是PUT和POST，两者都有更改指定URI的语义，那么，究竟是用哪一个呢？</p><p>有的观点认为，应该用POST来创建一个资源，用PUT来更新一个资源；有的观点认为，应该用PUT来创建一个资源，用POST来更新一个资源；还有的观点认为可以用PUT和POST中任何一个来做创建或者更新一个资源。这些观点都只看到了风格，争论起来也只是争论哪种风格更好，其实，用PUT还是POST，不是看这是创建还是更新资源的动作，这不是风格的问题，而是语义的问题。</p><p>REST是一种风格，但是还是依赖于HTTP协议，在HTTP中，PUT被定义为idempotent(幂等)的方法，POST则不是，这是一个很重要的区别。</p><p>“Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request.”</p><p>上面的话就是说，如果一个方法重复执行多次，产生的效果是一样的，那就是idempotent的。</p><p>举一个简单的例子，加入由一个博客系统提供一个Web API，模式是这样<a href="http://superblogging/blogs/post/{blog-name}，很简单，将{blog-name}替换为我们的blog名字，往这个URI发送一个HTTP" target="_blank" rel="external">http://superblogging/blogs/post/{blog-name}，很简单，将{blog-name}替换为我们的blog名字，往这个URI发送一个HTTP</a> PUT或者POST请求，HTTP的body部分就是博文，这是一个很简单的REST API例子。我们应该用PUT方法还是POST方法？取决于这个REST服务的行为是否是idempotent的，假如我们发送两个<a href="http://superblogging/blogs/post/Sample请求，服务器端是什么样的行为？如果产生了两个博客帖子，那就说明这个服务不是idempotent的，因为多次使用产生了副作用了嘛；如果后一个请求把第一个请求覆盖掉了，那这个服务就是idempotent的。前一种情况，应该使用POST方法，后一种情况，应该使用PUT方法。" target="_blank" rel="external">http://superblogging/blogs/post/Sample请求，服务器端是什么样的行为？如果产生了两个博客帖子，那就说明这个服务不是idempotent的，因为多次使用产生了副作用了嘛；如果后一个请求把第一个请求覆盖掉了，那这个服务就是idempotent的。前一种情况，应该使用POST方法，后一种情况，应该使用PUT方法。</a></p><p>也许你会觉得这个两个方法的差别没什么大不了的，用错了也不会有什么问题，但是你的服务一放到internet上，如果不遵从HTTP协议的规范，就可能给自己带来麻烦。比如，没准Google Crawler也会访问你的服务，如果让一个不是indempotent的服务可以用indempotent的方法访问，那么你服务器的状态可能就会被Crawler修改，这是不应该发生的。</p><h3 id="关于幂等的概念"><a href="#关于幂等的概念" class="headerlink" title="关于幂等的概念"></a>关于幂等的概念</h3><p>根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p><p>　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p><p>　　* 注意：这里安全的含义仅仅是指是非修改信息。</p><p>　　(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等这个概念：</p><p>幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br>幂等有一下几种定义：<br>对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。</p><p>对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。<br>看完上述解释后，应该可以理解GET幂等的含义了。</p><p>但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.cnblogs.com/shanyou/archive/2011/10/17/2215930.html" target="_blank" rel="external">REST当中为什么要使用HTTP PUT</a></li><li><a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="external">浅谈HTTP中Get与Post的区别</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;REST当中为什么要使用HTTP-PUT&quot;&gt;&lt;a href=&quot;#REST当中为什么要使用HTTP-PUT&quot; class=&quot;headerlink&quot; title=&quot;REST当中为什么要使用HTTP PUT&quot;&gt;&lt;/a&gt;REST当中为什么要使用HTTP PUT&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Web" scheme="http://arvin-he.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Web之Get和Post区别</title>
    <link href="http://arvin-he.github.io/2017/08/25/web-getpost-2017-08-25/"/>
    <id>http://arvin-he.github.io/2017/08/25/web-getpost-2017-08-25/</id>
    <published>2017-08-25T07:22:07.000Z</published>
    <updated>2017-09-08T03:51:40.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="两种-HTTP-请求方法：GET-和-POST"><a href="#两种-HTTP-请求方法：GET-和-POST" class="headerlink" title="两种 HTTP 请求方法：GET 和 POST"></a>两种 HTTP 请求方法：GET 和 POST</h3><p>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。</p><p>GET - 从指定的资源请求数据。</p><p>POST - 向指定的资源提交要被处理的数据</p><h3 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h3><p>请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：<br><code>/test/demo_form.asp?name1=value1&amp;name2=value2</code></p><p>有关 GET 请求的其他一些注释：</p><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于取回数据</li></ul><h3 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h3><p>请注意，查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST /test/demo_form.asp HTTP/1.1</div><div class="line">Host: w3schools.com</div><div class="line">name1=value1&amp;name2=value2</div></pre></td></tr></table></figure></p><p>有关 POST 请求的其他一些注释：</p><ul><li>OST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST 不能被收藏为书签</li><li>POST 请求对数据长度没有要求</li></ul><h3 id="GET-与-POST区别"><a href="#GET-与-POST区别" class="headerlink" title="GET 与 POST区别"></a>GET 与 POST区别</h3><ol><li><p>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456.  POST方法是把提交的数据放在HTTP包的Body中.</p></li><li><p>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</p></li><li><p>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</p></li><li><p>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</p></li></ol><h3 id="一些误区"><a href="#一些误区" class="headerlink" title="一些误区"></a>一些误区</h3><p>误区一：POST可以比GET提交更多更长的数据？<br>由于使用GET方法提交数据时，以?分割URL和传输数据，参数之间以&amp;相连，在URL后面添加需要提交的参数，有人就会说了，浏览器地址栏输入的参数是有限的，而POST不用再地址栏输入，所以POST就比GET可以提交更多的数据。难道真的是这样的么？<br>而实际上，URL不存在参数上限的问题，HTTP协议规范<strong>没有</strong>对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。<br>同时，POST是没有大小限制的，HTTP协议规范也没有进行大小限制。POST数据是没有限制的，<strong>起限制作用的是服务器的处理程序的处理能力。</strong><br>总归一句话，这个限制是针对所有HTTP请求的，与GET、POST没有多少关系。</p><p>误区二：POST比GET安全？<br>首先，我们要承认安全的概念有很多种，要是从最基本的肉眼看到就不安全，肉眼看不到那就是安全的概念说呢，GET确实没有POST安全，毕竟小白用户确实可以看到在URL中带有的数据信息，这个你无法狡辩。那么要是往严谨了说呢，POST是不是要比GET安全呢？其实不是的。<br>上面也说了，GET将提交到服务器的数据添加到URL中了，可见；虽然POST的数据，你肉眼看不到，你抓个包看看，在HTTP包的包体中，我们提交的数据时仍然可见的.</p><h3 id="比较GET-与-POST"><a href="#比较GET-与-POST" class="headerlink" title="比较GET 与 POST"></a>比较GET 与 POST</h3><p>下面的表格比较了两种 HTTP 方法：GET 和 POST。</p><table><thead><tr><th></th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>后退按钮/刷新</td><td>无害</td><td>数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td>书签</td><td>可收藏为书签</td><td>不可收藏为书签</td></tr><tr><td>缓存</td><td>能被缓存</td><td>不能缓存</td></tr><tr><td>编码类型</td><td>application/x-www-form-urlencoded</td><td>application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td>历史</td><td>参数保留在浏览器历史中。</td><td>参数不会保存在浏览器历史中。</td></tr><tr><td>对数据长度的限制</td><td>是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td>无限制。</td></tr><tr><td>对数据类型的限制</td><td>只允许 ASCII 字符。</td><td>没有限制。也允许二进制数据。</td></tr><tr><td>安全性</td><td>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！</td><td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td>可见性</td><td>数据在 URL 中对所有人都是可见的。</td><td>数据不会显示在 URL 中。</td></tr></tbody></table><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>很多时候，大家都觉的使用GET很方便，毕竟使用POST要用到Form，但是，你要知道，你使用GET方法时，浏览器可能会缓存你的地址等信息，还会留下历史记录，而对于POST方法呢，则不会进行缓存。在开发中，一定要分清楚GET和POST的使用场合，什么时候要使用GET，什么时候要使用POST，自己做到心中有数。</p><p>可能，你在Google类似的文章的时候，可能会看到分析POST和PUT区别的文章，这又是一类纠结的东西，更多的时候，我们分析这种东西都是分实际情景，结合设计者的语义去使用.</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.w3school.com.cn/tags/html_ref_httpmethods.asp" target="_blank" rel="external">w3cschool</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;两种-HTTP-请求方法：GET-和-POST&quot;&gt;&lt;a href=&quot;#两种-HTTP-请求方法：GET-和-POST&quot; class=&quot;headerlink&quot; title=&quot;两种 HTTP 请求方法：GET 和 POST&quot;&gt;&lt;/a&gt;两种 HTTP 请求方法：GET 
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Web" scheme="http://arvin-he.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>爬虫基础知识(一)</title>
    <link href="http://arvin-he.github.io/2017/08/25/py-scrapy1-2017-08-25/"/>
    <id>http://arvin-he.github.io/2017/08/25/py-scrapy1-2017-08-25/</id>
    <published>2017-08-25T06:12:06.000Z</published>
    <updated>2017-09-08T03:51:39.890Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-URL"><a href="#1-URL" class="headerlink" title="1. URL"></a>1. URL</h3><p>URL的格式由三部分组成：<br>第一部分是协议(或称为服务方式)。<br>第二部分是存有该资源的主机IP地址(有时也包括端口号)。<br>第三部分是主机资源的具体地址，如目录和文件名等。</p><p>爬虫爬取数据时必须要有一个目标的URL才可以获取数据，因此，它是爬虫获取数据的基本依据，准确理解它的含义对爬虫学习有很大帮助。</p><h3 id="关于urllib2包"><a href="#关于urllib2包" class="headerlink" title="关于urllib2包"></a>关于urllib2包</h3><p>python 3.X版本是不需要安装urllib2包，urllib和urllib2包集合成在一个包为urllib了.<br>在python3.x版本中，如何使用：urllib2.urlopen()？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"></div><div class="line">response = urllib.request.urlopen(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">print(response.read())</div><div class="line"></div><div class="line">URL = <span class="string">"http://www.baidu.com"</span></div><div class="line">request = urllib.request.Request(URL)</div><div class="line">response = urllib.request.urlopen(request)</div><div class="line">print(response.read())</div></pre></td></tr></table></figure></p><h3 id="POST和GET数据传送"><a href="#POST和GET数据传送" class="headerlink" title="POST和GET数据传送"></a>POST和GET数据传送</h3><p>大多数网站都是动态网页，需要你动态地传递参数给它，它做出对应的响应。所以，在访问时，我们需要传递数据给它。</p><p>urlopen一般接受三个参数，它的参数如下：<code>urlopen(url, data, timeout)</code><br>第一个参数url即为URL，第二个参数data是访问URL时要传送的数据，第三个timeout是设置超时时间。<br>第二,三个参数是可以不传送的，data默认为空None，timeout默认为 <code>socket._GLOBAL_DEFAULT_TIMEOUT</code></p><h4 id="POST方式："><a href="#POST方式：" class="headerlink" title="POST方式："></a>POST方式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"> </div><div class="line">values = &#123;<span class="string">"username"</span>:<span class="string">"xxxx@qq.com"</span>,<span class="string">"password"</span>:<span class="string">"XXXX"</span>&#125;</div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"https://passport.csdn.net/account/login?from=http://my.csdn.net/my/mycsdn"</span></div><div class="line">request = urllib.request.Request(url, data)</div><div class="line">response = urllib.request.urlopen(request)</div><div class="line">print(response.read())</div></pre></td></tr></table></figure><h4 id="GET方式："><a href="#GET方式：" class="headerlink" title="GET方式："></a>GET方式：</h4><p>至于GET方式我们可以直接把参数写到网址上面，直接<strong>构建一个带参数的URL</strong>出来即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"> </div><div class="line">values=&#123;&#125;</div><div class="line">values[<span class="string">'username'</span>] = <span class="string">"xxxx@qq.com"</span></div><div class="line">values[<span class="string">'password'</span>]=<span class="string">"XXXX"</span></div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"http://passport.csdn.net/account/login"</span></div><div class="line">geturl = url + <span class="string">"?"</span> + data</div><div class="line">request = urllib.request.Request(geturl)</div><div class="line">response = urllib.request.urlopen(request)</div><div class="line">print(response.read())</div></pre></td></tr></table></figure></p><h3 id="python3中urllib的模块分4个子模块"><a href="#python3中urllib的模块分4个子模块" class="headerlink" title="python3中urllib的模块分4个子模块"></a>python3中urllib的模块分4个子模块</h3><p>urllib.request for opening and reading URLs<br>urllib.error containing the exceptions raised by urllib.request<br>urllib.parse for parsing URLs<br>urllib.robotparser for parsing robots.txt files</p><h3 id="python3中urllib报错"><a href="#python3中urllib报错" class="headerlink" title="python3中urllib报错"></a>python3中urllib报错</h3><p> 爬虫过程报错：http.client.RemoteDisconnected: Remote end closed connection without response<br> 利用 urllib 发起的请求，UA 默认是 Python-urllib/3.5 而在 chrome 中访问则 user_agent = ‘Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36’，因为服务器根据 UA 来判断拒绝了 python 爬虫。</p><p> 在浏览器中可以查看自己浏览器的UA</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-URL&quot;&gt;&lt;a href=&quot;#1-URL&quot; class=&quot;headerlink&quot; title=&quot;1. URL&quot;&gt;&lt;/a&gt;1. URL&lt;/h3&gt;&lt;p&gt;URL的格式由三部分组成：&lt;br&gt;第一部分是协议(或称为服务方式)。&lt;br&gt;第二部分是存有该资源的主机IP地址(
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="爬虫" scheme="http://arvin-he.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python之jsonrpc</title>
    <link href="http://arvin-he.github.io/2017/08/25/py-jsonrpc-2017-08-25/"/>
    <id>http://arvin-he.github.io/2017/08/25/py-jsonrpc-2017-08-25/</id>
    <published>2017-08-25T03:38:39.000Z</published>
    <updated>2017-09-08T03:51:39.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server</span></div><div class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</div><div class="line"><span class="keyword">from</span> jsonrpcserver <span class="keyword">import</span> methods</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@methods.add</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span>(<span class="string">'ping'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@methods.add</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hao</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span>(<span class="string">'hao'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@methods.add</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span>(<span class="string">'Hello, %s'</span> % name)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@methods.add</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sum</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span>(a + b)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHttpServer</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># Process request</span></div><div class="line">        request = self.rfile.read(int(self.headers[<span class="string">'Content-Length'</span>])).decode()</div><div class="line">        response = methods.dispatch(request)</div><div class="line">        <span class="comment"># Return response</span></div><div class="line">        self.send_response(response.http_status)</div><div class="line">        self.send_header(<span class="string">'Content-type'</span>, <span class="string">'application/json'</span>)</div><div class="line">        self.end_headers()</div><div class="line">        self.wfile.write(str(response).encode())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    HTTPServer((<span class="string">'localhost'</span>, <span class="number">5000</span>), TestHttpServer).serve_forever()</div></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> jsonrpcclient.http_client <span class="keyword">import</span> HTTPClient</div><div class="line"></div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'ping'</span>)</div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'hao'</span>)</div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'hello'</span>, <span class="string">'Nancy'</span>)</div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'Sum'</span>, <span class="number">5</span>, <span class="number">7</span>)</div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'lid'</span>)</div></pre></td></tr></table></figure><p>先运行服务端,再运行客户端代码</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">--&gt; &#123;&quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;ping&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &quot;ping&quot;, &quot;id&quot;: 1&#125; (200 OK)</div><div class="line">--&gt; &#123;&quot;id&quot;: 2, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;hao&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &quot;hao&quot;, &quot;id&quot;: 2&#125; (200 OK)</div><div class="line">--&gt; &#123;&quot;params&quot;: [&quot;Nancy&quot;], &quot;id&quot;: 3, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;hello&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &quot;Hello, Nancy&quot;, &quot;id&quot;: 3&#125; (200 OK)</div><div class="line">--&gt; &#123;&quot;params&quot;: [5, 7], &quot;id&quot;: 4, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;Sum&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: 12, &quot;id&quot;: 4&#125; (200 OK)</div><div class="line">--&gt; &#123;&quot;id&quot;: 5, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;lid&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;error&quot;: &#123;&quot;code&quot;: -32601, &quot;message&quot;: &quot;Method not found&quot;&#125;, &quot;id&quot;: 5&#125; (404 Not Found)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;js_client.py&quot;, line 7, in &lt;module&gt;</div><div class="line">    HTTPClient(&apos;http://localhost:5000&apos;).request(&apos;lid&apos;)</div><div class="line">  File &quot;C:\Python34\lib\site-packages\jsonrpcclient\client.py&quot;, line 200, in request</div><div class="line">    return self.send(Request(method_name, *args, **kwargs))</div><div class="line">  File &quot;C:\Python34\lib\site-packages\jsonrpcclient\client.py&quot;, line 171, in send</div><div class="line">    return self._send_message(request, **kwargs)</div><div class="line">  File &quot;C:\Python34\lib\site-packages\jsonrpcclient\http_client.py&quot;, line 82, in _send_message</div><div class="line">    log_format=&apos;&lt;-- %(message)s (%(http_code)s %(http_reason)s)&apos;)</div><div class="line">  File &quot;C:\Python34\lib\site-packages\jsonrpcclient\client.py&quot;, line 114, in _process_response</div><div class="line">    response[&apos;error&apos;].get(&apos;data&apos;))</div><div class="line">jsonrpcclient.exceptions.ReceivedErrorResponse: Method not found</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://arvin-he.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>正向代理和反向代理</title>
    <link href="http://arvin-he.github.io/2017/08/24/web-forwardbackagent-2017-08-24/"/>
    <id>http://arvin-he.github.io/2017/08/24/web-forwardbackagent-2017-08-24/</id>
    <published>2017-08-24T06:56:13.000Z</published>
    <updated>2017-09-08T03:51:40.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>我们常说的代理也就是只正向代理，正向代理的过程，它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，某些科学上网工具扮演的就是典型的正向代理角色。用浏览器访问 <a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a> 时，被残忍的block，于是你可以在国外搭建一台代理服务器，让代理帮我去请求<code>google.com</code>，代理把请求返回的相应结构再返回给我.</p><p><img src="/2017/08/24/web-forwardbackagent-2017-08-24/1.png" alt=""></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理隐藏了真实的服务端，当我们请求 www.baidu.com 的时候，就像拨打10086一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，www.baidu.com 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx就是性能非常好的反向代理服务器，用来做负载均衡.</p><p><img src="/2017/08/24/web-forwardbackagent-2017-08-24/2.png" alt=""></p><p>两者的区别在于代理的对象不一样：正向代理代理的对象是客户端，反向代理代理的对象是服务端</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.zhihu.com/question/24723688" target="_blank" rel="external">知乎</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正向代理&quot;&gt;&lt;a href=&quot;#正向代理&quot; class=&quot;headerlink&quot; title=&quot;正向代理&quot;&gt;&lt;/a&gt;正向代理&lt;/h3&gt;&lt;p&gt;我们常说的代理也就是只正向代理，正向代理的过程，它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="web" scheme="http://arvin-he.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫总结</title>
    <link href="http://arvin-he.github.io/2017/08/23/py-scrapysummer-2017-08-23/"/>
    <id>http://arvin-he.github.io/2017/08/23/py-scrapysummer-2017-08-23/</id>
    <published>2017-08-23T03:38:57.000Z</published>
    <updated>2017-09-08T03:51:39.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫需要用到的工具"><a href="#爬虫需要用到的工具" class="headerlink" title="爬虫需要用到的工具"></a>爬虫需要用到的工具</h3><p>正则表达式<br>XPATH<br>beautifulsoup<br>requests<br>urllib<br>urllib2<br>scrapy</p><p>分布式爬虫<br>学会怎样维护一个所有集群机器能够有效分享的分布式队列就好。最简单的实现是python-rq: <a href="https://github.com/nvie/rq" target="_blank" rel="external">https://github.com/nvie/rq</a></p><p>Bloom Filter: Bloom Filters by Example<br>Bloom Filter. 简单讲它仍然是一种hash的方法，但是它的特点是，它可以使用固定的内存（不随url的数量而增长）以O(1)的效率判定url是否已经在set中。可惜天下没有白吃的午餐，它的唯一问题在于，如果这个url不在set中，BF可以100%确定这个url没有看过。但是如果这个url在set中，它会告诉你：这个url应该已经出现过，不过我有2%的不确定性。注意这里的不确定性在你分配的内存足够大的时候，可以变得很小很少。一个简单的教程:<a href="https://llimllib.github.io/bloomfilter-tutorial/" target="_blank" rel="external">Bloom Filters by Example</a></p><p>rq和Scrapy的结合：<br>后续处理，网页析取，存储(Mongodb)</p><p>你只有一台机器。不管你的带宽有多大，只要你的机器下载网页的速度是瓶颈的话，那么你只有加快这个速度。用一台机子不够的话——用很多台吧！当然，我们假设每台机子都已经进了最大的效率——使用多线程（python的话，多进程吧）。</p><p>我们把这100台中的99台运算能力较小的机器叫作slave，另外一台较大的机器叫作master，那么回顾上面代码中的url_queue，如果我们能把这个queue放到这台master机器上，所有的slave都可以通过网络跟master联通，每当一个slave完成下载一个网页，就向master请求一个新的网页来抓取。而每次slave新抓到一个网页，就把这个网页上所有的链接送到master的queue里去。同样，bloom filter也放到master上，但是现在master只发送确定没有被访问过的url给slave。Bloom Filter放到master的内存里，而被访问过的url放到运行在master上的Redis里，这样保证所有操作都是O(1)。（至少平摊是O(1)，Redis的访问效率见:LINSERT – Redis)</p><p>考虑如何用python实现：<br>在各台slave上装好scrapy，那么各台机子就变成了一台有抓取能力的slave，在master上装好Redis和rq用作分布式队列。</p><p>chrome浏览器 F12开发者工具</p><p>selenium<br>phantomjs</p><p>PIL<br>opencv<br>pybrain<br>pyspider</p><p>代理IP池</p><p>不要用1个IP狂抓<br>勤换UA<br>爬取间隔自适应</p><p>scrapy/pyspider框架部署</p><ul><li><a href="https://www.zhihu.com/question/20899988" target="_blank" rel="external">https://www.zhihu.com/question/20899988</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;爬虫需要用到的工具&quot;&gt;&lt;a href=&quot;#爬虫需要用到的工具&quot; class=&quot;headerlink&quot; title=&quot;爬虫需要用到的工具&quot;&gt;&lt;/a&gt;爬虫需要用到的工具&lt;/h3&gt;&lt;p&gt;正则表达式&lt;br&gt;XPATH&lt;br&gt;beautifulsoup&lt;br&gt;request
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://arvin-he.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="http://arvin-he.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>linux开机自启</title>
    <link href="http://arvin-he.github.io/2017/08/18/linux-bash1-2017-08-18/"/>
    <id>http://arvin-he.github.io/2017/08/18/linux-bash1-2017-08-18/</id>
    <published>2017-08-18T01:51:19.000Z</published>
    <updated>2017-09-08T03:51:39.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux下终端执行自定义命令启动程序"><a href="#Linux下终端执行自定义命令启动程序" class="headerlink" title="Linux下终端执行自定义命令启动程序"></a>Linux下终端执行自定义命令启动程序</h3><p>在/usr/bin目录下一般会存放一个shell脚本,然后在终端输入该shell脚本的名字,就会在终端执行这个shell脚本.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment"># 搜索进程中touchpanel的进程数目,这里是为了保持脚本执行的单个实例</span></div><div class="line">var=`ps -aux |grep <span class="string">"/usr/bin/touchpanel"</span> |wc -l`</div><div class="line"><span class="comment"># 注意空格不能少</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$var</span> -gt 3 ];<span class="keyword">then</span></div><div class="line">    <span class="built_in">exit</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">cd</span> /opt/touchpanel</div><div class="line"></div><div class="line">sudo python3 main.py <span class="variable">$@</span></div></pre></td></tr></table></figure></p><h3 id="Linux下如何开机自启应用程序"><a href="#Linux下如何开机自启应用程序" class="headerlink" title="Linux下如何开机自启应用程序"></a>Linux下如何开机自启应用程序</h3><p>编写一个*.desktop文件,然后将该文件放在/etc/xdg/autostart下,然后就会开机自动启动应用程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]</div><div class="line">Type=Application</div><div class="line">Icon=</div><div class="line">Name=TouchPanel</div><div class="line">Comment=xxx</div><div class="line">Categories=GNOME;GTK;System;</div><div class="line">Exec=touchpanel</div><div class="line">StartupNotify=<span class="literal">true</span></div><div class="line">Terminal=<span class="literal">false</span></div></pre></td></tr></table></figure></p><h3 id="制作deb安装包"><a href="#制作deb安装包" class="headerlink" title="制作deb安装包"></a>制作deb安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"1. 获取版本号"</span></div><div class="line">version=`awk <span class="string">'NR==2&#123;print $2&#125;'</span> deb/DEBIAN/control`</div><div class="line"><span class="built_in">echo</span> <span class="string">"version = <span class="variable">$&#123;version&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"2. 拷贝资源文件"</span></div><div class="line">mkdir -p deb/opt/pun-admin/res</div><div class="line">mkdir -p deb/usr/bin</div><div class="line">mkdir -p deb/usr/share/applications</div><div class="line">mkdir -p deb/usr/share/pixmaps</div><div class="line">cp res/*.ui deb/opt/pun-admin/res/</div><div class="line">cp res/config.ini deb/opt/pun-admin/res/</div><div class="line">cp res/pun.desktop deb/opt/pun-admin/res/</div><div class="line">cp res/pun-admin.desktop deb/usr/share/applications/</div><div class="line">cp res/*.png deb/usr/share/pixmaps/</div><div class="line">cp res/pun-admin deb/usr/bin/</div><div class="line">cp res/touchpanel.desktop deb/opt/pun-admin/res/</div><div class="line">cp res/touchpanel deb/usr/bin/</div><div class="line"><span class="built_in">echo</span> <span class="string">"3. 拷贝程序"</span></div><div class="line">cp *.py deb/opt/pun-admin/</div><div class="line"><span class="built_in">echo</span> <span class="string">"4. 添加可执行权限"</span></div><div class="line">chmod +x deb/usr/bin/pun-admin</div><div class="line">chmod +x deb/usr/bin/touchpanel</div><div class="line"><span class="built_in">echo</span> <span class="string">"5. dpkg打包"</span></div><div class="line">dpkg-deb --build deb pun-admin-<span class="variable">$&#123;version&#125;</span>.deb</div><div class="line"><span class="built_in">echo</span> <span class="string">"6. 打包结束"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux下终端执行自定义命令启动程序&quot;&gt;&lt;a href=&quot;#Linux下终端执行自定义命令启动程序&quot; class=&quot;headerlink&quot; title=&quot;Linux下终端执行自定义命令启动程序&quot;&gt;&lt;/a&gt;Linux下终端执行自定义命令启动程序&lt;/h3&gt;&lt;p&gt;在/
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://arvin-he.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python的sys.path, PYTHONPATH, os.environ的作用</title>
    <link href="http://arvin-he.github.io/2017/08/13/py-pyhonpath-2017-08-13/"/>
    <id>http://arvin-he.github.io/2017/08/13/py-pyhonpath-2017-08-13/</id>
    <published>2017-08-13T11:06:37.000Z</published>
    <updated>2017-09-08T03:51:39.881Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python搜索模块的路径："><a href="#Python搜索模块的路径：" class="headerlink" title="Python搜索模块的路径："></a>Python搜索模块的路径：</h3><ol><li>程序的主目录</li><li>PTYHONPATH目录（如果已经进行了设置）</li><li>标准连接库目录（一般在/usr/local/lib/python2.X/）</li><li>任何的.pth文件的内容（如果存在的话）.新功能，允许用户把有效果的目录添加到模块搜索路径中去, <code>.pth</code>后缀的文本文件中一行一行的地列出目录。</li></ol><p>这四个组建组合起来就变成了sys.path了</p><h3 id="关于sys-path"><a href="#关于sys-path" class="headerlink" title="关于sys.path"></a>关于sys.path</h3><p>在python 环境下使用sys.path.append(path)添加相关的路径，但在退出python环境后自己添加的路径就会自动消失.<br>如何将路径“永久”添加到sys.path?</p><ol><li>将自己做的py文件放到 site_packages 目录下,但是这样做会导致一个问题，即各类模块都放到此文件夹的话，会导致乱的问题.</li><li>使用pth文件，在 site-packages 文件中创建 .pth文件，将模块的路径写进去，一行一个路径，但存在管理上的问题，而且不能在不同的python版本中共享。</li><li>使用PYTHONPATH环境变量，在这个环境变量中输入相关的路径，不同的路径之间用逗号（英文的！)分开，如果PYTHONPATH 变量还不存在，可以创建它.路径会自动加入到sys.path中，而且可以在不同的python版本中共享，应该是一样较为方便的方法。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">16</span>]: sys.path</div><div class="line">Out[<span class="number">16</span>]:</div><div class="line">[<span class="string">''</span>,</div><div class="line"> <span class="string">'C:\\Program Files\\Python36\\Scripts\\ipython.exe'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\python36.zip'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\DLLs'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages\\win32'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages\\win32\\lib'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages\\Pythonwin'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages\\IPython\\extensions'</span>,</div><div class="line"> <span class="string">'C:\\Users\\Arvin\\.ipython'</span>]</div></pre></td></tr></table></figure><h3 id="关于PYTHONPATH"><a href="#关于PYTHONPATH" class="headerlink" title="关于PYTHONPATH"></a>关于PYTHONPATH</h3><h3 id="关于os-environ"><a href="#关于os-environ" class="headerlink" title="关于os.environ"></a>关于os.environ</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">environ是一个字符串对应环境的映像对象</div><div class="line">os.environ.keys() 主目录下所有的key</div><div class="line">os.environ 显示key+内容</div><div class="line"></div><div class="line"># windows：</div><div class="line">· os.environ[&apos;HOMEPATH&apos;]:当前用户主目录。</div><div class="line">os.environ[&apos;TEMP&apos;]:临时目录路径。</div><div class="line">os.environ[PATHEXT&apos;]:可执行文件。</div><div class="line">os.environ[&apos;SYSTEMROOT&apos;]:系统主目录。</div><div class="line">os.environ[&apos;LOGONSERVER&apos;]:机器名。</div><div class="line">os.environ[&apos;PROMPT&apos;]:设置提示符。</div><div class="line"># linux：</div><div class="line">os.environ[&apos;USER&apos;]:当前使用用户。</div><div class="line">os.environ[&apos;LC_COLLATE&apos;]:路径扩展的结果排序时的字母顺序。</div><div class="line">os.environ[&apos;SHELL&apos;]:使用shell的类型。</div><div class="line">os.environ[&apos;LAN&apos;]:使用的语言。</div><div class="line">os.environ[&apos;SSH_AUTH_SOCK&apos;]:ssh的执行路径。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python搜索模块的路径：&quot;&gt;&lt;a href=&quot;#Python搜索模块的路径：&quot; class=&quot;headerlink&quot; title=&quot;Python搜索模块的路径：&quot;&gt;&lt;/a&gt;Python搜索模块的路径：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;程序的主目录&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://arvin-he.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5加载ui的几种方式</title>
    <link href="http://arvin-he.github.io/2017/08/12/pyqt-loadui-2017-08-12/"/>
    <id>http://arvin-he.github.io/2017/08/12/pyqt-loadui-2017-08-12/</id>
    <published>2017-08-12T02:52:06.000Z</published>
    <updated>2017-09-08T03:51:39.964Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一般界面的创建有两种方式:</p><ol><li>使用纯代码实现</li><li>使用designer来拖拽控件<br>两种方式各有各自的好处,视具体的使用场景来选择.</li></ol><p>使用纯代码实现时一些属性需要在代码中指定, 或者继承某个控件类并定制添加一些属性和功能.这种方式比较灵活.但是控件太多且是不同种类的控件的话就有点繁琐了.</p><p>使用designer的方式是直观,快速,属性可视化,可添加动态属性,这也是使用比较多的方式.在designer中设计好界面后,保存为一个后缀为ui的文件,用文本编辑器打开是一个xml格式的文件,里面指明控件的各个属性.</p><p>下面就讲述在代码中加载ui的几种方式.</p><h3 id="PyQt5中加载ui的方式"><a href="#PyQt5中加载ui的方式" class="headerlink" title="PyQt5中加载ui的方式"></a>PyQt5中加载ui的方式</h3><p>PyQt5中加载ui的方式主要有3种:</p><ol><li>直接加载ui文件</li><li>将ui文件转成py文件加载</li><li>将所有的资源文件(包括ui,图片等)编译成内容是字节的py文件加载</li></ol><h3 id="直接加载ui文件"><a href="#直接加载ui文件" class="headerlink" title="直接加载ui文件"></a>直接加载ui文件</h3><p>使用uic加载ui文件,看下面代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets, uic, QtCore</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDialog</span><span class="params">(QtWidgets.QDialog)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MyDialog, self).__init__()</div><div class="line">        uic.loadUi(os.path.join(os.path.dirname(__file__), <span class="string">"yourDialog.ui"</span>), self)</div><div class="line">        self.initUI()</div></pre></td></tr></table></figure></p><p>ui的控件直接通过<code>self</code>来获取访问,比如<code>self.mylabel.setText(&quot;xxx&quot;)</code>,这是最直接的方式.<br>适用于简单的界面设计.</p><h3 id="将ui文件转成py文件加载"><a href="#将ui文件转成py文件加载" class="headerlink" title="将ui文件转成py文件加载"></a>将ui文件转成py文件加载</h3><p>Qt Designer默认继承的object类，但不提供show()显示方法.<br>如何将ui文件转为py文件?<br>使用pyqt5中自带的工具pyuic5,pyuic5是一个可执行文件,在控制台可作为命令使用,具体使用参考下面的脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"></div><div class="line">inputFile = os.path.abspath(os.path.join(<span class="string">"../res"</span>, <span class="string">"serialCom.ui"</span>))</div><div class="line">print(<span class="string">"input file =&#123;&#125;"</span>.format(inputFile))</div><div class="line">outputFile = os.path.abspath(<span class="string">"../serialCom_ui.py"</span>)</div><div class="line">print(<span class="string">"output file =&#123;&#125;"</span>.format(outputFile))</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="comment"># py3.4.3</span></div><div class="line">    subprocess.call([<span class="string">"pyuic5.bat"</span>, inputFile, <span class="string">"-o"</span>, outputFile])</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="comment"># py3.6</span></div><div class="line">    subprocess.call([<span class="string">"pyuic5"</span>, inputFile, <span class="string">"-o"</span>, outputFile])</div><div class="line">print(<span class="string">"build ui done."</span>)</div></pre></td></tr></table></figure></p><p>根据上面的脚本会根据ui文件生成一个py文件,那么这个py文件有哪些内容呢?<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_serialDlg</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, serialDlg)</span>:</span></div><div class="line">        serialDlg.setObjectName(<span class="string">"serialDlg"</span>)</div><div class="line">        serialDlg.resize(<span class="number">1024</span>, <span class="number">768</span>)</div><div class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)</div><div class="line">        <span class="comment"># 这里省略了ui控件的属性设定</span></div><div class="line">        ...</div><div class="line">        self.retranslateUi(serialDlg)</div><div class="line">        QtCore.QMetaObject.connectSlotsByName(serialDlg)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, serialDlg)</span>:</span></div><div class="line">        _translate = QtCore.QCoreApplication.translate</div><div class="line">        <span class="comment"># 这里略去了各种翻译的内容</span></div><div class="line">        ...</div></pre></td></tr></table></figure></p><p>从这个py看出,这个py文件生成了一个类,里面有2个函数,分别是<code>setupUi</code>和<code>retranslateUi</code>.<br>setupUi中主要是控件的各个属性设置, retranslateUi主要是翻译的内容<br>下面如何在你的代码中加载这个py文件呢?<br>有两种方式<br>第一种: 直接继承这个类, python中支持多继承<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> serialCom_ui <span class="keyword">import</span> Ui_serialDlg <span class="keyword">as</span> serialDlg</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QDialog, serialDlg)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MainWindow, self).__init__()</div><div class="line">        self.setupUi(self)</div></pre></td></tr></table></figure></p><p>第二种: 在你的代码中实例化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> serialCom_ui <span class="keyword">import</span> Ui_serialDlg <span class="keyword">as</span> serialDlg</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QDialog)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MainWindow, self).__init__()</div><div class="line">        self.serial_dlg=serialDlg()  </div><div class="line">        self.serial_dlg.setupUi(self)</div></pre></td></tr></table></figure></p><p>为什么要生成py文件呢?主要是为了实现代码与界面分离。<br>缺点:ui文件有了更改,必须要再次生成对应的py文件,如果你忘记生成了,就会造成ui不同步.<br>优点:不再需要这个ui文件了.这就相当于使用纯代码的实现方式了.但这样的方式显然比纯代码要快,而且能做到<br>逻辑代码和界面代码分离.</p><h3 id="生成qrc文件编译资源文件生成py文件加载"><a href="#生成qrc文件编译资源文件生成py文件加载" class="headerlink" title="生成qrc文件编译资源文件生成py文件加载"></a>生成qrc文件编译资源文件生成py文件加载</h3><p>当有ui文件还有图片等资源文件时,怎么办呢?当图片重命名了怎么办? 当然是利用Qt的资源系统来整合这些资源文件了.<br>Qt 资源系统是一个跨平台的资源机制，用于将程序运行时所需要的资源以二进制的形式存储于可执行文件内部。<br>如果你的程序需要加载特定的资源（图标、文本翻译等），那么，将其放置在资源文件中，就再也不需要担心这些文件的丢失。<br>也就是说，如果你将资源以资源文件形式存储，它是会编译到可执行文件内部。<br>怎么做呢?<br>一般把用到的资源文件放到一个文件夹中,如res/,然后创建一个资源文件*.qrc,该文件生成在res文件夹中<br>qrc文件的内容有,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;RCC&gt;&lt;qresource prefix=&quot;..&quot;&gt;</div><div class="line">  &lt;file mtime=&quot;1502414194.7463503&quot;&gt;favor.ico&lt;/file&gt;</div><div class="line">  &lt;file mtime=&quot;1494807198.7998164&quot;&gt;favor.png&lt;/file&gt;</div><div class="line">  &lt;file mtime=&quot;1502505175.56&quot;&gt;serialCom.ui&lt;/file&gt;</div><div class="line">  &lt;file mtime=&quot;1502414207.032053&quot;&gt;uninst.ico&lt;/file&gt;</div><div class="line">&lt;/qresource&gt;&lt;/RCC&gt;</div></pre></td></tr></table></figure></p><p>python中创建qrc文件,然后通过pyrcc5将资源文件编译到py文件中去<br>这里不仅仅生成qrc文件,还对qrc文件记录了资源文件最后的修改时间,并做了修改时间对比,<br>一旦有ui文件被修改了,就会重新编译生成res_rc.py文件.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自动编译加载资源</span></div><div class="line">_res_path = os.path.abspath(<span class="string">'res'</span>)</div><div class="line">RCC = <span class="string">"""&lt;RCC&gt;&lt;qresource prefix="&#123;&#125;"&gt;\n&#123;&#125;&lt;/qresource&gt;&lt;/RCC&gt;"""</span></div><div class="line">FILE = <span class="string">"""  &lt;file mtime="&#123;&#125;"&gt;&#123;&#125;&lt;/file&gt;\n"""</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_loadRes</span><span class="params">(res, root)</span>:</span></div><div class="line">    <span class="comment"># res文件夹的路径</span></div><div class="line">    package = os.path.dirname(res)</div><div class="line">    <span class="comment"># 生成资源清单数据</span></div><div class="line">    res_files = []</div><div class="line">    <span class="keyword">for</span> a, _, files <span class="keyword">in</span> os.walk(res):</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</div><div class="line">            <span class="keyword">if</span> f == <span class="string">"res.qrc"</span> <span class="keyword">or</span> f.endswith(<span class="string">".ts"</span>):</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            ff = os.path.join(a, f)</div><div class="line">            res_files.append((os.path.getmtime(ff), os.path.relpath(</div><div class="line">                ff, res).replace(os.path.sep, <span class="string">"/"</span>)))</div><div class="line"></div><div class="line">    res_qrc_data = RCC.format(</div><div class="line">        os.path.relpath(package, root).replace(os.path.sep, <span class="string">"/"</span>),</div><div class="line">        <span class="string">""</span>.join([FILE.format(*x) <span class="keyword">for</span> x <span class="keyword">in</span> res_files]))</div><div class="line"></div><div class="line">    <span class="comment"># 更新资源清单</span></div><div class="line">    res_qrc = os.path.join(res, <span class="string">"res.qrc"</span>)</div><div class="line">    res_updated = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="comment"># 检查现有资源清单是否已是最新</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(res_qrc):</div><div class="line">        <span class="keyword">with</span> open(res_qrc, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</div><div class="line">            res_updated = f.read() == res_qrc_data</div><div class="line"></div><div class="line">    <span class="comment"># 更新资源清单</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> res_updated:</div><div class="line">        <span class="keyword">with</span> open(res_qrc, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(res_qrc_data)</div><div class="line"></div><div class="line">    <span class="comment"># 编译资源清单</span></div><div class="line">    res_rc_py = os.path.join(package, <span class="string">"res_rc.py"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(res_rc_py) <span class="keyword">or</span> \</div><div class="line">            os.path.getmtime(res_rc_py) &lt; os.path.getmtime(res_qrc):</div><div class="line">        <span class="comment"># 通过指定 `cwd` 解决 win32 下 pyrcc5 不支持中文路径的问题</span></div><div class="line">        rel_res_rc_py = os.path.relpath(res_rc_py, package)</div><div class="line">        rel_res_qrc = os.path.relpath(res_qrc, package)</div><div class="line"></div><div class="line">        subprocess.check_call(</div><div class="line">            [<span class="string">"pyrcc5"</span>, <span class="string">"-o"</span>, rel_res_rc_py, rel_res_qrc], cwd=package)</div><div class="line"></div><div class="line"><span class="comment"># 加载资源</span></div><div class="line"><span class="keyword">for</span> path, b, c <span class="keyword">in</span> os.walk(_res_path):</div><div class="line">    <span class="keyword">if</span> path.endswith(os.path.sep + <span class="string">"res"</span>):</div><div class="line">        _loadRes(path, _res_path)</div></pre></td></tr></table></figure></p><p>有了<code>res_rc.py</code>文件,然后将<code>res_rc.py</code>文件import进来,然后让问资源文件通过指定路径访问.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</div><div class="line"></div><div class="line"><span class="keyword">import</span> res_rc</div><div class="line"><span class="comment"># :不能少, 路径就是qrc里的prefix+资源文件名</span></div><div class="line">pixmap = QPixamp(<span class="string">":/prefix/download.jpeg"</span>)</div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadUi</span><span class="params">(widget, uiFileName)</span>:</span></div><div class="line">    <span class="string">"""加载 ui. 从 uiFileName 指定的 ui 文件加载."""</span></div><div class="line">    f = QtCore.QFile(uiFileName)</div><div class="line">    f.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text)</div><div class="line">    <span class="keyword">assert</span> f.isOpen()</div><div class="line">    ts = QtCore.QTextStream(f)</div><div class="line">    ts.setCodec(<span class="string">"utf-8"</span>)</div><div class="line">    code_string = io.StringIO()</div><div class="line">    winfo = uic.compiler.UICompiler().compileUi(ts, code_string, <span class="keyword">True</span>, <span class="string">"_rc"</span>)</div><div class="line">    ui_globals = &#123;<span class="string">"__name__"</span>: widget.__module__&#125;</div><div class="line">    exec(code_string.getvalue(), ui_globals)</div><div class="line">    Ui = ui_globals[winfo[<span class="string">"uiclass"</span>]]</div><div class="line">    ui = Ui()</div><div class="line">    ui.setupUi(widget)</div><div class="line">    <span class="keyword">return</span> ui</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QDialog, serialDlg)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MainWindow, self).__init__()</div><div class="line">        self.ui = loadUi(self, <span class="string">":../serialCom.ui"</span>)</div></pre></td></tr></table></figure></p><p>然后所有ui里的控件对象都可以使用self.ui来访问了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;一般界面的创建有两种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用纯代码实现&lt;/li&gt;
&lt;li&gt;使用designer来拖拽控件&lt;br&gt;两种方式各有各
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="PyQt5" scheme="http://arvin-he.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>Python代码结构</title>
    <link href="http://arvin-he.github.io/2017/08/11/py-codestruct-2017-08-11/"/>
    <id>http://arvin-he.github.io/2017/08/11/py-codestruct-2017-08-11/</id>
    <published>2017-08-11T09:00:33.000Z</published>
    <updated>2017-09-08T03:51:39.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="构造项目层次结构文件夹的最佳方式是什么？"><a href="#构造项目层次结构文件夹的最佳方式是什么？" class="headerlink" title="构造项目层次结构文件夹的最佳方式是什么？"></a>构造项目层次结构文件夹的最佳方式是什么？</h3><p>理想的特性是易于维护，IDE-friendliness，源代码管理分支/合并的适用性，以及易于生成的软件包。<br>特别是：</p><ol><li>在哪里放置源代码？</li><li>在哪里放置应用程序启动脚本？</li><li>将IDE项目放在哪里？</li><li>在哪里放置单元/验收测试？</li><li>在哪里放置non-Python数据如配置文件？</li><li>在哪里放置non-Python源(如 C++) 用于 pyd/二进制扩展模块？</li></ol><h3 id="文件系统-python-项目的结构"><a href="#文件系统-python-项目的结构" class="headerlink" title="文件系统 python 项目的结构"></a>文件系统 python 项目的结构</h3><p>执行：</p><ul><li><p>命名与你的项目相关的目录。 例如如果你的项目名为”Twisted”，则为它的源文件命名为<code>top-level</code>目录 Twisted 。 当你发布时，应该包含版本号后缀： <code>Twisted-2.5</code> 。</p></li><li><p>创建一个目录 <code>Twisted/bin</code> 并将你的可执行文件放在那里，如果你有任何不给他们一个 .py 扩展，即使它们是 python 源文件。 不要将任何代码放入其中，除非导入和调用在你的项目中定义的主函数。 ( 轻微皱纹：在 Windows 上，解释器是由文件扩展名选择的，你的Windows 用户实际上想要<code>. py</code>扩展。 因此，当你为 Windows 打包时，你可能想要添加它。 不幸的是，我不知道如何让这个过程自动化。 考虑到在POSIX上，<code>. py</code> 扩展是一个惟一的缺点，而在 Windows 上，缺少的是一个实际的Bug，如果你的userbase包含 Windows 用户，那么你可能想要选择<code>. py</code> 扩展。)</p></li><li><p>如果你的项目是作为单个 python expressable源文件,然后把它放到目录和名称与你的项目相关的东西。 例如 Twisted/twisted.py 。如果你需要多个源文件，请创建一个软件包，并将源文件放入其中。 例如 Twisted/twisted/internet.py 。</p></li><li><p>把你的单元测试的sub-package ( 注意:这意味着单一 python 源文件选项上面是一个技巧——你总是需要至少一个其他文件为你的单元测试) 你的包。 例如 Twisted/twisted/test/ 。当然，让它成为一个带有 <code>Twisted/twisted/test/__init__.p</code>y的包。 将测试放在文件中 <code>Twisted/twisted/test/test_internet.py</code></p></li><li>添加 Twisted/README 和 Twisted/setup.py 来解释并安装你的软件，如果你觉得不错的话。</li></ul><p>不要：</p><ul><li>将你的源放在一个名为 src 或者 lib的目录中。 这使得没有安装就很难运行。</li><li>将测试放在 python 软件包之外。 这使得对已经安装版本运行测试变得困难。</li><li>创建一个包,只有 <code>__init__.py</code> 然后把所有代码放进 <code>__init__.py</code> 。 只是做一个模块而不是一个包，它更简单。</li><li>试图让 python 能够导入你的模块或者包，而不让用户将包含它的目录添加到导入路径( 或者通过PYTHONPATH或者其他的机制) 。 你不将正确处理所有情况下,用户会生气你当你的软件并不在他们的环境中工作。</li></ul><h3 id="一个项目目录组织方式"><a href="#一个项目目录组织方式" class="headerlink" title="一个项目目录组织方式"></a>一个项目目录组织方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Project/</div><div class="line">|-- bin/</div><div class="line">|   |-- project</div><div class="line">|</div><div class="line">|-- project/</div><div class="line">|   |-- test/</div><div class="line">|   |   |-- __init__.py</div><div class="line">|   |   |-- test_main.py</div><div class="line">|   |   </div><div class="line">|   |-- __init__.py</div><div class="line">|   |-- main.py</div><div class="line">|</div><div class="line">|-- setup.py</div><div class="line">|-- README</div></pre></td></tr></table></figure><h3 id="另一个项目目录组织方式"><a href="#另一个项目目录组织方式" class="headerlink" title="另一个项目目录组织方式"></a>另一个项目目录组织方式</h3><p>当设置一个项目时，( 或者目录结构)的布局是很重要的。 合理的布局意味着潜在的贡献者不必花费大量的时间去寻找一段代码；文件位置是直观的。 因为我们正在处理一个现有项目，这意味着你可能需要移动一些东西。<br>让我们从头开始。 大多数项目有许多top-level文件( 像 setup.py, README.md，requirements.txt, 等) 。 然后，每个项目都应该有三个目录：<br>包含项目文档的文档目录<br>名为项目名称的目录，它存储实际的python 包<br>在两个位置中的一个测试目录<br>在包含测试代码和资源的软件包目录下<br>作为一个独立的顶级目录，可以更好地了解你的文件如何组织，下面是一个对我的项目的布局的简化快照，sandman:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ pwd</div><div class="line">~/code/sandman</div><div class="line">$ tree</div><div class="line">.</div><div class="line">|- LICENSE</div><div class="line">|- README.md</div><div class="line">|- TODO.md</div><div class="line">|- docs</div><div class="line">| |-- conf.py</div><div class="line">| |-- generated</div><div class="line">| |-- index.rst</div><div class="line">| |-- installation.rst</div><div class="line">| |-- modules.rst</div><div class="line">| |-- quickstart.rst</div><div class="line">| |-- sandman.rst</div><div class="line">|- requirements.txt</div><div class="line">|- sandman</div><div class="line">| |-- __init__.py</div><div class="line">| |-- exception.py</div><div class="line">| |-- model.py</div><div class="line">| |-- sandman.py</div><div class="line">| |-- test</div><div class="line">| |-- models.py</div><div class="line">| |-- test_sandman.py</div><div class="line">|- setup.py</div></pre></td></tr></table></figure></p><p>你可以看到，有一些顶级文件，一个文档目录( 生成的是一个空目录，sphinx将在其中放置生成的文档)，一个sandman目录和一个在sandman下的测试目录。</p><h3 id="再一个项目目录组织方式"><a href="#再一个项目目录组织方式" class="headerlink" title="再一个项目目录组织方式"></a>再一个项目目录组织方式</h3><p>假设你的项目名为foo, 我比较建议的最方便快捷目录结构这样就足够了:</p><pre><code>Foo/|-- bin/|   |-- foo||-- foo/|   |-- tests/|   |   |-- __init__.py|   |   |-- test_main.py|   ||   |-- __init__.py|   |-- main.py||-- docs/|   |-- conf.py|   |-- abc.rst||-- setup.py|-- requirements.txt|-- README</code></pre><p>简要解释一下:</p><p>bin/: 存放项目的一些可执行文件，当然你可以起名script/之类的也行。<br>foo/: 存放项目的所有源代码。(1) 源代码中的所有模块、包都应该放在此目录。不要置于顶层目录。(2) 其子目录tests/存放单元测试代码； (3) 程序的入口最好命名为main.py。<br>docs/: 存放一些文档。<br>setup.py: 安装、部署、打包的脚本。<br>requirements.txt: 存放软件依赖的外部Python包列表。<br>README: 项目说明文件。<br>除此之外，有一些方案给出了更加多的内容。比如LICENSE.txt,ChangeLog.txt文件等，我没有列在这里，因为这些东西主要是项目开源的时候需要用到。如果你想写一个开源软件，目录该如何组织，可以参考<a href="https://jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/" target="_blank" rel="external">这篇文章</a>。</p><p>下面，再简单讲一下我对这些目录的理解和个人要求吧。</p><h3 id="关于README的内容"><a href="#关于README的内容" class="headerlink" title="关于README的内容"></a>关于README的内容</h3><p>这个我觉得是每个项目都应该有的一个文件，目的是能简要描述该项目的信息，让读者快速了解这个项目。<br>它需要说明以下几个事项:</p><ul><li>软件定位，软件的基本功能。</li><li>运行代码的方法: 安装环境、启动命令等。</li><li>简要的使用说明。</li><li>代码目录结构说明，更详细点可以说明软件的基本原理。</li><li>常见问题说明。</li></ul><p>我觉得有以上几点是比较好的一个README。在软件开发初期，由于开发过程中以上内容可能不明确或者发生变化，并不是一定要在一开始就将所有信息都补全。但是在项目完结的时候，是需要撰写这样的一个文档的。<br>可以参考Redis源码中<a href="https://github.com/antirez/redis#what-is-redis" target="_blank" rel="external">Readme</a>的写法，这里面简洁但是清晰的描述了Redis功能和源码结构。</p><h3 id="关于requirements-txt和setup-py"><a href="#关于requirements-txt和setup-py" class="headerlink" title="关于requirements.txt和setup.py"></a>关于requirements.txt和setup.py</h3><h4 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h4><p>一般来说，用setup.py来管理代码的打包、安装、部署问题。业界标准的写法是用Python流行的打包工具setuptools来管理这些事情。这种方式普遍应用于开源项目中。不过这里的核心思想不是用标准化的工具来解决这些问题，而是说，<strong>一个项目一定要有一个安装部署工具</strong>，能快速便捷的在一台新机器上将环境装好、代码部署好和将程序运行起来。</p><p>这个我是踩过坑的。</p><p>我刚开始接触Python写项目的时候，安装环境、部署代码、运行程序这个过程全是手动完成，遇到过以下问题:</p><ol><li>安装环境时经常忘了最近又添加了一个新的Python包，结果一到线上运行，程序就出错了。</li><li>Python包的版本依赖问题，有时候我们程序中使用的是一个版本的Python包，但是官方的已经是最新的包了，通过手动安装就可能装错了。</li><li>如果依赖的包很多的话，一个一个安装这些依赖是很费时的事情。</li><li>新同学开始写项目的时候，将程序跑起来非常麻烦，因为可能经常忘了要怎么安装各种依赖。</li></ol><p>setup.py可以将这些事情自动化起来，提高效率、减少出错的概率。”复杂的东西自动化，能自动化的东西一定要自动化。”是一个非常好的习惯。</p><p>setuptools的文档比较庞大，刚接触的话，可能不太好找到切入点。学习技术的方式就是看他人是怎么用的，可以参考一下Python的一个Web框架，flask是如何写的: <a href="https://github.com/pallets/flask/blob/master/setup.py" target="_blank" rel="external">setup.py</a></p><p>当然，简单点自己写个安装脚本（deploy.sh）替代setup.py也未尝不可。</p><h4 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h4><p>这个文件存在的目的是:</p><ol><li>方便开发者维护软件的包依赖。将开发过程中新增的包添加进这个列表中，避免在setup.py安装依赖时漏掉软件包。</li><li>方便读者明确项目使用了哪些Python包。<br>这个文件的格式是每一行包含一个包依赖的说明，通常是flask&gt;=0.10这种格式，要求是这个格式能被pip识别，这样就可以简单的通过 <code>pip install -r requirements.txt</code>来把所有Python包依赖都装好了。具体格式说明： <a href="https://pip.readthedocs.io/en/1.1/requirements.html" target="_blank" rel="external">点这里</a>。</li></ol><h3 id="关于配置文件的使用方法"><a href="#关于配置文件的使用方法" class="headerlink" title="关于配置文件的使用方法"></a>关于配置文件的使用方法</h3><p>注意，在上面的目录结构中，没有将conf.py放在源码目录下，而是放在docs/目录下。</p><p>很多项目对配置文件的使用做法是:</p><ol><li>配置文件写在一个或多个python文件中，比如此处的conf.py。</li><li>项目中哪个模块用到这个配置文件就直接通过import conf这种形式来在代码中使用配置。</li></ol><p>这种做法我不太赞同:</p><ol><li>这让单元测试变得困难（因为模块内部依赖了外部配置）</li><li>另一方面配置文件作为用户控制程序的接口，应当可以由用户自由指定该文件的路径。</li><li>程序组件可复用性太差，因为这种贯穿所有模块的代码硬编码方式，使得大部分模块都依赖conf.py这个文件。</li></ol><p>所以，我认为配置的使用，更好的方式是，<br>模块的配置都是可以灵活配置的，不受外部配置文件的影响。<br>程序的配置也是可以灵活控制的。<br>能够佐证这个思想的是，用过nginx和mysql的同学都知道，nginx、mysql这些程序都可以自由的指定用户配置。</p><p>所以，不应当在代码中直接import conf来使用配置文件。上面目录结构中的conf.py，是给出的一个配置样例，不是在写死在程序中直接引用的配置文件。可以通过给main.py启动参数指定配置路径的方式来让程序读取配置内容。当然，这里的conf.py你可以换个类似的名字，比如settings.py。或者你也可以使用其他格式的内容来编写配置文件，比如settings.yaml之类的。</p><p>对于文档的态度<br>目录结构中有设docs/这个目录，用于存放代码文档。实际过程中，据我观察，80%以上的程序员都没有单独写文档的习惯。一般文档写得比较好的，都是一些开源项目。</p><p>在普通的项目中，确实没必要写非常详细的文档，我更赞同的是现在的一种流行的风格: “在代码中写文档”。即在写代码的时候，在代码文件里把软件/模块的简要用法写明。简单有用。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://monklof.com/post/19/" target="_blank" rel="external">如何设计结构清晰的目录结构</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;构造项目层次结构文件夹的最佳方式是什么？&quot;&gt;&lt;a href=&quot;#构造项目层次结构文件夹的最佳方式是什么？&quot; class=&quot;headerlink&quot; title=&quot;构造项目层次结构文件夹的最佳方式是什么？&quot;&gt;&lt;/a&gt;构造项目层次结构文件夹的最佳方式是什么？&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://arvin-he.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python模块和包导入机制</title>
    <link href="http://arvin-he.github.io/2017/08/11/py-relativeimport-2017-08-11/"/>
    <id>http://arvin-he.github.io/2017/08/11/py-relativeimport-2017-08-11/</id>
    <published>2017-08-11T07:53:58.000Z</published>
    <updated>2017-09-08T03:51:39.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将代码封装成包"><a href="#将代码封装成包" class="headerlink" title="将代码封装成包"></a>将代码封装成包</h3><p>在文件系统上组织你的代码，并确保每个目录都定义了一个<code>__init__.py</code>文件,</p><h3 id="关于相对导入"><a href="#关于相对导入" class="headerlink" title="关于相对导入"></a>关于相对导入</h3><p>当导入模块时,报错:python systemerror parent module ‘’ not loaded cannot perform relative import,这就是相对导入的问题了.</p><p>涉及到相对导入时，package所对应的文件夹必须正确的被python解释器视作package，而不是普通文件夹。<br>否则由于不被视作package，无法利用package之间的嵌套关系实现python中包的相对导入。</p><p>文件夹被python解释器视作package需要满足两个条件：</p><ol><li>文件夹中必须有<code>__init__.py</code>文件，该文件可以为空，但必须存在该文件。</li><li>不能作为顶层模块来执行该文件夹中的py文件（即不能作为主函数的入口）。</li></ol><p>补充：在”from YY import XX”这样的代码中，无论是XX还是YY，只要被python解释器视作package，就会首先调用该package的<code>__init__.py</code>文件。<br>如果都是package，则调用顺序是YY，XX。</p><h3 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">test</div><div class="line">|-- a.py</div><div class="line">|-- b.py</div><div class="line">`-- __init__.py</div><div class="line"></div><div class="line"><span class="comment"># a.py</span></div><div class="line"><span class="keyword">from</span> test.b <span class="keyword">import</span> c</div><div class="line">print(c)</div><div class="line"><span class="comment"># b.py</span></div><div class="line">c = <span class="string">"test"</span></div><div class="line"></div><div class="line"><span class="comment">#运行 a.py</span></div><div class="line">python3 a.py</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"a.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> <span class="keyword">from</span> test.b <span class="keyword">import</span> c</div><div class="line">ImportError: No module named <span class="string">'test.b'</span></div></pre></td></tr></table></figure><p>test 的上级目录不在 sys.path 中。<br>还有，不要直接执行一个包里边的文件。如果真需要执行一个包里的模块（而又不使用 distribute 提供的 entry point 安装配置），<br>请使用 <code>python3 -m test.a</code> 这样子。</p><h3 id="将文件夹加入到-sys-path"><a href="#将文件夹加入到-sys-path" class="headerlink" title="将文件夹加入到 sys.path"></a>将文件夹加入到 sys.path</h3><p>你无法导入你的 Python 代码因为它所在的目录不在 sys.path 里。你想将添加新目录到 Python 路径，但是不想硬链接到你的代码。<br>有两种常用的方式将新目录添加到 sys.path:</p><ol><li>使用 PYTHONPATH环境变量来添加</li><li>第二种方法是创建一个.pth 文件，将目录列举出来<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># myapplication.pth</div><div class="line">/some/dir</div><div class="line">/other/dir</div></pre></td></tr></table></figure></li></ol><p>这个<code>.pth</code> 文件需要放在某个 Python 的 <code>site-packages</code> 目录，通常位于<code>/usr/local/lib/python3.3/site-packages</code> 或者 <code>˜/.local/lib/python3.3/sitepackages</code>。当解释器启动<br>时，<code>.pth</code> 文件里列举出来的存在于文件系统的目录将被添加到 <code>sys.path</code>。安装一个<code>.pth</code>文件可能需要管理员权限，如果它被添加到系统级的 Python 解释器。</p><h3 id="import的几种方式"><a href="#import的几种方式" class="headerlink" title="import的几种方式"></a>import的几种方式</h3><ol><li><p>常规导入和重命名导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys <span class="keyword">as</span> system</div></pre></td></tr></table></figure></li><li><p>使用from语句导入<br>只想要导入一个模块或库中的某个部分:<br><code>from functools import lru_cache</code><br>从一个包中导入多个项：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path, walk, unlink</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> uname, remove</div></pre></td></tr></table></figure></li></ol><p>上面是通过多次从同一个模块中导入实现的。当然，你也可以使用圆括号一次性导入多个项<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> (path, walk, unlink, uname, </div><div class="line">                remove, rename)</div><div class="line">```                </div><div class="line"></div><div class="line">也可以这样</div><div class="line">```python</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path, walk, unlink, uname, \</div><div class="line">                remove, rename</div></pre></td></tr></table></figure></p><ol><li>相对导入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">my_package/</div><div class="line">    __init__.py</div><div class="line">    subpackage1/</div><div class="line">        __init__.py</div><div class="line">        module_x.py</div><div class="line">        module_y.py</div><div class="line">    subpackage2/</div><div class="line">        __init__.py</div><div class="line">        module_z.py</div><div class="line">    module_a.py</div></pre></td></tr></table></figure></li></ol><p>在顶层的<code>__init__.py</code>文件中，输入以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> subpackage1</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> subpackage2</div></pre></td></tr></table></figure></p><p>然后进入subpackage1文件夹，编辑其中的<code>__init__.py</code>文件，输入以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> module_x</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> module_y</div></pre></td></tr></table></figure></p><p>编辑<code>module_x.py</code>文件，输入以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .module_y <span class="keyword">import</span> spam <span class="keyword">as</span> ham</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ham()</div></pre></td></tr></table></figure></p><p>编辑module_y.py文件，输入以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'spam '</span> * <span class="number">3</span>)</div></pre></td></tr></table></figure></p><p>打开终端，cd至<code>my_package</code>包所在的文件夹，但<strong>不要进入</strong>my_package。在这个文件夹下运行Python解释器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> my_package</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: my_package.subpackage1.module_x</div><div class="line">Out[<span class="number">2</span>]: </div><div class="line"></div><div class="line">In [<span class="number">3</span>]: my_package.subpackage1.module_x.main()</div><div class="line">spam spam spam</div></pre></td></tr></table></figure></p><p><strong>注意:</strong> 如果你想要跨越多个文件层级进行导入，只需要使用多个句点即可。不过，PEP 328建议<strong>相对导入的层级不要超过两层</strong>。<br>还要注意一点，如果你往module_x.py文件中添加了<code>if __name__ == &#39;__main__&#39;:</code>，然后试图运行这个文件，<br>你会碰到一个很难理解的错误。编辑一下文件，试试看吧！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> . module_y <span class="keyword">import</span> spam <span class="keyword">as</span> ham</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ham()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># This won't work!</span></div><div class="line">    main()</div></pre></td></tr></table></figure></p><p>从终端进入subpackage1文件夹，执行以下命令：<br>使用的是Python 2，你应该会看到下面的错误信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;module_x.py&quot;, line 1, in </div><div class="line">    from . module_y import spam as ham</div><div class="line">ValueError: Attempted relative import in non-package</div></pre></td></tr></table></figure></p><p>使用的是Python 3，错误信息是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;module_x.py&quot;, line 1, in </div><div class="line">    from . module_y import spam as ham</div><div class="line">SystemError: Parent module &apos;&apos; not loaded, cannot perform relative import</div></pre></td></tr></table></figure></p><p>这指的是，module_x.py是某个包中的一个模块，而你试图以脚本模式执行，但是这种模式不支持相对导入。<br>如果你想在自己的代码中使用这个模块，那么你必须将其添加至Python的导入检索路径（import search path）。最简单的做法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.path.append(<span class="string">'/path/to/folder/containing/my_package'</span>)</div><div class="line"><span class="keyword">import</span> my_package</div></pre></td></tr></table></figure></p><p>注意，你需要添加的是<code>my_package</code>的上一层文件夹路径，而不是<code>my_package</code>本身。原因是<code>my_package</code>就是我们想要使用的包，<br>所以如果你添加它的路径，那么将无法使用这个包。</p><ol><li>可选导入（Optional imports）<br>希望优先使用某个模块或包，但是同时也想在没有这个模块或包的情况下有备选，你就可以使用可选导入这种方式。<br>正如下面示例所示，可选导入的使用很常见，是一个值得掌握的技巧。这样做可以导入支持某个软件的多种版本或者实现性能提升。以github2包中的代码为例：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="comment"># For Python 3</span></div><div class="line">    <span class="keyword">from</span> http.client <span class="keyword">import</span> responses</div><div class="line"><span class="keyword">except</span> ImportError:  <span class="comment"># For Python 2.5-2.7</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">from</span> httplib <span class="keyword">import</span> responses  <span class="comment"># NOQA</span></div><div class="line">    <span class="keyword">except</span> ImportError:  <span class="comment"># For Python 2.4</span></div><div class="line">        <span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> BaseHTTPRequestHandler <span class="keyword">as</span> _BHRH</div><div class="line">        responses = dict([(k, v[<span class="number">0</span>]) <span class="keyword">for</span> k, v <span class="keyword">in</span> _BHRH.responses.items()])</div></pre></td></tr></table></figure></li></ol><p>lxml包也有使用可选导入方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> urlparse <span class="keyword">import</span> urljoin</div><div class="line">    <span class="keyword">from</span> urllib2 <span class="keyword">import</span> urlopen</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="comment"># Python 3</span></div><div class="line">    <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</div><div class="line">    <span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</div></pre></td></tr></table></figure></p><ol><li>局部导入<br>当你在局部作用域中导入模块时，你执行的就是局部导入。如果你在Python脚本文件的顶部导入一个模块，那么你就是在将该模块导入至全局作用域，这意味着之后的任何函数或方法都可能访问该模块。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys  <span class="comment"># global scope</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_root</span><span class="params">(a)</span>:</span></div><div class="line">    <span class="comment"># This import is into the square_root functions local scope</span></div><div class="line">    <span class="keyword">import</span> math</div><div class="line">    <span class="keyword">return</span> math.sqrt(a)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_pow</span><span class="params">(base_num, power)</span>:</span></div><div class="line">    <span class="keyword">return</span> math.pow(base_num, power)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(square_root(<span class="number">49</span>))</div><div class="line">    print(my_pow(<span class="number">2</span>, <span class="number">3</span>))</div></pre></td></tr></table></figure></li></ol><p>我们将sys模块导入至全局作用域，但我们并没有使用这个模块。<br>然后，在<code>square_root</code>函数中，我们将math模块导入至该函数的局部作用域，这意味着math模块只能在<code>square_root</code>函数内部使用。<br>如果我们试图在<code>my_pow</code>函数中使用math，会引发NameError.</p><p>使用局部作用域的好处之一，是你使用的模块可能需要很长时间才能导入，如果是这样的话，将其放在某个不经常调用的函数中或许更加合理，而不是直接在全局作用域中导入。老实说，我几乎从没有使用过局部导入，主要是因为如果模块内部到处都有导入语句，会很难分辨出这样做的原因和用途。<strong>根据约定，所有的导入语句都应该位于模块的顶部</strong>。<br>或者有的函数你只需使用一次可以选择局部导入.</p><h3 id="导入注意事项"><a href="#导入注意事项" class="headerlink" title="导入注意事项"></a>导入注意事项</h3><p>在导入模块方面，有几个程序员常犯的错误。这里介绍两个:</p><ul><li>循环导入（circular imports）</li><li>覆盖导入（Shadowed imports，暂时翻译为覆盖导入）</li></ul><h4 id="循环导入"><a href="#循环导入" class="headerlink" title="循环导入"></a>循环导入</h4><p>如果你创建两个模块，二者相互导入对方，那么就会出现循环导入。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># a.py</span></div><div class="line"><span class="keyword">import</span> b</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_test</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"in a_test"</span>)</div><div class="line">    b.b_test()</div><div class="line"></div><div class="line">a_test()</div></pre></td></tr></table></figure></p><p>然后在同个文件夹中创建另一个模块，将其命名为b.py。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> a</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">b_test</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'In test_b"'</span>)</div><div class="line">    a.a_test()</div><div class="line"></div><div class="line">b_test()</div></pre></td></tr></table></figure></p><p>如果你运行任意一个模块，都会引发AttributeError。这是因为这两个模块都在试图导入对方。简单来说，模块a想要导入模块b，但是因为模块b也在试图导入模块a（这时正在执行），模块a将无法完成模块b的导入。一般来说，<strong>你应该做的是重构代码，避免发生这种情况</strong>。</p><h4 id="覆盖导入"><a href="#覆盖导入" class="headerlink" title="覆盖导入"></a>覆盖导入</h4><p>当你创建的模块与标准库中的模块同名时，如果你导入这个模块，就会出现覆盖导入。举个例子，创建一个名叫math.py的文件，在其中写入如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_root</span><span class="params">(number)</span>:</span></div><div class="line">    <span class="keyword">return</span> math.sqrt(number)</div><div class="line"></div><div class="line">square_root(<span class="number">72</span>)</div></pre></td></tr></table></figure></p><p>现在打开终端，试着运行这个文件，你会得到以下回溯信息（traceback）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"math.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> </div><div class="line">    <span class="keyword">import</span> math</div><div class="line">  File <span class="string">"/Users/michael/Desktop/math.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> </div><div class="line">    square_root(<span class="number">72</span>)</div><div class="line">  File <span class="string">"/Users/michael/Desktop/math.py"</span>, line <span class="number">4</span>, <span class="keyword">in</span> square_root</div><div class="line">    <span class="keyword">return</span> math.sqrt(number)</div><div class="line">AttributeError: module <span class="string">'math'</span> has no attribute <span class="string">'sqrt'</span></div></pre></td></tr></table></figure></p><p>这到底是怎么回事？其实，你运行这个文件的时候，Python解释器首先在当前运行脚本所处的的文件夹中查找名叫math的模块。在这个例子中，解释器找到了我们正在执行的模块，试图导入它。但是我们的模块中并没有叫sqrt的函数或属性，所以就抛出了AttributeError。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://juejin.im/entry/570c6b6771cfe40067310370" target="_blank" rel="external">https://juejin.im/entry/570c6b6771cfe40067310370</a></li><li>[cookbook]</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;将代码封装成包&quot;&gt;&lt;a href=&quot;#将代码封装成包&quot; class=&quot;headerlink&quot; title=&quot;将代码封装成包&quot;&gt;&lt;/a&gt;将代码封装成包&lt;/h3&gt;&lt;p&gt;在文件系统上组织你的代码，并确保每个目录都定义了一个&lt;code&gt;__init__.py&lt;/code&gt;
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://arvin-he.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5遇到的一些问题</title>
    <link href="http://arvin-he.github.io/2017/08/10/pyqt-somequestions-2017-08-10/"/>
    <id>http://arvin-he.github.io/2017/08/10/pyqt-somequestions-2017-08-10/</id>
    <published>2017-08-10T05:09:10.000Z</published>
    <updated>2017-09-08T03:51:39.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于QButtonGroup的问题"><a href="#关于QButtonGroup的问题" class="headerlink" title="关于QButtonGroup的问题"></a>关于QButtonGroup的问题</h3><p>在循环中对按钮做属性修改,比如setchecked属性.<br>之前将所有的button对象放到QButtonGroup中,然后在循环中设置属性,代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> btn <span class="keyword">in</span> self.buttonGroup.buttons():</div><div class="line">    btn.setCheckable(<span class="keyword">True</span>)</div><div class="line">    btn.setChecked(<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p><p>最后结果是在groupbutton中的最后一个button会被设置为checked状态,其他的按钮都没有被设置为checked状态.</p><p>解决办法:将按钮对象放在一个list里,然后遍历list里的按钮对象就行了.后来查了文档,放在QButtonGroup中的按钮对象,在放入QButtonGroup之前必须具有SetCheckabled为true这个属性.否则无法设置setchecked这个属性.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于QButtonGroup的问题&quot;&gt;&lt;a href=&quot;#关于QButtonGroup的问题&quot; class=&quot;headerlink&quot; title=&quot;关于QButtonGroup的问题&quot;&gt;&lt;/a&gt;关于QButtonGroup的问题&lt;/h3&gt;&lt;p&gt;在循环中对按钮做属性
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="PyQt5" scheme="http://arvin-he.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5使用QStackedwidget</title>
    <link href="http://arvin-he.github.io/2017/08/08/pyqt-stackedwidget-2017-08-08/"/>
    <id>http://arvin-he.github.io/2017/08/08/pyqt-stackedwidget-2017-08-08/</id>
    <published>2017-08-08T09:14:14.000Z</published>
    <updated>2017-09-08T03:51:39.985Z</updated>
    
    <content type="html"><![CDATA[<p>QListWidget和QStackedWidget在ui文件中.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> uic</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</div><div class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> loadJson</div><div class="line"><span class="keyword">from</span> page1 <span class="keyword">import</span> ControlPanel</div><div class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> loadJson</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlPanel2</span><span class="params">(QtWidgets.QWidget)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></div><div class="line">        super(ControlPanel2, self).__init__(parent)</div><div class="line">        self._config = loadJson()</div><div class="line">        self.ctrlpanelWidth = self._config[<span class="string">'controlpanel'</span>][<span class="string">'width'</span>]</div><div class="line">        self.ctrlpanelHeight = self._config[<span class="string">'controlpanel'</span>][<span class="string">'height'</span>]</div><div class="line">        self.ctrl_panel = ControlPanel()</div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.ui = uic.loadUi(os.path.join(</div><div class="line">            os.path.dirname(__file__), <span class="string">"res/ctrlpanel.ui"</span>), self)</div><div class="line">        self.setFixedSize(self.ctrlpanelWidth, self.ctrlpanelHeight)</div><div class="line">        <span class="keyword">for</span> i, key <span class="keyword">in</span> enumerate(sorted(self._config[<span class="string">"panels"</span>].keys())):</div><div class="line">            item = QtWidgets.QListWidgetItem(self.ui.panellist)</div><div class="line">            item.setText(key)</div><div class="line">            self.ui.panellist.insertItem(i, item)</div><div class="line">            self.ui.stackedWidget.insertWidget(i, QtWidgets.QLabel(<span class="string">"&#123;&#125;"</span>.format(key)))  </div><div class="line">        <span class="comment"># 设置qss</span></div><div class="line">        self.setStyleSheet(</div><div class="line">            <span class="string">"QListWidget::item&#123;width: 65px; height: 35px; text-align: center;&#125;"</span>)</div><div class="line">        self.ui.panellist.setCurrentRow(<span class="number">0</span>)</div><div class="line">        self.ui.stackedWidget.setCurrentIndex(<span class="number">0</span>)</div><div class="line">        self.ui.panellist.currentRowChanged.connect(self.on_showPage)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_showPage</span><span class="params">(self, index)</span>:</span></div><div class="line">        <span class="comment"># index = self.ui.panellist.currentIndex()</span></div><div class="line">        print(<span class="string">"current index ="</span>, index)</div><div class="line">        self.ui.stackedWidget.setCurrentIndex(index)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;QListWidget和QStackedWidget在ui文件中.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div c
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="PyQt5" scheme="http://arvin-he.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5长按按钮循环执行命令</title>
    <link href="http://arvin-he.github.io/2017/08/07/pyqt-longpressbtn-2017-08-07/"/>
    <id>http://arvin-he.github.io/2017/08/07/pyqt-longpressbtn-2017-08-07/</id>
    <published>2017-08-07T09:39:12.000Z</published>
    <updated>2017-09-08T03:51:39.968Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> uic</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</div><div class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> loadJson</div><div class="line"><span class="keyword">from</span> punggol_rpc <span class="keyword">import</span> punggol_exec</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlPanel</span><span class="params">(QtWidgets.QWidget)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></div><div class="line">        super(ControlPanel, self).__init__(parent)</div><div class="line">        self._config = loadJson()</div><div class="line">        self.ctrlpanelWidth = self._config[<span class="string">'controlpanel'</span>][<span class="string">'width'</span>]</div><div class="line">        self.ctrlpanelHeight = self._config[<span class="string">'controlpanel'</span>][<span class="string">'height'</span>]</div><div class="line">        self.initUI()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.ui = uic.loadUi(os.path.join(</div><div class="line">            os.path.dirname(__file__), <span class="string">"res/ctrlpanel.ui"</span>), self)</div><div class="line">        self.setFixedSize(self.ctrlpanelWidth, self.ctrlpanelHeight)</div><div class="line">        <span class="keyword">for</span> attr <span class="keyword">in</span> dir(self.ui):</div><div class="line">            obj = getattr(self.ui, attr)</div><div class="line">            <span class="keyword">if</span> isinstance(obj, QtWidgets.QPushButton) <span class="keyword">or</span> \</div><div class="line">               isinstance(obj, QtWidgets.QToolButton):</div><div class="line">                obj.setAutoRepeat(<span class="keyword">True</span>)</div><div class="line">                obj._repeate = <span class="keyword">False</span></div><div class="line">                obj.clicked.connect(</div><div class="line">                    functools.partial(self.on_handleClicked, obj))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_handleClicked</span><span class="params">(self, btn)</span>:</span></div><div class="line">        <span class="keyword">if</span> btn.isDown():</div><div class="line">            <span class="keyword">if</span> btn._repeate <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">                btn._repeate = <span class="keyword">True</span></div><div class="line">                btn.setAutoRepeatInterval(<span class="number">50</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.on_pressed(btn)</div><div class="line">        <span class="keyword">elif</span> btn._repeate <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">            btn._repeate = <span class="keyword">False</span></div><div class="line">            self.on_released(btn)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.on_clicked(btn)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_clicked</span><span class="params">(self, btn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> btn.property(<span class="string">"clicked_cmd"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                punggol_exec(btn.property(<span class="string">"clicked_cmd"</span>))</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(e)</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_pressed</span><span class="params">(self, btn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> btn.property(<span class="string">"pressed_cmd"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                punggol_exec(btn.property(<span class="string">"pressed_cmd"</span>))</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(e)</div><div class="line">            <span class="keyword">return</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_released</span><span class="params">(self, btn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> btn.property(<span class="string">"released_cmd"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                punggol_exec(btn.property(<span class="string">"released_cmd"</span>))</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(e)</div><div class="line">            <span class="keyword">return</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="PyQt5" scheme="http://arvin-he.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>Python删除windows下的目录</title>
    <link href="http://arvin-he.github.io/2017/08/07/py-deteledironwindows-2017-08-07/"/>
    <id>http://arvin-he.github.io/2017/08/07/py-deteledironwindows-2017-08-07/</id>
    <published>2017-08-07T01:40:36.000Z</published>
    <updated>2017-09-08T03:51:39.868Z</updated>
    
    <content type="html"><![CDATA[<p>windows启动目录:<code>C:\Users\aron\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code><br>在windows下启动目录下添加一个<code>killkingsoft.py</code>脚本,然后每次开机自动执行该脚本.<br>注意:在windows下启动目录下的脚本或者bat文件都会在开机时自动执行.</p><p>之前使用<code>shutil.rmtree  os.remove  os.rmdir</code>都没有成功,都报出如下错误:<br><code>PermissionError: [WinError 5] 拒绝访问。: &#39;c:\\ProgramData\\kingsoft&#39;</code><br>后来找到解决办法,如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line">   </div><div class="line"><span class="keyword">import</span> errno, os, stat, shutil</div><div class="line"></div><div class="line"></div><div class="line">kingSoft = os.path.join(<span class="string">"c:\\"</span>, <span class="string">"ProgramData"</span>, <span class="string">"kingsoft"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleRemoveReadonly</span><span class="params">(func, path, exc)</span>:</span></div><div class="line">  excvalue = exc[<span class="number">1</span>]</div><div class="line">  <span class="keyword">if</span> func <span class="keyword">in</span> (os.rmdir, os.remove) <span class="keyword">and</span> excvalue.errno == errno.EACCES:</div><div class="line">      os.chmod(path, stat.S_IRWXU| stat.S_IRWXG| stat.S_IRWXO) <span class="comment"># 0777</span></div><div class="line">      func(path)</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">      <span class="keyword">raise</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> os.path.exists(kingSoft):</div><div class="line">    shutil.rmtree(kingSoft, ignore_errors=<span class="keyword">False</span>, onerror=handleRemoveReadonly)</div><div class="line">    print(<span class="string">"delete kingsoft success"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"no such dir or file"</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;windows启动目录:&lt;code&gt;C:\Users\aron\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code&gt;&lt;br&gt;在windows下启动目录下添加一个&lt;code&gt;killkings
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://arvin-he.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python使用cx_freeze打包应用程序</title>
    <link href="http://arvin-he.github.io/2017/08/04/py-cxfreeze-2017-08-04/"/>
    <id>http://arvin-he.github.io/2017/08/04/py-cxfreeze-2017-08-04/</id>
    <published>2017-08-04T05:20:52.000Z</published>
    <updated>2017-09-08T03:51:39.865Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python应用程序打包"><a href="#python应用程序打包" class="headerlink" title="python应用程序打包"></a>python应用程序打包</h3><p>python下应用程序打包有py2exe, pyinstaller和cx_freeze这3个第三方库,</p><p>目前python3.6不支持py2exe和pyinstaller,在win7 下 python3.6 使用 py2exe 或 pyinstaller 都报 Indexerror： tuple index out of range.</p><p>但pyinstaller和py2exe在python3.4版本可用.</p><h3 id="使用cx-freeze打包应用程序"><a href="#使用cx-freeze打包应用程序" class="headerlink" title="使用cx_freeze打包应用程序"></a>使用cx_freeze打包应用程序</h3><p>用cx_freeze打包出来的包文件很大,一个简单的程序打包出来大概有230M左右.<br>里面包括了python的runtime等各种依赖.</p><ol><li><p>安装cx_freeze<br><code>pip install cx_freeze</code></p></li><li><p>创建setup.py脚本<br>在你的工程的根目录下创建setup.py脚本,<code>setup.py</code>脚本可以是其他名字,如<code>setup_cx_freeze.py</code>,通常约定俗成是’setup.py’.只要不要和你的应用程序的脚本命令冲突就行.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setup.py</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> cx_Freeze <span class="keyword">import</span> setup, Executable</div><div class="line"><span class="comment"># 依赖关系被自动检测，但可能需要微调</span></div><div class="line">build_exe_options = &#123;<span class="string">"packages"</span>: [<span class="string">"os"</span>], <span class="string">"excludes"</span>: [<span class="string">"tkinter"</span>]&#125;</div><div class="line"><span class="comment"># GUI应用程序在Windows上需要不同的基础（默认值为控制台应用程序)</span></div><div class="line">base = <span class="keyword">None</span></div><div class="line"><span class="keyword">if</span> sys.platform == <span class="string">"win32"</span>:</div><div class="line">    base = <span class="string">"Win32GUI"</span></div><div class="line"></div><div class="line">setup(  name = <span class="string">"guifoo"</span>,</div><div class="line">        version = <span class="string">"0.1"</span>,</div><div class="line">        description = <span class="string">"My GUI application!"</span>,</div><div class="line">        options = &#123;<span class="string">"build_exe"</span>: build_exe_options&#125;,</div><div class="line">        executables = [Executable(<span class="string">"guifoo.py"</span>, base=base)])</div></pre></td></tr></table></figure></li><li><p>创建应用程序打包目录(这是错误的)</p></li></ol><p><del>打包的应用程序和依赖要放到一个文件夹中去, 这个文件夹必须在打包前创建好,</del><br><del>通常在应用程序根目录下新建一个build文件夹</del></p><ol><li>执行打包命令<br>执行打包命令: <code>python setup.py build</code>, 其中<code>setup.py</code>就是上面你写的脚本, build是打包的命令的一个选项.<br>使用<code>python setup_cx_freeze.py --help-commands</code>来查看cx-freeze的命令, <code>setup_cx_freeze.py</code>是打包脚本,也可是是其他的名字<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">python setup_cx_freeze.py --help-commands</div><div class="line">Standard commands:</div><div class="line">  build            build everything needed to install</div><div class="line">  build_py         &quot;build&quot; pure Python modules (copy to build directory)</div><div class="line">  build_ext        build C/C++ extensions (compile/link to build directory)</div><div class="line">  build_clib       build C/C++ libraries used by Python extensions</div><div class="line">  build_scripts    &quot;build&quot; scripts (copy and fixup #! line)</div><div class="line">  clean            clean up temporary files from &apos;build&apos; command</div><div class="line">  install          install everything from build directory</div><div class="line">  install_lib      install all Python modules (extensions and pure Python)</div><div class="line">  install_headers  install C/C++ header files</div><div class="line">  install_scripts  install scripts (Python or otherwise)</div><div class="line">  install_data     install data files</div><div class="line">  sdist            create a source distribution (tarball, zip file, etc.)</div><div class="line">  register         register the distribution with the Python package index</div><div class="line">  bdist            create a built (binary) distribution</div><div class="line">  bdist_dumb       create a &quot;dumb&quot; built distribution</div><div class="line">  bdist_rpm        create an RPM distribution</div><div class="line">  bdist_wininst    create an executable installer for MS Windows</div><div class="line">  check            perform some checks on the package</div><div class="line">  upload           upload binary package to PyPI</div><div class="line"></div><div class="line">Extra commands:</div><div class="line">  install_exe      install executables built from Python scripts</div><div class="line">  bdist_msi        create a Microsoft Installer (.msi) binary distribution</div><div class="line">  build_exe        build executables from Python scripts</div><div class="line"></div><div class="line">usage: setup_cx_freeze.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]</div><div class="line">   or: setup_cx_freeze.py --help [cmd1 cmd2 ...]</div><div class="line">   or: setup_cx_freeze.py --help-commands</div><div class="line">   or: setup_cx_freeze.py cmd --help</div></pre></td></tr></table></figure></li></ol><h3 id="打包成-msi格式"><a href="#打包成-msi格式" class="headerlink" title="打包成*.msi格式"></a>打包成*.msi格式</h3><p>在命令行窗口输入:<code>python setup.py bdist_msi</code>,回车,就会在build目录下生成一个*.msi格式的软件安装包</p><h3 id="制作exe安装包"><a href="#制作exe安装包" class="headerlink" title="制作exe安装包"></a>制作exe安装包</h3><p>windows下通常分发软件都是<code>*.exe</code>格式的,<code>*.msi</code>也可以,python的分发包就是<code>*.msi</code>格式的.</p><p>但是python打包出来的文件都在一个文件夹,并不是一个exe文件,而且图标, 配置文件并不会被打包进来.此外该文件夹的体积很大.</p><p>考虑到上面的种种情况, windows下需要将上面文件夹的文件再次压缩打包成一个exe, 比较好的工具是NSIS.</p><ol><li><p>安装NSIS<br>NSIS有window版和unicode版本, 注意添加相关环境变量</p></li><li><p>编写打包脚本<br>创建一个打包脚本,如pack.nsi, 然后在该脚本中写脚本</p></li><li><p>执行命令脚本打包<br>命令: <code>makensis pack.nsi</code></p></li></ol><h3 id="制作deb包"><a href="#制作deb包" class="headerlink" title="制作deb包"></a>制作deb包</h3><p>linux下分发软件是deb包的形式</p><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>使用cx_freeze打包python程序,在打包sqlalchemy程序时,<code>C:\programs File\Python36\Lib\site-packages\sqlalchemy\sql\default_comparator.pyc</code>这个模块没有被打包进来,但是其他模块都被打包进来了.<br>解决办法: 复制<code>default_comparator.py</code>文件或者在<code>__pychae__</code>目录下复制<code>default_comparator.pyc</code>到你的打包目录中对应的目录.然后再通过NSIS打包.</p><p>在python3.4中使用cx_freeze打包能将sqlalchemy中的<code>default_comparator.pyc</code>打包,在python3.6却唯独漏掉这个<code>default_comparator.pyc</code>,原因未知,<br>解决办法:<br>在<code>cx_freeze</code>的<code>setup.py</code>脚本中的<code>build_exe_options</code>中的packages中添加sqlalchemy,这样就会将sqlalchemy完成打包进来,不会漏掉一个模块,格式如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 依赖会自动检测,但会需要微调</span></div><div class="line">build_exe_options = &#123;</div><div class="line">    <span class="string">"packages"</span>: [<span class="string">"sqlalchemy"</span>],</div><div class="line">    <span class="string">"excludes"</span>: [<span class="string">"tkinter"</span>],</div><div class="line">    <span class="string">"includes"</span>: [],</div><div class="line">    <span class="string">"include_files"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="关于cx-freeze的setup-py的脚本问题"><a href="#关于cx-freeze的setup-py的脚本问题" class="headerlink" title="关于cx_freeze的setup.py的脚本问题"></a>关于cx_freeze的setup.py的脚本问题</h3><p>使用cx-freeze进行打包时,setup.py必须放在程序运行脚本的根目录下,如果将setup.py放到同级的一个文件夹中(如make文件夹,为了不污染源代码),打包出来后的exe运行报错.提示模块找不到.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python应用程序打包&quot;&gt;&lt;a href=&quot;#python应用程序打包&quot; class=&quot;headerlink&quot; title=&quot;python应用程序打包&quot;&gt;&lt;/a&gt;python应用程序打包&lt;/h3&gt;&lt;p&gt;python下应用程序打包有py2exe, pyinstal
      
    
    </summary>
    
      <category term="编程" scheme="http://arvin-he.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://arvin-he.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
