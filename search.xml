<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Python之psutil模块使用]]></title>
      <url>http://arvin-he.github.io/2017/10/18/py-psutil-2017-10-18/</url>
      <content type="html"><![CDATA[<h3 id="psutil模块"><a href="#psutil模块" class="headerlink" title="psutil模块"></a>psutil模块</h3>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux笔记]]></title>
      <url>http://arvin-he.github.io/2017/10/18/linux-note1-2017-10-18/</url>
      <content type="html"><![CDATA[<h3 id="查看linux下所有的python3进程"><a href="#查看linux下所有的python3进程" class="headerlink" title="查看linux下所有的python3进程"></a>查看linux下所有的python3进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux | grep python3</div></pre></td></tr></table></figure>
<h3 id="linux下bash脚本执行错误"><a href="#linux下bash脚本执行错误" class="headerlink" title="linux下bash脚本执行错误"></a>linux下bash脚本执行错误</h3><p>错误: <code>-bash: ./reporteveryday.sh: /bin/bash^M: bad interpreter: No such file or directory</code><br>windows下的换行是回车符+换行符，也就是\r\n, 而unix下是换行符\n。<br>linux下不识别\r为回车符，所以导致每行多了个\r。并且因为这个是控制字符，所以在输出参数的时候不会打印出来.</p>
<p>bash脚本不要在windows下创建,然后在拷贝到Linux下,这样容易导致bash脚本无法执行,且不报错.<br>解决办法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim file</div><div class="line"># 查看文件的format</div><div class="line">:set ff</div><div class="line"># 修改文件format为unix</div><div class="line">:set ff=unix</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 缓存机制与 functools.lru_cache]]></title>
      <url>http://arvin-he.github.io/2017/09/29/py-cache-2017-09-29/</url>
      <content type="html"><![CDATA[<h3 id="缓存概念"><a href="#缓存概念" class="headerlink" title="缓存概念"></a>缓存概念</h3><p>缓存是一种将定量数据加以保存以备迎合后续请求的处理方式，目的是为了加快数据的检索速度<br>下面看一个例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span>:</span></div><div class="line">    <span class="string">""""""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Constructor"""</span></div><div class="line">        self.cache = &#123;&#125;</div><div class="line">        self.max_cache_size = <span class="number">10</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        根据该键是否存在于缓存当中返回True或者False</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.cache</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        更新该缓存字典，您可选择性删除最早条目</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.cache <span class="keyword">and</span> len(self.cache) &gt;= self.max_cache_size:</div><div class="line">            self.remove_oldest()</div><div class="line">        self.cache[key] = &#123;<span class="string">'date_accessed'</span>: datetime.datetime.now(),</div><div class="line">                           <span class="string">'value'</span>: value&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_oldest</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        删除具备最早访问日期的输入数据</span></div><div class="line"><span class="string">        """</span></div><div class="line">        oldest_entry = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> self.cache:</div><div class="line">            <span class="keyword">if</span> oldest_entry == <span class="keyword">None</span>:</div><div class="line">                oldest_entry = key</div><div class="line">            <span class="keyword">elif</span> self.cache[key][<span class="string">'date_accessed'</span>] &lt; self.cache[oldest_entry][<span class="string">'date_accessed'</span>]:</div><div class="line">                oldest_entry = key</div><div class="line"></div><div class="line">        self.cache.pop(oldest_entry)</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        返回缓存容量大小</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span> len(self.cache)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#测试缓存</span></div><div class="line">    keys = [<span class="string">'test'</span>, <span class="string">'red'</span>, <span class="string">'fox'</span>, <span class="string">'fence'</span>, <span class="string">'junk'</span>, \</div><div class="line">            <span class="string">'other'</span>, <span class="string">'alpha'</span>, <span class="string">'bravo'</span>, <span class="string">'cal'</span>, <span class="string">'devo'</span>, <span class="string">'ele'</span>]</div><div class="line">    s = <span class="string">'abcdefghijklmnop'</span></div><div class="line">    cache = MyCache()</div><div class="line">    <span class="keyword">for</span> i, key <span class="keyword">in</span> enumerate(keys):</div><div class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> cache:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            value = <span class="string">''</span>.join([random.choice(s) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>)])</div><div class="line">            cache.update(key, value)</div><div class="line">        print(<span class="string">"#%s iterations, #%s cached entries"</span> % (i+<span class="number">1</span>, cache.size))</div></pre></td></tr></table></figure></p>
<p>在 Python 的 3.2 版本中，引入了一个非常优雅的缓存机器，即 functool 模块中的 <code>lru_cache</code> 装饰器。如果要在 python2 中使用 <code>lru_cahce</code> 需要安装 <code>functools32</code>。lru_cache 原型如下：<code>@functools.lru_cache(maxsize=None, typed=False)</code><br>使用functools模块的lur_cache装饰器，可以缓存最多 maxsize 个此函数的调用结果，从而提高程序执行的效率，特别适合于耗时的函数。参数maxsize为最多缓存的次数，如果为None，则无限制，设置为2n时，性能最佳；<br>被 <code>lru_cache</code> 装饰的函数会有 <code>cache_clear</code> 和 <code>cache_info</code> 两个方法，分别用于清除缓存和查看缓存信息。<br>这里用一个简单的示例演示 lru_cache 效果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</div><div class="line"><span class="meta">@lru_cache(None)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    print(<span class="string">"calculating: %s + %s"</span> % (x, y))</div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</div><div class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</div><div class="line">print(add(<span class="number">2</span>, <span class="number">3</span>))</div><div class="line"></div><div class="line"><span class="comment">#输出结果：</span></div><div class="line">calculating: <span class="number">1</span> + <span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">3</span></div><div class="line">calculating: <span class="number">2</span> + <span class="number">3</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>从结果可以看出，当第二次调用 add(1, 2) 时，并没有真正执行函数体，而是直接返回缓存的结果。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://blog.konghy.cn/2016/04/20/python-cache/" target="_blank" rel="external">http://blog.konghy.cn/2016/04/20/python-cache/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谷歌浏览器常用快捷键]]></title>
      <url>http://arvin-he.github.io/2017/09/29/chrome-hotkey-2017-09-29/</url>
      <content type="html"><![CDATA[<h3 id="Chrome窗口和标签页快捷键："><a href="#Chrome窗口和标签页快捷键：" class="headerlink" title="Chrome窗口和标签页快捷键："></a>Chrome窗口和标签页快捷键：</h3><ol>
<li>Ctrl+N    打开新窗口</li>
<li>Ctrl+T    打开新标签页</li>
<li>Ctrl+Shift+N    在隐身模式下打开新窗口</li>
<li>Ctrl+O，然后选择文件，在谷歌浏览器中打开计算机上的文件</li>
<li>按住 Ctrl 键，然后点击链接，从后台在新标签页中打开链接，但您仍停留在当前标签页中</li>
<li>按住 Ctrl+Shift 键，然后点击链接    在新标签页中打开链接，同时切换到新打开的标签页</li>
<li>按住 Shift 键，然后点击链接    在新窗口中打开链接</li>
<li>Alt+F4    关闭当前浏览器窗口</li>
<li>Ctrl+Shift+T 重新打开上次关闭的标签页。谷歌浏览器可记住最近关闭的 10 个标签页。</li>
<li>将链接拖动到标签页内    在指定标签页中打开链接</li>
<li>将链接拖动到两个标签页之间    在标签页横条的指定位置建立一个新标签页，在该标签页中打开链接</li>
<li>Ctrl+1 到 Ctrl+8    切换到指定位置编号的标签页。您按下的数字代表标签页横条上的相应标签位置。</li>
<li>Ctrl+9    切换到最后一个标签页</li>
<li>Ctrl+Tab 或 Ctrl+PgDown    切换到下一个标签页</li>
<li>Ctrl+Shift+Tab 或 Ctrl+PgUp    切换到上一个标签页</li>
<li>Ctrl+W 或 Ctrl+F4    关闭当前标签页或弹出式窗口</li>
<li>Alt+Home    打开主页</li>
</ol>
<h3 id="Chrome地址栏快捷键-："><a href="#Chrome地址栏快捷键-：" class="headerlink" title="Chrome地址栏快捷键 ："></a>Chrome地址栏快捷键 ：</h3><h4 id="在地址栏，进行下列操作之一："><a href="#在地址栏，进行下列操作之一：" class="headerlink" title="在地址栏，进行下列操作之一："></a>在地址栏，进行下列操作之一：</h4><ol>
<li>键入搜索字词    使用默认搜索引擎进行搜索</li>
<li>键入网址中”www.”和”.com”之间的部分，然后按Ctrl+Enter 键    为您在地址栏中输入的内容添加”www.”和”.com”，然后打开网址</li>
<li>键入搜索引擎关键字或网址，按 Tab键，然后键入搜索字词    使用与关键字或网址相关联的搜索引擎进行搜索。如果谷歌浏览器可以识别您要使用的搜索引擎，则会提示您按 Tab 键。</li>
<li>F6 或 Ctrl+L 或 Alt+D    选中网址区域中的内容</li>
<li>键入网址，然后按 Alt+Enter 键    在新标签页中打开网址</li>
<li>打开谷歌chrome浏览器各功能的快捷键</li>
<li>Ctrl+B    打开和关闭书签栏</li>
<li>Ctrl+Shift+B    打开书签管理器</li>
<li>Ctrl+H    查看”历史记录”页</li>
<li>Ctrl+J    查看”下载”页</li>
<li>Shift+Escape    查看任务管理器</li>
<li>Shift+Alt+T    将焦点设置在工具栏上。使用键盘上的向右和向左箭头，可导航至工具栏上的不同按钮。</li>
</ol>
<h3 id="Chrome网页快捷键："><a href="#Chrome网页快捷键：" class="headerlink" title="Chrome网页快捷键："></a>Chrome网页快捷键：</h3><ol>
<li>Ctrl+P    打印当前页</li>
<li>Ctrl+S    保存当前页</li>
<li>F5    重新加载当前页</li>
<li>Esc    停止加载当前页</li>
<li>Ctrl+F    打开”在网页上查找”框</li>
<li>点击鼠标中键或滚轮（只在谷歌浏览器测试版（只有英文版）中可用）    激活自动滚动。当您移动鼠标时，网页会根据鼠标的移动方向自动滚动。</li>
<li>Ctrl+F5 或 Shift+F5    重新加载当前页，但忽略缓存内容</li>
<li>按住 Alt 键，然后点击链接    下载链接</li>
<li>Ctrl+G 或 F3    查找与您在”在网页上查找”框中输入的内容相匹配的下一个匹配项</li>
<li>Ctrl+Shift+G 或 Shift+F3    查找与您在”在网页上查找”框中输入的内容相匹配的上一个匹配项</li>
<li>Ctrl+U    查看源代码</li>
<li>将链接拖动到书签栏    将链接加入书签</li>
<li>Ctrl+D    将当前网页加入书签</li>
<li>Ctrl++，或者按住 Ctrl 键并向上滚动鼠标滚轮    放大网页上的所有内容</li>
<li>Ctrl+-，或者按住 Ctrl 键并向下滚动鼠标滚轮    缩小网页上的所有内容</li>
<li>Ctrl+0    将网页上的所有内容都恢复到正常大小</li>
<li>空格键                             向下滚动网页。</li>
<li>Home                               转至网页顶部。</li>
<li>End                                转至网页底部。</li>
<li>按住 Shift 键的同时滚动鼠标滚轮。  在网页上横向滚动。</li>
</ol>
<h3 id="浏览器文本快捷键："><a href="#浏览器文本快捷键：" class="headerlink" title="浏览器文本快捷键："></a>浏览器文本快捷键：</h3><ol>
<li>Ctrl+C                             将突出显示的内容复制到剪贴板中。</li>
<li>Ctrl+V 或 Shift+Insert             从剪贴板中粘贴内容。</li>
<li>Ctrl+Shift+V                       从剪贴板中粘贴内容(不带格式)。</li>
<li>Ctrl+X 或 Shift+Delete             删除突出显示的内容并将其复制到剪贴板中。</li>
</ol>
<h3 id="chrome命令16个非常有用的chrome-命令，操作方法与上述类似。"><a href="#chrome命令16个非常有用的chrome-命令，操作方法与上述类似。" class="headerlink" title="chrome命令16个非常有用的chrome://命令，操作方法与上述类似。"></a>chrome命令16个非常有用的chrome://命令，操作方法与上述类似。</h3><ol>
<li>chrome://downloads 等同于从菜单中查看下载内容，其快捷键是Ctrl+J</li>
<li>chrome://extensions 等同于菜单-工具-扩展</li>
<li>chrome://plugins 显示已安装插件 </li>
<li>chrome://bookmarks 等同于菜单-书签-书签管理器，快捷键Ctrl+Shift+O</li>
<li>chrome://history 等同于从菜单-历史直接访问，快捷键 Ctrl+H</li>
<li>chrome://restart 重启chrome浏览器</li>
<li>chrome://apps 打开chrome网上应用商店</li>
<li>chrome://flags 可用来启用或者关闭某些chrome的体验特性</li>
<li>chrome://dns 显示浏览器预抓取的主机名列表，让你随时了解DNS状态</li>
<li>chrome://memory 重定向到chrome://memory-redirect/，显示系统运行中的浏览器内存使用情况，以及浏览器中进程的详细信息。</li>
<li>chrome://net-internals 显示网络相关信息，用来捕获浏览器生成的网络事件，可导出数据，可查看DNS主机解析缓存。</li>
<li>chrome://quota-internals 用来显示浏览器所使用磁盘空间配额的情况。</li>
<li>chrome://sessions 该命令用来显示当前运行的浏览器的会话信息数以及详细列表</li>
<li>chrome://settings 该命令可通过菜单-选项直接访问，可用来控制浏览器各项设置值</li>
<li>chrome://sync-internals 用来显示 chrome 的同步状态</li>
<li>chrome://about/ 查看 chrome 所有的命令</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 谷歌 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬虫笔记]]></title>
      <url>http://arvin-he.github.io/2017/09/29/scrapy-notes2-2017-09-29/</url>
      <content type="html"><![CDATA[<h3 id="一些常识"><a href="#一些常识" class="headerlink" title="一些常识"></a>一些常识</h3><ol>
<li>代理ip会被集体封禁,然后过一段时间再开放</li>
<li>ip被封禁后,有的会过段时间解除封禁</li>
<li>代理ip不是全部可靠的,通常有效代理大概在70%左右</li>
</ol>
<h3 id="爬虫错误处理方法"><a href="#爬虫错误处理方法" class="headerlink" title="爬虫错误处理方法"></a>爬虫错误处理方法</h3>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB配置]]></title>
      <url>http://arvin-he.github.io/2017/09/27/mongodb-config-2017-09-27/</url>
      <content type="html"><![CDATA[<h3 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><p>安装就免了吧,安装好mongodb,然后配置环境变量</p>
<h3 id="创建MongoDB配置文件"><a href="#创建MongoDB配置文件" class="headerlink" title="创建MongoDB配置文件"></a>创建MongoDB配置文件</h3><p>先创建一个配置文件,名称为mongodb.cfg,配置内容为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#数据文件存放位置</div><div class="line">dbpath=F:/mongodb/data/db</div><div class="line"></div><div class="line">#日志文件存放位置</div><div class="line">logpath=F:/mongodb/data/log/mongodb.log</div><div class="line"></div><div class="line">#PID的路径</div><div class="line">pidfilepath=F:/mongodb/pid/mongodb.pid</div><div class="line"></div><div class="line">#端口号</div><div class="line">port=27017</div><div class="line"></div><div class="line">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件</div><div class="line">logappend=true</div><div class="line"></div><div class="line">#启用日志文件，默认启用</div><div class="line">journal=true</div><div class="line"></div><div class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</div><div class="line">quiet=true</div><div class="line"></div><div class="line">#打开28017网页端口（若不开启注释掉即可）</div><div class="line">rest=true</div></pre></td></tr></table></figure></p>
<h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><p>在终端执行:<code>mongod --config F:/mongodb/config/mongodb.cfg</code><br>然后在浏览器输入:127.0.0.1:27017,回车会看到网页有”It looks like you are trying to access MongoDB over HTTP on the native driver port.”,则表明启动成功</p>
<h3 id="注册mongodb服务"><a href="#注册mongodb服务" class="headerlink" title="注册mongodb服务"></a>注册mongodb服务</h3><p>如果每次都按照步骤三那样操作，岂不是很麻烦，按照如下命令来创建并启动MongoDB服务，就可以通过windows服务来管理MongoDB的启动和关闭了.<br>安装mongodb服务,在终端输入: <code>mongod --config F:/mongodb/config/mongodb.cfg --install --serviceName MongoDB</code><br>启动mongodb服务,在终端输入: <code>net start MongoDB</code>, 回车,然后有提示出来:MongoDB服务正在启动, MongoDB服务已经启动成功</p>
<h3 id="去除mongodb服务"><a href="#去除mongodb服务" class="headerlink" title="去除mongodb服务"></a>去除mongodb服务</h3><p>如果需要去除MongoDB服务，执行如下命令：<br><code>mongod --remove --serviceName MongoDB</code></p>
<h3 id="如何创建用户管理员"><a href="#如何创建用户管理员" class="headerlink" title="如何创建用户管理员"></a>如何创建用户管理员</h3><p>用户管理员是第一个要创建的用户。在没有创建任何用户之前，你可以随意创建用户；但数据库中一旦有了用户，那么未登录的客户端就没有权限做任何操作了，除非使用db.auth(username, password)方法登录。</p>
<p>用户管理员的角色名叫 userAdminAnyDatabase，这个角色只能在 admin 数据库中创建。下面是一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; use admin</div><div class="line">switched to db admin</div><div class="line">&gt; db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;root&quot;,roles:[&quot;userAdminAnyDatabase&quot;]&#125;)</div><div class="line">Successfully added user: &#123; &quot;user&quot; : &quot;root&quot;, &quot;roles&quot; : [ &quot;userAdminAnyDatabase&quot; ] &#125;</div></pre></td></tr></table></figure></p>
<p>这个例子创建了一个名为 root 的用户管理员。创建完了这个用户之后，我们应该马上以该用户的身份登录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.auth(&quot;root&quot;,&quot;root123&quot;)</div><div class="line">1</div><div class="line">db.auth() 方法返回 1 表示登录成功。接下来我们为指定的数据库创建访问所需的账号。</div></pre></td></tr></table></figure></p>
<h3 id="如何创建数据库用户"><a href="#如何创建数据库用户" class="headerlink" title="如何创建数据库用户"></a>如何创建数据库用户</h3><p>首先保证你已经以用户管理员的身份登录 admin 数据库。然后用 use 命令切换到目标数据库，<br>同样用 db.createUser() 命令来创建用户，其中角色名为 “readWrite”。</p>
<p>普通的数据库用户角色有两种，read 和 readWrite。顾名思义，前者只能读取数据不能修改，后者可以读取和修改。<br>下面是一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; use test</div><div class="line">switched to db test</div><div class="line">&gt; db.createUser(&#123;user:&quot;testuser&quot;,pwd:&quot;testpass&quot;,roles:[&quot;readWrite&quot;]&#125;)</div><div class="line">Successfully added user: &#123; &quot;user&quot; : &quot;testuser&quot;, &quot;roles&quot; : [ &quot;readWrite&quot; ] &#125;</div><div class="line">&gt; db.auth(&quot;testuser&quot;,&quot;testpass&quot;)</div><div class="line">1</div></pre></td></tr></table></figure></p>
<p>这样 MongoDB 的数据安全性就得到保障了，没有登录的客户端将无法执行任何命令。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python定时器]]></title>
      <url>http://arvin-he.github.io/2017/09/20/py-timer-2017-09-20/</url>
      <content type="html"><![CDATA[<h3 id="python中定时器"><a href="#python中定时器" class="headerlink" title="python中定时器"></a>python中定时器</h3><p>python中的定时器在threading模块中,而且只执行一次, 那么如何定时循环调用呢?<br>Timer:  隔一定时间调用一个函数,如果想实现每隔一段时间就调用一个函数的话，就要在Timer调用的函数中，再次设置Timer。<br>Timer其实是Thread的一个派生类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"hello %s\n"</span> % name)</div><div class="line">    <span class="keyword">global</span> timer</div><div class="line">    timer = threading.Timer(<span class="number">2.0</span>, hello, [<span class="string">"world"</span>])</div><div class="line">    timer.start()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    timer = threading.Timer(<span class="number">2.0</span>, hello, [<span class="string">"world"</span>])</div><div class="line">    timer.start()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux一些常用命令]]></title>
      <url>http://arvin-he.github.io/2017/09/19/linux-cmds-2017-09-19/</url>
      <content type="html"><![CDATA[<h2 id="scp命令"><a href="#scp命令" class="headerlink" title="scp命令"></a>scp命令</h2><p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件或文件夹.scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p>
<p>命令格式：<br>scp [参数] [原路径] [目标路径]</p>
<h3 id="从本地服务器复制到远程服务器："><a href="#从本地服务器复制到远程服务器：" class="headerlink" title="从本地服务器复制到远程服务器："></a>从本地服务器复制到远程服务器：</h3><p>命令格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">scp local_file remote_username@remote_ip:remote_folder  </div><div class="line">或者  </div><div class="line">scp local_file remote_username@remote_ip:remote_file  </div><div class="line">或者  </div><div class="line">scp local_file remote_ip:remote_folder  </div><div class="line">或者  </div><div class="line">scp local_file remote_ip:remote_file</div></pre></td></tr></table></figure></p>
<p>第1,2个指定了用户名，命令执行后需要输入用户密码，<br>第1个仅指定了远程的目录，文件名字不变，<br>第2个指定了文件名<br>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，<br>第3个仅指定了远程的目录，文件名字不变，<br>第4个指定了文件名 </p>
<h3 id="从本地拷贝文件夹到远程服务器："><a href="#从本地拷贝文件夹到远程服务器：" class="headerlink" title="从本地拷贝文件夹到远程服务器："></a>从本地拷贝文件夹到远程服务器：</h3><p>命令格式：<br><code>scp -r local_folder remote_username@remote_ip:remote_folder</code><br>或者<br><code>scp -r local_folder remote_ip:remote_folder</code><br>第1个指定了用户名，命令执行后需要输入用户密码；<br>第2个没有指定用户名，命令执行后需要输入用户名和密码；</p>
<h3 id="从远程服务器复制到本地服务器："><a href="#从远程服务器复制到本地服务器：" class="headerlink" title="从远程服务器复制到本地服务器："></a>从远程服务器复制到本地服务器：</h3><p>从远程复制到本地的scp命令与上面的命令相似，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>
<p><code>scp arvin@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</code></p>
<h3 id="screen命令"><a href="#screen命令" class="headerlink" title="screen命令"></a>screen命令</h3><p> 当使用SSH 或者 telent 远程登录到 Linux 服务器,经常有一些长时间运行的任务，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，但是他们执行的时间太长了。必须等待它执行完毕，在此期间可不能关掉终端窗口或者断开连接，也不能关机, 否则这个任务就会被杀掉，一切半途而废了。显然,这不是我们所希望的.</p>
<p>screen命令可以远程运行服务器程序并观察程序执行,即使关闭终端或者关闭电脑也不要紧,服务器上的程序也一直在运行.<br>简单来说，Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ssh登陆. 注意:需要先通过ssh登陆远程服务器才能使用screen</span></div><div class="line">ssh user@ip</div><div class="line"><span class="meta">#</span><span class="bash"> 创建一个screen会话窗口</span></div><div class="line">screen -S test</div><div class="line"><span class="meta">#</span><span class="bash"> 执行程序</span></div><div class="line">python3 test.py</div><div class="line"><span class="meta">#</span><span class="bash"> 查看正在运行的程序,会显示程序执行的pid</span></div><div class="line">screen -ls</div><div class="line"><span class="meta">#</span><span class="bash"> 查看某个程序在终端的输出, 6245是执行成的pid</span></div><div class="line">screen -r -D 6245</div><div class="line"><span class="meta">#</span><span class="bash"> 杀掉screen中的session</span></div><div class="line">kill -9 6245</div><div class="line">screen -ls</div><div class="line"><span class="meta">#</span><span class="bash"> 清除dead 会话</span></div><div class="line">screen -wipe test</div></pre></td></tr></table></figure></p>
<p>(Detached)—-&gt;挂起状态，无终端在连接会话<br>(Attached)—-&gt;有终端在连接会话。<br><strong>注意:</strong> 如果程序在运行时,不要按下CTRL+C, 这样会中止程序的运行,直接关闭终端窗口就可以了,这样不会关闭程序的运行.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">其他常用的命令选项有：</div><div class="line">-c file	使用配置文件file，而不使用默认的$HOME/.screenrc</div><div class="line">-d|-D [pid.tty.host]	不开启新的screen会话，而是断开其他正在运行的screen会话</div><div class="line">-h num	指定历史回滚缓冲区大小为num行</div><div class="line">-list|-ls	列出现有screen会话，格式为pid.tty.host</div><div class="line">-d -m	启动一个开始就处于断开模式的会话</div><div class="line">-r sessionowner/ [pid.tty.host]	重新连接一个断开的会话。多用户模式下连接到其他用户screen会话需要指定sessionowner，需要setuid-root权限</div><div class="line">-S sessionname	创建screen会话时为会话指定一个名字</div><div class="line">-v	显示screen版本信息</div><div class="line">-wipe [match]	同-list，但删掉那些无法连接的会话</div></pre></td></tr></table></figure>
<p>下例显示当前有两个处于detached状态的screen会话，你可以使用<code>screen -r &lt;screen_pid&gt;</code>重新连接上.<br>如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话.</p>
<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>kill[参数][进程号]</p>
<p>init进程是不可杀的,<br>init是Linux系统操作中不可缺少的程序之一。所谓的init进程，它是一个由内核启动的用户级进程。内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。 其它所有进程都是init进程的子孙。init进程是不可杀的！</p>
<p>常用的信号：只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HUP    1    终端断线</div><div class="line">INT     2    中断（同 Ctrl + C）</div><div class="line">QUIT    3    退出（同 Ctrl + \）</div><div class="line">TERM   15    终止</div><div class="line">KILL    9    强制终止</div><div class="line">CONT   18    继续（与STOP相反， fg/bg命令）</div><div class="line">STOP    19    暂停（同 Ctrl + Z）</div></pre></td></tr></table></figure></p>
<p>彻底杀死进程:<br>命令：<code>kill –9 3268</code></p>
<p>应注意:</p>
<ol>
<li><p>信号使进程强行终止，这常会带来一些副作用，如数据丢失或者终端无法恢复到正常状态。发送信号时必须小心，只有在万不得已时，才用kill信号(9)，因为进程不能首先捕获它。</p>
</li>
<li><p>要撤销所有的后台作业，可以输入kill 0。因为有些在后台运行的命令会启动多个进程，跟踪并找到所有要杀掉的进程的PID是件很麻烦的事。这时，使用kill 0来终止所有由当前shell启动的进程，是个有效的方法。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python之beautifulsoup使用]]></title>
      <url>http://arvin-he.github.io/2017/09/18/py-bs4-2017-09-18/</url>
      <content type="html"><![CDATA[<h3 id="find-find-all"><a href="#find-find-all" class="headerlink" title="find()/find_all()"></a>find()/find_all()</h3><p>find() 返回文档中符合条件的tag，如果没找到符合条件的tag返回Node<br>find_all()返回文档中全部符合条件的tag的列表，如果不存在返回空列表<br>注意find()函数返回的是符合条件的tag，因此可以进行链式调用，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#先查找class属性为‘post-content’的div标签，然后查找该div标签下的所有的img标签</span></div><div class="line">soup.find(<span class="string">'div'</span>, class_=<span class="string">'post-content'</span>).find_all(<span class="string">'img'</span>)</div></pre></td></tr></table></figure></p>
<p>而<code>find_all()</code>返回的是列表，列表是不存在find()和find_all()函数的，因此不能进行链式调用</p>
<h3 id="孩子-child-与后代-descendant"><a href="#孩子-child-与后代-descendant" class="headerlink" title="孩子(child)与后代(descendant)"></a>孩子(child)与后代(descendant)</h3><p>子标签: 一个父标签的下一级标签<br>后代标签: 一个父标签下面所有级别的标签,包括子标签<br>所有的子标签都是后代标签,但不是所有后代标签都是子标签</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb笔记(三)]]></title>
      <url>http://arvin-he.github.io/2017/09/18/mongodb-note3-2017-09-18/</url>
      <content type="html"><![CDATA[<h3 id="mongodb突然无法打开"><a href="#mongodb突然无法打开" class="headerlink" title="mongodb突然无法打开"></a>mongodb突然无法打开</h3><p>检查mongodb数据所在的文件夹下是否有一个类似”locked file”,删掉这个文件,然后再开启mongodb</p>
<h3 id="再说插入操作"><a href="#再说插入操作" class="headerlink" title="再说插入操作"></a>再说插入操作</h3><p>单条插入<br>批量插入</p>
<h3 id="find操作"><a href="#find操作" class="headerlink" title="find操作"></a>find操作</h3><p>查询是用的最多的操作了, 常用的有2类:</p>
<ol>
<li><blockquote>
<p>, &gt;=, &lt;, &lt;=, !=, =</p>
</blockquote>
</li>
<li>And，OR，In，NotIn</li>
</ol>
<p>这些操作在mongodb里面都有对应封装.</p>
<ol>
<li>“$gt”, “$gte”, “$lt”, “$lte”, “$ne”, “”<br>这些与上面 &gt;, &gt;=, &lt;, &lt;=, !=, = 这6个符号操作一一对应</li>
<li>“”, “$or”, “$in”，”$nin”<br>与 And，OR，In，NotIn 操作一一对应</li>
</ol>
<p>正则表达式匹配<br>在mongodb中还有一个特殊的匹配，那就是支持正则表达式.</p>
<p>$where操作</p>
<h3 id="update操作"><a href="#update操作" class="headerlink" title="update操作"></a>update操作</h3><p>整体更新<br>局部更新</p>
<p>局部更新:<br>mongodb中已经给我们提供了两个修改器： $inc 和 $set。</p>
<p>$inc修改器<br>$inc也就是increase的缩写，自增$inc指定的值，如果“文档”中没有此key，则会创建key。</p>
<p>$set修改器</p>
<h3 id="upsert操作"><a href="#upsert操作" class="headerlink" title="upsert操作"></a>upsert操作</h3><p>upsert操作就是说：如果我没有查到，我就在数据库里面新增一条，其实这样也有好处，就是避免了我在数据库里面判断是update还是add操作，使用起来很简单将update的第三个参数设为true即可。</p>
<h3 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h3><p>在mongodb中如果匹配多条，默认的情况下只更新第一条，那么如果我们有需求必须批量更新，那么在mongodb中实现也是很简单的，在update的第四个参数中设为true即可.</p>
<h3 id="查询某一字段重复的记录"><a href="#查询某一字段重复的记录" class="headerlink" title="查询某一字段重复的记录"></a>查询某一字段重复的记录</h3><h3 id="查询某一字段重复的记录的数目"><a href="#查询某一字段重复的记录的数目" class="headerlink" title="查询某一字段重复的记录的数目"></a>查询某一字段重复的记录的数目</h3><h3 id="查询和删除某一字段不是数字的记录"><a href="#查询和删除某一字段不是数字的记录" class="headerlink" title="查询和删除某一字段不是数字的记录"></a>查询和删除某一字段不是数字的记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 查询某一字段不是数字的记录</div><div class="line">db.getCollection(&apos;phone&apos;).find(&#123;&quot;tel&quot;: &#123;&quot;$regex&quot;: &apos;^[^0-9]+$&apos;&#125;&#125;)</div><div class="line"># 查询某一字段不是数字的记录的数目</div><div class="line">db.getCollection(&apos;phone&apos;).find(&#123;&quot;tel&quot;: &#123;&quot;$regex&quot;: &apos;^[^0-9]+$&apos;&#125;&#125;).count()</div><div class="line"># 删除某一字段不是数字的记录</div><div class="line">db.getCollection(&apos;phone&apos;).remove(&#123;&quot;tel&quot;: &#123;&quot;$regex&quot;: &apos;^[^0-9]+$&apos;&#125;&#125;)</div></pre></td></tr></table></figure>
<h3 id="数据库合并"><a href="#数据库合并" class="headerlink" title="数据库合并"></a>数据库合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import os</div><div class="line">import sys</div><div class="line">from pymongo import MongoClient</div><div class="line">import gevent</div><div class="line">from gevent import monkey</div><div class="line">from gevent.pool import Pool</div><div class="line">import subprocess</div><div class="line">from logger import Logging</div><div class="line"></div><div class="line">monkey.patch_all()</div><div class="line"></div><div class="line"></div><div class="line">logname = os.path.splitext(os.path.basename(__file__))[0]</div><div class="line">logger = Logging(logname)</div><div class="line">log = logger.logObject</div><div class="line"></div><div class="line"># 连接mongodb数据库,并返回数据库对象</div><div class="line"></div><div class="line"></div><div class="line">def connectDB(user, passwd, host, db_name):</div><div class="line">    client = MongoClient(</div><div class="line">        &apos;mongodb://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;&apos;.format(user, passwd, host, db_name))</div><div class="line">    return client[db_name]</div><div class="line"></div><div class="line"></div><div class="line">db1 = connectDB(&quot;xxx&quot;, &quot;xxxxxx&quot;, &quot;ip:port&quot;, &quot;xxxx&quot;)</div><div class="line">db2 = connectDB(&quot;xxxxx&quot;, &quot;******&quot;,</div><div class="line">                &quot;ip:port&quot;, &quot;qqqq&quot;)</div><div class="line">movie1 = db1[&quot;xxx1&quot;]</div><div class="line">movie2 = db2[&quot;xxx2&quot;]</div><div class="line"></div><div class="line"></div><div class="line">def get_item():</div><div class="line">    for index, item in enumerate(movie2.find(&#123;&#125;, no_cursor_timeout=True)):</div><div class="line">        log.info(&quot;获取第&#123;&#125;条数据.&quot;.format(index + 1))</div><div class="line">        item[&quot;time&quot;] = float(&quot;&#123;:.3f&#125;&quot;.format(int(item[&quot;time&quot;] * 1000)))</div><div class="line">        yield item</div><div class="line"></div><div class="line"></div><div class="line">def mergedb(item):</div><div class="line">    if movie1.find(&#123;&quot;tel&quot;: item[&quot;tel&quot;], &quot;time&quot;: item[&quot;time&quot;]&#125;).count() &lt; 1:</div><div class="line">        movie1.insert(item)</div><div class="line">    else:</div><div class="line">        log.info(&quot;该数据已经存在!&quot;)</div><div class="line"></div><div class="line"></div><div class="line">def backupdb():</div><div class="line">    log.info(&quot;开始导出testdb数据库phone集合...&quot;)</div><div class="line">    dst = os.path.join(&quot;data&quot;, &quot;&#123;&#125;.dat&quot;.format(&quot;phone&quot;))</div><div class="line">    try:</div><div class="line">        subprocess.check_call([&quot;mongoexport&quot;,</div><div class="line">                               &quot;-h&quot;, &quot;ip:port&quot;,</div><div class="line">                               &quot;-u&quot;, &quot;xxx.xx&quot;,</div><div class="line">                               &quot;-p&quot;, &quot;xxxx&quot;,</div><div class="line">                               &quot;-d&quot;, &quot;xxxxx&quot;,</div><div class="line">                               &quot;-c&quot;, &quot;xxxx&quot;,</div><div class="line">                               &quot;-o&quot;, dst])</div><div class="line">        log.info(&quot;导出&#123;&#125;数据成功&quot;.format(dst))</div><div class="line">    except Exception as e:</div><div class="line">        log.error(&quot;导出MongoDB数据出错...&quot;)</div><div class="line">        log.error(e)</div><div class="line">        log.info(&quot;数据导出中止...&quot;)</div><div class="line">        return</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    pool = Pool(100)</div><div class="line">    try:</div><div class="line">        pool.map(mergedb, get_item())</div><div class="line">    except Exception as e:</div><div class="line">        log.error(e)</div><div class="line">        sys.exit()</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python笔记]]></title>
      <url>http://arvin-he.github.io/2017/09/18/py-note1-2017-09-18/</url>
      <content type="html"><![CDATA[<h3 id="python路径操作"><a href="#python路径操作" class="headerlink" title="python路径操作"></a>python路径操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment">#创建目录</span></div><div class="line">os.mkdir(<span class="string">"D:\\python\\2"</span>)</div><div class="line"><span class="comment">#删除目录</span></div><div class="line">os.rmdir(<span class="string">"D:\\python\\2"</span>)</div><div class="line"></div><div class="line"><span class="comment">#创建多级目录</span></div><div class="line">os.makedirs(<span class="string">"D:\\python\\oo\\2\\3"</span>)</div><div class="line"><span class="comment">#删除多级目录</span></div><div class="line">os.removedirs(<span class="string">"D:\\python\\oo\\2\\3"</span>)</div><div class="line"></div><div class="line"><span class="comment">#获取目录下文件夹及文件</span></div><div class="line">paths=os.listdir(<span class="string">"D:\\python"</span>)</div><div class="line"><span class="keyword">for</span> path <span class="keyword">in</span> paths:</div><div class="line">    print(path)</div><div class="line"></div><div class="line"><span class="comment">#获取当前目录位置</span></div><div class="line">path1=os.getcwd()</div><div class="line">print(path1)</div><div class="line"></div><div class="line"><span class="comment">#切换目录</span></div><div class="line">os.chdir(<span class="string">"D:\\python\\oo\\3"</span>)</div><div class="line">path2=os.getcwd()</div><div class="line">print(path2)</div><div class="line"></div><div class="line"><span class="comment">#遍历所有子目录及文件</span></div><div class="line"><span class="keyword">for</span> p1,d,filelist <span class="keyword">in</span> os.walk(<span class="string">'D:'</span>+os.sep+<span class="string">'python'</span>):</div><div class="line">    <span class="keyword">for</span> f1 <span class="keyword">in</span> filelist:</div><div class="line">        fp=os.path.join(p1,f1)</div><div class="line">        print(fp)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>os.path.abspath(path) </div><div class="line">返回path规范化的绝对路径。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">'test.csv'</span>) </div><div class="line"><span class="string">'C:\\Python25\\test.csv'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">'c:\\test.csv'</span>) </div><div class="line"><span class="string">'c:\\test.csv'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">'../csv\\test.csv'</span>) </div><div class="line"><span class="string">'C:\\csv\\test.csv'</span> </div><div class="line"> </div><div class="line"><span class="number">2.</span>os.path.split(path) </div><div class="line">将path分割成目录和文件名二元组返回。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">'c:\\csv\\test.csv'</span>) </div><div class="line">(<span class="string">'c:\\csv'</span>, <span class="string">'test.csv'</span>) </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">'c:\\csv\\'</span>) </div><div class="line">(<span class="string">'c:\\csv'</span>, <span class="string">''</span>) </div><div class="line"> </div><div class="line"><span class="number">3.</span>os.path.dirname(path) </div><div class="line">返回path的目录。其实就是os.path.split(path)的第一个元素。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">'c:\\csv\test.csv'</span>) </div><div class="line"><span class="string">'c:\\'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">'c:\\csv'</span>) </div><div class="line"><span class="string">'c:\\'</span> </div><div class="line"> </div><div class="line"><span class="number">4.</span>os.path.basename(path) </div><div class="line">返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">'c:\\test.csv'</span>) </div><div class="line"><span class="string">'test.csv'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">'c:\\csv'</span>) </div><div class="line"><span class="string">'csv'</span> （这里csv被当作文件名处理了） </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">'c:\\csv\\'</span>) </div><div class="line"><span class="string">''</span> </div><div class="line"> </div><div class="line"><span class="number">5.</span>os.path.commonprefix(list) </div><div class="line">返回list中，所有path共有的最长的路径。 </div><div class="line"> </div><div class="line">如： </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.commonprefix([<span class="string">'/home/td'</span>,<span class="string">'/home/td/ff'</span>,<span class="string">'/home/td/fff'</span>]) </div><div class="line"><span class="string">'/home/td'</span> </div><div class="line"> </div><div class="line"><span class="number">6.</span>os.path.exists(path) </div><div class="line">如果path存在，返回<span class="keyword">True</span>；如果path不存在，返回<span class="keyword">False</span>。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">'c:\\'</span>) </div><div class="line"><span class="keyword">True</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">'c:\\csv\\test.csv'</span>) </div><div class="line"><span class="keyword">False</span> </div><div class="line"> </div><div class="line"><span class="number">7.</span>os.path.isabs(path) </div><div class="line">如果path是绝对路径，返回<span class="keyword">True</span>。 </div><div class="line"> </div><div class="line"><span class="number">8.</span>os.path.isfile(path) </div><div class="line">如果path是一个存在的文件，返回<span class="keyword">True</span>。否则返回<span class="keyword">False</span>。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">'c:\\boot.ini'</span>) </div><div class="line"><span class="keyword">True</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">'c:\\csv\\test.csv'</span>) </div><div class="line"><span class="keyword">False</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">'c:\\csv\\'</span>) </div><div class="line"><span class="keyword">False</span> </div><div class="line"> </div><div class="line"><span class="number">9.</span>os.path.isdir(path) </div><div class="line">如果path是一个存在的目录，则返回<span class="keyword">True</span>。否则返回<span class="keyword">False</span>。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">'c:\\'</span>) </div><div class="line"><span class="keyword">True</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">'c:\\csv\\'</span>) </div><div class="line"><span class="keyword">False</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">'c:\\windows\\test.csv'</span>) </div><div class="line"><span class="keyword">False</span> </div><div class="line"> </div><div class="line"><span class="number">10.</span>os.path.join(path1[, path2[, ...]]) </div><div class="line">将多个路径组合后返回，第一个绝对路径之前的参数将被忽略。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">'c:\\'</span>, <span class="string">'csv'</span>, <span class="string">'test.csv'</span>) </div><div class="line"><span class="string">'c:\\csv\\test.csv'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">'windows\temp'</span>, <span class="string">'c:\\'</span>, <span class="string">'csv'</span>, <span class="string">'test.csv'</span>) </div><div class="line"><span class="string">'c:\\csv\\test.csv'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">'/home/aa'</span>,<span class="string">'/home/aa/bb'</span>,<span class="string">'/home/aa/bb/c'</span>) </div><div class="line"><span class="string">'/home/aa/bb/c'</span> </div><div class="line"> </div><div class="line"><span class="number">11.</span>os.path.normcase(path) </div><div class="line">在Linux和Mac平台上，该函数会原样返回path，在windows平台上会将路径中所有字符转换为小写，并将所有斜杠转换为饭斜杠。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.normcase(<span class="string">'c:/windows\\system32\\'</span>) </div><div class="line"><span class="string">'c:\\windows\\system32\\'</span> </div><div class="line"> </div><div class="line"><span class="number">12.</span>os.path.normpath(path) </div><div class="line">规范化路径。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.normpath(<span class="string">'c://windows\\System32\\../Temp/'</span>) </div><div class="line"><span class="string">'c:\\windows\\Temp'</span> </div><div class="line"> </div><div class="line"><span class="number">12.</span>os.path.splitdrive(path) </div><div class="line">返回（drivername，fpath）元组 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitdrive(<span class="string">'c:\\windows'</span>) </div><div class="line">(<span class="string">'c:'</span>, <span class="string">'\\windows'</span>) </div><div class="line"> </div><div class="line"><span class="number">13.</span>os.path.splitext(path) </div><div class="line">分离文件名与扩展名；默认返回(fname,fextension)元组，可做分片操作 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">'c:\\csv\\test.csv'</span>) </div><div class="line">(<span class="string">'c:\\csv\\test'</span>, <span class="string">'.csv'</span>) </div><div class="line"> </div><div class="line"><span class="number">14.</span>os.path.getsize(path) </div><div class="line">返回path的文件的大小（字节）。 </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getsize(<span class="string">'c:\\boot.ini'</span>) </div><div class="line"><span class="number">299L</span> </div><div class="line"> </div><div class="line"><span class="number">15.</span>os.path.getatime(path) </div><div class="line">返回path所指向的文件或者目录的最后存取时间。 </div><div class="line"> </div><div class="line"><span class="number">16.</span>os.path.getmtime(path) </div><div class="line">返回path所指向的文件或者目录的最后修改时间</div></pre></td></tr></table></figure>
<h3 id="python文件压缩操作"><a href="#python文件压缩操作" class="headerlink" title="python文件压缩操作"></a>python文件压缩操作</h3><h3 id="python数据库连接操作"><a href="#python数据库连接操作" class="headerlink" title="python数据库连接操作"></a>python数据库连接操作</h3><h3 id="python字符串操作"><a href="#python字符串操作" class="headerlink" title="python字符串操作"></a>python字符串操作</h3><h3 id="python异常处理"><a href="#python异常处理" class="headerlink" title="python异常处理"></a>python异常处理</h3><h3 id="python日志操作"><a href="#python日志操作" class="headerlink" title="python日志操作"></a>python日志操作</h3>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb笔记(二)]]></title>
      <url>http://arvin-he.github.io/2017/09/13/mongodb-note2-2017-09-13/</url>
      <content type="html"><![CDATA[<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li>mongoDB三要素: 数据库，集合，文档，其中“集合”就是对应关系数据库中的“表”，“文档”对应“行”。</li>
<li>mongoDB发布版本: 32bit和64bit<ul>
<li>根据业界规则，偶数为“稳定版”(如：1.6.X，1.8.X)，奇数为“开发版”(如：1.7.X，1.9.X)</li>
<li>32bit的mongodb最大只能存放2G的数据，64bit就没有限制</li>
</ul>
</li>
</ol>
<h3 id="mongoDB安装与启动"><a href="#mongoDB安装与启动" class="headerlink" title="mongoDB安装与启动"></a>mongoDB安装与启动</h3><ol>
<li>安装: 安装就不多说了,注意安装完将mongodb安装目录下的bin目录(C:\Program Files\MongoDB\Server\3.4\bin)放到环境变量中去,默认是没有放到环境变量中.这样有一些很好用的工具和命令可以在终端使用.</li>
<li>启动: 启动之前必须给monggodb指定一个文件夹,这里取名为”mongodata”,路径位:C:\mongodata,用来存放mongodb的数据。如果你将mongodb安装在C:/program File目录下,那么这个mongodata文件夹不要放在C:/program File目录下.因为这需要管理员权限才能添加和删除文件夹.</li>
<li>在终端指定数据存放地点:<br>mongod –dbpath=C:/mongodata</li>
<li>查看是否成功:<br>最后要看下是否开启成功，从图中的信息中获知，mongodb采用27017端口，那么我们就在浏览器里面键入“<a href="http://localhost:27017/”，" target="_blank" rel="external">http://localhost:27017/”，</a><br>打开后，mongodb告诉我们在27017上Add 1000可以用http模式查看mongodb的管理信息(貌似在新版本3.4.9没有成功)。</li>
</ol>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>在终端指定数据存放点后,mongod –dbpath=C:/mongodata,不要关闭该终端,再开一个终端，输入mongo命令打开shell，其实这个shell就是mongodb的客户端，同时也是一个js的编译器，默认连接的是“test”数据库。</p>
<ol>
<li>insert操作</li>
</ol>
<p><img src="/2017/09/13/mongodb-note2-2017-09-13/1.png" alt=""></p>
<ol>
<li>find 操作</li>
</ol>
<p>这里要注意两点：<br>“_id”： 这个字段是数据库默认给我们加的GUID，目的就是保证数据的唯一性。<br>严格的按照Bson的形式书写文档，不过也没关系，错误提示还是很强大的。</p>
<p><img src="/2017/09/13/mongodb-note2-2017-09-13/2.png" alt=""></p>
<ol>
<li>update操作</li>
</ol>
<p>update方法的第一个参数为“查找的条件”，第二个参数为“更新的值”。</p>
<p><img src="/2017/09/13/mongodb-note2-2017-09-13/3.png" alt=""></p>
<ol>
<li>remove操作</li>
</ol>
<p>删除指定数据</p>
<p><img src="/2017/09/13/mongodb-note2-2017-09-13/4.png" alt=""></p>
<p>删除所有数据</p>
<p><img src="/2017/09/13/mongodb-note2-2017-09-13/5.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongoDB笔记]]></title>
      <url>http://arvin-he.github.io/2017/09/12/mongodb-note1-2017-09-12/</url>
      <content type="html"><![CDATA[<h2 id="常见的关系型数据库"><a href="#常见的关系型数据库" class="headerlink" title="常见的关系型数据库"></a>常见的关系型数据库</h2><p>关系数据库管理系统(Relational DataBase Management System，RDBMS)<br>MySQL、PostgreSQL、SQLite、Oracle、MS SQLServer </p>
<h3 id="mongoDB简介"><a href="#mongoDB简介" class="headerlink" title="mongoDB简介"></a>mongoDB简介</h3><p>MongoDB(源自单词 humongous)是一种较新的数据库，它没有表、模式、SQL 或行的概念。<br>它没有事务、ACID 兼容性、连接、外键或其他许多容易在凌晨引起问题的特性。</p>
<p>记住：MongoDB 不会尝试为所有人完成所有事情。但对于许多目的(例如构建 Web 应用)，<br>MongoDB 是一个能够实现解决方案的完美工具。</p>
<p>MongoDB 以C++编写，因此迁移相对容易，并且可以在任何位置运行该应用。MongoDB 提供了一个功能丰富的面向文档数据库，并且对运行速度和扩展性做了优化。它也几乎可运行在任何目标上。MongoDB的网站上包含了可运行在 Linux、Mac OS、Windows 和 Solaris 中的安装文件。</p>
<p><strong>警告：</strong><br>32 位版本的 MongoDB 数据库大小被限制为小于等于 2GB，因为 MongoDB 内部使用内存<br>映射文件来实现高性能。在 32 位系统中任何大于 2GB 的文件都需要一些特殊的处理，这样会<br>降低处理速度，也会使应用代码变得复杂。官方关于该限制的观点是：64 位环境很容易获得；<br>因此，增加代码的复杂性并不是很好的权衡之计。64 位版本的 MongoDB 可以实现所有的意图<br>和目的，并且不含任何限制。</p>
<h3 id="关于BSON"><a href="#关于BSON" class="headerlink" title="关于BSON"></a>关于BSON</h3><p>MongoDB 并未使用 JSON 存储数据，而使用由 MongoDB 团队开发的一种称为<br>BSON(二进制 JSON 的英文简称)的开放数据格式。大多数情况下，使用 BSON 取代 JSON 并不<br>会改变处理数据的方式。BSON 通过使计算机更容易处理和搜索文档的方式，使 MongoDB 处<br>理速度变得更快。BSON 还添加了一些标准 JSON 不支持的特性，包括数字数据(例如 int32 和<br>int64)的许多扩展类型，以及支持处理二进制数据。</p>
<p>BSON 是一个开放标准，在网址 <a href="http://bsonspec.org/上可以找到它的规范。当人们听到" target="_blank" rel="external">http://bsonspec.org/上可以找到它的规范。当人们听到</a> BSON<br>是 JSON 的二进制形式时，他们期望 BSON 占用的空间要比 JSON 少得多。不过，事实并不一<br>定是这样的；许多情况下，BSON 版本与相同的 JSON 相比要占用更多的空间。</p>
<p>首先，要记住 MongoDB 的设计目标是快速，而不是节省空间。虽然这并不意味着 MongoDB<br>会浪费空间(它不会)；不过，如果处理数据的速度更快(它确实是这样的)，那么存储文档时的一<br>点开销是完全可以接受的。简单地说，BSON 更易于遍历(即浏览)，遍历索引页非常快。</p>
<p>BSON 支持在一个文档中存储最多 16MB 的二进制数据，</p>
<h3 id="关于唯一键"><a href="#关于唯一键" class="headerlink" title="关于唯一键"></a>关于唯一键</h3><p>MongoDB 要求每个文档必须有唯一标识符；在 MongoDB 中，该标识符<br>被称为_id。除非为该字段指定某个值，否则 MongoDB 将自动创建唯一值。即使是在已经成熟<br>的 RDBMS 数据库世界中，也存在着是应该自己提供唯一键还是由数据库提供的分歧。最近，<br>由数据库创建唯一键的方式已经变得更加流行。MongoDB 是一个分布式数据库，所以其主要<br>目标之一是消除对共享资源的依赖(例如检查主键是否独一无二)。非分布式的数据库通常使用<br>一个简单的主键，例如自动递增的序列号。MongoDB 的默认_id 格式是一个 ObjectId，它是一<br>个 12 字节的唯一标识符，可以独立地在分布式环境中生成。<br>之前，使用 MongoDB 的大多数开发者似乎更喜欢创建自己的唯一键，由自己来维护键的<br>唯一性。然而，现在人们更愿意使用 MongoDB 创建的默认 ID 值。不过，在使用 RDBMS 数据<br>库时，选择哪种方式更多地取决于个人偏好。我们更愿意使用数据库提供的值，因为这意味着<br>我们可以保证键是唯一的，并且是独立的。<br>最终，你必须决定哪种方式更适合自己。如果有信心保证自己的键一定是唯一的(并且可能<br>不会改变)，那么就可以使用。如果不确定键的唯一性或者不希望担心这件事情，最好还是使用<br>MongoDB 提供的默认键。</p>
<h3 id="关于集合"><a href="#关于集合" class="headerlink" title="关于集合"></a>关于集合</h3><p>集合有点类似于表，但它们不那么死板。集合非常像一个贴有标签的盒子。<br>最后但并非最不重要的是，集合可以按需求即时创建。尤其是，在第一次尝试保存文档时，<br>MongoDB 将创建引用它的集合。这意味着可以按照需求即时创建集合(但并不是应该这么做)。<br>因为 MongoDB 也允许动态地创建索引，执行其他数据库级别的命令，所以可以利用该特性构<br>建出一些非常动态的应用。</p>
<p>理解 MongoDB 中数据库的最简单方式就是将它看成一个集合的集合</p>
<h3 id="存储二进制数据"><a href="#存储二进制数据" class="headerlink" title="存储二进制数据"></a>存储二进制数据</h3><p>GridFS 是 MongoDB 在数据库中存储二进制数据的解决方案。<br>GridFS 通过在 files 集合中存储文件的信息(称为元数据)来实现。数据本身被分成多块(称为<br>信息块)存储在 chunks 集合中。这种方式使数据存储既简单又有扩展性；还使范围操作(例如获<br>取文件的特定部分)变得更简单。</p>
<h3 id="实施分片"><a href="#实施分片" class="headerlink" title="实施分片"></a>实施分片</h3><p>对于涉及大规模部署的应用，自动分片可能是 MongoDB 最重要和最常用的特性。<br>在自动分片场景中，MongoDB 将处理所有数据的分割和重组。它将保证数据进入正确的<br>服务器，并以最高效的方式运行查询和重组结果。事实上，从开发者的角度看，使用含有数百<br>个分片的 MongoDB 数据库和使用单个 MongoDB 数据库并没有区别。</p>
<h3 id="使用-map-和-reduce-函数"><a href="#使用-map-和-reduce-函数" class="headerlink" title="使用 map 和 reduce 函数"></a>使用 map 和 reduce 函数</h3><p>MongoDB 并不要求使用 map 和 reduce 函数。事实上，MongoDB 只依赖于简单的查询语法，<br>这种语法与 MySQL 中使用的类似。不过，对于希望使用该功能的人，MongoDB 也提供了对这<br>些函数的支持。</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[怎样避免陷入无止境地看教程的陷阱]]></title>
      <url>http://arvin-he.github.io/2017/09/08/learn-minds-2017-06-19/</url>
      <content type="html"><![CDATA[<p><img src="/2017/09/08/learn-minds-2017-06-19/1.jpeg" alt=""></p>
<p>我们可能都曾遇到过这样的情况：学习编程的时候，一个教程接着一个教程地学，但是不清楚自己学到什么了程度。然后你开始自我怀疑：“这太难了。”或“也许编程不适合我。”我知道你懂这种感受。</p>
<p>我自己在最近就切身体会到了这种感觉。我本身算是个比较自信的PHP攻城狮，打算学习Python—尤其是Django。</p>
<p>我搜索了一些相关资料并找到了看似完美的教程，足够复杂富有挑战，又足够简单不至于击垮我的兴趣。</p>
<p>作为一个基于项目实战的教程，我对完成后的项目相当喜欢。我认为将它添加到我的成长作品集会是很酷的一件事。</p>
<p>跟着教程做到接近80%的时候，我突然产生了一股自我怀疑。我已经看了视频教程并一个个字敲了所有的代码，我已经有了一个简单的项目可以展示给他人，可为什么我感觉反倒没有刚开始那样好？</p>
<p><img src="/2017/09/08/learn-minds-2017-06-19/2.jpg" alt=""></p>
<p>跟着这个教程又花了几个星期的晚上，我有了一个漂亮的完工项目。即便如此，我还是觉得在没有指南的情况下我是不具备重新实现这个项目的技能的。所以，将它放到我的作品集里真的好吗？</p>
<p>将一个在外观和功能上与别人的一模一样的项目展示出来真的说服力吗？而且代码和GitHub教程上的一模一样。</p>
<p>如你所见，跟着教程学习，接触到新的技能，是很棒的。但是只跟着教程学习，你无法掌握作为一名合格的初级工程师所需的更多技能，我指的是：</p>
<ul>
<li>设计和组织项目</li>
<li>了解哪些工具对于一个具体项目是最佳选择</li>
<li>尝试通过搜索来解决遇到的一些问题</li>
<li>解决在实际项目开发中无可避免的一些问题</li>
</ul>
<h2 id="教程是快速上手的好办法"><a href="#教程是快速上手的好办法" class="headerlink" title="教程是快速上手的好办法"></a>教程是快速上手的好办法</h2><hr>
<p>为了避免大家误解，交代一下相关背景，我是一个29岁的初级码农，目前在一家软件开发公司工作。我在一年前转行进入编程行业，</p>
<p>很多新手码农一样，在开始学习高级教程之前我先完成基础的教程。我主要是学习PHP（因为在我开始学习编程的时候听说PHP是全世界最好的语言），我很快就熟悉了语法和一些基本用法。</p>
<p>大概花了9个月的时间，我完成了足够多的教程，有了足够的理解，也有了足够的动力去说服一家软件开发公司给我提供一份工作。（你可以通过这篇文章了解到我是如何说服老板给我工作机会的 take a chance on me and pay me to learn to code.）</p>
<p>让我能在如此短的时间内得到一份编程工作，得益于我创建的可以展示的实际项目。值得注意的是，是<strong>我自己</strong>的项目，而不是跟着教程复制粘贴的那种。</p>
<h2 id="教程也只能帮你到这里了-之后你需要开发实际项目"><a href="#教程也只能帮你到这里了-之后你需要开发实际项目" class="headerlink" title="教程也只能帮你到这里了 之后你需要开发实际项目"></a>教程也只能帮你到这里了 之后你需要开发实际项目</h2><hr>
<p><img src="/2017/09/08/learn-minds-2017-06-19/3.jpeg" alt=""></p>
<p>不要理解错了我的意思–教程是很棒的，尤其是在新手学习基础的情况下。当然，教程的质量是良莠不齐的，解释的详细程度也大相径庭。但是一个教程接着一个教程的学习是无法让你成为一个专业的开发者的。</p>
<p>你必须开发自己的项目。一旦你对你选择的语言的语法和基本的实现有了一定的认识，你就可以开始开发属于自己的东西了，不再是“手把手”式的学习。</p>
<p>当我向别人说这些的时候，通常得到的回应是：“开发什么呢？我一点想法都没有。”</p>
<p>额，实际上没人指望你创造出什么牛逼的东西来，而且你应该不具备这样的技能去做这样的事情，就算你有想法。</p>
<p>这里有一份清单，列出了你可以开发的500个项目，有例子: <a href="http://rosettacode.org/wiki/Category:Programming_Tasks" target="_blank" rel="external">http://rosettacode.org/wiki/Category:Programming_Tasks</a> 。</p>
<p>你也可以开发类似博客这样的项目。是的，有无数个教程都是基于构建博客的。你可能还会复制、粘贴一些代码，这也许不是一个令人印象深刻的项目，但是。。。</p>
<p>开发属于<strong>你自己的博客</strong>。坐下来，在开始之前，制定好每一步的计划和特色功能。搜索并选择一门你想用的语言和框架。了解怎么安装需要的工具，构建开发环境，通过包管理工具安装所需的依赖等。当你卡在某个环节时，Google或者通过可靠的技术社区去解决你遇到的一些问题。</p>
<p>通过这样的方式你的学习效率可能比跟着任何一个教程学习都快很多,你自己开发的项目的在你作品中的价值也远远大于其他几十个跟着教程做的项目的总和。</p>
<p>取决于你选择的项目的复杂程度，在你找工作的时候你的个人作品集里可能就不再需要其他的东西了，只是可能。你的代码可能不是非常出色，但这是你自己写的代码。你可以解释每一行代码的意义，你可以解释你是如何实现的和为什么这样做。</p>
<p>同时，你也证明了你可以管理一个项目，单独完成，学习需要的新技能，并递交最终完成的产品。对于潜在的雇主而言，你现在拥有了几项有价值的技能。</p>
<p>如果花12到18月的时间去学习，还没有找到一份工作，或者说你总感觉实际尚未成熟，<strong>别灰心，不要放弃</strong>。不要开始有这样的想法：你需要花动辄上万的学费去参加什么牛逼的培训班。只需要开始开发你自己的东西你就会惊讶于你进步的速度！</p>
<blockquote>
<p>通过freeCodeCamp找到工作的人数在不断增长可能也是因为它基于项目的学习方式。freeCodeCamp是一个不错的学习平台，不过本文就不替原作者多做宣传了。本文翻译自 <a href="https://medium.freecodecamp.com/how-to-dig-yourself-out-of-the-coding-tutorial-rut-7d3b2232f234" target="_blank" rel="external">https://medium.freecodecamp.com/how-to-dig-yourself-out-of-the-coding-tutorial-rut-7d3b2232f234</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思想 </tag>
            
            <tag> 方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python程序打包问题]]></title>
      <url>http://arvin-he.github.io/2017/09/01/py-packproblems-2017-09-01/</url>
      <content type="html"><![CDATA[<h3 id="ImportError-DLL-load-failed-The-specified-module-could-not-be-found"><a href="#ImportError-DLL-load-failed-The-specified-module-could-not-be-found" class="headerlink" title="ImportError: DLL load failed: The specified module could not be found."></a>ImportError: DLL load failed: The specified module could not be found.</h3><p>win7-64bit或win10-64bit打包python32位程序在win7-32bit系统上运行报错:ImportError: DLL load failed: The specified module could not be found.</p>
<p>Finally,I find the solution:<br>Install <a href="https://www.microsoft.com/de-at/download/details.aspx?id=48145" target="_blank" rel="external">Microsoft Visual C++ 2015 Redistributable Update 3 x86</a>.</p>
<p>注意:</p>
<ol>
<li>选择X86版本</li>
<li>vc_redist.x86.exe 一定要选择update 3版本,之前的版本还是会报错.</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://github.com/tensorflow/tensorflow/issues/7995" target="_blank" rel="external">stackoverflow</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中关于在GUI应用程序读取stdin内容]]></title>
      <url>http://arvin-he.github.io/2017/08/30/py-stdin-2017-08-30/</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>键盘输入的字符串是保存在stdin中的,我在程序中如何将stdin中数据拿到并赋给一个变量? 之前我是通过sys.stdin.readline()来读取stdin中的数据的,但是导致界面卡死,我想问一下你有什么办法?我google一下,没有找到我想要的</p>
<p>data = input()<br>用 sys.stdin.readline 或 input, 都只能读取整行数据. 如果没有按回车键, 调用是阻塞不返回的.</p>
<p>这就是为什么程序界面被卡死的原因.</p>
<p>Qt 里还有个键盘事件的钩子. 需要在终端键盘输入时, 可能需要配置一下.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">QtCore.pyqtRemoveInputHook()</div><div class="line">code.InteractiveConsole(_locals).interact()</div><div class="line">QtCore.pyqtRestoreInputHook()</div></pre></td></tr></table></figure></p>
<p>当QtCore模块第一次导入时，它会安装一个Python输入钩子（即它设置Python的PyOS_InputHook变量的值）。这允许在应用程序运行时在解释器提示符处输入命令。然后可以动态创建新的Qt对象并调用任何现有的Qt对象的方法。输入钩子可能会导致某些类型的应用程序出现问题，特别是那些通过不同手段提供类似设备的应用程序。此功能删除PyQt安装的输入钩。</p>
<p>对于图形界面程序, 最合理的做法还是只用输入控件, LineEdit 等, 不用控制台, 也就是不用 sys.stdin<br>Qt 处理键盘消息应该用键盘事件</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统之镜像备份]]></title>
      <url>http://arvin-he.github.io/2017/08/28/linux-backup-2017-08-28/</url>
      <content type="html"><![CDATA[<h3 id="计算文件拷贝的进度"><a href="#计算文件拷贝的进度" class="headerlink" title="计算文件拷贝的进度"></a>计算文件拷贝的进度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dd_process.sh</span></div><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="comment">####dd 命令反映进度####</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ];<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"需要 盘符名 镜像名"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">	dupath=`du -m --total / --exclude=proc --exclude=media |grep 总用量 |cut -f 1`</div><div class="line">	<span class="built_in">echo</span> <span class="string">"根文件大小为<span class="variable">$dupath</span> M"</span></div><div class="line">	<span class="built_in">let</span> SIZE=<span class="variable">$dupath</span>+200</div><div class="line">    <span class="keyword">while</span> <span class="literal">true</span></div><div class="line">    <span class="keyword">do</span></div><div class="line">    dusize=`du -hm /media/Lark/<span class="variable">$1</span>/<span class="variable">$2</span> |cut -f 1`</div><div class="line">    <span class="built_in">echo</span> <span class="string">"生成文件大小为 <span class="variable">$dusize</span> M"</span></div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$dusize</span> == <span class="variable">$SIZE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"文件生成成功！"</span></div><div class="line">        <span class="built_in">exit</span> 0</div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="keyword">done</span></div></pre></td></tr></table></figure>
<h3 id="将根文件备份到u盘"><a href="#将根文件备份到u盘" class="headerlink" title="将根文件备份到u盘"></a>将根文件备份到u盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="comment">#################################</span></div><div class="line"><span class="comment">###  get img to u_disk                                 ### </span></div><div class="line"><span class="comment">### 功能：将根文件备份到u盘                      ###  </span></div><div class="line"><span class="comment">#################################</span></div><div class="line"><span class="comment">#卸载备份区，保证/media/Lark下只挂载u盘</span></div><div class="line"><span class="keyword">if</span> [ -d /media/Lark/.linuxroot ];<span class="keyword">then</span></div><div class="line">	/bin/umount /media/Lark/.linuxroot</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -ne 0 ];<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"请切换root权限执行"</span></div><div class="line">	<span class="built_in">exit</span> -5</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"请输入 u盘名 镜像名称!"</span></div><div class="line">	<span class="built_in">exit</span> -7</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#检测出u盘个数及盘符名</span></div><div class="line"></div><div class="line">LS_MEDIA_LARK=`ls /media/Lark`</div><div class="line">SELECTED_DISK=</div><div class="line">counter=0</div><div class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /media/Lark`</div><div class="line"><span class="keyword">do</span></div><div class="line">counter=`expr <span class="variable">$counter</span> + 1`</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#echo $counter</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$counter</span> == 0 ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">	<span class="comment">#没有U盘插入，退出</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"没有插入u盘或者没有挂载盘符！！请检测u盘是否可正常识别!"</span></div><div class="line">	<span class="built_in">exit</span> -1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment">#echo "LS_MEDIA_LARK is $LS_MEDIA_LARK "</span></div><div class="line">DISK1=`<span class="built_in">echo</span> <span class="variable">$LS_MEDIA_LARK</span>|awk -F <span class="string">' '</span> <span class="string">'&#123;print $1&#125;'</span>`</div><div class="line">DISK2=`<span class="built_in">echo</span> <span class="variable">$LS_MEDIA_LARK</span>|awk -F <span class="string">' '</span> <span class="string">'&#123;print $2&#125;'</span>`</div><div class="line"><span class="comment">#echo "DISK1 is $DISK1,DISK2 is $DISK2"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"检测目前根文件大小"</span></div><div class="line">	dupath=`du -m --total / --exclude=proc --exclude=media |grep 总用量 |cut -f 1`</div><div class="line">	<span class="built_in">echo</span> <span class="string">"根文件大小为<span class="variable">$dupath</span> M"</span></div><div class="line">	<span class="comment">#size=2700</span></div><div class="line">	<span class="comment">#if [ $dupath -gt $size ];then</span></div><div class="line">	<span class="comment">#echo "注意：当前系统生成镜像大于3GB，生成镜像文件不可使用Lark升级工具烧写，但可使用原厂工具烧写"</span></div><div class="line">	<span class="comment">#	exit 0</span></div><div class="line">	<span class="comment">#fi</span></div><div class="line">	<span class="comment">#TODO :校验U盘可用空间，与根文件做对比</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"####生成根文件镜像####"</span></div><div class="line">	<span class="built_in">let</span> SIZE=<span class="variable">$dupath</span>+10</div><div class="line">	<span class="built_in">echo</span> <span class="string">"生成文件大小为<span class="variable">$SIZE</span> M"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"步骤一:选择存放镜像的U盘"</span></div><div class="line">	<span class="keyword">if</span> <span class="literal">false</span>;<span class="keyword">then</span></div><div class="line">	<span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$DISK2</span>"</span> ] ;<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"共检测出u盘 <span class="variable">$counter</span>个：请选择1.<span class="variable">$DISK1</span> 2.<span class="variable">$DISK2</span>"</span></div><div class="line">	<span class="built_in">read</span> CHOICE</div><div class="line">	</div><div class="line">	<span class="keyword">case</span> <span class="variable">$CHOICE</span> <span class="keyword">in</span></div><div class="line">		1) </div><div class="line">			<span class="built_in">echo</span> <span class="string">"你选择的u盘为<span class="variable">$DISK1</span>"</span></div><div class="line">			SELECTED_DISK=<span class="variable">$DISK1</span></div><div class="line">			;;</div><div class="line">		2)</div><div class="line">			<span class="built_in">echo</span> <span class="string">"你选择的u盘为<span class="variable">$DISK2</span>"</span></div><div class="line">			SELECTED_DISK=<span class="variable">$DISK2</span></div><div class="line">			;;</div><div class="line">		*)</div><div class="line">			<span class="built_in">echo</span> <span class="string">"选择错误"</span></div><div class="line">			<span class="built_in">exit</span> -2</div><div class="line">			;;</div><div class="line">	<span class="keyword">esac</span></div><div class="line">	<span class="keyword">else</span></div><div class="line">			SELECTED_DISK=<span class="variable">$DISK1</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line">	SELECTED_DISK=<span class="variable">$1</span></div><div class="line">	<span class="comment">#检测所选u盘是剩余空间</span></div><div class="line">	</div><div class="line">	DISK_SPACE=`df -hm /media/Lark/<span class="variable">$SELECTED_DISK</span> | sed -n <span class="string">"2p"</span> | awk <span class="string">'&#123;print $4&#125;'</span>`</div><div class="line">	<span class="built_in">echo</span> <span class="string">"剩余空间为 <span class="variable">$DISK_SPACE</span> M"</span></div><div class="line">	</div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$SIZE</span> -gt <span class="variable">$DISK_SPACE</span> ];<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"根文件大小大于备份区最大空间，请删减可删减的文件进行备份"</span></div><div class="line">	<span class="built_in">exit</span> -3</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	</div><div class="line">	<span class="built_in">echo</span> <span class="string">"步骤二:切换到U盘目录，且创建镜像文件，请耐心等待"</span></div><div class="line">	<span class="built_in">cd</span>  /media/Lark/<span class="variable">$SELECTED_DISK</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> <span class="literal">false</span>;<span class="keyword">then</span></div><div class="line">	<span class="comment">#后台检测，一旦U盘断开，或者卸载，则退出此次操作</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span> <span class="literal">true</span></div><div class="line">		<span class="keyword">do</span></div><div class="line">		CHECK_DISK=/media/Lark/<span class="variable">$SELECTED_DISK</span></div><div class="line">		<span class="keyword">if</span> [ ! -d <span class="variable">$CHECK_DISK</span> ];<span class="keyword">then</span></div><div class="line">			<span class="built_in">echo</span> <span class="string">"u盘已断开，请检测其连接性并重新执行"</span></div><div class="line">			<span class="built_in">echo</span></div><div class="line">			<span class="built_in">exit</span> -4</div><div class="line">		<span class="keyword">fi</span></div><div class="line">		<span class="keyword">if</span> [ <span class="variable">$FLAGS</span> == 1 ];<span class="keyword">then</span></div><div class="line">			<span class="built_in">exit</span> 0</div><div class="line">		<span class="keyword">fi</span></div><div class="line">		<span class="keyword">done</span></div><div class="line">	&#125;&amp;</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	</div><div class="line">	IMAGE_NAME=<span class="variable">$2</span><span class="string">".tmp"</span></div><div class="line">	</div><div class="line">	<span class="built_in">echo</span>  <span class="string">"步骤三:生成镜像名:<span class="variable">$IMAGE_NAME</span>"</span></div><div class="line">		touch <span class="variable">$IMAGE_NAME</span></div><div class="line">	<span class="built_in">echo</span>  <span class="string">"步骤四：生成指定大小空文件"</span></div><div class="line">	dd <span class="keyword">if</span>=/dev/zero of=<span class="variable">$IMAGE_NAME</span> bs=1M count=<span class="variable">$SIZE</span></div><div class="line">	</div><div class="line">	<span class="keyword">if</span> [ $? == 0 ]</div><div class="line">		<span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span>  <span class="string">"步骤五：格式化镜像文件"</span></div><div class="line">		mkfs.ext4 -F -L .linuxroot <span class="variable">$IMAGE_NAME</span></div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"dd 操作失误"</span></div><div class="line">		<span class="built_in">exit</span> -1;</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	</div><div class="line">	<span class="keyword">if</span> [ $? == 0 ]</div><div class="line">		<span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"步骤六：挂载镜像文件到mnt目录"</span></div><div class="line">	        mount -o loop <span class="variable">$IMAGE_NAME</span> /mnt</div><div class="line">			</div><div class="line">	    <span class="keyword">if</span> [ $? == 0 ]</div><div class="line">			<span class="keyword">then</span></div><div class="line">			<span class="built_in">echo</span> <span class="string">"步骤七：同步根分区到mnt"</span></div><div class="line">			rsync -axv / /mnt</div><div class="line">		<span class="keyword">fi</span> </div><div class="line">	<span class="keyword">fi</span>	</div><div class="line">	</div><div class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"同步完成"</span></div><div class="line">	<span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"同步失败，请重新执行"</span></div><div class="line"><span class="keyword">fi</span>	</div><div class="line"></div><div class="line">	<span class="keyword">if</span> [ $? == 0 ]</div><div class="line">		<span class="keyword">then</span></div><div class="line">	<span class="comment">#echo "请卸载U盘"</span></div><div class="line">	<span class="built_in">cd</span> /tmp</div><div class="line">	umount /mnt</div><div class="line">	<span class="keyword">if</span> [ $? == 0 ]</div><div class="line">		<span class="keyword">then</span></div><div class="line">		 <span class="built_in">echo</span> <span class="string">"挂载点已卸载"</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">" 镜像已生成！"</span></div><div class="line">	sleep 3</div><div class="line">	<span class="comment">#fuser -km /media/Lark/$SELECTED_DISK</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"镜像修正以便烧写"</span></div><div class="line">	mv /media/Lark/<span class="variable">$SELECTED_DISK</span>/<span class="variable">$IMAGE_NAME</span> /media/Lark/<span class="variable">$SELECTED_DISK</span>/<span class="variable">$2</span><span class="string">".img"</span></div><div class="line">	umount /media/Lark/<span class="variable">$SELECTED_DISK</span></div><div class="line">	<span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"<span class="variable">$SELECTED_DISK</span> 已卸载成功"</span> </div><div class="line">		<span class="built_in">exit</span> 0</div><div class="line">		<span class="keyword">else</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"请卸载并拔除U盘"</span></div><div class="line">	<span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h3 id="系统备份"><a href="#系统备份" class="headerlink" title="系统备份"></a>系统备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -d /media/Lark/.linuxroot ];<span class="keyword">then</span></div><div class="line">	/bin/umount /media/Lark/.linuxroot</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"检测目前根文件大小"</span></div><div class="line">	dupath=`du -m --total / --exclude=proc --exclude=media |grep 总用量 |cut -f 1`</div><div class="line">    fssize=<span class="variable">$dupath</span></div><div class="line">	size=2500</div><div class="line">	<span class="keyword">if</span> [ <span class="variable">$fssize</span> -gt <span class="variable">$size</span> ];<span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"根文件大小大于备份区最大空间，请删减可删减的文件进行备份"</span></div><div class="line">		<span class="built_in">exit</span> 0</div><div class="line">	<span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"检测系统一致性"</span></div><div class="line">	/sbin/e2fsck -f -y  /dev/mmcblk0p6</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"一致性检测失败，请检测重试"</span></div><div class="line">	<span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"扩展备份区到最大限额2.8G"</span></div><div class="line">	/sbin/resize2fs /dev/mmcblk0p6 2600M</div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"扩大分区失败，请重试"</span></div><div class="line">	<span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"挂载系统备份区"</span></div><div class="line"></div><div class="line">/bin/mount -o loop /dev/block/mtd/by-name/linuxfsbk /mnt</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"挂载系统备份区失败，请重试"</span></div><div class="line">	<span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"同步当前系统"</span></div><div class="line"></div><div class="line">/usr/bin/rsync -axv --delete / /mnt </div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"同步当前系统失败，请重试"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"卸载系统备份区"</span></div><div class="line">	/bin/umount /mnt</div><div class="line"></div><div class="line">	<span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"卸载系统备份区失败，请重试"</span></div><div class="line">		<span class="built_in">exit</span> 0</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	<span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"同步完成"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"卸载系统备份区"</span></div><div class="line">/bin/umount /mnt</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"卸载系统备份区失败，请重试"</span></div><div class="line">	<span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"系统备份成功 "</span></div><div class="line"></div><div class="line">sleep 2</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web之REST概念]]></title>
      <url>http://arvin-he.github.io/2017/08/25/web-rest-2017-08-25/</url>
      <content type="html"><![CDATA[<h3 id="REST当中为什么要使用HTTP-PUT"><a href="#REST当中为什么要使用HTTP-PUT" class="headerlink" title="REST当中为什么要使用HTTP PUT"></a>REST当中为什么要使用HTTP PUT</h3><p>REST(Representational State Transfer)是<strong>网络服务接口</strong>的一种<strong>风格</strong>，并不是一个标准，就web service而言，REST要比SOAP（SOAP是标准，不是风格）轻量得多，容易得多。我记得我最初开始接触web service的时候，所有的材料上来就是一大堆的名词，SOAP, WSDL,看得头都要大了，后来提出来的REST就容易理解得多，虽然目前SOAP在企业级的web service中还有一席之地，但是在公共的Internet上，不是REST的服务实在不好意思和人打招呼，我们经常可以看到评价某某服务是RESTful的，但是从来没有听说某某服务是SOAPful的 :-)<br>微软对REST的支持有点晚，自.NET3.5开始，WCF也可以提供RESTful接口。当然，REST不光限于web service，网页服务也可以RESTful，微软的ASP.NET MVC框架提供了直接的REST支持。</p>
<p>因为REST只是风格，不是标准，所以有的方面容易有误解，比如说创建和更新某个URI代表的资源的时候，是用HTTP的PUT还是POST命令。REST常用的四种HTTP命令，GET、DELETE、PUT和POST，对于GET和DELETE，一个是获取资源，一个是删除资源，没什么异议，问题是PUT和POST，两者都有更改指定URI的语义，那么，究竟是用哪一个呢？</p>
<p>有的观点认为，应该用POST来创建一个资源，用PUT来更新一个资源；有的观点认为，应该用PUT来创建一个资源，用POST来更新一个资源；还有的观点认为可以用PUT和POST中任何一个来做创建或者更新一个资源。这些观点都只看到了风格，争论起来也只是争论哪种风格更好，其实，用PUT还是POST，不是看这是创建还是更新资源的动作，这不是风格的问题，而是语义的问题。</p>
<p>REST是一种风格，但是还是依赖于HTTP协议，在HTTP中，PUT被定义为idempotent(幂等)的方法，POST则不是，这是一个很重要的区别。</p>
<p>“Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request.”</p>
<p>上面的话就是说，如果一个方法重复执行多次，产生的效果是一样的，那就是idempotent的。</p>
<p>举一个简单的例子，加入由一个博客系统提供一个Web API，模式是这样<a href="http://superblogging/blogs/post/{blog-name}，很简单，将{blog-name}替换为我们的blog名字，往这个URI发送一个HTTP" target="_blank" rel="external">http://superblogging/blogs/post/{blog-name}，很简单，将{blog-name}替换为我们的blog名字，往这个URI发送一个HTTP</a> PUT或者POST请求，HTTP的body部分就是博文，这是一个很简单的REST API例子。我们应该用PUT方法还是POST方法？取决于这个REST服务的行为是否是idempotent的，假如我们发送两个<a href="http://superblogging/blogs/post/Sample请求，服务器端是什么样的行为？如果产生了两个博客帖子，那就说明这个服务不是idempotent的，因为多次使用产生了副作用了嘛；如果后一个请求把第一个请求覆盖掉了，那这个服务就是idempotent的。前一种情况，应该使用POST方法，后一种情况，应该使用PUT方法。" target="_blank" rel="external">http://superblogging/blogs/post/Sample请求，服务器端是什么样的行为？如果产生了两个博客帖子，那就说明这个服务不是idempotent的，因为多次使用产生了副作用了嘛；如果后一个请求把第一个请求覆盖掉了，那这个服务就是idempotent的。前一种情况，应该使用POST方法，后一种情况，应该使用PUT方法。</a></p>
<p>也许你会觉得这个两个方法的差别没什么大不了的，用错了也不会有什么问题，但是你的服务一放到internet上，如果不遵从HTTP协议的规范，就可能给自己带来麻烦。比如，没准Google Crawler也会访问你的服务，如果让一个不是indempotent的服务可以用indempotent的方法访问，那么你服务器的状态可能就会被Crawler修改，这是不应该发生的。</p>
<h3 id="关于幂等的概念"><a href="#关于幂等的概念" class="headerlink" title="关于幂等的概念"></a>关于幂等的概念</h3><p>根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p>
<p>　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p>
<p>　　* 注意：这里安全的含义仅仅是指是非修改信息。</p>
<p>　　(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等这个概念：</p>
<p>幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br>幂等有一下几种定义：<br>对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。</p>
<p>对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。<br>看完上述解释后，应该可以理解GET幂等的含义了。</p>
<p>但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cnblogs.com/shanyou/archive/2011/10/17/2215930.html" target="_blank" rel="external">REST当中为什么要使用HTTP PUT</a></li>
<li><a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="external">浅谈HTTP中Get与Post的区别</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web之Get和Post区别]]></title>
      <url>http://arvin-he.github.io/2017/08/25/web-getpost-2017-08-25/</url>
      <content type="html"><![CDATA[<h3 id="两种-HTTP-请求方法：GET-和-POST"><a href="#两种-HTTP-请求方法：GET-和-POST" class="headerlink" title="两种 HTTP 请求方法：GET 和 POST"></a>两种 HTTP 请求方法：GET 和 POST</h3><p>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。</p>
<p>GET - 从指定的资源请求数据。</p>
<p>POST - 向指定的资源提交要被处理的数据</p>
<h3 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h3><p>请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：<br><code>/test/demo_form.asp?name1=value1&amp;name2=value2</code></p>
<p>有关 GET 请求的其他一些注释：</p>
<ul>
<li>GET 请求可被缓存</li>
<li>GET 请求保留在浏览器历史记录中</li>
<li>GET 请求可被收藏为书签</li>
<li>GET 请求不应在处理敏感数据时使用</li>
<li>GET 请求有长度限制</li>
<li>GET 请求只应当用于取回数据</li>
</ul>
<h3 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h3><p>请注意，查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST /test/demo_form.asp HTTP/1.1</div><div class="line">Host: w3schools.com</div><div class="line">name1=value1&amp;name2=value2</div></pre></td></tr></table></figure></p>
<p>有关 POST 请求的其他一些注释：</p>
<ul>
<li>OST 请求不会被缓存</li>
<li>POST 请求不会保留在浏览器历史记录中</li>
<li>POST 不能被收藏为书签</li>
<li>POST 请求对数据长度没有要求</li>
</ul>
<h3 id="GET-与-POST区别"><a href="#GET-与-POST区别" class="headerlink" title="GET 与 POST区别"></a>GET 与 POST区别</h3><ol>
<li><p>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456.  POST方法是把提交的数据放在HTTP包的Body中.</p>
</li>
<li><p>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</p>
</li>
<li><p>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</p>
</li>
<li><p>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</p>
</li>
</ol>
<h3 id="一些误区"><a href="#一些误区" class="headerlink" title="一些误区"></a>一些误区</h3><p>误区一：POST可以比GET提交更多更长的数据？<br>由于使用GET方法提交数据时，以?分割URL和传输数据，参数之间以&amp;相连，在URL后面添加需要提交的参数，有人就会说了，浏览器地址栏输入的参数是有限的，而POST不用再地址栏输入，所以POST就比GET可以提交更多的数据。难道真的是这样的么？<br>而实际上，URL不存在参数上限的问题，HTTP协议规范<strong>没有</strong>对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。<br>同时，POST是没有大小限制的，HTTP协议规范也没有进行大小限制。POST数据是没有限制的，<strong>起限制作用的是服务器的处理程序的处理能力。</strong><br>总归一句话，这个限制是针对所有HTTP请求的，与GET、POST没有多少关系。</p>
<p>误区二：POST比GET安全？<br>首先，我们要承认安全的概念有很多种，要是从最基本的肉眼看到就不安全，肉眼看不到那就是安全的概念说呢，GET确实没有POST安全，毕竟小白用户确实可以看到在URL中带有的数据信息，这个你无法狡辩。那么要是往严谨了说呢，POST是不是要比GET安全呢？其实不是的。<br>上面也说了，GET将提交到服务器的数据添加到URL中了，可见；虽然POST的数据，你肉眼看不到，你抓个包看看，在HTTP包的包体中，我们提交的数据时仍然可见的.</p>
<h3 id="比较GET-与-POST"><a href="#比较GET-与-POST" class="headerlink" title="比较GET 与 POST"></a>比较GET 与 POST</h3><p>下面的表格比较了两种 HTTP 方法：GET 和 POST。</p>
<table>
<thead>
<tr>
<th></th>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody>
<tr>
<td>后退按钮/刷新</td>
<td>无害</td>
<td>数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td>
</tr>
<tr>
<td>书签</td>
<td>可收藏为书签</td>
<td>不可收藏为书签</td>
</tr>
<tr>
<td>缓存</td>
<td>能被缓存</td>
<td>不能缓存</td>
</tr>
<tr>
<td>编码类型</td>
<td>application/x-www-form-urlencoded</td>
<td>application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td>
</tr>
<tr>
<td>历史</td>
<td>参数保留在浏览器历史中。</td>
<td>参数不会保存在浏览器历史中。</td>
</tr>
<tr>
<td>对数据长度的限制</td>
<td>是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td>
<td>无限制。</td>
</tr>
<tr>
<td>对数据类型的限制</td>
<td>只允许 ASCII 字符。</td>
<td>没有限制。也允许二进制数据。</td>
</tr>
<tr>
<td>安全性</td>
<td>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！</td>
<td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td>
</tr>
<tr>
<td>可见性</td>
<td>数据在 URL 中对所有人都是可见的。</td>
<td>数据不会显示在 URL 中。</td>
</tr>
</tbody>
</table>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>很多时候，大家都觉的使用GET很方便，毕竟使用POST要用到Form，但是，你要知道，你使用GET方法时，浏览器可能会缓存你的地址等信息，还会留下历史记录，而对于POST方法呢，则不会进行缓存。在开发中，一定要分清楚GET和POST的使用场合，什么时候要使用GET，什么时候要使用POST，自己做到心中有数。</p>
<p>可能，你在Google类似的文章的时候，可能会看到分析POST和PUT区别的文章，这又是一类纠结的东西，更多的时候，我们分析这种东西都是分实际情景，结合设计者的语义去使用.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.w3school.com.cn/tags/html_ref_httpmethods.asp" target="_blank" rel="external">w3cschool</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬虫基础知识(一)]]></title>
      <url>http://arvin-he.github.io/2017/08/25/py-scrapy1-2017-08-25/</url>
      <content type="html"><![CDATA[<h3 id="1-URL"><a href="#1-URL" class="headerlink" title="1. URL"></a>1. URL</h3><p>URL的格式由三部分组成：<br>第一部分是协议(或称为服务方式)。<br>第二部分是存有该资源的主机IP地址(有时也包括端口号)。<br>第三部分是主机资源的具体地址，如目录和文件名等。</p>
<p>爬虫爬取数据时必须要有一个目标的URL才可以获取数据，因此，它是爬虫获取数据的基本依据，准确理解它的含义对爬虫学习有很大帮助。</p>
<h3 id="关于urllib2包"><a href="#关于urllib2包" class="headerlink" title="关于urllib2包"></a>关于urllib2包</h3><p>python 3.X版本是不需要安装urllib2包，urllib和urllib2包集合成在一个包为urllib了.<br>在python3.x版本中，如何使用：urllib2.urlopen()？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"></div><div class="line">response = urllib.request.urlopen(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">print(response.read())</div><div class="line"></div><div class="line">URL = <span class="string">"http://www.baidu.com"</span></div><div class="line">request = urllib.request.Request(URL)</div><div class="line">response = urllib.request.urlopen(request)</div><div class="line">print(response.read())</div></pre></td></tr></table></figure></p>
<h3 id="POST和GET数据传送"><a href="#POST和GET数据传送" class="headerlink" title="POST和GET数据传送"></a>POST和GET数据传送</h3><p>大多数网站都是动态网页，需要你动态地传递参数给它，它做出对应的响应。所以，在访问时，我们需要传递数据给它。</p>
<p>urlopen一般接受三个参数，它的参数如下：<code>urlopen(url, data, timeout)</code><br>第一个参数url即为URL，第二个参数data是访问URL时要传送的数据，第三个timeout是设置超时时间。<br>第二,三个参数是可以不传送的，data默认为空None，timeout默认为 <code>socket._GLOBAL_DEFAULT_TIMEOUT</code></p>
<h4 id="POST方式："><a href="#POST方式：" class="headerlink" title="POST方式："></a>POST方式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"> </div><div class="line">values = &#123;<span class="string">"username"</span>:<span class="string">"xxxx@qq.com"</span>,<span class="string">"password"</span>:<span class="string">"XXXX"</span>&#125;</div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"https://passport.csdn.net/account/login?from=http://my.csdn.net/my/mycsdn"</span></div><div class="line">request = urllib.request.Request(url, data)</div><div class="line">response = urllib.request.urlopen(request)</div><div class="line">print(response.read())</div></pre></td></tr></table></figure>
<h4 id="GET方式："><a href="#GET方式：" class="headerlink" title="GET方式："></a>GET方式：</h4><p>至于GET方式我们可以直接把参数写到网址上面，直接<strong>构建一个带参数的URL</strong>出来即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"> </div><div class="line">values=&#123;&#125;</div><div class="line">values[<span class="string">'username'</span>] = <span class="string">"xxxx@qq.com"</span></div><div class="line">values[<span class="string">'password'</span>]=<span class="string">"XXXX"</span></div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"http://passport.csdn.net/account/login"</span></div><div class="line">geturl = url + <span class="string">"?"</span> + data</div><div class="line">request = urllib.request.Request(geturl)</div><div class="line">response = urllib.request.urlopen(request)</div><div class="line">print(response.read())</div></pre></td></tr></table></figure></p>
<h3 id="python3中urllib的模块分4个子模块"><a href="#python3中urllib的模块分4个子模块" class="headerlink" title="python3中urllib的模块分4个子模块"></a>python3中urllib的模块分4个子模块</h3><p>urllib.request for opening and reading URLs<br>urllib.error containing the exceptions raised by urllib.request<br>urllib.parse for parsing URLs<br>urllib.robotparser for parsing robots.txt files</p>
<h3 id="python3中urllib报错"><a href="#python3中urllib报错" class="headerlink" title="python3中urllib报错"></a>python3中urllib报错</h3><p> 爬虫过程报错：http.client.RemoteDisconnected: Remote end closed connection without response<br> 利用 urllib 发起的请求，UA 默认是 Python-urllib/3.5 而在 chrome 中访问则 user_agent = ‘Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36’，因为服务器根据 UA 来判断拒绝了 python 爬虫。</p>
<p> 在浏览器中可以查看自己浏览器的UA</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之jsonrpc]]></title>
      <url>http://arvin-he.github.io/2017/08/25/py-jsonrpc-2017-08-25/</url>
      <content type="html"><![CDATA[<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server</span></div><div class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</div><div class="line"><span class="keyword">from</span> jsonrpcserver <span class="keyword">import</span> methods</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@methods.add</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span>(<span class="string">'ping'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@methods.add</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hao</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span>(<span class="string">'hao'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@methods.add</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span>(<span class="string">'Hello, %s'</span> % name)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@methods.add</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sum</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span>(a + b)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHttpServer</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># Process request</span></div><div class="line">        request = self.rfile.read(int(self.headers[<span class="string">'Content-Length'</span>])).decode()</div><div class="line">        response = methods.dispatch(request)</div><div class="line">        <span class="comment"># Return response</span></div><div class="line">        self.send_response(response.http_status)</div><div class="line">        self.send_header(<span class="string">'Content-type'</span>, <span class="string">'application/json'</span>)</div><div class="line">        self.end_headers()</div><div class="line">        self.wfile.write(str(response).encode())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    HTTPServer((<span class="string">'localhost'</span>, <span class="number">5000</span>), TestHttpServer).serve_forever()</div></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> jsonrpcclient.http_client <span class="keyword">import</span> HTTPClient</div><div class="line"></div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'ping'</span>)</div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'hao'</span>)</div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'hello'</span>, <span class="string">'Nancy'</span>)</div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'Sum'</span>, <span class="number">5</span>, <span class="number">7</span>)</div><div class="line">HTTPClient(<span class="string">'http://localhost:5000'</span>).request(<span class="string">'lid'</span>)</div></pre></td></tr></table></figure>
<p>先运行服务端,再运行客户端代码</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">--&gt; &#123;&quot;id&quot;: 1, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;ping&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &quot;ping&quot;, &quot;id&quot;: 1&#125; (200 OK)</div><div class="line">--&gt; &#123;&quot;id&quot;: 2, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;hao&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &quot;hao&quot;, &quot;id&quot;: 2&#125; (200 OK)</div><div class="line">--&gt; &#123;&quot;params&quot;: [&quot;Nancy&quot;], &quot;id&quot;: 3, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;hello&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: &quot;Hello, Nancy&quot;, &quot;id&quot;: 3&#125; (200 OK)</div><div class="line">--&gt; &#123;&quot;params&quot;: [5, 7], &quot;id&quot;: 4, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;Sum&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;result&quot;: 12, &quot;id&quot;: 4&#125; (200 OK)</div><div class="line">--&gt; &#123;&quot;id&quot;: 5, &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;lid&quot;&#125;</div><div class="line">&lt;-- &#123;&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;error&quot;: &#123;&quot;code&quot;: -32601, &quot;message&quot;: &quot;Method not found&quot;&#125;, &quot;id&quot;: 5&#125; (404 Not Found)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;js_client.py&quot;, line 7, in &lt;module&gt;</div><div class="line">    HTTPClient(&apos;http://localhost:5000&apos;).request(&apos;lid&apos;)</div><div class="line">  File &quot;C:\Python34\lib\site-packages\jsonrpcclient\client.py&quot;, line 200, in request</div><div class="line">    return self.send(Request(method_name, *args, **kwargs))</div><div class="line">  File &quot;C:\Python34\lib\site-packages\jsonrpcclient\client.py&quot;, line 171, in send</div><div class="line">    return self._send_message(request, **kwargs)</div><div class="line">  File &quot;C:\Python34\lib\site-packages\jsonrpcclient\http_client.py&quot;, line 82, in _send_message</div><div class="line">    log_format=&apos;&lt;-- %(message)s (%(http_code)s %(http_reason)s)&apos;)</div><div class="line">  File &quot;C:\Python34\lib\site-packages\jsonrpcclient\client.py&quot;, line 114, in _process_response</div><div class="line">    response[&apos;error&apos;].get(&apos;data&apos;))</div><div class="line">jsonrpcclient.exceptions.ReceivedErrorResponse: Method not found</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正向代理和反向代理]]></title>
      <url>http://arvin-he.github.io/2017/08/24/web-forwardbackagent-2017-08-24/</url>
      <content type="html"><![CDATA[<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>我们常说的代理也就是只正向代理，正向代理的过程，它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，某些科学上网工具扮演的就是典型的正向代理角色。用浏览器访问 <a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a> 时，被残忍的block，于是你可以在国外搭建一台代理服务器，让代理帮我去请求<code>google.com</code>，代理把请求返回的相应结构再返回给我.</p>
<p><img src="/2017/08/24/web-forwardbackagent-2017-08-24/1.png" alt=""></p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理隐藏了真实的服务端，当我们请求 www.baidu.com 的时候，就像拨打10086一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，www.baidu.com 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx就是性能非常好的反向代理服务器，用来做负载均衡.</p>
<p><img src="/2017/08/24/web-forwardbackagent-2017-08-24/2.png" alt=""></p>
<p>两者的区别在于代理的对象不一样：正向代理代理的对象是客户端，反向代理代理的对象是服务端</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.zhihu.com/question/24723688" target="_blank" rel="external">知乎</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫总结]]></title>
      <url>http://arvin-he.github.io/2017/08/23/py-scrapysummer-2017-08-23/</url>
      <content type="html"><![CDATA[<h3 id="爬虫需要用到的工具"><a href="#爬虫需要用到的工具" class="headerlink" title="爬虫需要用到的工具"></a>爬虫需要用到的工具</h3><p>正则表达式<br>XPATH<br>beautifulsoup<br>requests<br>urllib<br>urllib2<br>scrapy</p>
<p>分布式爬虫<br>学会怎样维护一个所有集群机器能够有效分享的分布式队列就好。最简单的实现是python-rq: <a href="https://github.com/nvie/rq" target="_blank" rel="external">https://github.com/nvie/rq</a></p>
<p>Bloom Filter: Bloom Filters by Example<br>Bloom Filter. 简单讲它仍然是一种hash的方法，但是它的特点是，它可以使用固定的内存（不随url的数量而增长）以O(1)的效率判定url是否已经在set中。可惜天下没有白吃的午餐，它的唯一问题在于，如果这个url不在set中，BF可以100%确定这个url没有看过。但是如果这个url在set中，它会告诉你：这个url应该已经出现过，不过我有2%的不确定性。注意这里的不确定性在你分配的内存足够大的时候，可以变得很小很少。一个简单的教程:<a href="https://llimllib.github.io/bloomfilter-tutorial/" target="_blank" rel="external">Bloom Filters by Example</a></p>
<p>rq和Scrapy的结合：<br>后续处理，网页析取，存储(Mongodb)</p>
<p>你只有一台机器。不管你的带宽有多大，只要你的机器下载网页的速度是瓶颈的话，那么你只有加快这个速度。用一台机子不够的话——用很多台吧！当然，我们假设每台机子都已经进了最大的效率——使用多线程（python的话，多进程吧）。</p>
<p>我们把这100台中的99台运算能力较小的机器叫作slave，另外一台较大的机器叫作master，那么回顾上面代码中的url_queue，如果我们能把这个queue放到这台master机器上，所有的slave都可以通过网络跟master联通，每当一个slave完成下载一个网页，就向master请求一个新的网页来抓取。而每次slave新抓到一个网页，就把这个网页上所有的链接送到master的queue里去。同样，bloom filter也放到master上，但是现在master只发送确定没有被访问过的url给slave。Bloom Filter放到master的内存里，而被访问过的url放到运行在master上的Redis里，这样保证所有操作都是O(1)。（至少平摊是O(1)，Redis的访问效率见:LINSERT – Redis)</p>
<p>考虑如何用python实现：<br>在各台slave上装好scrapy，那么各台机子就变成了一台有抓取能力的slave，在master上装好Redis和rq用作分布式队列。</p>
<p>chrome浏览器 F12开发者工具</p>
<p>selenium<br>phantomjs</p>
<p>PIL<br>opencv<br>pybrain<br>pyspider</p>
<p>代理IP池</p>
<p>不要用1个IP狂抓<br>勤换UA<br>爬取间隔自适应</p>
<p>scrapy/pyspider框架部署</p>
<ul>
<li><a href="https://www.zhihu.com/question/20899988" target="_blank" rel="external">https://www.zhihu.com/question/20899988</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux开机自启]]></title>
      <url>http://arvin-he.github.io/2017/08/18/linux-bash1-2017-08-18/</url>
      <content type="html"><![CDATA[<h3 id="Linux下终端执行自定义命令启动程序"><a href="#Linux下终端执行自定义命令启动程序" class="headerlink" title="Linux下终端执行自定义命令启动程序"></a>Linux下终端执行自定义命令启动程序</h3><p>在/usr/bin目录下一般会存放一个shell脚本,然后在终端输入该shell脚本的名字,就会在终端执行这个shell脚本.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment"># 搜索进程中touchpanel的进程数目,这里是为了保持脚本执行的单个实例</span></div><div class="line">var=`ps -aux |grep <span class="string">"/usr/bin/touchpanel"</span> |wc -l`</div><div class="line"><span class="comment"># 注意空格不能少</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$var</span> -gt 3 ];<span class="keyword">then</span></div><div class="line">    <span class="built_in">exit</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">cd</span> /opt/touchpanel</div><div class="line"></div><div class="line">sudo python3 main.py <span class="variable">$@</span></div></pre></td></tr></table></figure></p>
<h3 id="Linux下如何开机自启应用程序"><a href="#Linux下如何开机自启应用程序" class="headerlink" title="Linux下如何开机自启应用程序"></a>Linux下如何开机自启应用程序</h3><p>编写一个*.desktop文件,然后将该文件放在/etc/xdg/autostart下,然后就会开机自动启动应用程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]</div><div class="line">Type=Application</div><div class="line">Icon=</div><div class="line">Name=TouchPanel</div><div class="line">Comment=xxx</div><div class="line">Categories=GNOME;GTK;System;</div><div class="line">Exec=touchpanel</div><div class="line">StartupNotify=<span class="literal">true</span></div><div class="line">Terminal=<span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h3 id="制作deb安装包"><a href="#制作deb安装包" class="headerlink" title="制作deb安装包"></a>制作deb安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"1. 获取版本号"</span></div><div class="line">version=`awk <span class="string">'NR==2&#123;print $2&#125;'</span> deb/DEBIAN/control`</div><div class="line"><span class="built_in">echo</span> <span class="string">"version = <span class="variable">$&#123;version&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"2. 拷贝资源文件"</span></div><div class="line">mkdir -p deb/opt/pun-admin/res</div><div class="line">mkdir -p deb/usr/bin</div><div class="line">mkdir -p deb/usr/share/applications</div><div class="line">mkdir -p deb/usr/share/pixmaps</div><div class="line">cp res/*.ui deb/opt/pun-admin/res/</div><div class="line">cp res/config.ini deb/opt/pun-admin/res/</div><div class="line">cp res/pun.desktop deb/opt/pun-admin/res/</div><div class="line">cp res/pun-admin.desktop deb/usr/share/applications/</div><div class="line">cp res/*.png deb/usr/share/pixmaps/</div><div class="line">cp res/pun-admin deb/usr/bin/</div><div class="line">cp res/touchpanel.desktop deb/opt/pun-admin/res/</div><div class="line">cp res/touchpanel deb/usr/bin/</div><div class="line"><span class="built_in">echo</span> <span class="string">"3. 拷贝程序"</span></div><div class="line">cp *.py deb/opt/pun-admin/</div><div class="line"><span class="built_in">echo</span> <span class="string">"4. 添加可执行权限"</span></div><div class="line">chmod +x deb/usr/bin/pun-admin</div><div class="line">chmod +x deb/usr/bin/touchpanel</div><div class="line"><span class="built_in">echo</span> <span class="string">"5. dpkg打包"</span></div><div class="line">dpkg-deb --build deb pun-admin-<span class="variable">$&#123;version&#125;</span>.deb</div><div class="line"><span class="built_in">echo</span> <span class="string">"6. 打包结束"</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python的sys.path, PYTHONPATH, os.environ的作用]]></title>
      <url>http://arvin-he.github.io/2017/08/13/py-pyhonpath-2017-08-13/</url>
      <content type="html"><![CDATA[<h3 id="Python搜索模块的路径："><a href="#Python搜索模块的路径：" class="headerlink" title="Python搜索模块的路径："></a>Python搜索模块的路径：</h3><ol>
<li>程序的主目录</li>
<li>PTYHONPATH目录（如果已经进行了设置）</li>
<li>标准连接库目录（一般在/usr/local/lib/python2.X/）</li>
<li>任何的.pth文件的内容（如果存在的话）.新功能，允许用户把有效果的目录添加到模块搜索路径中去, <code>.pth</code>后缀的文本文件中一行一行的地列出目录。</li>
</ol>
<p>这四个组建组合起来就变成了sys.path了</p>
<h3 id="关于sys-path"><a href="#关于sys-path" class="headerlink" title="关于sys.path"></a>关于sys.path</h3><p>在python 环境下使用sys.path.append(path)添加相关的路径，但在退出python环境后自己添加的路径就会自动消失.<br>如何将路径“永久”添加到sys.path?</p>
<ol>
<li>将自己做的py文件放到 site_packages 目录下,但是这样做会导致一个问题，即各类模块都放到此文件夹的话，会导致乱的问题.</li>
<li>使用pth文件，在 site-packages 文件中创建 .pth文件，将模块的路径写进去，一行一个路径，但存在管理上的问题，而且不能在不同的python版本中共享。</li>
<li>使用PYTHONPATH环境变量，在这个环境变量中输入相关的路径，不同的路径之间用逗号（英文的！)分开，如果PYTHONPATH 变量还不存在，可以创建它.路径会自动加入到sys.path中，而且可以在不同的python版本中共享，应该是一样较为方便的方法。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">16</span>]: sys.path</div><div class="line">Out[<span class="number">16</span>]:</div><div class="line">[<span class="string">''</span>,</div><div class="line"> <span class="string">'C:\\Program Files\\Python36\\Scripts\\ipython.exe'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\python36.zip'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\DLLs'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages\\win32'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages\\win32\\lib'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages\\Pythonwin'</span>,</div><div class="line"> <span class="string">'c:\\program files\\python36\\lib\\site-packages\\IPython\\extensions'</span>,</div><div class="line"> <span class="string">'C:\\Users\\Arvin\\.ipython'</span>]</div></pre></td></tr></table></figure>
<h3 id="关于PYTHONPATH"><a href="#关于PYTHONPATH" class="headerlink" title="关于PYTHONPATH"></a>关于PYTHONPATH</h3><h3 id="关于os-environ"><a href="#关于os-environ" class="headerlink" title="关于os.environ"></a>关于os.environ</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">environ是一个字符串对应环境的映像对象</div><div class="line">os.environ.keys() 主目录下所有的key</div><div class="line">os.environ 显示key+内容</div><div class="line"></div><div class="line"># windows：</div><div class="line">· os.environ[&apos;HOMEPATH&apos;]:当前用户主目录。</div><div class="line">os.environ[&apos;TEMP&apos;]:临时目录路径。</div><div class="line">os.environ[PATHEXT&apos;]:可执行文件。</div><div class="line">os.environ[&apos;SYSTEMROOT&apos;]:系统主目录。</div><div class="line">os.environ[&apos;LOGONSERVER&apos;]:机器名。</div><div class="line">os.environ[&apos;PROMPT&apos;]:设置提示符。</div><div class="line"># linux：</div><div class="line">os.environ[&apos;USER&apos;]:当前使用用户。</div><div class="line">os.environ[&apos;LC_COLLATE&apos;]:路径扩展的结果排序时的字母顺序。</div><div class="line">os.environ[&apos;SHELL&apos;]:使用shell的类型。</div><div class="line">os.environ[&apos;LAN&apos;]:使用的语言。</div><div class="line">os.environ[&apos;SSH_AUTH_SOCK&apos;]:ssh的执行路径。</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyQt5加载ui的几种方式]]></title>
      <url>http://arvin-he.github.io/2017/08/12/pyqt-loadui-2017-08-12/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一般界面的创建有两种方式:</p>
<ol>
<li>使用纯代码实现</li>
<li>使用designer来拖拽控件<br>两种方式各有各自的好处,视具体的使用场景来选择.</li>
</ol>
<p>使用纯代码实现时一些属性需要在代码中指定, 或者继承某个控件类并定制添加一些属性和功能.这种方式比较灵活.但是控件太多且是不同种类的控件的话就有点繁琐了.</p>
<p>使用designer的方式是直观,快速,属性可视化,可添加动态属性,这也是使用比较多的方式.在designer中设计好界面后,保存为一个后缀为ui的文件,用文本编辑器打开是一个xml格式的文件,里面指明控件的各个属性.</p>
<p>下面就讲述在代码中加载ui的几种方式.</p>
<h3 id="PyQt5中加载ui的方式"><a href="#PyQt5中加载ui的方式" class="headerlink" title="PyQt5中加载ui的方式"></a>PyQt5中加载ui的方式</h3><p>PyQt5中加载ui的方式主要有3种:</p>
<ol>
<li>直接加载ui文件</li>
<li>将ui文件转成py文件加载</li>
<li>将所有的资源文件(包括ui,图片等)编译成内容是字节的py文件加载</li>
</ol>
<h3 id="直接加载ui文件"><a href="#直接加载ui文件" class="headerlink" title="直接加载ui文件"></a>直接加载ui文件</h3><p>使用uic加载ui文件,看下面代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets, uic, QtCore</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDialog</span><span class="params">(QtWidgets.QDialog)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MyDialog, self).__init__()</div><div class="line">        uic.loadUi(os.path.join(os.path.dirname(__file__), <span class="string">"yourDialog.ui"</span>), self)</div><div class="line">        self.initUI()</div></pre></td></tr></table></figure></p>
<p>ui的控件直接通过<code>self</code>来获取访问,比如<code>self.mylabel.setText(&quot;xxx&quot;)</code>,这是最直接的方式.<br>适用于简单的界面设计.</p>
<h3 id="将ui文件转成py文件加载"><a href="#将ui文件转成py文件加载" class="headerlink" title="将ui文件转成py文件加载"></a>将ui文件转成py文件加载</h3><p>Qt Designer默认继承的object类，但不提供show()显示方法.<br>如何将ui文件转为py文件?<br>使用pyqt5中自带的工具pyuic5,pyuic5是一个可执行文件,在控制台可作为命令使用,具体使用参考下面的脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"></div><div class="line">inputFile = os.path.abspath(os.path.join(<span class="string">"../res"</span>, <span class="string">"serialCom.ui"</span>))</div><div class="line">print(<span class="string">"input file =&#123;&#125;"</span>.format(inputFile))</div><div class="line">outputFile = os.path.abspath(<span class="string">"../serialCom_ui.py"</span>)</div><div class="line">print(<span class="string">"output file =&#123;&#125;"</span>.format(outputFile))</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="comment"># py3.4.3</span></div><div class="line">    subprocess.call([<span class="string">"pyuic5.bat"</span>, inputFile, <span class="string">"-o"</span>, outputFile])</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="comment"># py3.6</span></div><div class="line">    subprocess.call([<span class="string">"pyuic5"</span>, inputFile, <span class="string">"-o"</span>, outputFile])</div><div class="line">print(<span class="string">"build ui done."</span>)</div></pre></td></tr></table></figure></p>
<p>根据上面的脚本会根据ui文件生成一个py文件,那么这个py文件有哪些内容呢?<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_serialDlg</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, serialDlg)</span>:</span></div><div class="line">        serialDlg.setObjectName(<span class="string">"serialDlg"</span>)</div><div class="line">        serialDlg.resize(<span class="number">1024</span>, <span class="number">768</span>)</div><div class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)</div><div class="line">        <span class="comment"># 这里省略了ui控件的属性设定</span></div><div class="line">        ...</div><div class="line">        self.retranslateUi(serialDlg)</div><div class="line">        QtCore.QMetaObject.connectSlotsByName(serialDlg)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, serialDlg)</span>:</span></div><div class="line">        _translate = QtCore.QCoreApplication.translate</div><div class="line">        <span class="comment"># 这里略去了各种翻译的内容</span></div><div class="line">        ...</div></pre></td></tr></table></figure></p>
<p>从这个py看出,这个py文件生成了一个类,里面有2个函数,分别是<code>setupUi</code>和<code>retranslateUi</code>.<br>setupUi中主要是控件的各个属性设置, retranslateUi主要是翻译的内容<br>下面如何在你的代码中加载这个py文件呢?<br>有两种方式<br>第一种: 直接继承这个类, python中支持多继承<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> serialCom_ui <span class="keyword">import</span> Ui_serialDlg <span class="keyword">as</span> serialDlg</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QDialog, serialDlg)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MainWindow, self).__init__()</div><div class="line">        self.setupUi(self)</div></pre></td></tr></table></figure></p>
<p>第二种: 在你的代码中实例化<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> serialCom_ui <span class="keyword">import</span> Ui_serialDlg <span class="keyword">as</span> serialDlg</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QDialog)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MainWindow, self).__init__()</div><div class="line">        self.serial_dlg=serialDlg()  </div><div class="line">        self.serial_dlg.setupUi(self)</div></pre></td></tr></table></figure></p>
<p>为什么要生成py文件呢?主要是为了实现代码与界面分离。<br>缺点:ui文件有了更改,必须要再次生成对应的py文件,如果你忘记生成了,就会造成ui不同步.<br>优点:不再需要这个ui文件了.这就相当于使用纯代码的实现方式了.但这样的方式显然比纯代码要快,而且能做到<br>逻辑代码和界面代码分离.</p>
<h3 id="生成qrc文件编译资源文件生成py文件加载"><a href="#生成qrc文件编译资源文件生成py文件加载" class="headerlink" title="生成qrc文件编译资源文件生成py文件加载"></a>生成qrc文件编译资源文件生成py文件加载</h3><p>当有ui文件还有图片等资源文件时,怎么办呢?当图片重命名了怎么办? 当然是利用Qt的资源系统来整合这些资源文件了.<br>Qt 资源系统是一个跨平台的资源机制，用于将程序运行时所需要的资源以二进制的形式存储于可执行文件内部。<br>如果你的程序需要加载特定的资源（图标、文本翻译等），那么，将其放置在资源文件中，就再也不需要担心这些文件的丢失。<br>也就是说，如果你将资源以资源文件形式存储，它是会编译到可执行文件内部。<br>怎么做呢?<br>一般把用到的资源文件放到一个文件夹中,如res/,然后创建一个资源文件*.qrc,该文件生成在res文件夹中<br>qrc文件的内容有,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;RCC&gt;&lt;qresource prefix=&quot;..&quot;&gt;</div><div class="line">  &lt;file mtime=&quot;1502414194.7463503&quot;&gt;favor.ico&lt;/file&gt;</div><div class="line">  &lt;file mtime=&quot;1494807198.7998164&quot;&gt;favor.png&lt;/file&gt;</div><div class="line">  &lt;file mtime=&quot;1502505175.56&quot;&gt;serialCom.ui&lt;/file&gt;</div><div class="line">  &lt;file mtime=&quot;1502414207.032053&quot;&gt;uninst.ico&lt;/file&gt;</div><div class="line">&lt;/qresource&gt;&lt;/RCC&gt;</div></pre></td></tr></table></figure></p>
<p>python中创建qrc文件,然后通过pyrcc5将资源文件编译到py文件中去<br>这里不仅仅生成qrc文件,还对qrc文件记录了资源文件最后的修改时间,并做了修改时间对比,<br>一旦有ui文件被修改了,就会重新编译生成res_rc.py文件.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自动编译加载资源</span></div><div class="line">_res_path = os.path.abspath(<span class="string">'res'</span>)</div><div class="line">RCC = <span class="string">"""&lt;RCC&gt;&lt;qresource prefix="&#123;&#125;"&gt;\n&#123;&#125;&lt;/qresource&gt;&lt;/RCC&gt;"""</span></div><div class="line">FILE = <span class="string">"""  &lt;file mtime="&#123;&#125;"&gt;&#123;&#125;&lt;/file&gt;\n"""</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_loadRes</span><span class="params">(res, root)</span>:</span></div><div class="line">    <span class="comment"># res文件夹的路径</span></div><div class="line">    package = os.path.dirname(res)</div><div class="line">    <span class="comment"># 生成资源清单数据</span></div><div class="line">    res_files = []</div><div class="line">    <span class="keyword">for</span> a, _, files <span class="keyword">in</span> os.walk(res):</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</div><div class="line">            <span class="keyword">if</span> f == <span class="string">"res.qrc"</span> <span class="keyword">or</span> f.endswith(<span class="string">".ts"</span>):</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            ff = os.path.join(a, f)</div><div class="line">            res_files.append((os.path.getmtime(ff), os.path.relpath(</div><div class="line">                ff, res).replace(os.path.sep, <span class="string">"/"</span>)))</div><div class="line"></div><div class="line">    res_qrc_data = RCC.format(</div><div class="line">        os.path.relpath(package, root).replace(os.path.sep, <span class="string">"/"</span>),</div><div class="line">        <span class="string">""</span>.join([FILE.format(*x) <span class="keyword">for</span> x <span class="keyword">in</span> res_files]))</div><div class="line"></div><div class="line">    <span class="comment"># 更新资源清单</span></div><div class="line">    res_qrc = os.path.join(res, <span class="string">"res.qrc"</span>)</div><div class="line">    res_updated = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="comment"># 检查现有资源清单是否已是最新</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(res_qrc):</div><div class="line">        <span class="keyword">with</span> open(res_qrc, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</div><div class="line">            res_updated = f.read() == res_qrc_data</div><div class="line"></div><div class="line">    <span class="comment"># 更新资源清单</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> res_updated:</div><div class="line">        <span class="keyword">with</span> open(res_qrc, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(res_qrc_data)</div><div class="line"></div><div class="line">    <span class="comment"># 编译资源清单</span></div><div class="line">    res_rc_py = os.path.join(package, <span class="string">"res_rc.py"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(res_rc_py) <span class="keyword">or</span> \</div><div class="line">            os.path.getmtime(res_rc_py) &lt; os.path.getmtime(res_qrc):</div><div class="line">        <span class="comment"># 通过指定 `cwd` 解决 win32 下 pyrcc5 不支持中文路径的问题</span></div><div class="line">        rel_res_rc_py = os.path.relpath(res_rc_py, package)</div><div class="line">        rel_res_qrc = os.path.relpath(res_qrc, package)</div><div class="line"></div><div class="line">        subprocess.check_call(</div><div class="line">            [<span class="string">"pyrcc5"</span>, <span class="string">"-o"</span>, rel_res_rc_py, rel_res_qrc], cwd=package)</div><div class="line"></div><div class="line"><span class="comment"># 加载资源</span></div><div class="line"><span class="keyword">for</span> path, b, c <span class="keyword">in</span> os.walk(_res_path):</div><div class="line">    <span class="keyword">if</span> path.endswith(os.path.sep + <span class="string">"res"</span>):</div><div class="line">        _loadRes(path, _res_path)</div></pre></td></tr></table></figure></p>
<p>有了<code>res_rc.py</code>文件,然后将<code>res_rc.py</code>文件import进来,然后让问资源文件通过指定路径访问.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</div><div class="line"></div><div class="line"><span class="keyword">import</span> res_rc</div><div class="line"><span class="comment"># :不能少, 路径就是qrc里的prefix+资源文件名</span></div><div class="line">pixmap = QPixamp(<span class="string">":/prefix/download.jpeg"</span>)</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadUi</span><span class="params">(widget, uiFileName)</span>:</span></div><div class="line">    <span class="string">"""加载 ui. 从 uiFileName 指定的 ui 文件加载."""</span></div><div class="line">    f = QtCore.QFile(uiFileName)</div><div class="line">    f.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text)</div><div class="line">    <span class="keyword">assert</span> f.isOpen()</div><div class="line">    ts = QtCore.QTextStream(f)</div><div class="line">    ts.setCodec(<span class="string">"utf-8"</span>)</div><div class="line">    code_string = io.StringIO()</div><div class="line">    winfo = uic.compiler.UICompiler().compileUi(ts, code_string, <span class="keyword">True</span>, <span class="string">"_rc"</span>)</div><div class="line">    ui_globals = &#123;<span class="string">"__name__"</span>: widget.__module__&#125;</div><div class="line">    exec(code_string.getvalue(), ui_globals)</div><div class="line">    Ui = ui_globals[winfo[<span class="string">"uiclass"</span>]]</div><div class="line">    ui = Ui()</div><div class="line">    ui.setupUi(widget)</div><div class="line">    <span class="keyword">return</span> ui</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QDialog, serialDlg)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(MainWindow, self).__init__()</div><div class="line">        self.ui = loadUi(self, <span class="string">":../serialCom.ui"</span>)</div></pre></td></tr></table></figure></p>
<p>然后所有ui里的控件对象都可以使用self.ui来访问了.</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python代码结构]]></title>
      <url>http://arvin-he.github.io/2017/08/11/py-codestruct-2017-08-11/</url>
      <content type="html"><![CDATA[<h3 id="构造项目层次结构文件夹的最佳方式是什么？"><a href="#构造项目层次结构文件夹的最佳方式是什么？" class="headerlink" title="构造项目层次结构文件夹的最佳方式是什么？"></a>构造项目层次结构文件夹的最佳方式是什么？</h3><p>理想的特性是易于维护，IDE-friendliness，源代码管理分支/合并的适用性，以及易于生成的软件包。<br>特别是：</p>
<ol>
<li>在哪里放置源代码？</li>
<li>在哪里放置应用程序启动脚本？</li>
<li>将IDE项目放在哪里？</li>
<li>在哪里放置单元/验收测试？</li>
<li>在哪里放置non-Python数据如配置文件？</li>
<li>在哪里放置non-Python源(如 C++) 用于 pyd/二进制扩展模块？</li>
</ol>
<h3 id="文件系统-python-项目的结构"><a href="#文件系统-python-项目的结构" class="headerlink" title="文件系统 python 项目的结构"></a>文件系统 python 项目的结构</h3><p>执行：</p>
<ul>
<li><p>命名与你的项目相关的目录。 例如如果你的项目名为”Twisted”，则为它的源文件命名为<code>top-level</code>目录 Twisted 。 当你发布时，应该包含版本号后缀： <code>Twisted-2.5</code> 。</p>
</li>
<li><p>创建一个目录 <code>Twisted/bin</code> 并将你的可执行文件放在那里，如果你有任何不给他们一个 .py 扩展，即使它们是 python 源文件。 不要将任何代码放入其中，除非导入和调用在你的项目中定义的主函数。 ( 轻微皱纹：在 Windows 上，解释器是由文件扩展名选择的，你的Windows 用户实际上想要<code>. py</code>扩展。 因此，当你为 Windows 打包时，你可能想要添加它。 不幸的是，我不知道如何让这个过程自动化。 考虑到在POSIX上，<code>. py</code> 扩展是一个惟一的缺点，而在 Windows 上，缺少的是一个实际的Bug，如果你的userbase包含 Windows 用户，那么你可能想要选择<code>. py</code> 扩展。)</p>
</li>
<li><p>如果你的项目是作为单个 python expressable源文件,然后把它放到目录和名称与你的项目相关的东西。 例如 Twisted/twisted.py 。如果你需要多个源文件，请创建一个软件包，并将源文件放入其中。 例如 Twisted/twisted/internet.py 。</p>
</li>
<li><p>把你的单元测试的sub-package ( 注意:这意味着单一 python 源文件选项上面是一个技巧——你总是需要至少一个其他文件为你的单元测试) 你的包。 例如 Twisted/twisted/test/ 。当然，让它成为一个带有 <code>Twisted/twisted/test/__init__.p</code>y的包。 将测试放在文件中 <code>Twisted/twisted/test/test_internet.py</code></p>
</li>
<li>添加 Twisted/README 和 Twisted/setup.py 来解释并安装你的软件，如果你觉得不错的话。</li>
</ul>
<p>不要：</p>
<ul>
<li>将你的源放在一个名为 src 或者 lib的目录中。 这使得没有安装就很难运行。</li>
<li>将测试放在 python 软件包之外。 这使得对已经安装版本运行测试变得困难。</li>
<li>创建一个包,只有 <code>__init__.py</code> 然后把所有代码放进 <code>__init__.py</code> 。 只是做一个模块而不是一个包，它更简单。</li>
<li>试图让 python 能够导入你的模块或者包，而不让用户将包含它的目录添加到导入路径( 或者通过PYTHONPATH或者其他的机制) 。 你不将正确处理所有情况下,用户会生气你当你的软件并不在他们的环境中工作。</li>
</ul>
<h3 id="一个项目目录组织方式"><a href="#一个项目目录组织方式" class="headerlink" title="一个项目目录组织方式"></a>一个项目目录组织方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Project/</div><div class="line">|-- bin/</div><div class="line">|   |-- project</div><div class="line">|</div><div class="line">|-- project/</div><div class="line">|   |-- test/</div><div class="line">|   |   |-- __init__.py</div><div class="line">|   |   |-- test_main.py</div><div class="line">|   |   </div><div class="line">|   |-- __init__.py</div><div class="line">|   |-- main.py</div><div class="line">|</div><div class="line">|-- setup.py</div><div class="line">|-- README</div></pre></td></tr></table></figure>
<h3 id="另一个项目目录组织方式"><a href="#另一个项目目录组织方式" class="headerlink" title="另一个项目目录组织方式"></a>另一个项目目录组织方式</h3><p>当设置一个项目时，( 或者目录结构)的布局是很重要的。 合理的布局意味着潜在的贡献者不必花费大量的时间去寻找一段代码；文件位置是直观的。 因为我们正在处理一个现有项目，这意味着你可能需要移动一些东西。<br>让我们从头开始。 大多数项目有许多top-level文件( 像 setup.py, README.md，requirements.txt, 等) 。 然后，每个项目都应该有三个目录：<br>包含项目文档的文档目录<br>名为项目名称的目录，它存储实际的python 包<br>在两个位置中的一个测试目录<br>在包含测试代码和资源的软件包目录下<br>作为一个独立的顶级目录，可以更好地了解你的文件如何组织，下面是一个对我的项目的布局的简化快照，sandman:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ pwd</div><div class="line">~/code/sandman</div><div class="line">$ tree</div><div class="line">.</div><div class="line">|- LICENSE</div><div class="line">|- README.md</div><div class="line">|- TODO.md</div><div class="line">|- docs</div><div class="line">| |-- conf.py</div><div class="line">| |-- generated</div><div class="line">| |-- index.rst</div><div class="line">| |-- installation.rst</div><div class="line">| |-- modules.rst</div><div class="line">| |-- quickstart.rst</div><div class="line">| |-- sandman.rst</div><div class="line">|- requirements.txt</div><div class="line">|- sandman</div><div class="line">| |-- __init__.py</div><div class="line">| |-- exception.py</div><div class="line">| |-- model.py</div><div class="line">| |-- sandman.py</div><div class="line">| |-- test</div><div class="line">| |-- models.py</div><div class="line">| |-- test_sandman.py</div><div class="line">|- setup.py</div></pre></td></tr></table></figure></p>
<p>你可以看到，有一些顶级文件，一个文档目录( 生成的是一个空目录，sphinx将在其中放置生成的文档)，一个sandman目录和一个在sandman下的测试目录。</p>
<h3 id="再一个项目目录组织方式"><a href="#再一个项目目录组织方式" class="headerlink" title="再一个项目目录组织方式"></a>再一个项目目录组织方式</h3><p>假设你的项目名为foo, 我比较建议的最方便快捷目录结构这样就足够了:</p>
<pre><code>Foo/
|-- bin/
|   |-- foo
|
|-- foo/
|   |-- tests/
|   |   |-- __init__.py
|   |   |-- test_main.py
|   |
|   |-- __init__.py
|   |-- main.py
|
|-- docs/
|   |-- conf.py
|   |-- abc.rst
|
|-- setup.py
|-- requirements.txt
|-- README
</code></pre><p>简要解释一下:</p>
<p>bin/: 存放项目的一些可执行文件，当然你可以起名script/之类的也行。<br>foo/: 存放项目的所有源代码。(1) 源代码中的所有模块、包都应该放在此目录。不要置于顶层目录。(2) 其子目录tests/存放单元测试代码； (3) 程序的入口最好命名为main.py。<br>docs/: 存放一些文档。<br>setup.py: 安装、部署、打包的脚本。<br>requirements.txt: 存放软件依赖的外部Python包列表。<br>README: 项目说明文件。<br>除此之外，有一些方案给出了更加多的内容。比如LICENSE.txt,ChangeLog.txt文件等，我没有列在这里，因为这些东西主要是项目开源的时候需要用到。如果你想写一个开源软件，目录该如何组织，可以参考<a href="https://jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/" target="_blank" rel="external">这篇文章</a>。</p>
<p>下面，再简单讲一下我对这些目录的理解和个人要求吧。</p>
<h3 id="关于README的内容"><a href="#关于README的内容" class="headerlink" title="关于README的内容"></a>关于README的内容</h3><p>这个我觉得是每个项目都应该有的一个文件，目的是能简要描述该项目的信息，让读者快速了解这个项目。<br>它需要说明以下几个事项:</p>
<ul>
<li>软件定位，软件的基本功能。</li>
<li>运行代码的方法: 安装环境、启动命令等。</li>
<li>简要的使用说明。</li>
<li>代码目录结构说明，更详细点可以说明软件的基本原理。</li>
<li>常见问题说明。</li>
</ul>
<p>我觉得有以上几点是比较好的一个README。在软件开发初期，由于开发过程中以上内容可能不明确或者发生变化，并不是一定要在一开始就将所有信息都补全。但是在项目完结的时候，是需要撰写这样的一个文档的。<br>可以参考Redis源码中<a href="https://github.com/antirez/redis#what-is-redis" target="_blank" rel="external">Readme</a>的写法，这里面简洁但是清晰的描述了Redis功能和源码结构。</p>
<h3 id="关于requirements-txt和setup-py"><a href="#关于requirements-txt和setup-py" class="headerlink" title="关于requirements.txt和setup.py"></a>关于requirements.txt和setup.py</h3><h4 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h4><p>一般来说，用setup.py来管理代码的打包、安装、部署问题。业界标准的写法是用Python流行的打包工具setuptools来管理这些事情。这种方式普遍应用于开源项目中。不过这里的核心思想不是用标准化的工具来解决这些问题，而是说，<strong>一个项目一定要有一个安装部署工具</strong>，能快速便捷的在一台新机器上将环境装好、代码部署好和将程序运行起来。</p>
<p>这个我是踩过坑的。</p>
<p>我刚开始接触Python写项目的时候，安装环境、部署代码、运行程序这个过程全是手动完成，遇到过以下问题:</p>
<ol>
<li>安装环境时经常忘了最近又添加了一个新的Python包，结果一到线上运行，程序就出错了。</li>
<li>Python包的版本依赖问题，有时候我们程序中使用的是一个版本的Python包，但是官方的已经是最新的包了，通过手动安装就可能装错了。</li>
<li>如果依赖的包很多的话，一个一个安装这些依赖是很费时的事情。</li>
<li>新同学开始写项目的时候，将程序跑起来非常麻烦，因为可能经常忘了要怎么安装各种依赖。</li>
</ol>
<p>setup.py可以将这些事情自动化起来，提高效率、减少出错的概率。”复杂的东西自动化，能自动化的东西一定要自动化。”是一个非常好的习惯。</p>
<p>setuptools的文档比较庞大，刚接触的话，可能不太好找到切入点。学习技术的方式就是看他人是怎么用的，可以参考一下Python的一个Web框架，flask是如何写的: <a href="https://github.com/pallets/flask/blob/master/setup.py" target="_blank" rel="external">setup.py</a></p>
<p>当然，简单点自己写个安装脚本（deploy.sh）替代setup.py也未尝不可。</p>
<h4 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h4><p>这个文件存在的目的是:</p>
<ol>
<li>方便开发者维护软件的包依赖。将开发过程中新增的包添加进这个列表中，避免在setup.py安装依赖时漏掉软件包。</li>
<li>方便读者明确项目使用了哪些Python包。<br>这个文件的格式是每一行包含一个包依赖的说明，通常是flask&gt;=0.10这种格式，要求是这个格式能被pip识别，这样就可以简单的通过 <code>pip install -r requirements.txt</code>来把所有Python包依赖都装好了。具体格式说明： <a href="https://pip.readthedocs.io/en/1.1/requirements.html" target="_blank" rel="external">点这里</a>。</li>
</ol>
<h3 id="关于配置文件的使用方法"><a href="#关于配置文件的使用方法" class="headerlink" title="关于配置文件的使用方法"></a>关于配置文件的使用方法</h3><p>注意，在上面的目录结构中，没有将conf.py放在源码目录下，而是放在docs/目录下。</p>
<p>很多项目对配置文件的使用做法是:</p>
<ol>
<li>配置文件写在一个或多个python文件中，比如此处的conf.py。</li>
<li>项目中哪个模块用到这个配置文件就直接通过import conf这种形式来在代码中使用配置。</li>
</ol>
<p>这种做法我不太赞同:</p>
<ol>
<li>这让单元测试变得困难（因为模块内部依赖了外部配置）</li>
<li>另一方面配置文件作为用户控制程序的接口，应当可以由用户自由指定该文件的路径。</li>
<li>程序组件可复用性太差，因为这种贯穿所有模块的代码硬编码方式，使得大部分模块都依赖conf.py这个文件。</li>
</ol>
<p>所以，我认为配置的使用，更好的方式是，<br>模块的配置都是可以灵活配置的，不受外部配置文件的影响。<br>程序的配置也是可以灵活控制的。<br>能够佐证这个思想的是，用过nginx和mysql的同学都知道，nginx、mysql这些程序都可以自由的指定用户配置。</p>
<p>所以，不应当在代码中直接import conf来使用配置文件。上面目录结构中的conf.py，是给出的一个配置样例，不是在写死在程序中直接引用的配置文件。可以通过给main.py启动参数指定配置路径的方式来让程序读取配置内容。当然，这里的conf.py你可以换个类似的名字，比如settings.py。或者你也可以使用其他格式的内容来编写配置文件，比如settings.yaml之类的。</p>
<p>对于文档的态度<br>目录结构中有设docs/这个目录，用于存放代码文档。实际过程中，据我观察，80%以上的程序员都没有单独写文档的习惯。一般文档写得比较好的，都是一些开源项目。</p>
<p>在普通的项目中，确实没必要写非常详细的文档，我更赞同的是现在的一种流行的风格: “在代码中写文档”。即在写代码的时候，在代码文件里把软件/模块的简要用法写明。简单有用。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://monklof.com/post/19/" target="_blank" rel="external">如何设计结构清晰的目录结构</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python模块和包导入机制]]></title>
      <url>http://arvin-he.github.io/2017/08/11/py-relativeimport-2017-08-11/</url>
      <content type="html"><![CDATA[<h3 id="将代码封装成包"><a href="#将代码封装成包" class="headerlink" title="将代码封装成包"></a>将代码封装成包</h3><p>在文件系统上组织你的代码，并确保每个目录都定义了一个<code>__init__.py</code>文件,</p>
<h3 id="关于相对导入"><a href="#关于相对导入" class="headerlink" title="关于相对导入"></a>关于相对导入</h3><p>当导入模块时,报错:python systemerror parent module ‘’ not loaded cannot perform relative import,这就是相对导入的问题了.</p>
<p>涉及到相对导入时，package所对应的文件夹必须正确的被python解释器视作package，而不是普通文件夹。<br>否则由于不被视作package，无法利用package之间的嵌套关系实现python中包的相对导入。</p>
<p>文件夹被python解释器视作package需要满足两个条件：</p>
<ol>
<li>文件夹中必须有<code>__init__.py</code>文件，该文件可以为空，但必须存在该文件。</li>
<li>不能作为顶层模块来执行该文件夹中的py文件（即不能作为主函数的入口）。</li>
</ol>
<p>补充：在”from YY import XX”这样的代码中，无论是XX还是YY，只要被python解释器视作package，就会首先调用该package的<code>__init__.py</code>文件。<br>如果都是package，则调用顺序是YY，XX。</p>
<h3 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">test</div><div class="line">|-- a.py</div><div class="line">|-- b.py</div><div class="line">`-- __init__.py</div><div class="line"></div><div class="line"><span class="comment"># a.py</span></div><div class="line"><span class="keyword">from</span> test.b <span class="keyword">import</span> c</div><div class="line">print(c)</div><div class="line"><span class="comment"># b.py</span></div><div class="line">c = <span class="string">"test"</span></div><div class="line"></div><div class="line"><span class="comment">#运行 a.py</span></div><div class="line">python3 a.py</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"a.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> <span class="keyword">from</span> test.b <span class="keyword">import</span> c</div><div class="line">ImportError: No module named <span class="string">'test.b'</span></div></pre></td></tr></table></figure>
<p>test 的上级目录不在 sys.path 中。<br>还有，不要直接执行一个包里边的文件。如果真需要执行一个包里的模块（而又不使用 distribute 提供的 entry point 安装配置），<br>请使用 <code>python3 -m test.a</code> 这样子。</p>
<h3 id="将文件夹加入到-sys-path"><a href="#将文件夹加入到-sys-path" class="headerlink" title="将文件夹加入到 sys.path"></a>将文件夹加入到 sys.path</h3><p>你无法导入你的 Python 代码因为它所在的目录不在 sys.path 里。你想将添加新目录到 Python 路径，但是不想硬链接到你的代码。<br>有两种常用的方式将新目录添加到 sys.path:</p>
<ol>
<li>使用 PYTHONPATH环境变量来添加</li>
<li>第二种方法是创建一个.pth 文件，将目录列举出来<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># myapplication.pth</div><div class="line">/some/dir</div><div class="line">/other/dir</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这个<code>.pth</code> 文件需要放在某个 Python 的 <code>site-packages</code> 目录，通常位于<code>/usr/local/lib/python3.3/site-packages</code> 或者 <code>˜/.local/lib/python3.3/sitepackages</code>。当解释器启动<br>时，<code>.pth</code> 文件里列举出来的存在于文件系统的目录将被添加到 <code>sys.path</code>。安装一个<code>.pth</code>文件可能需要管理员权限，如果它被添加到系统级的 Python 解释器。</p>
<h3 id="import的几种方式"><a href="#import的几种方式" class="headerlink" title="import的几种方式"></a>import的几种方式</h3><ol>
<li><p>常规导入和重命名导入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys <span class="keyword">as</span> system</div></pre></td></tr></table></figure>
</li>
<li><p>使用from语句导入<br>只想要导入一个模块或库中的某个部分:<br><code>from functools import lru_cache</code><br>从一个包中导入多个项：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path, walk, unlink</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> uname, remove</div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面是通过多次从同一个模块中导入实现的。当然，你也可以使用圆括号一次性导入多个项<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> (path, walk, unlink, uname, </div><div class="line">                remove, rename)</div><div class="line">```                </div><div class="line"></div><div class="line">也可以这样</div><div class="line">```python</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path, walk, unlink, uname, \</div><div class="line">                remove, rename</div></pre></td></tr></table></figure></p>
<ol>
<li>相对导入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">my_package/</div><div class="line">    __init__.py</div><div class="line">    subpackage1/</div><div class="line">        __init__.py</div><div class="line">        module_x.py</div><div class="line">        module_y.py</div><div class="line">    subpackage2/</div><div class="line">        __init__.py</div><div class="line">        module_z.py</div><div class="line">    module_a.py</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在顶层的<code>__init__.py</code>文件中，输入以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> subpackage1</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> subpackage2</div></pre></td></tr></table></figure></p>
<p>然后进入subpackage1文件夹，编辑其中的<code>__init__.py</code>文件，输入以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> module_x</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> module_y</div></pre></td></tr></table></figure></p>
<p>编辑<code>module_x.py</code>文件，输入以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .module_y <span class="keyword">import</span> spam <span class="keyword">as</span> ham</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ham()</div></pre></td></tr></table></figure></p>
<p>编辑module_y.py文件，输入以下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'spam '</span> * <span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<p>打开终端，cd至<code>my_package</code>包所在的文件夹，但<strong>不要进入</strong>my_package。在这个文件夹下运行Python解释器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> my_package</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: my_package.subpackage1.module_x</div><div class="line">Out[<span class="number">2</span>]: </div><div class="line"></div><div class="line">In [<span class="number">3</span>]: my_package.subpackage1.module_x.main()</div><div class="line">spam spam spam</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> 如果你想要跨越多个文件层级进行导入，只需要使用多个句点即可。不过，PEP 328建议<strong>相对导入的层级不要超过两层</strong>。<br>还要注意一点，如果你往module_x.py文件中添加了<code>if __name__ == &#39;__main__&#39;:</code>，然后试图运行这个文件，<br>你会碰到一个很难理解的错误。编辑一下文件，试试看吧！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> . module_y <span class="keyword">import</span> spam <span class="keyword">as</span> ham</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ham()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># This won't work!</span></div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<p>从终端进入subpackage1文件夹，执行以下命令：<br>使用的是Python 2，你应该会看到下面的错误信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;module_x.py&quot;, line 1, in </div><div class="line">    from . module_y import spam as ham</div><div class="line">ValueError: Attempted relative import in non-package</div></pre></td></tr></table></figure></p>
<p>使用的是Python 3，错误信息是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;module_x.py&quot;, line 1, in </div><div class="line">    from . module_y import spam as ham</div><div class="line">SystemError: Parent module &apos;&apos; not loaded, cannot perform relative import</div></pre></td></tr></table></figure></p>
<p>这指的是，module_x.py是某个包中的一个模块，而你试图以脚本模式执行，但是这种模式不支持相对导入。<br>如果你想在自己的代码中使用这个模块，那么你必须将其添加至Python的导入检索路径（import search path）。最简单的做法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.path.append(<span class="string">'/path/to/folder/containing/my_package'</span>)</div><div class="line"><span class="keyword">import</span> my_package</div></pre></td></tr></table></figure></p>
<p>注意，你需要添加的是<code>my_package</code>的上一层文件夹路径，而不是<code>my_package</code>本身。原因是<code>my_package</code>就是我们想要使用的包，<br>所以如果你添加它的路径，那么将无法使用这个包。</p>
<ol>
<li>可选导入（Optional imports）<br>希望优先使用某个模块或包，但是同时也想在没有这个模块或包的情况下有备选，你就可以使用可选导入这种方式。<br>正如下面示例所示，可选导入的使用很常见，是一个值得掌握的技巧。这样做可以导入支持某个软件的多种版本或者实现性能提升。以github2包中的代码为例：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="comment"># For Python 3</span></div><div class="line">    <span class="keyword">from</span> http.client <span class="keyword">import</span> responses</div><div class="line"><span class="keyword">except</span> ImportError:  <span class="comment"># For Python 2.5-2.7</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">from</span> httplib <span class="keyword">import</span> responses  <span class="comment"># NOQA</span></div><div class="line">    <span class="keyword">except</span> ImportError:  <span class="comment"># For Python 2.4</span></div><div class="line">        <span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> BaseHTTPRequestHandler <span class="keyword">as</span> _BHRH</div><div class="line">        responses = dict([(k, v[<span class="number">0</span>]) <span class="keyword">for</span> k, v <span class="keyword">in</span> _BHRH.responses.items()])</div></pre></td></tr></table></figure>
</li>
</ol>
<p>lxml包也有使用可选导入方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> urlparse <span class="keyword">import</span> urljoin</div><div class="line">    <span class="keyword">from</span> urllib2 <span class="keyword">import</span> urlopen</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="comment"># Python 3</span></div><div class="line">    <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</div><div class="line">    <span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</div></pre></td></tr></table></figure></p>
<ol>
<li>局部导入<br>当你在局部作用域中导入模块时，你执行的就是局部导入。如果你在Python脚本文件的顶部导入一个模块，那么你就是在将该模块导入至全局作用域，这意味着之后的任何函数或方法都可能访问该模块。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys  <span class="comment"># global scope</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_root</span><span class="params">(a)</span>:</span></div><div class="line">    <span class="comment"># This import is into the square_root functions local scope</span></div><div class="line">    <span class="keyword">import</span> math</div><div class="line">    <span class="keyword">return</span> math.sqrt(a)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_pow</span><span class="params">(base_num, power)</span>:</span></div><div class="line">    <span class="keyword">return</span> math.pow(base_num, power)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(square_root(<span class="number">49</span>))</div><div class="line">    print(my_pow(<span class="number">2</span>, <span class="number">3</span>))</div></pre></td></tr></table></figure>
</li>
</ol>
<p>我们将sys模块导入至全局作用域，但我们并没有使用这个模块。<br>然后，在<code>square_root</code>函数中，我们将math模块导入至该函数的局部作用域，这意味着math模块只能在<code>square_root</code>函数内部使用。<br>如果我们试图在<code>my_pow</code>函数中使用math，会引发NameError.</p>
<p>使用局部作用域的好处之一，是你使用的模块可能需要很长时间才能导入，如果是这样的话，将其放在某个不经常调用的函数中或许更加合理，而不是直接在全局作用域中导入。老实说，我几乎从没有使用过局部导入，主要是因为如果模块内部到处都有导入语句，会很难分辨出这样做的原因和用途。<strong>根据约定，所有的导入语句都应该位于模块的顶部</strong>。<br>或者有的函数你只需使用一次可以选择局部导入.</p>
<h3 id="导入注意事项"><a href="#导入注意事项" class="headerlink" title="导入注意事项"></a>导入注意事项</h3><p>在导入模块方面，有几个程序员常犯的错误。这里介绍两个:</p>
<ul>
<li>循环导入（circular imports）</li>
<li>覆盖导入（Shadowed imports，暂时翻译为覆盖导入）</li>
</ul>
<h4 id="循环导入"><a href="#循环导入" class="headerlink" title="循环导入"></a>循环导入</h4><p>如果你创建两个模块，二者相互导入对方，那么就会出现循环导入。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># a.py</span></div><div class="line"><span class="keyword">import</span> b</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_test</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"in a_test"</span>)</div><div class="line">    b.b_test()</div><div class="line"></div><div class="line">a_test()</div></pre></td></tr></table></figure></p>
<p>然后在同个文件夹中创建另一个模块，将其命名为b.py。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> a</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">b_test</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'In test_b"'</span>)</div><div class="line">    a.a_test()</div><div class="line"></div><div class="line">b_test()</div></pre></td></tr></table></figure></p>
<p>如果你运行任意一个模块，都会引发AttributeError。这是因为这两个模块都在试图导入对方。简单来说，模块a想要导入模块b，但是因为模块b也在试图导入模块a（这时正在执行），模块a将无法完成模块b的导入。一般来说，<strong>你应该做的是重构代码，避免发生这种情况</strong>。</p>
<h4 id="覆盖导入"><a href="#覆盖导入" class="headerlink" title="覆盖导入"></a>覆盖导入</h4><p>当你创建的模块与标准库中的模块同名时，如果你导入这个模块，就会出现覆盖导入。举个例子，创建一个名叫math.py的文件，在其中写入如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_root</span><span class="params">(number)</span>:</span></div><div class="line">    <span class="keyword">return</span> math.sqrt(number)</div><div class="line"></div><div class="line">square_root(<span class="number">72</span>)</div></pre></td></tr></table></figure></p>
<p>现在打开终端，试着运行这个文件，你会得到以下回溯信息（traceback）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"math.py"</span>, line <span class="number">1</span>, <span class="keyword">in</span> </div><div class="line">    <span class="keyword">import</span> math</div><div class="line">  File <span class="string">"/Users/michael/Desktop/math.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> </div><div class="line">    square_root(<span class="number">72</span>)</div><div class="line">  File <span class="string">"/Users/michael/Desktop/math.py"</span>, line <span class="number">4</span>, <span class="keyword">in</span> square_root</div><div class="line">    <span class="keyword">return</span> math.sqrt(number)</div><div class="line">AttributeError: module <span class="string">'math'</span> has no attribute <span class="string">'sqrt'</span></div></pre></td></tr></table></figure></p>
<p>这到底是怎么回事？其实，你运行这个文件的时候，Python解释器首先在当前运行脚本所处的的文件夹中查找名叫math的模块。在这个例子中，解释器找到了我们正在执行的模块，试图导入它。但是我们的模块中并没有叫sqrt的函数或属性，所以就抛出了AttributeError。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://juejin.im/entry/570c6b6771cfe40067310370" target="_blank" rel="external">https://juejin.im/entry/570c6b6771cfe40067310370</a></li>
<li>[cookbook]</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyQt5遇到的一些问题]]></title>
      <url>http://arvin-he.github.io/2017/08/10/pyqt-somequestions-2017-08-10/</url>
      <content type="html"><![CDATA[<h3 id="关于QButtonGroup的问题"><a href="#关于QButtonGroup的问题" class="headerlink" title="关于QButtonGroup的问题"></a>关于QButtonGroup的问题</h3><p>在循环中对按钮做属性修改,比如setchecked属性.<br>之前将所有的button对象放到QButtonGroup中,然后在循环中设置属性,代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> btn <span class="keyword">in</span> self.buttonGroup.buttons():</div><div class="line">    btn.setCheckable(<span class="keyword">True</span>)</div><div class="line">    btn.setChecked(<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>最后结果是在groupbutton中的最后一个button会被设置为checked状态,其他的按钮都没有被设置为checked状态.</p>
<p>解决办法:将按钮对象放在一个list里,然后遍历list里的按钮对象就行了.后来查了文档,放在QButtonGroup中的按钮对象,在放入QButtonGroup之前必须具有SetCheckabled为true这个属性.否则无法设置setchecked这个属性.</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyQt5使用QStackedwidget]]></title>
      <url>http://arvin-he.github.io/2017/08/08/pyqt-stackedwidget-2017-08-08/</url>
      <content type="html"><![CDATA[<p>QListWidget和QStackedWidget在ui文件中.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> uic</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</div><div class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> loadJson</div><div class="line"><span class="keyword">from</span> page1 <span class="keyword">import</span> ControlPanel</div><div class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> loadJson</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlPanel2</span><span class="params">(QtWidgets.QWidget)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></div><div class="line">        super(ControlPanel2, self).__init__(parent)</div><div class="line">        self._config = loadJson()</div><div class="line">        self.ctrlpanelWidth = self._config[<span class="string">'controlpanel'</span>][<span class="string">'width'</span>]</div><div class="line">        self.ctrlpanelHeight = self._config[<span class="string">'controlpanel'</span>][<span class="string">'height'</span>]</div><div class="line">        self.ctrl_panel = ControlPanel()</div><div class="line">        self.initUI()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.ui = uic.loadUi(os.path.join(</div><div class="line">            os.path.dirname(__file__), <span class="string">"res/ctrlpanel.ui"</span>), self)</div><div class="line">        self.setFixedSize(self.ctrlpanelWidth, self.ctrlpanelHeight)</div><div class="line">        <span class="keyword">for</span> i, key <span class="keyword">in</span> enumerate(sorted(self._config[<span class="string">"panels"</span>].keys())):</div><div class="line">            item = QtWidgets.QListWidgetItem(self.ui.panellist)</div><div class="line">            item.setText(key)</div><div class="line">            self.ui.panellist.insertItem(i, item)</div><div class="line">            self.ui.stackedWidget.insertWidget(i, QtWidgets.QLabel(<span class="string">"&#123;&#125;"</span>.format(key)))  </div><div class="line">        <span class="comment"># 设置qss</span></div><div class="line">        self.setStyleSheet(</div><div class="line">            <span class="string">"QListWidget::item&#123;width: 65px; height: 35px; text-align: center;&#125;"</span>)</div><div class="line">        self.ui.panellist.setCurrentRow(<span class="number">0</span>)</div><div class="line">        self.ui.stackedWidget.setCurrentIndex(<span class="number">0</span>)</div><div class="line">        self.ui.panellist.currentRowChanged.connect(self.on_showPage)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_showPage</span><span class="params">(self, index)</span>:</span></div><div class="line">        <span class="comment"># index = self.ui.panellist.currentIndex()</span></div><div class="line">        print(<span class="string">"current index ="</span>, index)</div><div class="line">        self.ui.stackedWidget.setCurrentIndex(index)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyQt5长按按钮循环执行命令]]></title>
      <url>http://arvin-he.github.io/2017/08/07/pyqt-longpressbtn-2017-08-07/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> uic</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</div><div class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> loadJson</div><div class="line"><span class="keyword">from</span> punggol_rpc <span class="keyword">import</span> punggol_exec</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlPanel</span><span class="params">(QtWidgets.QWidget)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></div><div class="line">        super(ControlPanel, self).__init__(parent)</div><div class="line">        self._config = loadJson()</div><div class="line">        self.ctrlpanelWidth = self._config[<span class="string">'controlpanel'</span>][<span class="string">'width'</span>]</div><div class="line">        self.ctrlpanelHeight = self._config[<span class="string">'controlpanel'</span>][<span class="string">'height'</span>]</div><div class="line">        self.initUI()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">        self.ui = uic.loadUi(os.path.join(</div><div class="line">            os.path.dirname(__file__), <span class="string">"res/ctrlpanel.ui"</span>), self)</div><div class="line">        self.setFixedSize(self.ctrlpanelWidth, self.ctrlpanelHeight)</div><div class="line">        <span class="keyword">for</span> attr <span class="keyword">in</span> dir(self.ui):</div><div class="line">            obj = getattr(self.ui, attr)</div><div class="line">            <span class="keyword">if</span> isinstance(obj, QtWidgets.QPushButton) <span class="keyword">or</span> \</div><div class="line">               isinstance(obj, QtWidgets.QToolButton):</div><div class="line">                obj.setAutoRepeat(<span class="keyword">True</span>)</div><div class="line">                obj._repeate = <span class="keyword">False</span></div><div class="line">                obj.clicked.connect(</div><div class="line">                    functools.partial(self.on_handleClicked, obj))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_handleClicked</span><span class="params">(self, btn)</span>:</span></div><div class="line">        <span class="keyword">if</span> btn.isDown():</div><div class="line">            <span class="keyword">if</span> btn._repeate <span class="keyword">is</span> <span class="keyword">False</span>:</div><div class="line">                btn._repeate = <span class="keyword">True</span></div><div class="line">                btn.setAutoRepeatInterval(<span class="number">50</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.on_pressed(btn)</div><div class="line">        <span class="keyword">elif</span> btn._repeate <span class="keyword">is</span> <span class="keyword">True</span>:</div><div class="line">            btn._repeate = <span class="keyword">False</span></div><div class="line">            self.on_released(btn)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.on_clicked(btn)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_clicked</span><span class="params">(self, btn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> btn.property(<span class="string">"clicked_cmd"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                punggol_exec(btn.property(<span class="string">"clicked_cmd"</span>))</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(e)</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_pressed</span><span class="params">(self, btn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> btn.property(<span class="string">"pressed_cmd"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                punggol_exec(btn.property(<span class="string">"pressed_cmd"</span>))</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(e)</div><div class="line">            <span class="keyword">return</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_released</span><span class="params">(self, btn)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> btn.property(<span class="string">"released_cmd"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                punggol_exec(btn.property(<span class="string">"released_cmd"</span>))</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(e)</div><div class="line">            <span class="keyword">return</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python删除windows下的目录]]></title>
      <url>http://arvin-he.github.io/2017/08/07/py-deteledironwindows-2017-08-07/</url>
      <content type="html"><![CDATA[<p>windows启动目录:<code>C:\Users\aron\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code><br>在windows下启动目录下添加一个<code>killkingsoft.py</code>脚本,然后每次开机自动执行该脚本.<br>注意:在windows下启动目录下的脚本或者bat文件都会在开机时自动执行.</p>
<p>之前使用<code>shutil.rmtree  os.remove  os.rmdir</code>都没有成功,都报出如下错误:<br><code>PermissionError: [WinError 5] 拒绝访问。: &#39;c:\\ProgramData\\kingsoft&#39;</code><br>后来找到解决办法,如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line">   </div><div class="line"><span class="keyword">import</span> errno, os, stat, shutil</div><div class="line"></div><div class="line"></div><div class="line">kingSoft = os.path.join(<span class="string">"c:\\"</span>, <span class="string">"ProgramData"</span>, <span class="string">"kingsoft"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleRemoveReadonly</span><span class="params">(func, path, exc)</span>:</span></div><div class="line">  excvalue = exc[<span class="number">1</span>]</div><div class="line">  <span class="keyword">if</span> func <span class="keyword">in</span> (os.rmdir, os.remove) <span class="keyword">and</span> excvalue.errno == errno.EACCES:</div><div class="line">      os.chmod(path, stat.S_IRWXU| stat.S_IRWXG| stat.S_IRWXO) <span class="comment"># 0777</span></div><div class="line">      func(path)</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">      <span class="keyword">raise</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> os.path.exists(kingSoft):</div><div class="line">    shutil.rmtree(kingSoft, ignore_errors=<span class="keyword">False</span>, onerror=handleRemoveReadonly)</div><div class="line">    print(<span class="string">"delete kingsoft success"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"no such dir or file"</span>)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python使用cx_freeze打包应用程序]]></title>
      <url>http://arvin-he.github.io/2017/08/04/py-cxfreeze-2017-08-04/</url>
      <content type="html"><![CDATA[<h3 id="python应用程序打包"><a href="#python应用程序打包" class="headerlink" title="python应用程序打包"></a>python应用程序打包</h3><p>python下应用程序打包有py2exe, pyinstaller和cx_freeze这3个第三方库,</p>
<p>目前python3.6不支持py2exe和pyinstaller,在win7 下 python3.6 使用 py2exe 或 pyinstaller 都报 Indexerror： tuple index out of range.</p>
<p>但pyinstaller和py2exe在python3.4版本可用.</p>
<h3 id="使用cx-freeze打包应用程序"><a href="#使用cx-freeze打包应用程序" class="headerlink" title="使用cx_freeze打包应用程序"></a>使用cx_freeze打包应用程序</h3><p>用cx_freeze打包出来的包文件很大,一个简单的程序打包出来大概有230M左右.<br>里面包括了python的runtime等各种依赖.</p>
<ol>
<li><p>安装cx_freeze<br><code>pip install cx_freeze</code></p>
</li>
<li><p>创建setup.py脚本<br>在你的工程的根目录下创建setup.py脚本,<code>setup.py</code>脚本可以是其他名字,如<code>setup_cx_freeze.py</code>,通常约定俗成是’setup.py’.只要不要和你的应用程序的脚本命令冲突就行.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setup.py</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> cx_Freeze <span class="keyword">import</span> setup, Executable</div><div class="line"><span class="comment"># 依赖关系被自动检测，但可能需要微调</span></div><div class="line">build_exe_options = &#123;<span class="string">"packages"</span>: [<span class="string">"os"</span>], <span class="string">"excludes"</span>: [<span class="string">"tkinter"</span>]&#125;</div><div class="line"><span class="comment"># GUI应用程序在Windows上需要不同的基础（默认值为控制台应用程序)</span></div><div class="line">base = <span class="keyword">None</span></div><div class="line"><span class="keyword">if</span> sys.platform == <span class="string">"win32"</span>:</div><div class="line">    base = <span class="string">"Win32GUI"</span></div><div class="line"></div><div class="line">setup(  name = <span class="string">"guifoo"</span>,</div><div class="line">        version = <span class="string">"0.1"</span>,</div><div class="line">        description = <span class="string">"My GUI application!"</span>,</div><div class="line">        options = &#123;<span class="string">"build_exe"</span>: build_exe_options&#125;,</div><div class="line">        executables = [Executable(<span class="string">"guifoo.py"</span>, base=base)])</div></pre></td></tr></table></figure>
</li>
<li><p>创建应用程序打包目录(这是错误的)</p>
</li>
</ol>
<p><del>打包的应用程序和依赖要放到一个文件夹中去, 这个文件夹必须在打包前创建好,</del><br><del>通常在应用程序根目录下新建一个build文件夹</del></p>
<ol>
<li>执行打包命令<br>执行打包命令: <code>python setup.py build</code>, 其中<code>setup.py</code>就是上面你写的脚本, build是打包的命令的一个选项.<br>使用<code>python setup_cx_freeze.py --help-commands</code>来查看cx-freeze的命令, <code>setup_cx_freeze.py</code>是打包脚本,也可是是其他的名字<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">python setup_cx_freeze.py --help-commands</div><div class="line">Standard commands:</div><div class="line">  build            build everything needed to install</div><div class="line">  build_py         &quot;build&quot; pure Python modules (copy to build directory)</div><div class="line">  build_ext        build C/C++ extensions (compile/link to build directory)</div><div class="line">  build_clib       build C/C++ libraries used by Python extensions</div><div class="line">  build_scripts    &quot;build&quot; scripts (copy and fixup #! line)</div><div class="line">  clean            clean up temporary files from &apos;build&apos; command</div><div class="line">  install          install everything from build directory</div><div class="line">  install_lib      install all Python modules (extensions and pure Python)</div><div class="line">  install_headers  install C/C++ header files</div><div class="line">  install_scripts  install scripts (Python or otherwise)</div><div class="line">  install_data     install data files</div><div class="line">  sdist            create a source distribution (tarball, zip file, etc.)</div><div class="line">  register         register the distribution with the Python package index</div><div class="line">  bdist            create a built (binary) distribution</div><div class="line">  bdist_dumb       create a &quot;dumb&quot; built distribution</div><div class="line">  bdist_rpm        create an RPM distribution</div><div class="line">  bdist_wininst    create an executable installer for MS Windows</div><div class="line">  check            perform some checks on the package</div><div class="line">  upload           upload binary package to PyPI</div><div class="line"></div><div class="line">Extra commands:</div><div class="line">  install_exe      install executables built from Python scripts</div><div class="line">  bdist_msi        create a Microsoft Installer (.msi) binary distribution</div><div class="line">  build_exe        build executables from Python scripts</div><div class="line"></div><div class="line">usage: setup_cx_freeze.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]</div><div class="line">   or: setup_cx_freeze.py --help [cmd1 cmd2 ...]</div><div class="line">   or: setup_cx_freeze.py --help-commands</div><div class="line">   or: setup_cx_freeze.py cmd --help</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="打包成-msi格式"><a href="#打包成-msi格式" class="headerlink" title="打包成*.msi格式"></a>打包成*.msi格式</h3><p>在命令行窗口输入:<code>python setup.py bdist_msi</code>,回车,就会在build目录下生成一个*.msi格式的软件安装包</p>
<h3 id="制作exe安装包"><a href="#制作exe安装包" class="headerlink" title="制作exe安装包"></a>制作exe安装包</h3><p>windows下通常分发软件都是<code>*.exe</code>格式的,<code>*.msi</code>也可以,python的分发包就是<code>*.msi</code>格式的.</p>
<p>但是python打包出来的文件都在一个文件夹,并不是一个exe文件,而且图标, 配置文件并不会被打包进来.此外该文件夹的体积很大.</p>
<p>考虑到上面的种种情况, windows下需要将上面文件夹的文件再次压缩打包成一个exe, 比较好的工具是NSIS.</p>
<ol>
<li><p>安装NSIS<br>NSIS有window版和unicode版本, 注意添加相关环境变量</p>
</li>
<li><p>编写打包脚本<br>创建一个打包脚本,如pack.nsi, 然后在该脚本中写脚本</p>
</li>
<li><p>执行命令脚本打包<br>命令: <code>makensis pack.nsi</code></p>
</li>
</ol>
<h3 id="制作deb包"><a href="#制作deb包" class="headerlink" title="制作deb包"></a>制作deb包</h3><p>linux下分发软件是deb包的形式</p>
<h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>使用cx_freeze打包python程序,在打包sqlalchemy程序时,<code>C:\programs File\Python36\Lib\site-packages\sqlalchemy\sql\default_comparator.pyc</code>这个模块没有被打包进来,但是其他模块都被打包进来了.<br>解决办法: 复制<code>default_comparator.py</code>文件或者在<code>__pychae__</code>目录下复制<code>default_comparator.pyc</code>到你的打包目录中对应的目录.然后再通过NSIS打包.</p>
<p>在python3.4中使用cx_freeze打包能将sqlalchemy中的<code>default_comparator.pyc</code>打包,在python3.6却唯独漏掉这个<code>default_comparator.pyc</code>,原因未知,<br>解决办法:<br>在<code>cx_freeze</code>的<code>setup.py</code>脚本中的<code>build_exe_options</code>中的packages中添加sqlalchemy,这样就会将sqlalchemy完成打包进来,不会漏掉一个模块,格式如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 依赖会自动检测,但会需要微调</span></div><div class="line">build_exe_options = &#123;</div><div class="line">    <span class="string">"packages"</span>: [<span class="string">"sqlalchemy"</span>],</div><div class="line">    <span class="string">"excludes"</span>: [<span class="string">"tkinter"</span>],</div><div class="line">    <span class="string">"includes"</span>: [],</div><div class="line">    <span class="string">"include_files"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="关于cx-freeze的setup-py的脚本问题"><a href="#关于cx-freeze的setup-py的脚本问题" class="headerlink" title="关于cx_freeze的setup.py的脚本问题"></a>关于cx_freeze的setup.py的脚本问题</h3><p>使用cx-freeze进行打包时,setup.py必须放在程序运行脚本的根目录下,如果将setup.py放到同级的一个文件夹中(如make文件夹,为了不污染源代码),打包出来后的exe运行报错.提示模块找不到.</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyQt5添加动态属性及访问]]></title>
      <url>http://arvin-he.github.io/2017/08/04/pyqt-dynamicproperty-2017-08-04/</url>
      <content type="html"><![CDATA[<h3 id="在ui文件中添加动态属性"><a href="#在ui文件中添加动态属性" class="headerlink" title="在ui文件中添加动态属性"></a>在ui文件中添加动态属性</h3><p>如下图所示:在属性编辑器中点击”+”按钮, 添加的属性有很多类型,一般选择string或者ByteArray, 最好选择ByteArray,如果选择string还会涉及到需要翻译的问题.</p>
<p><img src="/2017/08/04/pyqt-dynamicproperty-2017-08-04/1.png" alt=""></p>
<p>然后设置你的动态属性名称:</p>
<p><img src="/2017/08/04/pyqt-dynamicproperty-2017-08-04/2.png" alt=""></p>
<h3 id="在你的代码中访问ui中设置的动态属性"><a href="#在你的代码中访问ui中设置的动态属性" class="headerlink" title="在你的代码中访问ui中设置的动态属性"></a>在你的代码中访问ui中设置的动态属性</h3><p>如何遍历ui对象中的所有按钮对象<br>如何在循环中给btn连接信号槽<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></div><div class="line">    self.ui = uic.loadUi(os.path.join(</div><div class="line">        os.path.dirname(__file__), <span class="string">"res/ctrlpanel.ui"</span>), self)</div><div class="line">    self.setFixedSize(self.ctrlpanelWidth, self.ctrlpanelHeight)</div><div class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> dir(self.ui):</div><div class="line">        <span class="comment"># getattr 根据属性名称获取属性的值或对象</span></div><div class="line">        obj = getattr(self.ui, attr)</div><div class="line">        <span class="keyword">if</span> isinstance(obj, QtWidgets.QPushButton) <span class="keyword">or</span> isinstance(obj, QtWidgets.QToolButton):</div><div class="line">            <span class="comment"># 注意:这里有一个闭包的问题,这里用functools.partial解决了</span></div><div class="line">            obj.clicked.connect(functools.partial(self.on_clicked, obj))</div></pre></td></tr></table></figure></p>
<p>代码中访问ui设置的动态属性<br>一般思维定势使用’.’来访问对象的属性,但是ui中的动态属性无法通过’.’访问,<br>而是使用<code>property()</code>函数来访问动态属性.如<code>btn.property(&quot;btn_cmd&quot;)</code></p>
<h3 id="关于QToolButton和QPushButton"><a href="#关于QToolButton和QPushButton" class="headerlink" title="关于QToolButton和QPushButton"></a>关于QToolButton和QPushButton</h3><p>如果你想在按钮上添加图片,并且让文字显示在图标下面,那么请使用QToolButton,<br>不要使用QPushButton, QPushButton添加图标后,其文字是默认显示在图标右边,而不是下面.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">button = QToolButton()</div><div class="line">button.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)</div><div class="line">button.setIcon(myIcon)</div><div class="line">button.setText(<span class="string">"Sample text"</span>)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyQt5控件提升和插件]]></title>
      <url>http://arvin-he.github.io/2017/08/02/pyqt-promptplugin-2017-08-02/</url>
      <content type="html"><![CDATA[<h3 id="PyQt控件提升-promotion"><a href="#PyQt控件提升-promotion" class="headerlink" title="PyQt控件提升(promotion)"></a>PyQt控件提升(promotion)</h3><p>常用控件有标准的属性和方法, 但在一些情况下，现有的控件不具备一些你需要的特性或行为或属性时，这就需要你自己继承基础控件，然后添加你自己的特性或属性，<br>比如QTableWidget，当你需要对表格中内容进行右键菜单或者接收键盘事件时.原本的QTableWidget是默认没有右键菜单和接收键盘事件，需要你去重写一些函数，或者重写一些事件，然后提升.</p>
<p>第一步：定义一个类，并继承QTableWidgets<br>第二步：重写一些事件或者添加你定制的属性或方法<br>第三步：在QT Designer中提升</p>
<p><img src="/2017/08/02/pyqt-promptplugin-2017-08-02/1.png" alt=""></p>
<p>在QT Designer中打开你的ui，然后选中你要提升的控件，右击提升为，填好“提升的类名称”：就是你继承并定义的类<br>头文件：就是你继承定义的类所在的头文件名称<br>点击“添加”，在上面要添加头文件所在的路径<br>最后点击“提升”</p>
<p><img src="/2017/08/02/pyqt-promptplugin-2017-08-02/2.png" alt=""></p>
<p>如何在QTableWidgets添加右键菜单<br>在属性编辑中，就会发现对象的类名称变为你自定义的类名称了，如上图所示。<br>提升时最好在designer中提升，在代码中做提升不知道怎么做，因为最后，打开ui文件发现，ui文件相比没有提升的是有不同的，如下图所示。</p>
<p><img src="/2017/08/02/pyqt-promptplugin-2017-08-02/3.png" alt=""></p>
<h3 id="自定义PyQt控件-插件法"><a href="#自定义PyQt控件-插件法" class="headerlink" title="自定义PyQt控件(插件法)"></a>自定义PyQt控件(插件法)</h3><p>自定义控件一般是在原有控件的基础上定制你专有的属性和方法,然后封装成一个控件,可是让你在designer中拖拽这个你封装的控件.<br>最后将# myplugins.py放在<code>C:\Program Files\Python36\Lib\site-packages\pyqt5-tools\plugins\designer</code>目录下.<br>方法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># myplugins.py</span></div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtDesigner</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">py_property</span><span class="params">(typeName)</span>:</span></div><div class="line">    <span class="string">"""定义 Qt 属性"""</span></div><div class="line">    values = &#123;&#125;</div><div class="line">    getter = values.get</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setter</span><span class="params">(self, value)</span>:</span></div><div class="line">        values[self] = value</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resetter</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> values[self]</div><div class="line">    <span class="keyword">return</span> QtCore.pyqtProperty(typeName, getter, setter, resetter)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyPushButton</span><span class="params">(QtWidgets.QPushButton)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent)</span>:</span></div><div class="line">        super(PyPushButton, self).__init__(parent)</div><div class="line"></div><div class="line">    signal_pressed = QtCore.pyqtSignal(str)</div><div class="line">    signal_released = QtCore.pyqtSignal(str)</div><div class="line"></div><div class="line">    py_text = py_property(<span class="string">"QString"</span>)</div><div class="line">    py_clicked = py_property(<span class="string">"QString"</span>)</div><div class="line">    py_pressed = py_property(<span class="string">"QString"</span>)</div><div class="line">    py_released = py_property(<span class="string">"QString"</span>)</div><div class="line">    py_checked = py_property(<span class="string">"QString"</span>)</div><div class="line">    py_enabled = py_property(<span class="string">"QString"</span>)</div><div class="line">    py_tag = py_property(<span class="string">"QString"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyButtonPlugin</span><span class="params">(QtDesigner.QPyDesignerCustomWidgetPlugin)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(PyButtonPlugin, self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createWidget</span><span class="params">(self, parent)</span>:</span></div><div class="line">        <span class="keyword">return</span> PyPushButton(parent)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"PyPushButton"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">group</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"MyPlugins"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">includeFile</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"myplugins/widgets/pushbutton.h"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isContainer</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">domXml</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"""</span></div><div class="line"><span class="string">&lt;ui language="c++"&gt;</span></div><div class="line"><span class="string">    &lt;widget class="PyPushButton" name="PyPushButton"&gt;</span></div><div class="line"><span class="string">        &lt;property name="geometry"&gt;</span></div><div class="line"><span class="string">            &lt;rect&gt;</span></div><div class="line"><span class="string">                &lt;width&gt;100&lt;/width&gt;</span></div><div class="line"><span class="string">                &lt;height&gt;30&lt;/height&gt;</span></div><div class="line"><span class="string">            &lt;/rect&gt;</span></div><div class="line"><span class="string">        &lt;/property&gt;</span></div><div class="line"><span class="string">        &lt;property name="text"&gt;</span></div><div class="line"><span class="string">            &lt;string&gt;pushbutton&lt;/string&gt;</span></div><div class="line"><span class="string">        &lt;/property&gt;</span></div><div class="line"><span class="string">        &lt;property name="py_text"&gt;</span></div><div class="line"><span class="string">            &lt;string notr="true"&gt;&lt;/string&gt;</span></div><div class="line"><span class="string">        &lt;/property&gt;</span></div><div class="line"><span class="string">    &lt;/widget&gt;</span></div><div class="line"><span class="string">    &lt;customwidgets&gt;</span></div><div class="line"><span class="string">        &lt;customwidget&gt;</span></div><div class="line"><span class="string">            &lt;propertyspecifications&gt;</span></div><div class="line"><span class="string">                &lt;stringpropertyspecification</span></div><div class="line"><span class="string">                    name="py_text" type="multiline" /&gt;</span></div><div class="line"><span class="string">                &lt;stringpropertyspecification</span></div><div class="line"><span class="string">                    name="py_clicked" type="multiline" /&gt;</span></div><div class="line"><span class="string">                &lt;stringpropertyspecification</span></div><div class="line"><span class="string">                    name="py_pressed" type="multiline" /&gt;</span></div><div class="line"><span class="string">                &lt;stringpropertyspecification</span></div><div class="line"><span class="string">                    name="py_released" type="multiline" /&gt;</span></div><div class="line"><span class="string">                &lt;stringpropertyspecification</span></div><div class="line"><span class="string">                    name="py_enabled" type="multiline" /&gt;</span></div><div class="line"><span class="string">                &lt;stringpropertyspecification</span></div><div class="line"><span class="string">                    name="py_checked" type="multiline" /&gt;</span></div><div class="line"><span class="string">				&lt;stringpropertyspecification</span></div><div class="line"><span class="string">                    name="py_tag" type="multiline" /&gt;</span></div><div class="line"><span class="string">            &lt;/propertyspecifications&gt;</span></div><div class="line"><span class="string">        &lt;/customwidget&gt;</span></div><div class="line"><span class="string">    &lt;/customwidgets&gt;</span></div><div class="line"><span class="string">&lt;/ui&gt;</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="comment"># myplugins/widgets/pushbutton.py</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</div><div class="line"></div><div class="line">_logger = logging.getLogger(__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyPushButton</span><span class="params">(QtWidgets.QPushButton)</span>:</span></div><div class="line"></div><div class="line">    py_checked = basic.property(<span class="string">"QString"</span>)</div><div class="line">    py_clicked = basic.property(<span class="string">"QString"</span>)</div><div class="line">    py_enabled = basic.property(<span class="string">"QString"</span>)</div><div class="line">    py_pressed = basic.property(<span class="string">"QString"</span>)</div><div class="line">    py_released = basic.property(<span class="string">"QString"</span>)</div><div class="line">    py_shortcut = basic.property(<span class="string">"QString"</span>)</div><div class="line">    py_tag = basic.property(<span class="string">"QString"</span>)</div><div class="line">    py_text = basic.property(<span class="string">"QString"</span>)</div><div class="line"></div><div class="line">    signal_pressed = QtCore.pyqtSignal(str)</div><div class="line">    signal_released = QtCore.pyqtSignal(str)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></div><div class="line">        super(PyPushButton, self).__init__(parent)</div><div class="line">        self._shortcutval = <span class="keyword">False</span></div><div class="line">        self.bPress = <span class="keyword">False</span></div><div class="line">        self.clicked.connect(self.onClicked)</div><div class="line">        self.pressed.connect(self.onPushed)</div><div class="line">        self.released.connect(self.onUnPushed)</div><div class="line">        basic.signal_UpdateUi.connect(self._update)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onClicked</span><span class="params">(self)</span>:</span></div><div class="line">        self.bPress = <span class="keyword">True</span></div><div class="line">        <span class="keyword">if</span> self.py_clicked <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            _logger.debug(<span class="string">"""点击:"&#123;&#125;"按钮"""</span>.format(self.text()))</div><div class="line">            basic._exec(self.py_clicked)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onPushed</span><span class="params">(self)</span>:</span></div><div class="line">        self.bPress = <span class="keyword">True</span></div><div class="line">        <span class="keyword">if</span> self.py_pressed <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            _logger.debug(<span class="string">"""按下:"&#123;&#125;"按钮"""</span>.format(self.text()))</div><div class="line">            basic._exec(self.py_pressed)</div><div class="line">        self.signal_pressed.emit(self.objectName())</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onUnPushed</span><span class="params">(self)</span>:</span></div><div class="line">        self.bPress = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> self.py_released <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            _logger.debug(<span class="string">"""松开:"&#123;&#125;"按钮"""</span>.format(self.text()))</div><div class="line">            basic._exec(self.py_released)</div><div class="line">        self.signal_released.emit(self.objectName())</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.py_checked:</div><div class="line">            self.setCheckable(<span class="keyword">True</span>)</div><div class="line">            self.setChecked(bool(basic._eval(self.py_checked)))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.py_enabled:</div><div class="line">            self.setEnabled(bool(basic._eval(self.py_enabled)))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.py_shortcut:</div><div class="line">            shortcutval = bool(basic._eval(self.py_shortcut))</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._shortcutval <span class="keyword">and</span> shortcutval:</div><div class="line">                self.signal_pressed.emit(self.objectName())</div><div class="line">            <span class="keyword">elif</span> self._shortcutval <span class="keyword">and</span> <span class="keyword">not</span> shortcutval:</div><div class="line">                self.signal_released.emit(self.objectName())</div><div class="line">            self._shortcutval = shortcutval</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.py_tag:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">"py_tag_label"</span>):</div><div class="line">                self.py_tag_vbox = QtWidgets.QVBoxLayout()</div><div class="line">                self.py_tag_vbox.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">                self.setLayout(self.py_tag_vbox)</div><div class="line">                self.py_tag_label = QtWidgets.QLabel()</div><div class="line">                self.py_tag_vbox.addWidget(self.py_tag_label, <span class="number">1</span>)</div><div class="line">            self.py_tag_label.setText(self.py_tag)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.py_text:</div><div class="line">            self.setText(str(basic._eval(self.py_text)))</div><div class="line"></div><div class="line">    <span class="comment"># 补丁: setText 会清除快捷键, 屏蔽此行为</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setText</span><span class="params">(self, text)</span>:</span></div><div class="line">        shortcut = self.shortcut()</div><div class="line">        super(PyPushButton, self).setText(text)</div><div class="line">        self.setShortcut(shortcut)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setEnabled</span><span class="params">(self, b)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> b:</div><div class="line">            <span class="keyword">if</span> self.bPress:</div><div class="line">                self.bPress = <span class="keyword">False</span></div><div class="line">                self.signal_released.emit(self.objectName())</div><div class="line">        super(PyPushButton, self).setEnabled(b)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pyautogui使用]]></title>
      <url>http://arvin-he.github.io/2017/07/27/py-pyautogui-2017-07-27/</url>
      <content type="html"><![CDATA[<h3 id="PyAutoGUI——让所有GUI都自动化"><a href="#PyAutoGUI——让所有GUI都自动化" class="headerlink" title="PyAutoGUI——让所有GUI都自动化"></a>PyAutoGUI——让所有GUI都自动化</h3><p>本教程译自大神Al Sweigart的PyAutoGUI项目，Python自动化工具，更适合处理GUI任务，网页任务推荐：</p>
<ul>
<li>Selenium+Firefox记录（Chromedriver和Phantomjs也很给力，Phantomjs虽然是无头浏览器，但有时定位不准），然后用Python写单元测试</li>
<li>request处理get/post请求写一堆代码自动化处理，都在后台运行，不用运行浏览器，非常适合处理表单</li>
</ul>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>PyAutoGUI是一个纯Python的GUI自动化工具，其目的是可以用程序自动控制鼠标和键盘操作，多平台支持（Windows，OS X，Linux）。可以用pip安装，Github上有<a href="https://github.com/asweigart/pyautogui" target="_blank" rel="external">源代码</a>。</p>
<p>PyAutoGUI可以模拟鼠标的移动、点击、拖拽，键盘按键输入、按住操作，以及鼠标+键盘的热键同时按住等操作，可以说手能动的都可以。</p>
<p>让鼠标移到屏幕中央<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">screenWidth, screenHeight = pyautogui.size()</div><div class="line">pyautogui.moveTo(screenWidth / <span class="number">2</span>, screenHeight / <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>一些例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">screenWidth, screenHeight = pyautogui.size()</div><div class="line">currentMouseX, currentMouseY = pyautogui.position()</div><div class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">150</span>)</div><div class="line">pyautogui.click()</div><div class="line"><span class="comment">#  鼠标向下移动10像素</span></div><div class="line">pyautogui.moveRel(<span class="keyword">None</span>, <span class="number">10</span>)</div><div class="line">pyautogui.doubleClick()</div><div class="line"><span class="comment">#  用缓动/渐变函数让鼠标2秒后移动到(500,500)位置</span></div><div class="line"><span class="comment">#  use tweening/easing function to move mouse over 2 seconds.</span></div><div class="line">pyautogui.moveTo(<span class="number">1800</span>, <span class="number">500</span>, duration=<span class="number">2</span>, tween=pyautogui.easeInOutQuad)</div><div class="line"><span class="comment">#  在每次输入之间暂停0.25秒</span></div><div class="line">pyautogui.typewrite(<span class="string">'Hello world!'</span>, interval=<span class="number">0.25</span>)</div><div class="line">pyautogui.press(<span class="string">'esc'</span>)</div><div class="line">pyautogui.keyDown(<span class="string">'shift'</span>)</div><div class="line">pyautogui.press([<span class="string">'left'</span>, <span class="string">'left'</span>, <span class="string">'left'</span>, <span class="string">'left'</span>, <span class="string">'left'</span>, <span class="string">'left'</span>])</div><div class="line">pyautogui.keyUp(<span class="string">'shift'</span>)</div><div class="line">pyautogui.hotkey(<span class="string">'ctrl'</span>, <span class="string">'c'</span>)</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">distance = <span class="number">200</span></div><div class="line"><span class="keyword">while</span> distance &gt; <span class="number">0</span>:</div><div class="line">    pyautogui.dragRel(distance, <span class="number">0</span>, duration=<span class="number">0.5</span>) <span class="comment"># 向右</span></div><div class="line">    distance -= <span class="number">5</span></div><div class="line">    pyautogui.dragRel(<span class="number">0</span>, distance, duration=<span class="number">0.5</span>) <span class="comment"># 向下</span></div><div class="line">    pyautogui.draIn gRel(-distance, <span class="number">0</span>, duration=<span class="number">0.5</span>) <span class="comment"># 向左</span></div><div class="line">    distance -= <span class="number">5</span></div><div class="line">    pyautogui.dragRel(<span class="number">0</span>, -distance, duration=<span class="number">0.5</span>) <span class="comment"># 向上</span></div></pre></td></tr></table></figure>
<h3 id="保护措施"><a href="#保护措施" class="headerlink" title="保护措施"></a>保护措施</h3><p>为了能够及时中断，PyAutoGUI提供了一个保护措施。当pyautogui.FAILSAFE = True时，如果把鼠标光标在屏幕左上角，PyAutoGUI函数就会产生pyautogui.FailSafeException异常。如果失控了，需要中断PyAutoGUI函数，就把鼠标光标在屏幕左上角。要禁用这个特性，就把FAILSAFE设置成False：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">pyautogui.FAILSAFE = <span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>通过把pyautogui.PAUSE设置成float或int时间（秒），可以为所有的PyAutoGUI函数增加延迟。默认延迟时间是0.1秒。在函数循环执行的时候，这样做可以让PyAutoGUI运行的慢一点，非常有用。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">pyautogui.PAUSE = <span class="number">2.5</span></div><div class="line">pyautogui.moveTo(<span class="number">100</span>,<span class="number">100</span>); pyautogui.click()</div></pre></td></tr></table></figure></p>
<p>所有的PyAutoGUI函数在延迟完成前都处于阻塞状态（block）。（未来计划增加一个可选的非阻塞模式来调用函数。）建议PAUSE和FAILSAFE一起使用。</p>
<h3 id="Cheat-Sheet"><a href="#Cheat-Sheet" class="headerlink" title="Cheat Sheet"></a>Cheat Sheet</h3><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line"><span class="comment">#  当前鼠标的坐标</span></div><div class="line">pyautogui.position() <span class="comment"># (123, 372)</span></div><div class="line"><span class="comment">#  当前屏幕的分辨率（宽度和高度）</span></div><div class="line">pyautogui.size()  <span class="comment"># (1920, 1080)</span></div><div class="line"><span class="comment">#  (x,y)是否在屏幕上</span></div><div class="line">x, y = <span class="number">122</span>, <span class="number">244</span></div><div class="line">pyautogui.onScreen(x, y)  <span class="comment"># True</span></div></pre></td></tr></table></figure>
<h4 id="保护措施-1"><a href="#保护措施-1" class="headerlink" title="保护措施"></a>保护措施</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># PyAutoGUI函数增加延迟为2.5秒：</span></div><div class="line">pyautogui.PAUSE = <span class="number">2.5</span></div><div class="line"><span class="comment"># 当pyautogui.FAILSAFE = True时，如果把鼠标光标在屏幕左上角，PyAutoGUI函数就会产生pyautogui.FailSafeException异常。</span></div><div class="line">pyautogui.FAILSAFE = <span class="keyword">True</span></div></pre></td></tr></table></figure>
<h4 id="鼠标函数"><a href="#鼠标函数" class="headerlink" title="鼠标函数"></a>鼠标函数</h4><p>坐标系的原点是左上角。X轴（水平）坐标向右增大，Y轴（竖直）坐标向下增大。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">num_seconds = <span class="number">1.2</span></div><div class="line"><span class="comment">#  用num_seconds秒的时间把光标移动到(x, y)位置</span></div><div class="line">pyautogui.moveTo(x, y, duration=num_seconds)</div><div class="line"><span class="comment">#  用num_seconds秒的时间把光标的X轴（水平）坐标移动xOffset，</span></div><div class="line"><span class="comment">#  Y轴（竖直）坐标向下移动yOffset。</span></div><div class="line">xOffset, yOffset = <span class="number">50</span>, <span class="number">100</span></div><div class="line">pyautogui.moveRel(xOffset, yOffset, duration=num_seconds)</div></pre></td></tr></table></figure></p>
<p>click()函数就是让鼠标点击，默认是单击左键，参数可以设置,其中，button属性可以设置成left，middle和right。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyautogui.click(x=moveToX, y=moveToY, clicks=num_of_clicks, interval=secs_between_clicks, button=<span class="string">'left'</span>)</div></pre></td></tr></table></figure></p>
<p>所有的点击都可以用这个函数，不过下面的函数可读性更好：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pyautogui.rightClick(x=moveToX, y=moveToY)</div><div class="line">pyautogui.middleClick(x=moveToX, y=moveToY)</div><div class="line">pyautogui.doubleClick(x=moveToX, y=moveToY)</div><div class="line">pyautogui.tripleClick(x=moveToX, y=moveToY)</div></pre></td></tr></table></figure></p>
<p>scroll函数控制鼠标滚轮的滚动，<code>amount_to_scroll</code>参数表示滚动的格数。正数则页面向上滚动，负数则向下滚动：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyautogui.scroll(clicks=amount_to_scroll, x=moveToX, y=moveToY)</div></pre></td></tr></table></figure></p>
<p>每个按键按下和松开两个事件可以分开处理：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyautogui.mouseDown(x=moveToX, y=moveToY, button=<span class="string">'left'</span>)</div><div class="line">pyautogui.mouseUp(x=moveToX, y=moveToY, button=<span class="string">'left'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="键盘函数"><a href="#键盘函数" class="headerlink" title="键盘函数"></a>键盘函数</h3><p>键盘上可以按的键都可以调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  每次键入的时间间隔</span></div><div class="line">secs_between_keys = <span class="number">0.1</span></div><div class="line">pyautogui.typewrite(<span class="string">'Hello world!\n'</span>, interval=secs_between_keys)</div></pre></td></tr></table></figure></p>
<p>多个键也可以：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyautogui.typewrite([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'left'</span>, <span class="string">'backspace'</span>, <span class="string">'enter'</span>, <span class="string">'f1'</span>], interval=secs_between_keys)</div></pre></td></tr></table></figure></p>
<p>按键名称列表：<code>pyautogui.KEYBOARD_KEYS[:10]</code><br>[‘\t’, ‘\n’, ‘\r’, ‘ ‘, ‘!’, ‘“‘, ‘#’, ‘$’, ‘%’, ‘&amp;’]</p>
<p>键盘的一些热键像Ctrl-S或Ctrl-Shift-1都可以用hotkey()函数来实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pyautogui.hotkey(<span class="string">'ctrl'</span>, <span class="string">'a'</span>) <span class="comment"># 全选</span></div><div class="line">pyautogui.hotkey(<span class="string">'ctrl'</span>, <span class="string">'c'</span>) <span class="comment"># 复制</span></div><div class="line">pyautogui.hotkey(<span class="string">'ctrl'</span>, <span class="string">'v'</span>) <span class="comment"># 粘贴</span></div></pre></td></tr></table></figure></p>
<p>每个按键的按下和松开也可以单独调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyautogui.keyDown(key_name)</div><div class="line">pyautogui.keyUp(key_name)</div></pre></td></tr></table></figure></p>
<h3 id="消息弹窗函数"><a href="#消息弹窗函数" class="headerlink" title="消息弹窗函数"></a>消息弹窗函数</h3><p>如果你需要消息弹窗，通过单击OK暂停程序，或者向用户显示一些信息，消息弹窗函数就会有类似JavaScript的功能：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pyautogui.alert(<span class="string">'这个消息弹窗是文字+OK按钮'</span>)</div><div class="line">pyautogui.confirm(<span class="string">'这个消息弹窗是文字+OK+Cancel按钮'</span>)</div><div class="line">pyautogui.prompt(<span class="string">'这个消息弹窗是让用户输入字符串，单击OK'</span>)</div><div class="line"><span class="comment"># 在prompt()函数中，如果用户什么都不输入，就会返回None。</span></div></pre></td></tr></table></figure></p>
<h3 id="截屏函数"><a href="#截屏函数" class="headerlink" title="截屏函数"></a>截屏函数</h3><p>PyAutoGUI用Pillow/PIL库实现图片相关的识别和操作。<br>在Linux里面，你必须执行<code>sudo apt-get install scrot</code>来使用截屏特性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  返回一个Pillow/PIL的Image对象</span></div><div class="line">pyautogui.screenshot()</div><div class="line">pyautogui.screenshot(<span class="string">'foo.png'</span>)</div></pre></td></tr></table></figure></p>
<p>如果你有一个图片文件想在上面做点击操作，你可以用locateOnScreen()函数来定位。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  返回(最左x坐标，最顶y坐标，宽度，高度)</span></div><div class="line">pyautogui.locateOnScreen(<span class="string">'pyautogui/looks.png'</span>)</div><div class="line"><span class="comment"># (0, 1040, 48, 40)</span></div></pre></td></tr></table></figure></p>
<p>locateAllOnScreen()函数会寻找所有相似图片，返回一个生成器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pyautogui.locateAllOnScreen(<span class="string">'pyautogui/looks.png'</span>):</div><div class="line">    print(i)</div><div class="line"><span class="comment"># (0, 1040, 48, 40)</span></div><div class="line">list(pyautogui.locateAllOnScreen(<span class="string">'pyautogui/looks.png'</span>))</div><div class="line"><span class="comment"># (0, 1040, 48, 40)</span></div></pre></td></tr></table></figure></p>
<p>locateCenterOnScreen()函数会返回图片在屏幕上的中心XY轴坐标值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyautogui.locateCenterOnScreen(<span class="string">'pyautogui/looks.png'</span>)</div><div class="line"><span class="comment"># (24, 1060)</span></div></pre></td></tr></table></figure></p>
<p>如果没找到图片会返回None。定位比较慢，一般得用1~2秒.</p>
<h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><p>position()：返回整数元组(x, y)，分别表示鼠标光标所在位置的XY轴坐标<br>size()：返回显示器的尺寸整数元组(x, y)。未来将加入多屏支持</p>
<h3 id="鼠标控制函数"><a href="#鼠标控制函数" class="headerlink" title="鼠标控制函数"></a>鼠标控制函数</h3><h4 id="屏幕与鼠标位置"><a href="#屏幕与鼠标位置" class="headerlink" title="屏幕与鼠标位置"></a>屏幕与鼠标位置</h4><p>屏幕位置使用X和Y轴的笛卡尔坐标系。原点(0,0)在左上角，分别向右、向下增大。<br>如果屏幕像素是 1920×1080，那么右下角的坐标是(1919, 1079), 左上角是从(0, 0)开始的。<br>分辨率大小可以通过size()函数返回整数元组。光标的位置用position()返回。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pyautogui.size()</div><div class="line"><span class="comment"># (1920, 1080)</span></div><div class="line">pyautogui.position()</div><div class="line"><span class="comment"># (272, 688)</span></div></pre></td></tr></table></figure></p>
<p>下面是Python 3版本的光标位置记录程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ! python 3</span></div><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">print(<span class="string">'Press Ctrl-C to quit'</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        x, y = pyautogui.position()</div><div class="line">        positionStr = <span class="string">'X: &#123;&#125; Y: &#123;&#125;'</span>.format(*[str(x).rjust(<span class="number">4</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [x, y]])</div><div class="line">        print(positionStr, end=<span class="string">''</span>)</div><div class="line">        print(<span class="string">'\b'</span> * len(positionStr), end=<span class="string">''</span>, flush=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    print(<span class="string">'\n'</span>)</div></pre></td></tr></table></figure></p>
<p>要检查XY坐标是否在屏幕上，需要用onScreen()函数来检验，如果在屏幕上返回True：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">pyautogui.onScreen(<span class="number">0</span>, <span class="number">0</span>) <span class="comment"># True</span></div><div class="line">pyautogui.onScreen(<span class="number">0</span>, <span class="number">-1</span>) <span class="comment"># False</span></div><div class="line">pyautogui.onScreen(<span class="number">0</span>, <span class="number">2080</span>) <span class="comment"># False</span></div><div class="line">pyautogui.onScreen(<span class="number">1920</span>, <span class="number">1080</span>) <span class="comment"># False</span></div><div class="line">pyautogui.onScreen(<span class="number">1919</span>, <span class="number">1079</span>) <span class="comment"># True</span></div></pre></td></tr></table></figure></p>
<h4 id="鼠标行为"><a href="#鼠标行为" class="headerlink" title="鼠标行为"></a>鼠标行为</h4><p>moveTo()函数会把鼠标光标移动到指定的XY轴坐标处。如果传入None值，则表示使用当前光标的对象轴坐标值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">200</span>)     <span class="comment"># 光标移动到(100, 200)位置</span></div><div class="line">pyautogui.moveTo(<span class="keyword">None</span>, <span class="number">500</span>)   <span class="comment"># 光标移动到(100, 500)位置</span></div><div class="line">pyautogui.moveTo(<span class="number">600</span>, <span class="keyword">None</span>)   <span class="comment"># 光标移动到(600, 500)位置</span></div><div class="line"><span class="comment">#一般鼠标光标都是瞬间移动到指定的位置，如果你想让鼠标移动的慢点，可以设置持续时间：</span></div><div class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">200</span>, duration=<span class="number">2</span>)     <span class="comment"># 用2秒把光标移动到(100, 200)位置</span></div></pre></td></tr></table></figure></p>
<p>默认的持续时间pyautogui.MINIMUM_DURATION是0.1秒，如果你设置的时间比默认值还短，那么就会瞬间执行。</p>
<p>如果你想让光标以当前位置为原点，进行相对移动，就用pyautogui.moveRel()函数。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">200</span>) <span class="comment">#把光标移动到(100, 200)位置</span></div><div class="line">pyautogui.moveRel(<span class="number">0</span>, <span class="number">50</span>)   <span class="comment">#向下移动50</span></div><div class="line">pyautogui.moveRel(<span class="number">30</span>, <span class="number">0</span>, <span class="number">2</span>)   <span class="comment">#向右移动30</span></div><div class="line">pyautogui.moveRel(<span class="number">30</span>, <span class="keyword">None</span>)   <span class="comment">#向右移动30</span></div></pre></td></tr></table></figure></p>
<h4 id="鼠标拖拽"><a href="#鼠标拖拽" class="headerlink" title="鼠标拖拽"></a>鼠标拖拽</h4><p>PyAutoGUI的dragTo()和dragRel()函数与moveTo()和moveRel()函数类似。另外，他们有一个button参数可以设置成left，middle和right三个键。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  按住鼠标左键，把鼠标拖拽到(100, 200)位置</span></div><div class="line">pyautogui.dragTo(<span class="number">100</span>, <span class="number">200</span>, button=<span class="string">'left'</span>)</div><div class="line"><span class="comment">#  按住鼠标左键，用2秒钟把鼠标拖拽到(300, 400)位置</span></div><div class="line">pyautogui.dragTo(<span class="number">300</span>, <span class="number">400</span>, <span class="number">2</span>, button=<span class="string">'left'</span>)</div><div class="line"><span class="comment">#  按住鼠标右键，用2秒钟把鼠标拖拽到(30,0)位置</span></div><div class="line">pyautogui.dragTo(<span class="number">30</span>, <span class="number">0</span>, <span class="number">2</span>, button=<span class="string">'right'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="缓动-渐变（Tween-Easing）函数"><a href="#缓动-渐变（Tween-Easing）函数" class="headerlink" title="缓动/渐变（Tween / Easing）函数"></a>缓动/渐变（Tween / Easing）函数</h4><p>缓动/渐变函数的作用是让光标的移动更炫。如果你不需要用到的话，你可以忽略这些。</p>
<p>缓动/渐变函数可以改变光标移动过程的速度和方向。通常鼠标是匀速直线运动，这就是线性缓动/渐变函数。PyAutoGUI有30种缓动/渐变函数，可以通过<code>pyautogui.ease*?</code>查看。其中，pyautogui.easeInQuad()函数可以用于moveTo()，moveRel()，dragTo()和dragRel()函数，光标移动呈现先慢后快的效果，整个过程的时间还是和原来一样。而pyautogui.easeOutQuad函数的效果相反：光标开始移动很快，然后慢慢减速。pyautogui.easeOutElastic是弹簧效果，首先越过终点，然后再反弹回来。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  开始很慢，不断加速</span></div><div class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeInQuad)</div><div class="line"><span class="comment">#  开始很快，不断减速</span></div><div class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeOutQuad)</div><div class="line"><span class="comment">#  开始和结束都快，中间比较慢</span></div><div class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeInOutQuad)</div><div class="line"><span class="comment">#  一步一徘徊前进</span></div><div class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeInBounce)</div><div class="line"><span class="comment">#  徘徊幅度更大，甚至超过起点和终点</span></div><div class="line">pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeInElastic)</div></pre></td></tr></table></figure></p>
<p>这些效果函数是模仿Al Sweigart的PyTweening模块，可以直接使用，不需要额外安装。<br>如果你想创建自己的效果，也可以定义一个函数，其参数是(0.0,1.0)，表示起点和终点，返回值是介于[0.0,1.0]之间的数。</p>
<h4 id="鼠标单击"><a href="#鼠标单击" class="headerlink" title="鼠标单击"></a>鼠标单击</h4><p>click()函数模拟单击鼠标左键一次的行为。例如：<code>pyautogui.click()</code><br>如果单击之前要先移动，可以把目标的XY坐标值传入函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  先移动到(100, 200)再单击</span></div><div class="line">pyautogui.click(x=<span class="number">100</span>, y=<span class="number">200</span>, duration=<span class="number">2</span>)</div><div class="line"><span class="comment"># 可以通过button参数设置left，middle和right三个键。例如：</span></div><div class="line">pyautogui.click(button=<span class="string">'right'</span>)</div></pre></td></tr></table></figure></p>
<p>要做多次单击可以设置clicks参数，还有interval参数可以设置每次单击之间的时间间隔。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  双击左键</span></div><div class="line">pyautogui.click(clicks=<span class="number">2</span>)</div><div class="line"><span class="comment">#  两次单击之间停留0.25秒</span></div><div class="line">pyautogui.click(clicks=<span class="number">2</span>, interval=<span class="number">0.25</span>)</div><div class="line"><span class="comment">#  三击右键</span></div><div class="line">pyautogui.click(button=<span class="string">'right'</span>, clicks=<span class="number">2</span>, interval=<span class="number">0.25</span>)</div></pre></td></tr></table></figure></p>
<p>为了操作方便，PyAutoGUI提供了doubleClick()，tripleClick()和rightClick()来实现双击、三击和右击操作。</p>
<h4 id="鼠标按下和松开函数"><a href="#鼠标按下和松开函数" class="headerlink" title="鼠标按下和松开函数"></a>鼠标按下和松开函数</h4><p>mouseDown()和mouseUp()函数可以实现鼠标按下和鼠标松开的操作。两者参数相同，有x，y和button。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  鼠标左键按下再松开</span></div><div class="line">pyautogui.mouseDown(); pyautogui.mouseUp() </div><div class="line"><span class="comment">#  按下鼠标右键</span></div><div class="line">pyautogui.mouseDown(button=<span class="string">'right'</span>) </div><div class="line"><span class="comment">#  移动到(100, 200)位置，然后松开鼠标右键</span></div><div class="line">pyautogui.mouseUp(button=<span class="string">'right'</span>, x=<span class="number">100</span>, y=<span class="number">200</span>)</div></pre></td></tr></table></figure></p>
<h4 id="滚轮滚动函数"><a href="#滚轮滚动函数" class="headerlink" title="滚轮滚动函数"></a>滚轮滚动函数</h4><p>鼠标滚轮滚动可以用scroll()函数和clicks次数参数来模拟。scroll()函数是vscroll()的一个包装（wrapper），执行竖直滚动。<br>不同平台上的clicks次数不太一样。还有x和y参数可以在滚动之前定位到(x, y)位置。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  向上滚动10格</span></div><div class="line">pyautogui.scroll(<span class="number">10</span>)</div><div class="line"><span class="comment">#  向下滚动10格</span></div><div class="line">pyautogui.scroll(<span class="number">-10</span>)</div><div class="line"><span class="comment">#  移动到(100, 100)位置再向上滚动10格</span></div><div class="line">pyautogui.scroll(<span class="number">10</span>, x=<span class="number">100</span>, y=<span class="number">100</span>)</div><div class="line"><span class="comment"># 在OS X和Linux平台上，PyAutoGUI还可以用hscroll()实现水平滚动。例如：</span></div><div class="line"><span class="comment">#  向右滚动10格</span></div><div class="line">pyautogui.hscroll(<span class="number">10</span>)</div><div class="line"><span class="comment">#  向左滚动10格</span></div><div class="line">pyautogui.hscroll(<span class="number">-10</span>)</div></pre></td></tr></table></figure></p>
<h3 id="键盘控制函数"><a href="#键盘控制函数" class="headerlink" title="键盘控制函数"></a>键盘控制函数</h3><h4 id="typewrite-输入函数"><a href="#typewrite-输入函数" class="headerlink" title="typewrite()输入函数"></a>typewrite()输入函数</h4><p>键盘控制的主要函数就是typewrite()。这个函数可以实现字符输入。typewrite()函数只能用于单个字符键，不能按SHITF和F1这些功能键。要在两次输入间增加时间间隔，可以用interval参数。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  输入Hello world!</span></div><div class="line">pyautogui.typewrite(<span class="string">'Hello world!'</span>)</div><div class="line"><span class="comment">#  每次输入间隔0.25秒，输入Hello world!</span></div><div class="line">pyautogui.typewrite(<span class="string">'Hello world!'</span>, interval=<span class="number">0.25</span>)</div></pre></td></tr></table></figure></p>
<h4 id="press-，keyDown-和keyUp-函数"><a href="#press-，keyDown-和keyUp-函数" class="headerlink" title="press()，keyDown()和keyUp()函数"></a>press()，keyDown()和keyUp()函数</h4><p>要按那些功能键，可以用press()函数把<code>pyautogui.KEYBOARD_KEYS</code>里面按键对应的字符串输入进去。例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  ENTER键</span></div><div class="line">pyautogui.press(<span class="string">'enter'</span>)</div><div class="line"><span class="comment">#  F1键</span></div><div class="line">pyautogui.press(<span class="string">'f1'</span>)</div><div class="line"><span class="comment">#  左方向键</span></div><div class="line">pyautogui.press(<span class="string">'left'</span>)</div></pre></td></tr></table></figure>
<p>press()函数其实是keyDown()和keyUp()函数的包装，模拟的按下然后松开两个动作。这两个函数可以单独调用。例如，按下shift键的同时按3次左方向键：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  按下`shift`键</span></div><div class="line">pyautogui.keyDown(<span class="string">'shift'</span>)</div><div class="line">pyautogui.press(<span class="string">'left'</span>)</div><div class="line">pyautogui.press(<span class="string">'left'</span>)</div><div class="line">pyautogui.press(<span class="string">'left'</span>)</div><div class="line"><span class="comment">#  松开`shift`键</span></div><div class="line">pyautogui.keyUp(<span class="string">'shift'</span>)</div></pre></td></tr></table></figure></p>
<p>和typewrite()函数一样，可以用数组把一组键传入press()。例如：<br><code>pyautogui.press([&#39;left&#39;, &#39;left&#39;, &#39;left&#39;])</code></p>
<h4 id="hotkey-函数"><a href="#hotkey-函数" class="headerlink" title="hotkey()函数"></a>hotkey()函数</h4><p>为了更高效的输入热键，PyAutoGUI提供了hotkey()函数来绑定若干按键：<br><code>pyautogui.hotkey(&#39;ctrl&#39;, &#39;shift&#39;, &#39;ese&#39;)</code><br>等价于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pyautogui.keyDown(<span class="string">'ctrl'</span>)</div><div class="line">pyautogui.keyDown(<span class="string">'shift'</span>)</div><div class="line">pyautogui.keyDown(<span class="string">'esc'</span>)</div><div class="line">pyautogui.keyUp(<span class="string">'esc'</span>)</div><div class="line">pyautogui.keyUp(<span class="string">'shift'</span>)</div><div class="line">pyautogui.keyUp(<span class="string">'ctrl'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="KEYBOARD-KEYS"><a href="#KEYBOARD-KEYS" class="headerlink" title="KEYBOARD_KEYS"></a>KEYBOARD_KEYS</h4><p>下面就是press()，keyDown()，keyUp()和hotkey()函数可以输入的按键名称：<br><code>print(pyautogui.KEYBOARD_KEYS)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&apos;\t&apos;, &apos;\n&apos;, &apos;\r&apos;, &apos; &apos;, &apos;!&apos;, &apos;&quot;&apos;, &apos;#&apos;, &apos;$&apos;, &apos;%&apos;, &apos;&amp;&apos;, &quot;&apos;&quot;, &apos;(&apos;, &apos;)&apos;, &apos;*&apos;, &apos;+&apos;, &apos;,&apos;, &apos;-&apos;, &apos;.&apos;, &apos;/&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;, &apos;:&apos;, &apos;;&apos;, &apos;&lt;&apos;, &apos;=&apos;, &apos;&gt;&apos;, &apos;?&apos;, &apos;@&apos;, &apos;[&apos;, &apos;\\&apos;, &apos;]&apos;, &apos;^&apos;, &apos;_&apos;, &apos;`&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;, &apos;r&apos;, &apos;s&apos;, &apos;t&apos;, &apos;u&apos;, &apos;v&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;&#123;&apos;, &apos;|&apos;, &apos;&#125;&apos;, &apos;~&apos;, &apos;accept&apos;, &apos;add&apos;, &apos;alt&apos;, &apos;altleft&apos;, &apos;altright&apos;, &apos;apps&apos;, &apos;backspace&apos;, &apos;browserback&apos;, &apos;browserfavorites&apos;, &apos;browserforward&apos;, &apos;browserhome&apos;, &apos;browserrefresh&apos;, &apos;browsersearch&apos;, &apos;browserstop&apos;, &apos;capslock&apos;, &apos;clear&apos;, &apos;convert&apos;, &apos;ctrl&apos;, &apos;ctrlleft&apos;, &apos;ctrlright&apos;, &apos;decimal&apos;, &apos;del&apos;, &apos;delete&apos;, &apos;divide&apos;, &apos;down&apos;, &apos;end&apos;, &apos;enter&apos;, &apos;esc&apos;, &apos;escape&apos;, &apos;execute&apos;, &apos;f1&apos;, &apos;f10&apos;, &apos;f11&apos;, &apos;f12&apos;, &apos;f13&apos;, &apos;f14&apos;, &apos;f15&apos;, &apos;f16&apos;, &apos;f17&apos;, &apos;f18&apos;, &apos;f19&apos;, &apos;f2&apos;, &apos;f20&apos;, &apos;f21&apos;, &apos;f22&apos;, &apos;f23&apos;, &apos;f24&apos;, &apos;f3&apos;, &apos;f4&apos;, &apos;f5&apos;, &apos;f6&apos;, &apos;f7&apos;, &apos;f8&apos;, &apos;f9&apos;, &apos;final&apos;, &apos;fn&apos;, &apos;hanguel&apos;, &apos;hangul&apos;, &apos;hanja&apos;, &apos;help&apos;, &apos;home&apos;, &apos;insert&apos;, &apos;junja&apos;, &apos;kana&apos;, &apos;kanji&apos;, &apos;launchapp1&apos;, &apos;launchapp2&apos;, &apos;launchmail&apos;, &apos;launchmediaselect&apos;, &apos;left&apos;, &apos;modechange&apos;, &apos;multiply&apos;, &apos;nexttrack&apos;, &apos;nonconvert&apos;, &apos;num0&apos;, &apos;num1&apos;, &apos;num2&apos;, &apos;num3&apos;, &apos;num4&apos;, &apos;num5&apos;, &apos;num6&apos;, &apos;num7&apos;, &apos;num8&apos;, &apos;num9&apos;, &apos;numlock&apos;, &apos;pagedown&apos;, &apos;pageup&apos;, &apos;pause&apos;, &apos;pgdn&apos;, &apos;pgup&apos;, &apos;playpause&apos;, &apos;prevtrack&apos;, &apos;print&apos;, &apos;printscreen&apos;, &apos;prntscrn&apos;, &apos;prtsc&apos;, &apos;prtscr&apos;, &apos;return&apos;, &apos;right&apos;, &apos;scrolllock&apos;, &apos;select&apos;, &apos;separator&apos;, &apos;shift&apos;, &apos;shiftleft&apos;, &apos;shiftright&apos;, &apos;sleep&apos;, &apos;stop&apos;, &apos;subtract&apos;, &apos;tab&apos;, &apos;up&apos;, &apos;volumedown&apos;, &apos;volumemute&apos;, &apos;volumeup&apos;, &apos;win&apos;, &apos;winleft&apos;, &apos;winright&apos;, &apos;yen&apos;, &apos;command&apos;, &apos;option&apos;, &apos;optionleft&apos;, &apos;optionright&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="消息弹窗函数-1"><a href="#消息弹窗函数-1" class="headerlink" title="消息弹窗函数"></a>消息弹窗函数</h3><p>PyAutoGUI通过Tkinter实现了4种纯Python的消息弹窗函数，和JavaScript类似。</p>
<h4 id="alert-函数"><a href="#alert-函数" class="headerlink" title="alert()函数"></a>alert()函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyautogui.alert(text=<span class="string">''</span>, title=<span class="string">''</span>, button=<span class="string">'OK'</span>)</div><div class="line"><span class="comment"># 'OK'</span></div></pre></td></tr></table></figure>
<p>显示一个简单的带文字和OK按钮的消息弹窗。用户点击后返回button的文字。</p>
<h4 id="confirm-函数"><a href="#confirm-函数" class="headerlink" title="confirm() 函数"></a>confirm() 函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  OK和Cancel按钮的消息弹窗</span></div><div class="line">pyautogui.confirm(text=<span class="string">''</span>, title=<span class="string">''</span>, buttons=[<span class="string">'OK'</span>, <span class="string">'Cancel'</span>])</div><div class="line"><span class="comment">#  10个按键0-9的消息弹窗</span></div><div class="line">pyautogui.confirm(text=<span class="string">''</span>, title=<span class="string">''</span>, buttons=range(<span class="number">10</span>))</div></pre></td></tr></table></figure>
<p>显示一个简单的带文字、OK和Cancel按钮的消息弹窗，用户点击后返回被点击button的文字，支持自定义数字、文字的列表。</p>
<h4 id="prompt-函数"><a href="#prompt-函数" class="headerlink" title="prompt() 函数"></a>prompt() 函数</h4><p><code>pyautogui.prompt(text=&#39;&#39;, title=&#39;&#39; , default=&#39;&#39;)</code><br>可以输入的消息弹窗，带OK和Cancel按钮。用户点击OK按钮返回输入的文字，点击Cancel按钮返回None。</p>
<h4 id="password-函数"><a href="#password-函数" class="headerlink" title="password() 函数"></a>password() 函数</h4><p><code>pyautogui.password(text=&#39;&#39;, title=&#39;&#39;, default=&#39;&#39;, mask=&#39;*&#39;)</code><br>样式同prompt()，用于输入密码，消息用*表示。带OK和Cancel按钮。用户点击OK按钮返回输入的文字，点击Cancel按钮返回None。</p>
<h3 id="截屏函数-1"><a href="#截屏函数-1" class="headerlink" title="截屏函数"></a>截屏函数</h3><p>PyAutoGUI可以截屏并保存为图片文件，然后定位这些截屏在屏幕上的位置。与sikuli类似，把屏幕上的按键截取下来，然后定位，就可以执行点击等操作了。</p>
<p>截屏功能需要安装Pillow模块。OS X用screencapture命令，是系统自带的。Linux用户用scrot命令，可以通过<code>sudo apt-get install scrot</code>安装。</p>
<h4 id="Ubuntu注意事项"><a href="#Ubuntu注意事项" class="headerlink" title="Ubuntu注意事项"></a>Ubuntu注意事项</h4><p>由于Ubuntu上安装Pillow时缺少PNG和JPEG依赖，所以安装比较复杂，具体可以看Ubuntu论坛。不过用miniconda可以解决这些问题，如果Ubuntu或Mint上安装了miniconda，可以直接<code>conda install pillow</code>来安装。</p>
<h4 id="screenshot-函数"><a href="#screenshot-函数" class="headerlink" title="screenshot()函数"></a>screenshot()函数</h4><p>screenshot()函数会返回Image对象（参考Pillow或PIL模块文档），也可以设置文件名：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">im1 = pyautogui.screenshot()</div><div class="line">im2 = pyautogui.screenshot(<span class="string">'my_screenshot.png'</span>)</div><div class="line"><span class="comment"># 在一个 1920×10801920×1080 的屏幕上，screenshot()函数要消耗100微秒——不快也不慢。</span></div><div class="line"></div><div class="line"><span class="comment">#如果你不需要截取整个屏幕，还有一个可选的region参数。你可以把截取区域的左上角XY坐标值和宽度、高度传入截取。</span></div><div class="line">im = pyautogui.screenshot(region=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span> ,<span class="number">400</span>))</div></pre></td></tr></table></figure></p>
<h4 id="定位函数"><a href="#定位函数" class="headerlink" title="定位函数"></a>定位函数</h4><p>可以定位截图在屏幕上的坐标位置。比如，你需要在计算器里输入：</p>
<p><img src="/2017/07/27/py-pyautogui-2017-07-27/1.png" alt=""></p>
<p>如果你不知道按钮的位置，就不能用moveTo()定位和click()点击。而且每次计算器的位置可能会变化，这时即使有来坐标也不好用了。但是如果你有要点击按钮的截图，比如数字7：</p>
<p>你可以调用pyautogui.locateOnScreen(‘calc7key.png’)函数来获得7的屏幕坐标。返回的是一个元组(top, left, width, height)。这个元组可以用pyautogui.center()函数来获取截图屏幕的中心坐标。如果截图没找到，pyautogui.locateOnScreen()函数返回None：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">button7location = pyautogui.locateOnScreen(<span class="string">'pyautogui/calc7key.png'</span>)</div><div class="line">button7location</div><div class="line"><span class="comment"># (1226, 546, 29, 28)</span></div><div class="line">button7x, button7y = pyautogui.center(button7location)</div><div class="line">button7x, button7y</div><div class="line"><span class="comment"># (1240, 560)</span></div><div class="line">pyautogui.click(button7x, button7y)</div></pre></td></tr></table></figure></p>
<p>locateCenterOnScreen()等价于上面的前两布操作，直接获得截屏屏幕中心坐标：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">x, y = pyautogui.locateCenterOnScreen(<span class="string">'pyautogui/calc7key.png'</span>)</div><div class="line">pyautogui.click(x, y)</div></pre></td></tr></table></figure></p>
<p>在 1920×10801920×1080 的屏幕上，定位函数需要1~2秒时间。对视频游戏（LOL、DOTA）来说就太慢了，但是上班干活还是绰绰有余。</p>
<p>还是几个定位函数。都是从左上角原点开始向右向下搜索截图位置：</p>
<ul>
<li>locateOnScreen(image, grayscale=False)：返回找到的第一个截图Image对象在屏幕上的坐标(left, top, width, height)，如果没找到返回None</li>
<li>locateCenterOnScreen(image, grayscale=False)：返回找到的第一个截图Image对象在屏幕上的中心坐标(x, y)，如果没找到返回None</li>
<li>locateAllOnScreen(image, grayscale=False)：返回找到的所有相同截图Image对象在屏幕上的坐标(left, top, width, height)的生成器</li>
<li>locate(needleImage, haystackImage, grayscale=False)：返回找到的第一个截图Image对象在haystackImage里面的坐标(left, top, width, height)，如果没找到返回None</li>
<li>locateAll(needleImage, haystackImage, grayscale=False)：返回找到的所有相同截图Image对象在haystackImage里面的坐标(left, top, width, height)的生成器</li>
</ul>
<p>两个locateAll*函数都可以用for循环和list()输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> pyautogui.locateAllOnScreen(<span class="string">'pyautogui/calc7key.png'</span>):</div><div class="line">    print(pos)</div><div class="line"><span class="comment"># (1227, 546, 29, 28)</span></div><div class="line">list(pyautogui.locateAllOnScreen(<span class="string">'pyautogui/calc7key.png'</span>))</div><div class="line"><span class="comment"># [(1227, 546, 29, 28)]</span></div></pre></td></tr></table></figure></p>
<h4 id="灰度值匹配"><a href="#灰度值匹配" class="headerlink" title="灰度值匹配"></a>灰度值匹配</h4><p>可以把grayscale参数设置为True来加速定位（大约提升30%），默认为False。这种去色（desaturate）方法可以加速定位，但是也可能导致假阳性（false-positive）匹配：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">button7location = pyautogui.locateOnScreen(<span class="string">'pyautogui/calc7key.png'</span>, grayscale=<span class="keyword">True</span>)</div><div class="line">button7location</div><div class="line"><span class="comment"># (1227, 546, 29, 28)</span></div></pre></td></tr></table></figure></p>
<h4 id="像素匹配"><a href="#像素匹配" class="headerlink" title="像素匹配"></a>像素匹配</h4><p>要获取截屏某个位置的RGB像素值，可以用Image对象的getpixel()方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pyautogui</div><div class="line">im = pyautogui.screenshot()</div><div class="line">im.getpixel((<span class="number">100</span>, <span class="number">200</span>))</div><div class="line"><span class="comment"># (255, 255, 255)</span></div><div class="line"><span class="comment"># 也可以用PyAutoGUI的pixel()函数，是之前调用的包装：</span></div><div class="line">pyautogui.pixel(<span class="number">100</span>, <span class="number">200</span>)</div><div class="line"><span class="comment"># (255, 255, 255)</span></div></pre></td></tr></table></figure></p>
<p>如果你只是要检验一下指定位置的像素值，可以用pixelMatchesColor()函数，把X、Y和RGB元组值穿入即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">pyautogui.pixelMatchesColor(<span class="number">100</span>, <span class="number">200</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</div><div class="line"><span class="comment"># True</span></div><div class="line">pyautogui.pixelMatchesColor(<span class="number">100</span>, <span class="number">200</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">245</span>))</div><div class="line"><span class="comment"># False</span></div><div class="line"></div><div class="line"><span class="comment"># tolerance参数可以指定红、绿、蓝3种颜色误差范围：</span></div><div class="line">pyautogui.pixelMatchesColor(<span class="number">100</span>, <span class="number">200</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">245</span>), tolerance=<span class="number">10</span>)</div><div class="line"><span class="comment"># True</span></div><div class="line">pyautogui.pixelMatchesColor(<span class="number">100</span>, <span class="number">200</span>, (<span class="number">248</span>, <span class="number">250</span>, <span class="number">245</span>), tolerance=<span class="number">10</span>)</div><div class="line"><span class="comment"># True</span></div><div class="line">pyautogui.pixelMatchesColor(<span class="number">100</span>, <span class="number">200</span>, (<span class="number">205</span>, <span class="number">255</span>, <span class="number">245</span>), tolerance=<span class="number">10</span>)</div><div class="line"><span class="comment"># False</span></div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://muxuezi.github.io/posts/doc-pyautogui.html" target="_blank" rel="external">https://muxuezi.github.io/posts/doc-pyautogui.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript之this用法]]></title>
      <url>http://arvin-he.github.io/2017/07/22/js-this-2017-07-22/</url>
      <content type="html"><![CDATA[<p>this是Javascript语言的一个关键字。随着使用场合的不同，this的值会发生变化。<br>但是有一个总的原则，那就是this始终指的是，调用函数的那个对象。</p>
<h3 id="在全局作用域下"><a href="#在全局作用域下" class="headerlink" title="在全局作用域下"></a>在全局作用域下</h3><p>在浏览器环境下：全局作用域下，this 指向 Window 对象.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// Window &#123; .. &#125;</span></div><div class="line"><span class="keyword">this</span> === <span class="built_in">window</span>;</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>在 node 环境下：全局作用域下，this 指向 global 对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// global</span></div><div class="line"><span class="keyword">this</span> === global;</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>严格模式，在 node 环境下：遵循严格模式的规范，this 不再指向全局对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// &#123;&#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="函数对象作用域下"><a href="#函数对象作用域下" class="headerlink" title="函数对象作用域下"></a>函数对象作用域下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="comment">// global / Window</span></div></pre></td></tr></table></figure>
<p>严格模式，在 node 环境下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<h3 id="作为对象方法的调用"><a href="#作为对象方法的调用" class="headerlink" title="作为对象方法的调用"></a>作为对象方法的调用</h3><p>作为对象方法时，this 指向该对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.foo();</div><div class="line"><span class="comment">// &#123; foo: [Function] &#125;</span></div><div class="line"><span class="comment">// obj 的值实际上是个匿名类的对象，foo 的值实际上是个匿名函数</span></div></pre></td></tr></table></figure></p>
<p>注意到：在函数体内使用的、在函数体外定义（声明）的变量，是 <strong>传引用</strong> 的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    foo: func</div><div class="line">&#125;;</div><div class="line">obj.foo();</div><div class="line"><span class="comment">// &#123; foo: [Function func] &#125;</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> foo1 = obj.foo;</div><div class="line">foo1();</div><div class="line"><span class="comment">// global</span></div></pre></td></tr></table></figure></p>
<h3 id="在回调函数里面会遇到一些坑"><a href="#在回调函数里面会遇到一些坑" class="headerlink" title="在回调函数里面会遇到一些坑"></a>在回调函数里面会遇到一些坑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  foo2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    setTimeout(<span class="keyword">this</span>.foo, <span class="number">1000</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">obj.foo2();</div></pre></td></tr></table></figure>
<p>执行这段代码我们会发现两次打印出来的 <code>this</code> 是不一样的：<br>第一次是 <code>foo2</code> 中直接打印 <code>this</code>，这里指向 <code>obj</code> 这个对象,<br>但是在 <code>setTimeout</code> 中执行的 <code>this.foo</code> ，却指向了全局对象.<br>把 <code>this.foo</code> 当作一个参数传给 <code>setTimeout</code> 这个函数，就像它需要一个 <code>fun</code> 参数，在传入参数的时候，其实做了个这样的操作 <code>fun = this.foo</code>，这里我们直接把 <code>fun</code> 指向 <code>this.foo</code> 的引用；执行的时候其实是执行了 <code>fun()</code> 所以已经和 <code>obj</code> 无关了，它是被当作普通函数直接调用的，因此 <code>this</code> 指向全局对象。</p>
<p>解决:<br>为了解决这个问题，我们可以利用 <strong>闭包</strong> 的特性来处理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name: <span class="string">'qiutc'</span>,</div><div class="line">    foo2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// Window</span></div><div class="line">      <span class="built_in">console</span>.log(_this);  <span class="comment">// Object &#123;name: "qiutc"&#125;</span></div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">obj.foo2();</div></pre></td></tr></table></figure></p>
<p>可以看到直接用 <code>this</code> 仍然是 <code>Window</code>；因为 <code>foo2</code> 中的 <code>this</code> 是指向 <code>obj</code>，我们可以先用一个变量 <code>_this</code> 来储存，然后在回调函数中使用 <code>_this</code>，就可以指向当前的这个对象了；</p>
<p>setTimeout 的另一个坑<br>如果直接执行回调函数而没有绑定作用域，那么它的 <code>this</code> 是指向全局对象(<code>window</code>)，在严格模式下会指向 <code>undefined</code>，然而在 <code>setTimeout</code> 中的回调函数在严格模式下却表现出不同：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">setTimeout(foo, <span class="number">1</span>);</div><div class="line"><span class="comment">// window</span></div></pre></td></tr></table></figure></p>
<p>按理说我们加了严格模式，foo 调用也没有指定 <code>this</code>，应该是出来 <code>undefined</code>，但是这里仍然出现了全局对象，难道是严格模式失效了吗？</p>
<p>并不，即使在严格模式下，<code>setTimeout</code> 方法在调用传入函数的时候，如果这个函数没有指定了的 <code>this</code>，那么它会做一个隐式的操作—-自动地注入全局上下文，等同于调用 <code>foo.apply(window)</code> 而非 <code>foo()</code>；</p>
<p>当然，如果我们在传入函数的时候已经指定 <code>this</code>，那么就不会被注入全局对象，比如： <code>setTimeout(foo.bind(obj), 1);</code>；</p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>在 ES6 的新规范中，加入了箭头函数，它和普通函数最不一样的一点就是 <code>this</code> 的指向了，<br>上文我们使用闭包来解决 <code>this</code> 的指向问题，但如果用上了箭头函数就可以更完美的解决了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name: <span class="string">'qiutc'</span>,</div><div class="line">  foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;,</div><div class="line">  foo2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// Object &#123;name: "qiutc"&#125;</span></div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">obj.foo2();</div></pre></td></tr></table></figure></p>
<p>可以看到，在 <code>setTimeout</code> 执行的函数中，本应该打印出在 <code>Window</code>，但是在这里 <code>this</code> 却指向了 <code>obj</code>，原因就在于，给 <code>setTimeout</code> 传入的函数（参数）是一个箭头函数：</p>
<p>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>关键点就是，箭头函数内的 <code>this</code> 执行定义时所在的对象，就是指向定义这个箭头函数时作用域内的 <code>this</code>，也就是 <code>obj.foo2</code> 中的 <code>this</code>，即 <code>obj</code>；所以在执行箭头函数的时候，它的 <code>this</code> -&gt; <code>obj.foo2 中的 this</code> -&gt; <code>obj</code>；</p>
<p>简单来说， <strong>箭头函数中的 this 只和定义它时候的作用域的 this 有关，而与在哪里以及如何调用它无关，同时它的 this 指向是不可改变的</strong>。</p>
<h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call / apply / bind"></a>call / apply / bind</h3><p>js 中的函数对象，其 prototype 中定义了如下三个函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">func.call(thisArg[, arg1[, arg2[, ...]]]);</div><div class="line"><span class="comment">// 执行函数 func，使用第一个参数作为 this，其他参数作为 func 的实参，一一对应。</span></div><div class="line">func.apply(thisArg[, [arg1, arg2, ...]]);</div><div class="line"><span class="comment">// 执行函数 func，使用第一个参数作为 this，第二个参数为数组，数组中的每个元素作为 func 的实参，一一对应。</span></div><div class="line"><span class="keyword">var</span> foo = func.bind(thisArg[, arg1[, arg2[, ...]]]);</div><div class="line"><span class="comment">// 绑定 func 的 this 和所有参数，返回一个新的函数，但不执行它。</span></div></pre></td></tr></table></figure></p>
<p>bind 的 this 对 new 关键字无效，但其他实参有效：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    name: <span class="string">"obj"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> B = A.bind(obj, <span class="string">"B"</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B(<span class="string">'b'</span>);</div><div class="line"><span class="comment">// undefined B</span></div><div class="line"><span class="built_in">console</span>.log(obj.name);</div><div class="line"><span class="comment">// obj</span></div></pre></td></tr></table></figure></p>
<p>要注意，=&gt; 语法下的 this 不受影响，该语法下 this 视为 const 变量，不接受修改。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之Map]]></title>
      <url>http://arvin-he.github.io/2017/07/21/cpp-map-2017-07-21/</url>
      <content type="html"><![CDATA[<h3 id="map说明"><a href="#map说明" class="headerlink" title="map说明"></a>map说明</h3><p>Map是STL的一个关联容器，它提供一对一的数据处理能力，map内部自建一颗红黑树(一种非严格意义上的平衡二叉树)，这颗树具有对数据自动排序的功能，所以在map内部所有的数据都是有序的.搜索效率是O(lgN). C++中的map类似python中的dict, 只不过python中的dict使用散列表实现的, 用时(N).<br>它的特点是增加和删除节点对迭代器的影响很小，除了那个操作节点，对其他的节点都没有什么影响。对于迭代器来说，可以修改实值，而不能修改key。<br>C++ STL中的标准规定：</p>
<ul>
<li>map  有序, 用红黑树实现</li>
<li>unordered_map，无序，用散列表实现</li>
</ul>
<h3 id="关于has-map"><a href="#关于has-map" class="headerlink" title="关于has_map"></a>关于has_map</h3><p>hash_map 其实就是使用 hash 表来实现的 map。<br>注意，二叉树，哈希表仅仅是 dictionary 的实现方式，不能说 hash 就等于 dictionary，实现方式可以有多种多样。</p>
<h3 id="map的功能"><a href="#map的功能" class="headerlink" title="map的功能"></a>map的功能</h3><ul>
<li>自动建立Key － value的对应。key 和 value可以是任意你需要的类型</li>
<li>根据key值快速查找记录，查找的复杂度基本是Log(N)，如果有1000个记录，最多查找10次，1,000,000个记录，最多查找20次</li>
<li>快速插入Key - Value 记录</li>
<li>快速删除记录 </li>
<li>根据Key 修改value记录</li>
<li>遍历所有记录</li>
</ul>
<h3 id="map使用"><a href="#map使用" class="headerlink" title="map使用"></a>map使用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     <span class="comment">//定义map对象，当前没有任何元素</span></div><div class="line">     <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">float</span>&gt; m;</div><div class="line">     </div><div class="line">     <span class="comment">//插入元素，按键值的由小到大放入黑白树中</span></div><div class="line">     m[<span class="string">"Jack"</span>] = <span class="number">98.5</span> ;</div><div class="line">     m[<span class="string">"Bomi"</span>] = <span class="number">96.0</span> ;</div><div class="line">     m[<span class="string">"Kate"</span>] = <span class="number">97.5</span> ;</div><div class="line">     </div><div class="line">     <span class="comment">//删除键值为"Jack"的元素</span></div><div class="line">     m.erase(<span class="string">"Jack"</span>) ;</div><div class="line">     <span class="comment">//先前遍历元素</span></div><div class="line">     <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">float</span>&gt; :: iterator it ;</div><div class="line">     <span class="keyword">for</span>(it = m.begin(); it != m.end(); it ++)</div><div class="line">     &#123;</div><div class="line">          <span class="built_in">cout</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">" : "</span> &lt;&lt; (*it).second &lt;&lt; <span class="built_in">endl</span> ;</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//反向遍历元素</span></div><div class="line">     <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; :: reverse_iterator rit ;</div><div class="line">     <span class="keyword">for</span>( rit = m.rbegin() ; rit != m.rend() ; rit ++)</div><div class="line">     &#123;</div><div class="line">         <span class="comment">//输入键值与映照数据</span></div><div class="line">         <span class="built_in">cout</span> &lt;&lt; (*rit).first &lt;&lt; <span class="string">" : "</span> &lt;&lt; (*rit).second &lt;&lt; <span class="built_in">endl</span> ;</div><div class="line">     &#125;</div><div class="line">     <span class="comment">// 元素搜索</span></div><div class="line">     <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; :: iterator it ;</div><div class="line">     it = m.find(<span class="string">"Bomi"</span>) ;</div><div class="line">     <span class="keyword">if</span>(it != m.end())  <span class="comment">//搜索到该键值</span></div><div class="line">         <span class="built_in">cout</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">" : "</span> &lt;&lt; ( *it ).second &lt;&lt; <span class="built_in">endl</span> ;</div><div class="line">     <span class="keyword">else</span></div><div class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found it"</span> &lt;&lt; <span class="built_in">endl</span> ;</div><div class="line">     <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://my.oschina.net/gddyl/blog/113744" target="_blank" rel="external">https://my.oschina.net/gddyl/blog/113744</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux之IO网络模型]]></title>
      <url>http://arvin-he.github.io/2017/07/20/linux-iomodel-2017-07-20/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>IO有内存IO、网络IO和磁盘IO三种，通常我们说的IO指的是后两者.<br>Linux的内核将所有外部设备都看做一个文件来操作，对一个文件的读写操作会调用内核提供的系统命令，返回一个file descriptor（fd，文件描述符 ）。而对一个socket的读写也会有相应的描述符，称为socketfd（socket描述符），描述符就是一个数字，它指向内核中的一个结构体（文件路径，数据区等一些属性）。</p>
<h3 id="IO模型分类"><a href="#IO模型分类" class="headerlink" title="IO模型分类"></a>IO模型分类</h3><p>在Unix(Linux)下，可用的I/O模型有五种：</p>
<ul>
<li>阻塞I/O</li>
<li>非阻塞I/O</li>
<li>I/O多路复用：select和poll是属于这种I/O模型。</li>
<li>信号（或事件）驱动I/O</li>
<li>异步I/O</li>
</ul>
<p>网络IO的本质就是socket流的读取，通常一次IO读操作会涉及到两个对象和两个阶段。<br>两个对象分别是：<br>用户进程（线程）Process（Thread）<br>内核对象 Kernel</p>
<p>两个阶段：<br>等待流数据准备（wating for the data to be ready）;<br>从内核向进程复制数据（copying the data from the kernel to the process）;</p>
<p>对于socket流而已：</p>
<p>第一步通常涉及等待网络上的数据分组到达，然后被复制到内核的某个缓冲区。<br>第二步把数据从内核缓冲区复制到应用进程缓冲区。</p>
<p>对于网络数据的接收操作而言，五种I/O模型都是分为两个阶段：</p>
<ol>
<li>等待数据准备好。</li>
<li>将准备好的数据，从内核空间考到进程空间。</li>
</ol>
<p>对于第一步，就是等待数据到达，到达之后，数据就被复制到内核缓冲区；<br>对于第二步，将数据从内核缓冲区复制到进程缓冲区中。</p>
<p><img src="/2017/07/20/linux-iomodel-2017-07-20/6.png" alt=""></p>
<h3 id="阻塞I-O模型"><a href="#阻塞I-O模型" class="headerlink" title="阻塞I/O模型"></a>阻塞I/O模型</h3><p>阻塞I/O模型属于最常见的I/O模型，在这五种I/O模型中都可以看到阻塞I/O的身影。默认情况下，所有的网络socket都是阻塞的。下面，我们就演示一下具体的数据处理过程：</p>
<p><img src="/2017/07/20/linux-iomodel-2017-07-20/1.png" alt=""></p>
<p>进程对内核发起系统调用（recvfrom），当数据到达网卡并最终被复制到进程空间（或中途发生错误，比如对进程发送一个中断信号等）后，系统调用（recvfrom）就会返回信息给进程，之后，进程再根据返回的信息来进行相应的处理。而进程在收到recvfrom返回信息之前的整个时间段内，我们称，进程被阻塞。当recvfrom返回成功信息时，进程就开始对数据进行处理。</p>
<h3 id="非阻塞I-O模型"><a href="#非阻塞I-O模型" class="headerlink" title="非阻塞I/O模型"></a>非阻塞I/O模型</h3><p>当I/O模型为非阻塞I/O时，那么就相当于告诉内核，当进程请求的数据没完成时，这个进程就不会进入睡眠状态，而是返回一个错误信息。</p>
<p><img src="/2017/07/20/linux-iomodel-2017-07-20/2.png" alt=""></p>
<p>在此，对上图的流程做简单的介绍:前三次调用recvfrom，数据都未准备就绪，因此内核会立即返回一个EWOULDBLOCK的错误信息。第四次调用recvfrom时，数据已经准备就绪。然后数据被复制到进程缓冲区，并且recvfrom返回成功信息。最后，进程对数据进行处理。像这样，在非阻塞模型中一个进程反复调用recvfrom的过程，我们将它称为polling。此时，进程会不断的询问内核：是否某个操作已经准备就绪。而通常这又会浪费CPU时间片，所以，使用这种模型的很少见。</p>
<h3 id="I-O多路复用模型"><a href="#I-O多路复用模型" class="headerlink" title="I/O多路复用模型"></a>I/O多路复用模型</h3><p>在I/O多路复用模型下，我们可以使用select或poll系统调用，而此时发生的阻塞是由select或poll产生的，而不是在真正的I/O系统调用上。Linux提供select/poll（I/O复用模型会用到select或者poll函数，这两个函数也会使进程阻塞，但是和阻塞I/O所不同的是，这两个函数可以同时阻塞多个I/O操作。而且可以同时对多个读操作，多个写操作的I/O函数进行检测，直到有数据可读或可写时，才真正调用I/O操作函数），进程通过将一个或多个fd传递给select或poll系统调用，阻塞在select操作上，这样select/poll可以帮我们侦测多fd是否处于就绪状态。select/poll是顺序扫描fd是否就绪，而且支持的fd数量有限，因此它的使用受到了一些制约。Linux还提供了一个epoll系统调用，epoll使用基于事件驱动方式代替顺序扫描，因此性能更高。当有fd就绪时，立即回调函数rollback。</p>
<p><img src="/2017/07/20/linux-iomodel-2017-07-20/3.png" alt=""></p>
<p>在此，对上图的流程做简单的介绍:在调用select，进程的一个请求就阻塞了，直到数据准备就绪。当select返回数据就绪信息（readable）时，然后，在调用recvfrom将数据复制到进程缓冲区。通过与第一张阻塞I/O模型的图的比较，我们并没有发现多路复用I/O模型有什么优点，并且事实上，还有一个小的缺点，因为使用select时需要两种不同的系统调用。但是使用select的好处是，我们可以同时等待多个I/O的完成。</p>
<h3 id="信号驱动I-O模型"><a href="#信号驱动I-O模型" class="headerlink" title="信号驱动I/O模型"></a>信号驱动I/O模型</h3><p>我们可以使用信号，来告诉内核当数据准备就绪的时候，使用SIGIO信号来通知我们。我们将此称为信号驱动的I/O。</p>
<p><img src="/2017/07/20/linux-iomodel-2017-07-20/4.png" alt=""></p>
<p>在此，对上图的流程做简单的介绍:<br>首先，使用sigaction系统调用安装信号处理器。然后，立即从系统调用中返回，从而进程在继续执行，而不会被阻塞。当数据准备就绪的时候，就会生成SIGIO信号并发送给进程的信号处理器，然后再通过调用recvfrom来读取数据，并最终返回OK由进程对数据进行处理。</p>
<h3 id="异步I-O模型："><a href="#异步I-O模型：" class="headerlink" title="异步I/O模型："></a>异步I/O模型：</h3><p>一般来说，异步I/O模型的实现是从操作步骤的开始到通知整个操作完成（包括将数据从内核复制到进程缓冲区中）。它和信号驱动I/O的主要不同是：信号I/O是在I/O操作正要开始的时候通知我们的，而异步I/O是当I/O操作完成时通知我们的。</p>
<p><img src="/2017/07/20/linux-iomodel-2017-07-20/5.png" alt=""></p>
<p>在此，对上图的流程做简单的介绍:<br>当调用aio_read时，会同时向内核传递描述符，缓冲区指针，缓冲区大小，文件偏移量和当整个操作完成时该如何通知我们等信息。然后，系统调用立即返回，并且进程在等待I/O完成的时候，不会发生阻塞。直到当操作完成的时候内核就会产生相应的信号，并通知给进程。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>程序空间与内核空间<br>在Linux中，对于一次读取IO的操作，数据并不会直接拷贝到程序的程序缓冲区。它首先会被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区。p.s: 最后一句话非常重要，重复一遍。</li>
</ol>
<p>Waiting for the data to be ready(等待数据到达内核缓冲区)<br>Copying the data from the kernel to the process(从内核缓冲区拷贝数据到程序缓冲区)</p>
<ol>
<li><p>阻塞与非阻塞区别<br>调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。<br>区分阻塞和非阻塞只要区分函数调用之后是否挂起返回就可以了</p>
</li>
<li><p>synchronous IO和asynchronous IO区别<br>区分异步和同步，则是函数调用之后，数据或条件满足之后如何通知函数。等待数据返回则是同步，通过回调则是异步。</p>
</li>
<li><p>select/poll/epoll<br>即使现在的各个Linux版本普遍引入了copy on write和线程，但实际上进程/线程之间的切换依然还是一笔很大的开销，这个时候我们可以考虑使用上面提到到多路IO复用，回顾一下我们上面提到的多路IO复用模型的基本原理：一个进程可以监视多个文件描述符，一旦某个文件描述符就绪（读/写准备就绪），能够信号通知程序进行相应的读写操作。下面我们就来简单的看一下多路IO复用的三种方式。</p>
</li>
</ol>
<ul>
<li>select<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span> <span class="params">(<span class="keyword">int</span> maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">const</span> struct timeval *timeout)</span></span>;</div><div class="line">```            </div><div class="line"></div><div class="line">如上面的方法声明所示, select监听三类描述符: readset(读), writeset(写), exceptset(异常), 我们编程的时候可以制定这三个参数监听对应的文件描述符。正如前面提到的,select调用后进程会阻塞, 当select返回后，可以通过遍历fdset，来找到就绪的描述符。</div><div class="line">select优点在于它的跨平台，但是也有显著的缺点单个进程能够监视的文件描述符的数量存在最大限制，默认设置为<span class="number">1024</span>/<span class="number">2048</span>，虽然设置可以超过这一限制，但是这样也可能会造成效率的降低。而且select扫描的时候也是采用的轮循，算法复杂度为O(n)，这在fdset很多时效率会较低。</div><div class="line"></div><div class="line">* poll</div><div class="line">```cpp</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span> <span class="params">(struct pollfd *fdarray, <span class="keyword">unsigned</span> <span class="keyword">long</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>poll和select并没有太大的区别，但是它是基于链表实现的所以并没有最大数量限制，它将用户传入的数据拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次的遍历。算法复杂度也是O(n)。</p>
<ul>
<li>epoll<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>select和poll都只提供了一个函数。而epoll提供了三个函数: <code>epoll_create</code>是创建一个epoll句柄, <code>epoll_ctl</code>是注册要监听的事件类型, <code>epoll_wait</code>则是等待事件的产生。与select相比，epoll几乎没有描述符限制(cat /proc/sys/fs/file-max可查看)。它采用一个文件描述符管理多个描述符，将用户的文件描述符的事件存放到kernel的一个事件表中，这样在程序空间和内核空间的只要做一次拷贝。它去掉了遍历文件描述符这一步骤，采用更加先进的回调(callback)机制，算法复杂度降到了O(1)。p.s: 虽然表面看起来epoll非常好，但是对于连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，因为epoll是建立在大量的函数回调的基础之上。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://noican.blog.51cto.com/4081966/1354950" target="_blank" rel="external">linux中的“5种网络 IO 模型”</a></li>
<li><a href="https://www.ziwenxie.site/2017/01/02/unix-network-programming-asynchronous/" target="_blank" rel="external">https://www.ziwenxie.site/2017/01/02/unix-network-programming-asynchronous/</a></li>
<li><a href="http://blog.leanote.com/post/joesay/Concurrency-Model-Part-1-IO-Concurrency" target="_blank" rel="external">http://blog.leanote.com/post/joesay/Concurrency-Model-Part-1-IO-Concurrency</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++的vertor实现]]></title>
      <url>http://arvin-he.github.io/2017/07/20/cpp-vector-2017-07-20/</url>
      <content type="html"><![CDATA[<h3 id="C-的vector实现"><a href="#C-的vector实现" class="headerlink" title="C++的vector实现"></a>C++的vector实现</h3><p>新增元素：Vector通过一个连续的数组存放元素，如果集合已满，在新增数据的时候，就要分配一块更大的内存，将原来的数据复制过来，释放之前的内存，在插入新增的元素。<br>插入元素: 插入新的数据分在最后插入push_back和通过迭代器在任何位置插入，<br>这里说一下通过迭代器插入，通过迭代器与第一个元素的距离知道要插入的位置，即int index=iter-begin()。这个元素后面的所有元素都向后移动一个位置，在空出来的位置上存入新增的元素。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(const_iterator iter,<span class="keyword">const</span> T&amp; t )</span></span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> index=iter-begin();</div><div class="line">    <span class="keyword">if</span> (index&lt;size_)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (size_==capacity_)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> capa=calculateCapacity();</div><div class="line">            newCapacity(capa);</div><div class="line">        &#125;</div><div class="line">        memmove(buf+index+<span class="number">1</span>,buf+index,(size_-index)*<span class="keyword">sizeof</span>(T)); </div><div class="line">        buf[index]=t;</div><div class="line">        size_++;</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line">```        </div><div class="line"></div><div class="line">删除元素：删除和新增差不多，也分两种，删除最后一个元素pop_back和通过迭代器删除任意一个元素erase(iter)。通过迭代器删除还是先找到要删除元素的位置，即<span class="keyword">int</span> index=iter-begin();这个位置后面的每个元素都想前移动一个元素的位置。同时我们知道erase不释放内存只初始化成默认值。</div><div class="line"></div><div class="line">删除全部元素clear：只是循环调用了erase，所以删除全部元素的时候，不释放内存。内存是在析构函数中释放的。</div><div class="line">```cpp</div><div class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(const_iterator iter)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> index=iter-begin(); </div><div class="line">    <span class="keyword">if</span> (index&lt;size_ &amp;&amp; size_&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        memmove(buf+index ,buf+index+<span class="number">1</span>,(size_-index)*<span class="keyword">sizeof</span>(T)); </div><div class="line">        buf[--size_]=T();</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> iterator(iter); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器iteraotr是STL的一个重要组成部分,通过iterator可以很方便的存储集合中的元素.STL为每个集合都写了一个迭代器, 迭代器其实是对一个指针的包装,实现一些常用的方法,如<code>++</code>,<code>--</code>,<code>!=</code>,<code>==</code>,<code>*</code>,<code>-&gt;</code>等, 通过这些方法可以找到当前元素或是别的元素. </p>
<p>vector是STL集合中比较特殊的一个,因为vector中的每个元素都是连续的,所以在自己实现vector的时候可以用指针代替,如<code>typedef T* iterator;typedef const T* const_iterator</code>，如果STL中的函数能方便的操作自己写的集合，实现的迭代器最好继承<code>std::iterator&lt;std::forward_iterator_tag,T&gt;</code>。<br><code>std::iterator&lt;std::forward_iterator_tag,T&gt;</code>的源码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">Category</span>, </span></div><div class="line"><span class="class">         <span class="title">class</span> _<span class="title">Ty</span>, </span></div><div class="line"><span class="class">         <span class="title">class</span> _<span class="title">Diff</span> = <span class="title">ptrdiff_t</span>, </span></div><div class="line"><span class="class">         <span class="title">class</span> _<span class="title">Pointer</span> = _<span class="title">Ty</span> *, </span></div><div class="line"><span class="class">         <span class="title">class</span> _<span class="title">Reference</span> = _<span class="title">Ty</span>&amp;&gt;</span></div><div class="line"><span class="class">    <span class="title">struct</span> <span class="title">iterator</span></span></div><div class="line"><span class="class">&#123;</span>    </div><div class="line">    <span class="comment">// base type for all iterator classes</span></div><div class="line">    <span class="keyword">typedef</span> _Category iterator_category;</div><div class="line">    <span class="keyword">typedef</span> _Ty value_type;</div><div class="line">    <span class="keyword">typedef</span> _Diff difference_type;</div><div class="line">    <span class="keyword">typedef</span> _Diff distance_type;    <span class="comment">// retained</span></div><div class="line">    <span class="keyword">typedef</span> _Pointer pointer;</div><div class="line">    <span class="keyword">typedef</span> _Reference reference;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Iterator其中没有任何成员，只是定义了一组类型，所以继承它并不会让你的struct变大，这组类型是STL的内部契约，STL中的函数假设每个迭代器都定义了这些类型，所以只要你的迭代器定义了这些类型，就可以和STL函数集合一起使用。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++的new/delete操作符]]></title>
      <url>http://arvin-he.github.io/2017/07/20/cpp-newdel-2017-07-20/</url>
      <content type="html"><![CDATA[<h3 id="new-delete-operator-和-operator-new-delete-区别"><a href="#new-delete-operator-和-operator-new-delete-区别" class="headerlink" title="new/delete operator 和 operator new/delete 区别"></a>new/delete operator 和 operator new/delete 区别</h3><p>new/delete/new[]/delete[] operator<br>operator new/delete/new[]/delete[]<br>以new为例子<br>new operator 即new 操作符<br>分配内存就使用 operator new</p>
<h3 id="C-的new是怎么实现的"><a href="#C-的new是怎么实现的" class="headerlink" title="C++的new是怎么实现的"></a>C++的new是怎么实现的</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class *pc = <span class="keyword">new</span> Class;</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">delete</span> pc;</div></pre></td></tr></table></figure>
<p>上面代码的第一行即为 <code>new operator</code> ，而第三行即为 <code>delete operator</code> ，代码很简单，但对编译器来说，它需要做额外的工作，将上述代码翻译为近似于下面的代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *p = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">sizeof</span>(Class));</div><div class="line"><span class="comment">// 对p指向的内存调用Class的构造函数，此处无法用直观的代码展现</span></div><div class="line">Class *pc = <span class="keyword">static_cast</span>&lt;Class*&gt;(p);</div><div class="line"><span class="comment">// ...</span></div><div class="line">pc-&gt;~Class();</div><div class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pc)</span></span>;</div></pre></td></tr></table></figure>
<p>面代码中，第一行即为 operator new ，而最后一行即为 operator delete </p>
<p>new operator 实际上做了两件事情：</p>
<ol>
<li>调用 operator new 分配内存</li>
<li>在分配好的内存上初始化对象，并返回指向该对象的指针</li>
</ol>
<p>它可能会调用malloc, 但是具体如何分配内存要取决于实现. 相比于malloc, new默认在申请失败的时候会抛出异常而不是直接返回0.和new对应的是delete, 它们必须成对出现. new[] 则要和 delete[] 同时出现.</p>
<p>而 delete operator 类似，调用析构函数，再调用 operator delete 释放内存</p>
<p>C++标准库的实现之一——Clang的libcxx是如何实现全局的 operator new/delete 的（去掉了一些控制编译选项的宏定义，只留下了核心代码）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> size)</span> <span class="title">throw</span><span class="params">(<span class="built_in">std</span>::bad_alloc)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line">        size = <span class="number">1</span>;</div><div class="line">    <span class="keyword">void</span>* p;</div><div class="line">    <span class="keyword">while</span> ((p = ::<span class="built_in">malloc</span>(size)) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">std</span>::new_handler nh = <span class="built_in">std</span>::get_new_handler();</div><div class="line">        <span class="keyword">if</span> (nh)</div><div class="line">            nh();</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::bad_alloc();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* ptr)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ptr)</div><div class="line">        ::<span class="built_in">free</span>(ptr);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>神秘的 <code>operator new/delete</code> 在背后也不过是调用C函数库的 <code>malloc/free</code>. 当然，这跟实现有关，libcxx这样实现，不代表其它实现也是如此。</p>
<h3 id="new与malloc区别"><a href="#new与malloc区别" class="headerlink" title="new与malloc区别"></a>new与malloc区别</h3><p>new可以认为是一种封装，有一个全局函数叫<code>operator new(size_t)</code>就是一般意义上的new，你可以重写它，自己来实现分配内存并调用构造,一般认为new和malloc最大的区别就在于是否调用构造函数,除了会调用构造函数，new 还可以抛出bad_alloc异常.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://kelvinh.github.io/blog/2014/04/19/research-on-operator-new-and-delete/" target="_blank" rel="external">深入探究C++的new/delete操作符</a></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之加密与签名]]></title>
      <url>http://arvin-he.github.io/2017/07/19/py-crypto-2017-07-19/</url>
      <content type="html"><![CDATA[<h3 id="密码与通信"><a href="#密码与通信" class="headerlink" title="密码与通信"></a>密码与通信</h3><p>密码技术是一门历史悠久的技术。信息传播离不开加密与解密。密码技术的用途主要源于两个方面，加密/解密和签名/验签</p>
<h3 id="python中的加密库hashlib与pycrypto"><a href="#python中的加密库hashlib与pycrypto" class="headerlink" title="python中的加密库hashlib与pycrypto"></a>python中的加密库hashlib与pycrypto</h3><p>Python的hashlib提供了常用的摘要算法，比如md5, sha1, sha224, sha256, sha384, sha512等。<br>摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。<br>摘要算法就是通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest，目的是为了发现原始数据是否被人篡改过。<br>摘要算法之所以能指出数据是否被篡改过，就是因为摘要函数是一个单向函数，计算f(data)很容易，但通过digest反推data却非常困难。<br>而且，对原始数据做一个bit的修改，都会导致计算出的摘要完全不同。常见的摘要算法MD5.</p>
<p>摘要算法应用</p>
<ol>
<li>存储用户登录的用户名和口令时, 存储用户口令的摘要</li>
<li>对配置文件某些配置生成签名,防止篡改</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHash</span><span class="params">(file_path)</span>:</span></div><div class="line">    f = open(file_path, <span class="string">"rb"</span>)   <span class="comment">#以二进制读模式打开</span></div><div class="line">    line = f.readline()</div><div class="line">    hash = hashlib.md5()</div><div class="line">    <span class="keyword">while</span>(line):</div><div class="line">        hash.update(line.encode(<span class="string">'utf8'</span>))</div><div class="line">        line = f.readline()</div><div class="line">    f.close()</div><div class="line">    <span class="keyword">return</span> hash.hexdigest()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">IsHashEqual</span><span class="params">(file_path1, file_path2)</span>:</span></div><div class="line">    str1 = getHash(file_path1)</div><div class="line">    str2 = getHash(file_path2)</div><div class="line">    <span class="keyword">return</span> str1 == str2</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> IsHashEqual(<span class="string">"E:\\GIT\\1.txt"</span>, <span class="string">"E:\\GIT\\2.txt"</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">"文件内容相同!"</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"文件内容不同!"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 例子: 对配置文件中配置选项进行加密, 这里加密的不一定非得是文件,或者文件中某一个字符串, 也可以是你组合生成的字符串,但是</span></div><div class="line"><span class="comment"># 组合生成的字符串格式内容是固定的.</span></div><div class="line"><span class="comment"># 自动记录设备hash值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_record_device_hash</span><span class="params">(device_ini_path, base_ini_path)</span>:</span></div><div class="line">    ini = load_config(device_ini_path)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ini.has_section(<span class="string">'DeviceSignature'</span>):</div><div class="line">        ini.add_section(<span class="string">'DeviceSignature'</span>)</div><div class="line">        ini.write(open(device_ini_path, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>))</div><div class="line">    device_hash = _get_device_hash(device_ini_path, base_ini_path)</div><div class="line">    write_config(device_ini_path, <span class="string">"DeviceSignature"</span>, <span class="string">"signature"</span>, device_hash)</div><div class="line"></div><div class="line"><span class="comment"># 配置文件配置选项签名,防篡改</span></div><div class="line"><span class="comment"># 获取设备信息的hash值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_device_hash</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">import</span> hashlib</div><div class="line">    axis_cards = _get_axiscards()</div><div class="line">    ini = basic.sysData(<span class="string">"ini/base.ini"</span>)</div><div class="line">    manufacturer = ini[<span class="string">'sys'</span>][<span class="string">'manufacturer'</span>]</div><div class="line">    axis_cards.append(manufacturer)</div><div class="line">    model = ini[<span class="string">'sys'</span>][<span class="string">'model'</span>]</div><div class="line">    axis_cards.append(model)</div><div class="line">    secret_key = <span class="string">'you never guess'</span></div><div class="line">    axis_cards.append(secret_key)</div><div class="line">    devices_str = <span class="string">','</span>.join(axis_cards)</div><div class="line">    device_hash = hashlib.md5()</div><div class="line">    device_hash.update(devices_str.encode(<span class="string">'utf-8'</span>))</div><div class="line">    <span class="keyword">return</span> device_hash.hexdigest()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 判断hash值是否相等</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_is_hash_equal</span><span class="params">()</span>:</span></div><div class="line">    hash1 = _get_device_hash()</div><div class="line">    ini = basic.sysData(<span class="string">"ini/device.ini"</span>)</div><div class="line">    <span class="keyword">if</span> ini.has_option(<span class="string">'DeviceSignature'</span>, <span class="string">'signature'</span>):</div><div class="line">        hash2 = ini[<span class="string">'DeviceSignature'</span>][<span class="string">'signature'</span>]</div><div class="line">        <span class="keyword">if</span> hash2 <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> hash1 == hash2</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h3 id="关于pycrypto加密"><a href="#关于pycrypto加密" class="headerlink" title="关于pycrypto加密"></a>关于pycrypto加密</h3><p>PyCrypto是一个免费的加密算法库，支持常见的DES、AES加密以及MD5、SHA各种HASH运算.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mycrypto</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key=<span class="string">'keyskeyskeyskeys'</span>, iv = <span class="string">'keyskeyskeyskeys'</span>)</span>:</span></div><div class="line">        self.key = key</div><div class="line">        <span class="comment"># iv 长度必须是16字节, iv可以与key不一样 </span></div><div class="line">        self.iv = iv</div><div class="line">        self.mode = AES.MODE_CBC</div><div class="line">   </div><div class="line">    <span class="comment"># 加密函数，如果text不是16的倍数【加密文本text必须为16的倍数！】，那就补足为16的倍数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, text)</span>:</span></div><div class="line">        cryptor = AES.new(self.key, self.mode, self.iv)</div><div class="line">        <span class="comment"># 这里密钥key 长度必须为16（AES-128）、24（AES-192）、或32（AES-256）Bytes 长度.目前AES-128足够用</span></div><div class="line">        my_add = <span class="number">16</span> - (len(text) % <span class="number">16</span>)</div><div class="line">        text = text + (<span class="string">'\0'</span> * my_add)</div><div class="line">        self.ciphertext = cryptor.encrypt(text)</div><div class="line">        <span class="comment"># 因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题</span></div><div class="line">        <span class="comment"># 所以这里统一把加密后的字符串转化为16进制字符串</span></div><div class="line">        <span class="keyword">return</span> b2a_hex(self.ciphertext)</div><div class="line">   </div><div class="line">    <span class="comment"># 解密后，去掉补足的空格用strip() 去掉</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, text)</span>:</span></div><div class="line">        cryptor = AES.new(self.key, self.mode, self.iv)</div><div class="line">        plain_text = cryptor.decrypt(a2b_hex(text))</div><div class="line">        <span class="keyword">return</span> plain_text.decode(<span class="string">'utf-8'</span>).rstrip(<span class="string">'\0'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 创建加密对象</span></div><div class="line">mycrypto = Mycrypto()</div><div class="line"><span class="comment"># 加密信息</span></div><div class="line">device_ini_path = os.path.join(sysDir, <span class="string">"ini"</span>, <span class="string">"device.ini"</span>)</div><div class="line">device_info = load_config(device_ini_path)</div><div class="line"><span class="keyword">if</span> device_info.has_section(<span class="string">"DeviceDetail"</span>):</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> device_info[<span class="string">"DeviceDetail"</span>].items():</div><div class="line">        encrypt_text = mycrypto.encrypt(v)</div><div class="line">        print(<span class="string">"encrypt_text = &#123;&#125;"</span>.format(encrypt_text))</div><div class="line">        write_config(device_ini_path, <span class="string">"DeviceDetail"</span>, k, str(encrypt_text)[<span class="number">2</span>:<span class="number">-1</span>])</div><div class="line"></div><div class="line"><span class="comment"># 获取解密后的配置信息</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_axiscards_decrypto_config</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">import</span> mycrypto</div><div class="line">    mycrypto_ = mycrypto.Mycrypto()</div><div class="line">    axiscards_detail = &#123;&#125;</div><div class="line">    ini = basic.sysData(<span class="string">"ini/device.ini"</span>)</div><div class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> ini[<span class="string">"DeviceDetail"</span>].items():</div><div class="line">        plain_text = mycrypto_.decrypt(v)</div><div class="line">        print(<span class="string">"plain_text = &#123;&#125;"</span>.format(plain_text))</div><div class="line">        axiscards_detail[k] = int(plain_text)</div><div class="line">    <span class="keyword">return</span> axiscards_detail</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第十一章]]></title>
      <url>http://arvin-he.github.io/2017/07/17/http-note11-2017-07-17/</url>
      <content type="html"><![CDATA[<h2 id="Web-的攻击技术"><a href="#Web-的攻击技术" class="headerlink" title="Web 的攻击技术"></a>Web 的攻击技术</h2><p>目前，来自互联网的攻击大多是冲着 Web 站点来的，它们大多把Web 应用作为攻击目标。</p>
<h3 id="HTTP-不具备必要的安全功能"><a href="#HTTP-不具备必要的安全功能" class="headerlink" title="HTTP 不具备必要的安全功能"></a>HTTP 不具备必要的安全功能</h3><p>几乎现今所有的 Web 网站都会使用会话（session）管理、加密处理等安全性方面的功能，而 HTTP 协议内并不具备这些功能。</p>
<h3 id="在客户端即可篡改请求"><a href="#在客户端即可篡改请求" class="headerlink" title="在客户端即可篡改请求"></a>在客户端即可篡改请求</h3><p>在 Web 应用中，从浏览器那接收到的 HTTP 请求的全部内容，都可以在客户端自由地变更、篡改。所以 Web 应用可能会接收到与预期数据不相同的内容。<br>在 HTTP 请求报文内加载攻击代码，就能发起对 Web 应用的攻击。通过 URL 查询字段或表单、HTTP 首部、Cookie 等途径把攻击代码传入，若这时 Web 应用存在安全漏洞，那内部信息就会遭到窃取，或被攻击者拿到管理权限。</p>
<h3 id="针对-Web-应用的攻击模式"><a href="#针对-Web-应用的攻击模式" class="headerlink" title="针对 Web 应用的攻击模式"></a>针对 Web 应用的攻击模式</h3><p>对 Web 应用的攻击模式有以下两种。</p>
<ol>
<li>主动攻击</li>
<li>被动攻击</li>
</ol>
<p>主动攻击（active attack）是指攻击者通过直接访问 Web 应用，把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问到那些资源。</p>
<p>主动攻击模式里具有代表性的攻击是 SQL 注入攻击和 OS 命令注入攻击。</p>
<p>被动攻击（passive attack）是指利用圈套策略执行攻击代码的攻击模式。在被动攻击过程中，攻击者不直接对目标 Web 应用访问发起攻击。<br>步骤 1： 攻击者诱使用户触发已设置好的陷阱，而陷阱会启动发送已嵌入攻击代码的 HTTP 请求。<br>步骤 2： 当用户不知不觉中招之后，用户的浏览器或邮件客户端就会触发这个陷阱。<br>步骤 3： 中招后的用户浏览器会把含有攻击代码的 HTTP 请求发送给作为攻击目标的 Web 应用，运行攻击代码。<br>步骤 4： 执行完攻击代码，存在安全漏洞的 Web 应用会成为攻击者的跳板，可能导致用户所持的 Cookie 等个人信息被窃取，登录状态中的用户权限遭恶意滥用等后果。</p>
<p>被动攻击模式中具有代表性的攻击是跨站脚本攻击和跨站点请求伪造。</p>
<h3 id="因输出值转义不完全引发的安全漏洞"><a href="#因输出值转义不完全引发的安全漏洞" class="headerlink" title="因输出值转义不完全引发的安全漏洞"></a>因输出值转义不完全引发的安全漏洞</h3><p>实施 Web 应用的安全对策可大致分为以下两部分。</p>
<ul>
<li>客户端的验证</li>
<li>Web 应用端（服务器端）的验证<ul>
<li>输入值验证</li>
<li>输出值转义</li>
</ul>
</li>
</ul>
<h3 id="跨站脚本攻击"><a href="#跨站脚本攻击" class="headerlink" title="跨站脚本攻击"></a>跨站脚本攻击</h3><p>跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击。    </p>
<h3 id="SQL-注入攻击"><a href="#SQL-注入攻击" class="headerlink" title="SQL 注入攻击"></a>SQL 注入攻击</h3><p>SQL 注入（SQL Injection）是指针对 Web 应用使用的数据库，通过运行非法的 SQL 而产生的攻击。该安全隐患有可能引发极大的威胁，有时会直接导致个人信息及机密信息的泄露。<br>SQL 注入攻击有可能会造成以下等影响:</p>
<ul>
<li>非法查看或篡改数据库内的数据</li>
<li>规避认证</li>
<li>执行和数据库服务器业务关联的程序等</li>
</ul>
<h3 id="何为-SQL"><a href="#何为-SQL" class="headerlink" title="何为 SQL"></a>何为 SQL</h3><p>SQL 是用来操作关系型数据库管理系统（Relational DataBase Management System，RDBMS）的数据库语言，可进行操作数据或定义数据等。RDBMS 中有名的数据库有 Oracle Database、Microsoft SQL Server、IBM DB2、MySQL 和 PostgreSQL 等。这些数据库系统都可以把 SQL 作为数据库语言使用。</p>
<h3 id="OS-命令注入攻击"><a href="#OS-命令注入攻击" class="headerlink" title="OS 命令注入攻击"></a>OS 命令注入攻击</h3><p>OS 命令注入攻击（OS Command Injection）是指通过 Web 应用，执行非法的操作系统命令达到攻击的目的。只要在能调用 Shell 函数的地方就有存在被攻击的风险。</p>
<h3 id="HTTP-首部注入攻击"><a href="#HTTP-首部注入攻击" class="headerlink" title="HTTP 首部注入攻击"></a>HTTP 首部注入攻击</h3><p>HTTP 首部注入攻击（HTTP Header Injection）是指攻击者通过在响应首部字段内插入换行，添加任意响应首部或主体的一种攻击。属于被动攻击模式。<br>向首部主体内添加内容的攻击称为 HTTP 响应截断攻击(HTTP Response Splitting Attack).</p>
<h3 id="邮件首部注入攻击"><a href="#邮件首部注入攻击" class="headerlink" title="邮件首部注入攻击"></a>邮件首部注入攻击</h3><p>邮件首部注入（Mail Header Injection）是指 Web 应用中的邮件发送功能，攻击者通过向邮件首部 To 或 Subject 内任意添加非法内容发起的攻击。利用存在安全漏洞的 Web 网站，可对任意邮件地址发送广告邮件或病毒邮件。</p>
<h3 id="目录遍历攻击"><a href="#目录遍历攻击" class="headerlink" title="目录遍历攻击"></a>目录遍历攻击</h3><p>目录遍历（Directory Traversal）攻击是指对本无意公开的文件目录，通过非法截断其目录路径后，达成访问目的的一种攻击。这种攻击有时也称为路径遍历（Path Traversal）攻击。</p>
<h3 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h3><p>远程文件包含漏洞（Remote File Inclusion）是指当部分脚本内容需要从其他文件读入时，攻击者利用指定外部服务器的 URL 充当依赖文件，让脚本读取之后，就可运行任意脚本的一种攻击。</p>
<h3 id="因设置或设计上的缺陷引发的安全漏洞"><a href="#因设置或设计上的缺陷引发的安全漏洞" class="headerlink" title="因设置或设计上的缺陷引发的安全漏洞"></a>因设置或设计上的缺陷引发的安全漏洞</h3><p>因设置或设计上的缺陷引发的安全漏洞是指，错误设置 Web 服务器，或是由设计上的一些问题引起的安全漏洞。</p>
<h3 id="强制浏览"><a href="#强制浏览" class="headerlink" title="强制浏览"></a>强制浏览</h3><p>强制浏览（Forced Browsing）安全漏洞是指，从安置在 Web 服务器的公开目录下的文件中，浏览那些原本非自愿公开的文件。</p>
<h3 id="不正确的错误消息处理"><a href="#不正确的错误消息处理" class="headerlink" title="不正确的错误消息处理"></a>不正确的错误消息处理</h3><p>不正确的错误消息处理（Error Handling Vulnerability）的安全漏洞是指，Web 应用的错误信息内包含对攻击者有用的信息。与 Web 应用有关的主要错误信息如下所示:</p>
<ul>
<li>Web 应用抛出的错误消息</li>
<li>数据库等系统抛出的错误消息<br>Web 应用不必在用户的浏览画面上展现详细的错误消息。对攻击者来说，详细的错误消息有可能给他们下一次攻击以提示。</li>
</ul>
<h3 id="开放重定向"><a href="#开放重定向" class="headerlink" title="开放重定向"></a>开放重定向</h3><p>开放重定向（Open Redirect）是一种对指定的任意 URL 作重定向跳转的功能。而于此功能相关联的安全漏洞是指，假如指定的重定向 URL到某个具有恶意的 Web 网站，那么用户就会被诱导至那个 Web 网站。</p>
<h2 id="因会话管理疏忽引发的安全漏洞"><a href="#因会话管理疏忽引发的安全漏洞" class="headerlink" title="因会话管理疏忽引发的安全漏洞"></a>因会话管理疏忽引发的安全漏洞</h2><h3 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h3><p>会话劫持（Session Hijack）是指攻击者通过某种手段拿到了用户的会话 ID，并非法使用此会话 ID 伪装成用户，达到攻击的目的。</p>
<h3 id="会话固定攻击"><a href="#会话固定攻击" class="headerlink" title="会话固定攻击"></a>会话固定攻击</h3><p>对以窃取目标会话 ID 为主动攻击手段的会话劫持而言，会话固定攻击（Session Fixation）攻击会强制用户使用攻击者指定的会话 ID，属于被动攻击。</p>
<h3 id="跨站点请求伪造"><a href="#跨站点请求伪造" class="headerlink" title="跨站点请求伪造"></a>跨站点请求伪造</h3><p>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。</p>
<h2 id="其他安全漏洞"><a href="#其他安全漏洞" class="headerlink" title="其他安全漏洞"></a>其他安全漏洞</h2><h3 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h3><p>密码破解攻击（Password Cracking）即算出密码，突破认证。攻击不仅限于 Web 应用，还包括其他的系统（如 FTP 或 SSH 等）</p>
<h3 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h3><p>点击劫持（Clickjacking）是指利用透明的按钮或链接做成陷阱，覆盖在 Web 页面之上。然后诱使用户在不知情的情况下，点击那个链接访问内容的一种攻击手段。这种行为又称为界面伪装（UI Redressing）。</p>
<h3 id="DoS-攻击"><a href="#DoS-攻击" class="headerlink" title="DoS 攻击"></a>DoS 攻击</h3><p>DoS 攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对<br>象不仅限于 Web 网站，还包括网络设备及服务器等。<br>集中利用访问请求造成资源过载，资源用尽的同时，实际上服务也就呈停止状态。<br>通过攻击安全漏洞使服务停止</p>
<h3 id="后门程序"><a href="#后门程序" class="headerlink" title="后门程序"></a>后门程序</h3><p>后门程序（Backdoor）是指开发设置的隐藏入口，可不按正常步骤使用受限功能。利用后门程序就能够使用原本受限制的功能。<br>通常的后门程序分为以下 3 种类型:</p>
<ol>
<li>开发阶段作为 Debug 调用的后门程序</li>
<li>开发者为了自身利益植入的后门程序</li>
<li>攻击者通过某种方法设置的后门程序</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第十章]]></title>
      <url>http://arvin-he.github.io/2017/07/17/http-note10-2017-07-17/</url>
      <content type="html"><![CDATA[<h2 id="构建-Web-内容的技术"><a href="#构建-Web-内容的技术" class="headerlink" title="构建 Web 内容的技术"></a>构建 Web 内容的技术</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>由 HTML 构成的文档经过浏览器的解析、渲染后，呈现出来的结果就是 Web 页面。</p>
<h3 id="设计应用-CSS"><a href="#设计应用-CSS" class="headerlink" title="设计应用 CSS"></a>设计应用 CSS</h3><p>CSS（Cascading Style Sheets，层叠样式表）可以指定如何展现 HTML内的各种元素，属于样式表标准之一。CSS的理念就是让文档的结构和设计分离，达到解耦的目的。</p>
<h3 id="动态-HTML"><a href="#动态-HTML" class="headerlink" title="动态 HTML"></a>动态 HTML</h3><p>动态 HTML 技术是通过调用客户端脚本语言 JavaScript，实现对HTML 的 Web 页面的动态改造。利用 DOM（Document Object Model，文档对象模型）可指定欲发生动态变化的 HTML 元素。</p>
<h3 id="Web-服务器及程序协作的-CGI"><a href="#Web-服务器及程序协作的-CGI" class="headerlink" title="Web 服务器及程序协作的 CGI"></a>Web 服务器及程序协作的 CGI</h3><p>CGI（Common Gateway Interface，通用网关接口）是指 Web 服务器在接收到客户端发送过来的请求后转发给程序的一组机制。</p>
<h3 id="因-Java-而普及的-Servlet"><a href="#因-Java-而普及的-Servlet" class="headerlink" title="因 Java 而普及的 Servlet"></a>因 Java 而普及的 Servlet</h3><p>Servlet 1 是一种能在服务器上创建动态内容的程序。Servlet 是用 Java语言实现的一个接口，属于面向企业级 Java（JavaEE，Java Enterprise Edition）的一部分。</p>
<h3 id="数据发布的格式及语言"><a href="#数据发布的格式及语言" class="headerlink" title="数据发布的格式及语言"></a>数据发布的格式及语言</h3><p>XML（eXtensible Markup Language，可扩展标记语言）是一种可按应用目标进行扩展的通用标记语言。旨在通过使用 XML，使互联网数据共享变得更容易。</p>
<h3 id="JavaScript-衍生的轻量级易用-JSON"><a href="#JavaScript-衍生的轻量级易用-JSON" class="headerlink" title="JavaScript 衍生的轻量级易用 JSON"></a>JavaScript 衍生的轻量级易用 JSON</h3><p>JSON（JavaScript Object Notation）是一种以JavaScript（ECMAScript）的对象表示法为基础的轻量级数据标记语言。能够处理的数据类型有 false/null/true/ 对象 / 数组 / 数字 / 字符串，这 7 种类型。JSON 让数据更轻更纯粹，并且 JSON 的字符串形式可被 JavaScript 轻易地读入。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第九章]]></title>
      <url>http://arvin-he.github.io/2017/07/14/http-note9-2017-07-14/</url>
      <content type="html"><![CDATA[<p>##基于 HTTP 的功能追加协议</p>
<h3 id="HTTP-的瓶颈"><a href="#HTTP-的瓶颈" class="headerlink" title="HTTP 的瓶颈"></a>HTTP 的瓶颈</h3><p>在 Facebook 和 Twitter 等 SNS 网站上，几乎能够实时观察到海量用户公开发布的内容，为了尽可能实时地显示这些更新的内容，服务器上一有内容更新，就<br>需要直接把那些内容反馈到客户端的界面上。使用 HTTP 协议探知服务器上是否有内容更新，就必须频繁地从客户端到服务器端进行确认。如果服务器上没有内容更新，那么就会产生徒劳的通信。若想在现有 Web 实现所需的功能，以下这些 HTTP 标准就会成为瓶颈。</p>
<ul>
<li>一条连接上只可发送一个请求。</li>
<li>请求只能从客户端开始。客户端不可以接收除响应以外的指令。</li>
<li>请求 / 响应首部未经压缩就发送。首部信息越多延迟越大。</li>
<li>发送冗长的首部。每次互相发送相同的首部造成的浪费较多。</li>
<li>可任意选择数据压缩格式。非强制压缩发送。</li>
</ul>
<h3 id="Ajax-的解决方法"><a href="#Ajax-的解决方法" class="headerlink" title="Ajax 的解决方法"></a>Ajax 的解决方法</h3><p>Ajax（Asynchronous JavaScript and XML， 异 步 JavaScript 与 XML 技术）是一种有效利用 JavaScript 和 DOM（Document Object Model，文<br>档对象模型）的操作，以达到局部 Web 页面替换加载的异步通信手段。Ajax 的核心技术是名为 XMLHttpRequest 的 API，通过 JavaScript 脚本语言的调用就能和服务器进行 HTTP 通信。而利用 Ajax 实时地从服务器获取内容，有可能会导致大量请求产生。另外，Ajax 仍未解决 HTTP 协议本身存在的问题。</p>
<h3 id="Comet-的解决方法"><a href="#Comet-的解决方法" class="headerlink" title="Comet 的解决方法"></a>Comet 的解决方法</h3><p>一旦服务器端有内容更新了，Comet 不会让请求等待，而是直接给客户端返回响应。这是一种通过延迟应答，模拟实现服务器端向客户端推送（Server Push）的功能。通常，服务器端接收到请求，在处理完毕后就会立即返回响应，但为了实现推送功能，Comet 会先将响应置于挂起状态，当服务器端有内容更新时，再返回该响应。因此，服务器端一旦有更新，就可以立即反馈给客户端。内容上虽然可以做到实时更新，但为了保留响应，一次连接的持续时间也变长了。期间，为了维持连接会消耗更多的资源。另外，Comet也仍未解决 HTTP 协议本身存在的问题。</p>
<h3 id="SPDY-的设计与功能"><a href="#SPDY-的设计与功能" class="headerlink" title="SPDY 的设计与功能"></a>SPDY 的设计与功能</h3><p>SPDY 没有完全改写 HTTP 协议，而是在 TCP/IP 的应用层与运输层之间通过新加会话层的形式运作。同时，考虑到安全性问题，SPDY 规定通信中使用 SSL。<br>SPDY 以会话层的形式加入,控制对数据的流动,但还是采用 HTTP建立通信连接。因此,可照常使用 HTTP 的 GET 和 POST 等方法,Cookie 以及 HTTP 报文等。<br>使用 SPDY 后，HTTP 协议额外获得以下功能。<br>多路复用流<br>通过单一的 TCP 连接，可以无限制处理多个 HTTP 请求。所有请求的处理都在一条 TCP 连接上完成，因此 TCP 的处理效率得到提高。<br>赋予请求优先级<br>SPDY 不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。<br>压缩 HTTP 首部<br>压缩 HTTP 请求和响应的首部。这样一来，通信产生的数据包数量和发送的字节数就更少了。<br>推送功能<br>支持服务器主动向客户端推送数据的功能。这样，服务器可直接发送数据，而不必等待客户端的请求。<br>服务器提示功能<br>服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。</p>
<p>SPDY 基本上只是将单个域名（ IP 地址）的通信多路复用，所以当一个 Web 网站上使用多个域名下的资源，改善效果就会受到限制。<br>SPDY 的确是一种可有效消除 HTTP 瓶颈的技术，但很多 Web 网站存在的问题并非仅仅是由 HTTP 瓶颈所导致。对 Web 本身的速度提升，还应该从其他可细致钻研的地方入手，比如改善 Web 内容的编写方式等。</p>
<h3 id="使用浏览器进行全双工通信的WebSocket"><a href="#使用浏览器进行全双工通信的WebSocket" class="headerlink" title="使用浏览器进行全双工通信的WebSocket"></a>使用浏览器进行全双工通信的WebSocket</h3><p>WebSocket，即 Web 浏览器与 Web 服务器之间全双工通信标准。其中，WebSocket 协议由 IETF 定为标准，WebSocket API 由 W3C 定为标准。仍在开发中的 WebSocket 技术主要是为了解决 Ajax 和 Comet里 XMLHttpRequest 附带的缺陷所引起的问题。<br>由于是建立在 HTTP 基础上的协议，因此连接的发起方仍是客户端，而一旦确立 WebSocket 通信连接，不论服务器还是客户端，任意一方都可直接向对方发送报文。<br>WebSocket 协议的主要特点:<br>推送功能<br>支持由服务器向客户端推送数据的推送功能。这样，服务器可直接发送数据，而不必等待客户端的请求。<br>减少通信量<br>只要建立起 WebSocket 连接，就希望一直保持连接状态。和 HTTP 相比，不但每次连接时的总开销减少，而且由于 WebSocket 的首部信息很小，通信量也相应减少了。<br>为了实现 WebSocket 通信，在 HTTP 连接建立之后，需要完成一次“握手”（Handshaking）的步骤。</p>
<ol>
<li>握手·请求<br>为了实现 WebSocket 通信，需要用到 HTTP 的 Upgrade 首部字段，告知服务器通信协议发生改变，以达到握手的目的。</li>
<li>握手·响应<br>对于之前的请求，返回状态码 101 Switching Protocols 的响应。</li>
</ol>
<h3 id="期盼已久的-HTTP-2-0"><a href="#期盼已久的-HTTP-2-0" class="headerlink" title="期盼已久的 HTTP/2.0"></a>期盼已久的 HTTP/2.0</h3><p>HTTP/2.0 围绕着主要的 7 项技术进行讨论，现阶段（2012 年 8 月 13日），大都倾向于采用以下协议的技术。但是，讨论仍在持续，所以不能排除会发生重大改变的可能性。</p>
<ol>
<li>压缩 SPDY、Friendly</li>
<li>多路复用 SPDY</li>
<li>TLS 义务化 Speed＋ Mobility</li>
<li>协商 Speed＋ Mobility，Friendly</li>
<li>客户端拉曳（Client Pull）/服务器推送（Server Push）Speed＋ Mobility</li>
<li>流量控制 SPDY</li>
<li>WebSocket Speed＋ Mobility</li>
</ol>
<h3 id="Web-服务器管理文件的-WebDAV"><a href="#Web-服务器管理文件的-WebDAV" class="headerlink" title="Web 服务器管理文件的 WebDAV"></a>Web 服务器管理文件的 WebDAV</h3><p>WebDAV（Web-based Distributed Authoring and Versioning，基于万维网的分布式创作和版本控制）是一个可对 Web 服务器上的内容直接进行文件复制、编辑等操作的分布式文件系统。它作为扩展 HTTP/1.1的协议定义在 RFC4918。除了创建、删除文件等基本功能，它还具备文件创建者管理、文件编辑过程中禁止其他用户内容覆盖的加锁功能，以及对文件内容修改的版本控制功能。使用 HTTP/1.1 的 PUT 方法和 DELETE 方法，就可以对 Web 服务器上的文件进行创建和删除操作。可是出于安全性及便捷性等考虑，一般不使用。</p>
<p>扩展 HTTP/1.1 的 WebDAV<br>针对服务器上的资源，WebDAV 新增加了一些概念<br>集合（Collection）：是一种统一管理多个资源的概念。以集合为单位可进行各种操作。也可实现类似集合的集合这样的叠加。<br>资源（Resource）：把文件或集合称为资源。<br>属性（Property）：定义资源的属性。定义以“名称 = 值”的格式执行。<br>锁（Lock）：把文件设置成无法编辑状态。多人同时编辑时，可防止在同一时间进行内容写入。</p>
<p>WebDAV 内新增的方法及状态码<br>PROPFIND ：获取属性<br>PROPPATCH ：修改属性<br>MKCOL ：创建集合<br>COPY ：复制资源及属性<br>MOVE ：移动资源<br>LOCK ：资源加锁<br>UNLOCK ：资源解锁</p>
<p>为配合扩展的方法，状态码也随之扩展。<br>102 Processing ：可正常处理请求，但目前是处理中状态<br>207 Multi-Status ：存在多种状态<br>422 Unprocessible Entity ：格式正确，内容有误<br>423 Locked ：资源已被加锁<br>424 Failed Dependency ：处理与某请求关联的请求失败，因此不再维持依赖关系<br>507 Insufficient Storage ：保存空间不足</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML笔记二]]></title>
      <url>http://arvin-he.github.io/2017/07/13/html-notes2-2017-07-13/</url>
      <content type="html"><![CDATA[<h2 id="HTML-列表"><a href="#HTML-列表" class="headerlink" title="HTML 列表"></a>HTML 列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--无序列表--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--指定类型的无序列表--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>柠檬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </div><div class="line"></div><div class="line"><span class="comment">&lt;!--有序列表--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--设定起始索引的有序列表--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"50"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--嵌套列表--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶</div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>红茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>绿茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--自定义列表--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>计算机<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>用来计算的仪器 ... ...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>用来计算的仪器2 ... ...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>显示器<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>以视觉方式显示信息的装置 ... ...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="HTML-表单与输入"><a href="#HTML-表单与输入" class="headerlink" title="HTML 表单与输入"></a>HTML 表单与输入</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--文本域(Text fields)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">名：</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstname"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">姓：</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastname"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--密码域--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">用户：</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">密码：</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--复选框--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">我喜欢自行车：</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"Bike"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">我喜欢汽车：</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"Car"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--单选按钮--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">男性：</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">value</span>=<span class="string">"male"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">女性：</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">value</span>=<span class="string">"female"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--下拉列表, 指定初始显示值的下拉列表,如果没有指定默认第一个为初始显示值--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"cars"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"volvo"</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"saab"</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"fiat"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"audi"</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--创建一个文本域（多行文本输入控件）。用户可以在文本域中写入文本。在文本域中，可写入的字符字数不受限制。--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"5"</span>&gt;</span></div><div class="line">领先的 Web 技术教程 - 全部免费</div><div class="line">在w3school，你可以找到你所需要的所有的网站建设教程。</div><div class="line">从基础的HTML到XHTML，乃至进阶的XML、SQL、数据库、多媒体和WAP。</div><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--创建按钮--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Hello world!"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--创建group box--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>健康信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">    身高：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line">    体重：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>表单实例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--如果您点击提交，表单数据会被发送到名为 demo_form.asp 的页面。--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/demo/demo_form.asp"</span>&gt;</span></div><div class="line">First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">value</span>=<span class="string">"Mickey"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">Last name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">value</span>=<span class="string">"Mouse"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </div><div class="line"><span class="comment">&lt;!--如果您点击 "Submit" 按钮，您将把输入传送到名为 html_form_action.asp 的新页面。--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"input"</span> <span class="attr">action</span>=<span class="string">"/html/html_form_action.asp"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">I have a bike:</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"vehicle"</span> <span class="attr">value</span>=<span class="string">"Bike"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">I have a car: </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"vehicle"</span> <span class="attr">value</span>=<span class="string">"Car"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">I have an airplane: </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"vehicle"</span> <span class="attr">value</span>=<span class="string">"Airplane"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </div><div class="line"><span class="comment">&lt;!--带有单选按钮的表单--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">checked</span>&gt;</span>Male</div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>Female</div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </div><div class="line"><span class="comment">&lt;!--从表单发送电子邮件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"MAILTO:someone@w3school.com.cn"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"text/plain"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这个表单会把电子邮件发送到 W3School。<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">姓名：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yourname"</span> <span class="attr">size</span>=<span class="string">"20"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">电邮：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"mail"</span> <span class="attr">value</span>=<span class="string">"yourmail"</span> <span class="attr">size</span>=<span class="string">"20"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">内容：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">value</span>=<span class="string">"yourcomment"</span> <span class="attr">size</span>=<span class="string">"40"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"发送"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/i/eg_mouse.jpg"</span> <span class="attr">width</span>=<span class="string">"128"</span> <span class="attr">height</span>=<span class="string">"128"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/i/eg_cute.gif"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/i/ct_netscape.jpg"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.w3school.com.cn/i/w3school_logo_white.gif"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">"/i/eg_background.jpg"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--图像背景, gif 和 jpg 文件均可用作 HTML 背景,如果图像小于页面，图像会进行重复--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">"/i/eg_background.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--图片对齐方式, 请注意，bottom 对齐方式是默认的对齐方式。--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/i/eg_cute.gif"</span> <span class="attr">align</span>=<span class="string">"middle"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--带有图像的一个段落。图像的 align 属性设置为 "left"。图像将浮动到文本的左侧--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> =<span class="string">"/i/eg_cute.gif"</span> <span class="attr">align</span> =<span class="string">"left"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>通过改变 img 标签的 "height" 和 "width" 属性的值，您可以放大或缩小图像。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">为图片显示替换文本。在浏览器无法载入图像时，替换文本属性alt告诉读者们失去的信息。为页面上的图像都加上替换文本属性是个好习惯。</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/i/eg_goleft.gif"</span> <span class="attr">alt</span>=<span class="string">"向左转"</span> /&gt;</span></div><div class="line">制作图像链接</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/example/html/lastpage.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">src</span>=<span class="string">"/i/eg_buttonnext.gif"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">创建带有可供点击区域的图像地图。其中的每个区域都是一个超级链接。</div><div class="line">注释：img 元素中的 "usemap" 属性引用 map 元素中的 "id" 或 "name" 属性（根据浏览器），所以我们同时向 map 元素添加了 "id" 和 "name" 属性。</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/i/eg_planets.jpg"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">usemap</span>=<span class="string">"#planetmap"</span> <span class="attr">alt</span>=<span class="string">"Planets"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"planetmap"</span> <span class="attr">id</span>=<span class="string">"planetmap"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">coords</span>=<span class="string">"180,139,14"</span> <span class="attr">href</span> =<span class="string">"/example/html/venus.html"</span> <span class="attr">target</span> =<span class="string">"_blank"</span> <span class="attr">alt</span>=<span class="string">"Venus"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">coords</span>=<span class="string">"129,161,10"</span> <span class="attr">href</span> =<span class="string">"/example/html/mercur.html"</span> <span class="attr">target</span> =<span class="string">"_blank"</span> <span class="attr">alt</span>=<span class="string">"Mercury"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"rect"</span> <span class="attr">coords</span>=<span class="string">"0,0,110,260"</span> <span class="attr">href</span> =<span class="string">"/example/html/sun.html"</span> <span class="attr">target</span> =<span class="string">"_blank"</span> <span class="attr">alt</span>=<span class="string">"Sun"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line"></div><div class="line">把一幅普通的图像设置为图像映射</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/example/html/html_ismap.html"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/i/eg_planets.jpg"</span> <span class="attr">ismap</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="HTML-背景"><a href="#HTML-背景" class="headerlink" title="HTML 背景"></a>HTML 背景</h2><p>如果图像小于页面，图像会进行重复<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"#d0d0d0"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">"/i/eg_bg_06.gif"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="HTML-样式-style"><a href="#HTML-样式-style" class="headerlink" title="HTML 样式(style)"></a>HTML 样式(style)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">h1 &#123;color: red&#125;</span></div><div class="line"><span class="undefined">p &#123;color: blue&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>header 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">没有下划线的链接</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/example/html/lastpage.html"</span> <span class="attr">style</span>=<span class="string">"text-decoration:none"</span>&gt;</span>这是一个没有下划线的链接！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">引用外部样式</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/html/csstest1.css"</span> &gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我通过外部样式表进行格式化。<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我也一样！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="HTML-头部-head"><a href="#HTML-头部-head" class="headerlink" title="HTML 头部(head)"></a>HTML 头部(head)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gb2312"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Language"</span> <span class="attr">content</span>=<span class="string">"zh-cn"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标题不会显示在文档区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">一个 target，所有的链接</div><div class="line">使用 base 标签使页面中的所有标签在新窗口中打开。</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gb2312"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Language"</span> <span class="attr">content</span>=<span class="string">"zh-cn"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"_blank"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>这个连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 将在新窗口中加载，因为 target 属性被设置为 "_blank"。</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn"</span>&gt;</span>这个连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 也将在新窗口中加载，即使没有 target 属性。</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="HTML-元信息-meta"><a href="#HTML-元信息-meta" class="headerlink" title="HTML 元信息(meta)"></a>HTML 元信息(meta)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">本文档的 meta 属性标识了创作者和编辑软件。</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gb2312"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"w3school.com.cn"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"revised"</span> <span class="attr">content</span>=<span class="string">"David Yang,8/1/07"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"generator"</span> <span class="attr">content</span>=<span class="string">"Dreamweaver 8.0en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">本文档的 meta 属性描述了该文档和它的关键词。</div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"HTML examples"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"HTML, DHTML, CSS, XML, XHTML, JavaScript, VBScript"</span>&gt;</span></div><div class="line">在网址已经变更的情况下，将用户重定向到另外一个地址</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gb2312"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"5;url=http://www.w3school.com.cn"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>对不起。我们已经搬家了。您的 URL 是 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn"</span>&gt;</span>http://www.w3school.com.cn<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>您将在 5 秒内被重定向到新的地址。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果超过 5 秒后您仍然看到本消息，请点击上面的链接。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="HTML-脚本-script"><a href="#HTML-脚本-script" class="headerlink" title="HTML 脚本(script)"></a>HTML 脚本(script)</h2><p>运行于不支持脚本的浏览器<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"> <span class="built_in">document</span>.write(<span class="string">"Hello World!"</span>) </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Sorry, your browser does not support JavaScript!<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第八章]]></title>
      <url>http://arvin-he.github.io/2017/07/12/http-note8-2017-07-12/</url>
      <content type="html"><![CDATA[<h3 id="确认访问用户身份的认证"><a href="#确认访问用户身份的认证" class="headerlink" title="确认访问用户身份的认证"></a>确认访问用户身份的认证</h3><p>为了弄清究竟是谁在访问服务器，就得让对方的客户端自报家门,身份是否属实这点却也无从谈起,为确认 操作者是否真的具有访问系统的权限，就需要核对“登录者本人才知道的信息”、“登录者本人才会有的信息”。<br>核对的信息通常是指以下这些:</p>
<ul>
<li>密码：只有本人才会知道的字符串信息。</li>
<li>动态令牌：仅限本人持有的设备内显示的一次性密码。</li>
<li>数字证书：仅限本人（终端）持有的信息。</li>
<li>生物认证：指纹和虹膜等本人的生理信息。</li>
<li>IC 卡等：仅限本人持有的信息。<br>但是，即便对方是假冒的用户，只要能通过用户验证，那么计算机就会默认是出自本人的行为。</li>
</ul>
<h3 id="HTTP-使用的认证方式"><a href="#HTTP-使用的认证方式" class="headerlink" title="HTTP 使用的认证方式"></a>HTTP 使用的认证方式</h3><p>HTTP/1.1 使用的认证方式如下:</p>
<ol>
<li>BASIC 认证（基本认证）</li>
<li>DIGEST 认证（摘要认证）</li>
<li>SSL 客户端认证</li>
<li>FormBase 认证（基于表单认证）</li>
<li>还有 Windows 统一认证（Keberos 认证、NTLM 认证）</li>
</ol>
<h3 id="BASIC-认证"><a href="#BASIC-认证" class="headerlink" title="BASIC 认证"></a>BASIC 认证</h3><p>步骤 1： 当请求的资源需要 BASIC 认证时，服务器会随状态码 401 Authorization Required，返回带 WWW-Authenticate 首部字段的响应。该字段内包含认证的方式（BASIC） 及 Request-URI 安全域字符串（realm）。<br>步骤 2： 接收到状态码 401 的客户端为了通过 BASIC 认证，需要将用户 ID 及密码发送给服务器。发送的字符串内容是由用户 ID 和密码构成，两者中间以冒号（:）连接后，再经过 Base64 编码处理。<br>假设用户 ID 为 guest，密码是 guest，连接起来就会形成 guest:guest 这样的字符串。然后经过 Base64 编码，最后的结果即是Z3Vlc3Q6Z3Vlc3Q=。把这串字符串写入首部字段 Authorization 后，发送请求。当用户代理为浏览器时，用户仅需输入用户 ID 和密码即可，之后，浏览器会自动完成到 Base64 编码的转换工作。<br>步骤 3： 接收到包含首部字段 Authorization 请求的服务器，会对认证信息的正确性进行验证。如验证通过，则返回一条包含 Request-URI资源的响应。<br>BASIC 认证虽然采用 Base64 编码方式，但这不是加密处理。不需要任何附加信息即可对其解码。<br>另外，除此之外想再进行一次 BASIC 认证时，一般的浏览器却无法实现认证注销操作，这也是问题之一。BASIC 认证使用上不够便捷灵活，且达不到多数 Web 网站期望的安全性等级，因此它并不常用。</p>
<h3 id="DIGEST-认证"><a href="#DIGEST-认证" class="headerlink" title="DIGEST 认证"></a>DIGEST 认证</h3><p>DIGEST 认证同样使用质询 / 响应的方式（challenge/response），但不会像 BASIC 认证那样直接发送明文密码。所谓质询响应方式是指，一开始一方会先发送认证要求给另一方，接着使用从另一方那接收到的质询码计算生成响应码。最后将响应码返回给对方进行认证的方式。<br>步骤 1： 请求需认证的资源时，服务器会随着状态码 401 Authorization Required，返 回带 WWW-Authenticate 首部字段的响应。该字段内包含质问响应方式认证所需的临时质询码（随机数，nonce）。首部字段 WWW-Authenticate 内必须包含 realm 和 nonce 这两个字段的信息。客户端就是依靠向服务器回送这两个值进行认证的。nonce 是一种每次随返回的 401 响应生成的任意随机字符串。该字符串通常推荐由 Base64 编码的十六进制数的组成形式，但实际内容依赖服务器的具体实现。<br>步骤 2： 接收到 401 状态码的客户端，返回的响应中包含 DIGEST 认证必须的首部字段 Authorization 信息。首部字段 Authorization 内必须包含 username、realm、nonce、uri 和response 的字段信息。其中，realm 和 nonce 就是之前从服务器接收到的响应中的字段。<br>username 是 realm 限定范围内可进行认证的用户名。<br>uri（digest-uri）即 Request-URI 的值，但考虑到经代理转发后Request-URI 的值可能被修改，因此事先会复制一份副本保存在 uri内。<br>response 也可叫做 Request-Digest，存放经过 MD5 运算后的密码字符串，形成响应码。<br>步骤 3： 接收到包含首部字段 Authorization 请求的服务器，会确认认证信息的正确性。认证通过后则返回包含 Request-URI 资源的响应。并且这时会在首部字段 Authentication-Info 写入一些认证成功的相关信息。<br>DIGEST 认证提供了高于 BASIC 认证的安全等级，但是和 HTTPS 的客户端认证相比仍旧很弱。DIGEST 认证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。DIGEST 认证和 BASIC 认证一样，使用上不那么便捷灵活，且仍达不到多数 Web 网站对高度安全等级的追求标准。因此它的适用范围也有所受限。</p>
<h3 id="SSL-客户端认证"><a href="#SSL-客户端认证" class="headerlink" title="SSL 客户端认证"></a>SSL 客户端认证</h3><p>从使用用户 ID 和密码的认证方式方面来讲，只要二者的内容正确，即可认证是本人的行为。但如果用户 ID 和密码被盗，就很有可能被第三者冒充。利用 SSL 客户端认证则可以避免该情况的发生。<br>SSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。为达到 SSL 客户端认证的目的，需要事先将客户端证书分发给客户端，且客户端必须安装此证书。</p>
<p>SSL 客户端认证的认证步骤<br>步骤 1： 接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证书。<br>步骤 2： 用户选择将发送的客户端证书后，客户端会把客户端证书信息以 Client Certificate 报文方式发送给服务器。<br>步骤 3： 服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通信。</p>
<p>SSL 客户端认证采用双因素认证<br>多数情况下，SSL 客户端认证不会仅依靠证书完成认证，一般会和基于表单认证（稍后讲解）组合形成一种双因素认证（Two-factor authentication）来使用。所谓双因素认证就是指，认证过程中不仅需要密码这一个因素，还需要申请认证者提供其他持有信息，从而作为另一个因素，与其组合使用的认证方式。<br>换言之，第一个认证因素的 SSL 客户端证书用来认证客户端计算机，另一个认证因素的密码则用来确定这是用户本人的行为。</p>
<h3 id="基于表单认证"><a href="#基于表单认证" class="headerlink" title="基于表单认证"></a>基于表单认证</h3><p>基于表单的认证方法并不是在 HTTP 协议中定义的。客户端会向服务器上的 Web 应用程序发送登录信息（Credential），按登录信息的验证结果认证。<br>根据 Web 应用程序的实际安装，提供的用户界面及认证方式也各不相同。多数情况下，输入已事先登录的用户 ID（通常是任意字符串或邮件地址）和密码等登录信息后，发送给 Web 应用程序，基于认证结果来决定认证是否成功。<br>认证多半为基于表单认证,由于使用上的便利性及安全性问题，HTTP 协议标准提供的 BASIC 认证和 DIGEST 认证几乎不怎么使用。另外，SSL 客户端认证虽然具有<br>高度的安全等级，但因为导入及维持费用等问题，还尚未普及。<br>SSH 和 FTP 协议，<strong>服务器</strong>与<strong>客户端</strong>之间的认证是合乎标准规范的，并且满足了最基本的功能需求上的安全使用级别，因此这些协议的认证可以拿来直接使用。但是对于 <strong>Web 网站</strong>的认证功能，能够满足其安全使用级别的标准规范并不存在，所以只好使用由 Web 应用程序各自实现基于表单的认证方式。</p>
<h3 id="Session-管理及-Cookie-应用"><a href="#Session-管理及-Cookie-应用" class="headerlink" title="Session 管理及 Cookie 应用"></a>Session 管理及 Cookie 应用</h3><p>基于表单认证的标准规范尚未有定论，一般会使用 Cookie 来管理Session（会话）。以弥补 HTTP 协议中不存在的状态管理功能.<br>步骤 1： 客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务器。而这时，会使用 HTTPS通信来进行 HTML 表单画面的显示和用户输入数据的发送。<br>步骤 2： 服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证，然后把用户的认证状态与Session ID 绑定后记录在服务器端。向客户端返回响应时，会在首部字段 Set-Cookie 内写入 SessionID,你可以把 Session ID 想象成一种用以区分不同用户的等位号。另外，为减轻跨站脚本攻击（XSS）造成的损失，建议事先在 Cookie内加上 httponly 属性。<br>步骤 3： 客户端接收到从服务器端发来的 Session ID 后，会将其作为Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。</p>
<p>通常，一种安全的保存方法是，先利用给密码加盐（salt） 1 的方式增加额外信息，再使用散列（hash）函数计算出散列值后保存。但是我们也经常看到直接保存明文密码的做法，而这样的做法具有导致密码泄露的风险。</p>
<p> salt 其实就是由服务器随机生成的一个字符串，但是要保证长度足够长，并且是真正随机生成的。然后把它和密码字符串相连接（前后都可以）生成散列值。当<br>两个用户使用了同一个密码时，由于随机生成的 salt 值不同，对应的散列值也将是不同的。这样一来，很大程度上减少了密码特征，攻击者也就很难利用自己手<br>中的密码特征库进行破解。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第七章]]></title>
      <url>http://arvin-he.github.io/2017/07/12/http-note7-2017-07-12/</url>
      <content type="html"><![CDATA[<h3 id="http的不足"><a href="#http的不足" class="headerlink" title="http的不足"></a>http的不足</h3><ul>
<li>通信使用明文（不加密），内容可能会被窃听</li>
<li>不验证通信方的身份，因此有可能遭遇伪装</li>
<li>无法证明报文的完整性，所以有可能已遭篡改</li>
</ul>
<h3 id="加密处理方式"><a href="#加密处理方式" class="headerlink" title="加密处理方式"></a>加密处理方式</h3><ol>
<li>通信的加密<br>HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或TLS（Transport Layer Security，安全层传输协议）的组合使用，加密 HTTP 的通信内容。<br>用 SSL 建立安全通信线路之后，就可以在这条线路上进行 HTTP通信了。与 SSL 组合使用的 HTTP 被称为 HTTPS（HTTP Secure，超文本传输安全协议）或 HTTP over SSL。</li>
<li>内容的加密<br>即把HTTP 报文里所含的内容进行加密处理, 为了做到有效的内容加密，前提是要求客户端和服务器同时具备加密和解密机制。该方式不同于 SSL 或 TLS 将整个通信线路加密处理，所以内容仍有被篡改的风险。(虽然劫持者看不到内容,但可以篡改劫持信息的内容)</li>
</ol>
<h3 id="不验证通信方的身份"><a href="#不验证通信方的身份" class="headerlink" title="不验证通信方的身份"></a>不验证通信方的身份</h3><p>HTTP 协议中的请求和响应不会对通信方进行确认<br>任何人都可发起请求, 服务器只要接收到请求，不管对方是谁都会返回一个响应（但也仅限于发送端的 IP 地址和端口号没有被 Web 服务器设定限制访问的前提下）<br>查明对手的证书<br>SSL 不仅提供加密处理，而且还使用了一种被称为证书的手段，可用于确定方.<br>证书由值得信任的第三方机构颁发，用以证明服务器和客户端是实际存在的。另外，伪造证书从技术角度来说是异常困难的一件事。所以只要能够确认通信方（服务器或客户端）持有的证书，即可判断通信方的真实意图。<br>另外，客户端持有证书即可完成个人身份的确认，也可用于对Web 网站的认证环节。</p>
<h3 id="证明报文完整性，可能已遭篡改"><a href="#证明报文完整性，可能已遭篡改" class="headerlink" title="证明报文完整性，可能已遭篡改"></a>证明报文完整性，可能已遭篡改</h3><p>中间人攻击（Man-in-the-Middle attack，MITM）:请求或响应在传输途中，遭攻击者拦截并篡改内容的攻击.<br>HTTP 协议确定报文完整性的方法，但事实上并不便捷、可靠。其中常用的是 MD5 和 SHA-1 等散列值校验的方法，以及用来确认文件的数字签名方法。<br>提供文件下载服务的 Web 网站也会提供相应的以 PGP（Pretty Good Privacy，完美隐私）创建的数字签名及 MD5 算法生成的散列值。PGP 是用来证明创建文件的数字签名，MD5 是由单向函数生成的散列值。不论使用哪一种方法，都需要操纵客户端的用户本人亲自检查验证下载的文件是否就是原来服务器上的文件。浏览器无法自动帮用户检查。可惜的是，用这些方法也依然无法百分百保证确认结果正确。因为 PGP 和 MD5 本身被改写的话，用户是没有办法意识到的。为了有效防止这些弊端，有必要使用 HTTPS。SSL 提供认证和加密处理及摘要功能。</p>
<h3 id="HTTPS-HTTP-加密-认证-完整性保护"><a href="#HTTPS-HTTP-加密-认证-完整性保护" class="headerlink" title="HTTPS = HTTP+ 加密 + 认证 + 完整性保护"></a>HTTPS = HTTP+ 加密 + 认证 + 完整性保护</h3><p>使用HTTPS 通信时，不再用 <code>http://</code>，而是改用<code>https://</code>。另外，当浏览器访问 HTTPS 通信有效的 Web 网站时，浏览器的地址栏内会出现一个带锁的标记。对 HTTPS 的显示方式会因浏览器的不同而有所改变。<br>HTTPS 是身披 SSL 外壳的 HTTP,HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用SSL（Secure Socket Layer）和 TLS（Transport Layer Security）协议代替而已。<br>通常，HTTP 直接和 TCP 通信。当使用 SSL 时，则演变成 http 先和 SSL 通信，再由 SSL 和 TCP 通信了。如下图所示</p>
<p><img src="http-note7-2017-07-12/1.png" alt=""></p>
<p>SSL 是独立于 HTTP 的协议，所以不光是 HTTP 协议，其他运行在应用层的 SMTP 和 Telnet 等协议均可配合 SSL 协议使用。可以说 SSL 是当今世界上应用最为广泛的网络安全技术。</p>
<h3 id="相互交换密钥的公开密钥加密技术"><a href="#相互交换密钥的公开密钥加密技术" class="headerlink" title="相互交换密钥的公开密钥加密技术"></a>相互交换密钥的公开密钥加密技术</h3><p>SSL 采用一种叫做公开密钥加密（Public-key cryptography）的加密处理方式。<br>近代的加密方法中加密算法是公开的，而密钥却是保密的。通过这种方式得以保持加密方法的安全性。加密和解密都会用到密钥。没有密钥就无法对密码解密，反过来说，任何人只要持有密钥就能解密了。如果密钥被攻击者获得，那加密也就失去了意义。</p>
<ul>
<li><p>对称密钥加密<br>加密和解密同用一个密钥的方式称为共享密钥加密（Common key crypto system）也被叫做对称密钥加密, 以共享密钥方式加密时必须将密钥也发给对方。</p>
</li>
<li><p>使用两把密钥的公开密钥加密<br>公开密钥加密方式很好地解决了共享密钥加密的困难, 公开密钥加密使用一对非对称的密钥。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思<br>义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。利用这种方式，不需要发送用来解密的私有密钥，也不必担心密钥被攻击者窃听而盗走。另外，要想根据密文和公开密钥，恢复到信息原文是异常困难的，因为解密过程就是在对离散对数进行求值，这并非轻而易举就能办到。退一步讲，如果能对一个非常大的整数做到快速地因式分解，那么密码破解还是存在希望的。但就目前的技术来看是不太现实的。</p>
</li>
</ul>
<h3 id="HTTPS-采用混合加密机制"><a href="#HTTPS-采用混合加密机制" class="headerlink" title="HTTPS 采用混合加密机制"></a>HTTPS 采用混合加密机制</h3><p>HTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密机制。<br>公开密钥加密与共享密钥加密相比，其处理速度要慢。所以应充分利用两者各自的优势，将多种方法组合起来用于通信。在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式。</p>
<h3 id="证明公开密钥正确性的证书"><a href="#证明公开密钥正确性的证书" class="headerlink" title="证明公开密钥正确性的证书"></a>证明公开密钥正确性的证书</h3><p>公开密钥加密方式还是存在一些问题的。那就是无法证明公开密钥本身就是货真价实的公开密钥。比如，正准备和某台服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。<br>为了解决上述问题，可以使用由数字证书认证机构（CA，Certificate Authority）和其相关机关颁发的公开密钥证书。数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场上。<br>首先，服务器的运营人员向数字证书认证机构提出公开密钥的申请。数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起。<br>服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行公开密钥加密方式通信。公钥证书也可叫做数字证书或直接称为证书。接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，客户端便可明确两件事：一，认证服务器的公开密钥的是真实有效的数字证书认证机构。二，服务器的公开密钥是值得信赖的。<br>此处认证机关的公开密钥必须安全地转交给客户端。使用通信方式时，如何安全转交是一件很困难的事，因此，多数<strong>浏览器开发商发布版本时，会事先在内部植入常用认证机关的公开密钥</strong>。</p>
<h3 id="可证明组织真实性的-EV-SSL-证书"><a href="#可证明组织真实性的-EV-SSL-证书" class="headerlink" title="可证明组织真实性的 EV SSL 证书"></a>可证明组织真实性的 EV SSL 证书</h3><p>证书的一个作用是用来证明作为通信一方的服务器是否规范，另外一个作用是可确认对方服务器背后运营的企业是否真实存在。拥有该特性的证书就是 EV SSL 证书（Extended Validation SSL Certificate）。EV SSL 证书是基于国际标准的认证指导方针颁发的证书。其严格规定了对运营组织是否真实的确认方针，因此，通过认证的Web 网站能够获得更高的认可度。持有 EV SSL 证书的 Web 网站的浏览器地址栏处的背景色是绿色的，从视觉上就能一眼辨别出。而且在地址栏的左侧显示了 SSL证书中记录的组织名称以及颁发证书的认证机构的名称。</p>
<h3 id="用以确认客户端的客户端证书"><a href="#用以确认客户端的客户端证书" class="headerlink" title="用以确认客户端的客户端证书"></a>用以确认客户端的客户端证书</h3><p>HTTPS 中还可以使用客户端证书,以客户端证书进行客户端认证，证明服务器正在通信的对方始终是预料之内的客户端，其作用跟服务器证书如出一辙。</p>
<h3 id="由自认证机构颁发的证书称为自签名证书"><a href="#由自认证机构颁发的证书称为自签名证书" class="headerlink" title="由自认证机构颁发的证书称为自签名证书"></a>由自认证机构颁发的证书称为自签名证书</h3><p>如果使用 OpenSSL 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。但该服务器证书在互联网上不可作为证书使用.<br>独立构建的认证机构叫做自认证机构，由自认证机构颁发的“无用”证书也被戏称为自签名证书。<br>自认证机构颁发的服务器证书之所以不起作用，是因为它无法消除伪装的可能性。自认证机构能够产生的作用顶多也就是自己对外宣称“我是○○”的这种程度。即使采用自签名证书，通过 SSL加密之后，可能偶尔还会看见通信处在安全状态的提示，可那也是有问题的。因为 就算加密通信，也不能排除正在和已经过伪装的假服务器保持通信。<br>值得信赖的第三方机构介入认证，才能让已植入在浏览器内的认证机构颁布的公开密钥发挥作用，并借此证明服务器的真实性。多数浏览器内预先已植入备受信赖的认证机构的证书，但也有一小部分浏览器会植入中级认证机构的证书。对于中级认证机构颁发的服务器证书，某些浏览器会以正规的证书来对待，可有的浏览器会当作自签名证书。</p>
<h3 id="HTTPS-的安全通信机制"><a href="#HTTPS-的安全通信机制" class="headerlink" title="HTTPS 的安全通信机制"></a>HTTPS 的安全通信机制</h3><p>HTTPS 通信过程<br>步骤 1： 客户端通过发送 Client Hello 报文开始 SSL 通信。报文中包含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。<br>步骤 2： 服务器可进行 SSL 通信时，会以 Server Hello 报文作为应答。和客户端一样，在报文中包含 SSL 版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。<br>步骤 3： 之后服务器发送 Certificate 报文。报文中包含公开密钥证书。<br>步骤 4： 最后服务器发送 Server Hello Done 报文通知客户端，最初阶段的 SSL 握手协商部分结束。<br>步骤 5： SSL 第一次握手结束之后，客户端以 Client Key Exchange 报文作为回应。报文中包含通信加密中使用的一种被称为 Pre-master secret 的随机密码串。该报文已用步骤 3 中的公开密钥进行加密。<br>步骤 6： 接着客户端继续发送 Change Cipher Spec 报文。该报文会提示服务器，在此报文之后的通信会采用 Pre-master secret 密钥加密。<br>步骤 7： 客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。<br>步骤 8： 服务器同样发送 Change Cipher Spec 报文。<br>步骤 9： 服务器同样发送 Finished 报文.<br>步骤 10： 服务器和客户端的 Finished 报文交换完毕之后，SSL 连接就算建立完成。当然，通信会受到 SSL 的保护。从此处开始进行应用层协议的通信，即发送 HTTP 请求。<br>步骤 11： 应用层协议通信，即发送 HTTP 响应。<br>步骤 12： 最后由客户端断开连接。断开连接时，发送 close_notify 报文。上图做了一些省略，这步之后再发送 TCP FIN 报文来关闭与 TCP的通信。<br>在以上流程中，应用层发送数据时会附加一种叫做 MAC（Message Authentication Code）的报文摘要。MAC 能够查知报文是否遭到篡改，从而保护报文的完整性。</p>
<p>CBC 模式（Cipher Block Chaining）又名密码分组链接模式。在此模式下，将前<br>一个明文块加密处理后和下一个明文块做 XOR 运算，使之重叠，然后再对运算<br>结果做加密处理。对第一个明文块做加密时，要么使用前一段密文的最后一块，<br>要么利用外部生成的初始向量（initial vector，IV）</p>
<h3 id="SSL-和-TLS"><a href="#SSL-和-TLS" class="headerlink" title="SSL 和 TLS"></a>SSL 和 TLS</h3><p>HTTPS 使用 SSL（Secure Socket Layer） 和 TLS（Transport Layer Security）这两个协议。SSL 技术最初是由浏览器开发商网景通信公司率先倡导的，开发过 SSL3.0 之前的版本。目前主导权已转移到 IETF（Internet Engineering Task Force，Internet 工程任务组）的手中. IETF 以 SSL3.0 为基准，后又制定了 TLS1.0、TLS1.1 和 TLS1.2。TSL 是以 SSL 为原型开发的协议，有时会统一称该协议为 SSL。当前主流的版本是 SSL3.0 和 TLS1.0。      </p>
<h4 id="SSL-速度慢"><a href="#SSL-速度慢" class="headerlink" title="SSL 速度慢"></a>SSL 速度慢</h4><p>HTTPS 也存在一些问题，那就是当使用 SSL 时，它的处理速度会变慢。<br>SSL 的慢分两种。一种是指通信慢。另一种是指由于大量消耗CPU 及内存等资源，导致处理速度变慢。</p>
<p>和使用 HTTP 相比，网络负载可能会变慢 2 到 100 倍。除去和TCP 连接、发送 HTTP 请求 • 响应以外，还必须进行 SSL 通信，因此整体上处理通信量不可避免会增加。另一点是 SSL 必须进行加密处理。在服务器和客户端都需要进行加密和解密的运算处理。因此从结果上讲，比起 HTTP 会更多地消耗服务器和客户端的硬件资源，导致负载增强。针对速度变慢这一问题，并没有根本性的解决方案，我们会使用SSL 加速器这种（专用服务器）硬件来改善该问题。该硬件为SSL 通信专用硬件，相对软件来讲，能够提高数倍 SSL 的计算速度。仅在 SSL 处理时发挥 SSL 加速器的功效，以分担负载。</p>
<h3 id="为什么不一直使用-HTTPS"><a href="#为什么不一直使用-HTTPS" class="headerlink" title="为什么不一直使用 HTTPS"></a>为什么不一直使用 HTTPS</h3><ol>
<li>与纯文本通信相比，加密通信会消耗更多的CPU 及内存资源。如果每次通信都加密，会消耗相当多的资源，平摊到一台计算机上时，能够处理的请求数量必定也会随之减少。因此，如果是非敏感信息则使用 HTTP 通信，只有在包含个人信息等敏感数据时，才利用 HTTPS 加密通信。并非对所有内容都进行加密处理，而是仅在那些需要信息隐藏时才会加密，以节约资源。</li>
<li>此外, 要进行 HTTPS 通信，证书是必不可少的。而使用的证书必须向认证机构（CA）购买。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML笔记一]]></title>
      <url>http://arvin-he.github.io/2017/07/11/html-notes1-2017-07-11/</url>
      <content type="html"><![CDATA[<h2 id="HTML-基础标签"><a href="#HTML-基础标签" class="headerlink" title="HTML 基础标签"></a>HTML 基础标签</h2><ol>
<li>title 元素的内容会显示在浏览器的标题栏中。<code>&lt;title&gt;我的第一个 HTML 页面&lt;/title&gt;</code></li>
<li>body 元素的内容会显示在浏览器中。</li>
<li>段落标签: <code>&lt;p&gt;这是段落。&lt;/p&gt;</code> ,段落元素由 p 标签定义。这个段落在源代码中包含许多行但是浏览器忽略了它们。段落的行数依赖于浏览器窗口的大小。如果调节浏览器窗口的大小，将改变段落中的行数。</li>
<li>注意: 浏览器忽略了源代码中的排版,即忽略多余的空格和换行。</li>
<li>换行使用<code>&lt;br&gt;</code>标签</li>
<li>关于<code>&lt;h1&gt;~&lt;h6&gt;</code>标题标签,请仅仅把标题标签用于标题文本。不要仅仅为了产生粗体文本而使用它们。请使用其它标签或 CSS 代替</li>
<li>居中排列标题: <code>&lt;h1 align=&quot;center&quot;&gt;This is heading 1&lt;/h1&gt;</code></li>
<li><p>hr 标签定义水平线</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>注释: <code>&lt;!--这是一段注释。注释不会在浏览器中显示。--&gt;</code></p>
</li>
<li>背景颜色: <code>&lt;body bgcolor=&quot;yellow&quot;&gt;</code></li>
</ol>
<h2 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h2><h3 id="常用的格式化"><a href="#常用的格式化" class="headerlink" title="常用的格式化"></a>常用的格式化</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>This text is bold<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>This text is strong<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>This text is emphasized<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>This text is italic<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>This text is big<span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>This text is small<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">This text contains</div><div class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>subscript<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">This text contains</div><div class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>superscript<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一些说明:<br><code>&lt;b&gt;</code>标签与<code>&lt;strong&gt;</code>标签的区别:<br>两者在网页中显示效果一样，但实际目的不同。<br><code>&lt;b&gt;</code>这个标签对应 bold,即文本加粗,目的仅仅是为了加粗显示文本,是一种样式/风格需求<br><code>&lt;strong&gt;</code>这个标签意思是加强，表示该文本比较重要，提醒读者/终端注意。为了达到这个目的，浏览器等终端将其加粗显示；<br>总结：<code>&lt;b&gt;</code>为了加粗而加粗，<code>&lt;strong&gt;</code>为了标明重点而加粗。</p>
<p>HTML5 的一个最大的特性 – 语义化<br><code>&lt;b&gt;</code> 和 <code>&lt;i&gt;</code> 创建之初就是简单地表示粗体和斜体样式，但现在是 HTML5 的天下。语义化是 HTML5 最大的特性之一，而所有被 HTML5 保留的标签都带有其特有的语义，<code>&lt;b&gt;</code> 和 <code>&lt;i&gt;</code> 也不例外，它们分别被重新赋予了语义。相比较而言，标签的样式反而变得无足轻重，所以上面所讲的两组标签，虽然样式上表现极其相似，但其实语义上各有侧重。<br>在默认的 HTML 样式表定义中，b 和 strong 的样式一样，为 <code>{ font-weight: bolder }</code>而 em 的默认样式为 <code>{ font-style: italic }</code>，与 i 相同。在 HTML 4 中，em 表示 emphasized text，strong 表示 strong emphasized text，故 strong 的强度要更强。而在 HTML 5 中，strong 的定义改成了 important text。当然 emphasized 和 strong emphasized 乃至 important 之间怎么界定很模糊，关键是在自己编写 HTML 代码的时候保持使用上一致。b 和 i 仅仅表示这里应该用粗体或者斜体显示.</p>
<p><code>&lt;big&gt;</code> 和 <code>&lt;small&gt;</code> 显示大号和小号字体<br><code>&lt;sub&gt;</code> 和<code>&lt;sup&gt;</code>分别表示下标和上标.<br><code>&lt;tt&gt;</code>    呈现类似打字机或者等宽的文本效果。</p>
<h3 id="文本预格式化"><a href="#文本预格式化" class="headerlink" title="文本预格式化"></a>文本预格式化</h3><p>文本预格式化使用<code>&lt;pre&gt;</code>标签<br>被包围在 pre 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。<br><code>&lt;pre&gt;</code> 标签的一个常见应用就是用来表示计算机的源代码。</p>
<h3 id="“计算机输出”标签"><a href="#“计算机输出”标签" class="headerlink" title="“计算机输出”标签"></a>“计算机输出”标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>Computer code<span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Keyboard input<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tt</span>&gt;</span>Teletype text<span class="tag">&lt;/<span class="name">tt</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>Sample text<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>Computer variable<span class="tag">&lt;/<span class="name">var</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这些标签常用于显示计算机/编程代码。</p>
<h3 id="在-HTML-文件中写地址"><a href="#在-HTML-文件中写地址" class="headerlink" title="在 HTML 文件中写地址"></a>在 HTML 文件中写地址</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></div><div class="line">Written by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:webmaster@example.com"</span>&gt;</span>Donald Duck<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>&gt;</span> </div><div class="line">Visit us at:<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">Example.com<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">Box 564, Disneyland<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">USA</div><div class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="关于缩写和首字母缩写-即缩词略写"><a href="#关于缩写和首字母缩写-即缩词略写" class="headerlink" title="关于缩写和首字母缩写,即缩词略写"></a>关于缩写和首字母缩写,即缩词略写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"etcetera"</span>&gt;</span>etc.<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">acronym</span> <span class="attr">title</span>=<span class="string">"World Wide Web"</span>&gt;</span>WWW<span class="tag">&lt;/<span class="name">acronym</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在某些浏览器中，当您把鼠标移至缩略词语上时，title 可用于展示表达的完整版本。<br>title仅对于 IE 5 中的 acronym 元素有效。但对于 Netscape 6.2 中的 abbr 和 acronym 元素都有效。</p>
<h3 id="文字方向"><a href="#文字方向" class="headerlink" title="文字方向"></a>文字方向</h3><p>如果您的浏览器支持 bi-directional override (bdo)，下一行会从右向左输出 (rtl)即right to left.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">"rtl"</span>&gt;</span></div><div class="line">Here is some Hebrew text</div><div class="line"><span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h3><p>长引用和短引用<br>长引用使用<code>&lt;blockquote&gt;</code>标签, 使用 blockquote 元素的话，浏览器会插入换行和外边距.<br>短引用使用<code>&lt;q&gt;</code>标签, 使用q 元素不会有任何特殊的呈现。</p>
<h3 id="删除字效果和插入字效果"><a href="#删除字效果和插入字效果" class="headerlink" title="删除字效果和插入字效果"></a>删除字效果和插入字效果</h3><p>删除文本使用<code>&lt;del&gt;</code>标签, 插入文本使用<code>&lt;ins&gt;</code>标签,<br><code>&lt;p&gt;一打有 &lt;del&gt;二十&lt;/del&gt; &lt;ins&gt;十二&lt;/ins&gt; 件。&lt;/p&gt;</code><br>大多数浏览器会改写为删除文本和下划线文本。一些老式的浏览器会把删除文本和下划线文本显示为普通文本。</p>
<h2 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h2><h3 id="创建超级链接"><a href="#创建超级链接" class="headerlink" title="创建超级链接"></a>创建超级链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/index.html"</span>&gt;</span>本文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 是一个指向本网站中的一个页面的链接。</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.microsoft.com/"</span>&gt;</span>本文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 是一个指向万维网上的页面的链接。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="将图像作为链接"><a href="#将图像作为链接" class="headerlink" title="将图像作为链接"></a>将图像作为链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/example/html/lastpage.html"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">src</span>=<span class="string">"/i/eg_buttonnext.gif"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="点击链接打开新的标签页"><a href="#点击链接打开新的标签页" class="headerlink" title="点击链接打开新的标签页"></a>点击链接打开新的标签页</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Visit W3School!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果把链接的 target 属性设置为 "_blank"，该链接会在新标签页中打开。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="链接到同一个页面的不同位置"><a href="#链接到同一个页面的不同位置" class="headerlink" title="链接到同一个页面的不同位置"></a>链接到同一个页面的不同位置</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#C4"</span>&gt;</span>查看 Chapter 4。<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Chapter 1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This chapter explains ba bla bla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Chapter 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This chapter explains ba bla bla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Chapter 3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This chapter explains ba bla bla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"C4"</span>&gt;</span>Chapter 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This chapter explains ba bla bla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Chapter 5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This chapter explains ba bla bla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">....</div></pre></td></tr></table></figure>
<h3 id="跳出框架"><a href="#跳出框架" class="headerlink" title="跳出框架"></a>跳出框架</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/index.html"</span> <span class="attr">target</span>=<span class="string">"_top"</span>&gt;</span> 跳出框架,请点击这里！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="创建电子邮件链接"><a href="#创建电子邮件链接" class="headerlink" title="创建电子邮件链接"></a>创建电子邮件链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">这是邮件链接：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:someone@microsoft.com?subject=Hello%20again"</span>&gt;</span>发送邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">这是另一个 mailto 链接：</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:someone@microsoft.com?cc=someoneelse@microsoft.com&amp;bcc=andsomeoneelse2@microsoft.com&amp;subject=Summer%20Party&amp;body=You%20are%20invited%20to%20a%20big%20summer%20party!"</span>&gt;</span>发送邮件！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong>应该使用 %20 来替换单词之间的空格，这样浏览器就可以正确地显示文本了。</p>
<h2 id="HTML-框架"><a href="#HTML-框架" class="headerlink" title="HTML 框架"></a>HTML 框架</h2><h3 id="垂直与水平框架"><a href="#垂直与水平框架" class="headerlink" title="垂直与水平框架"></a>垂直与水平框架</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--使用三份不同的文档制作一个垂直框架--&gt;</span></div><div class="line"><span class="comment">&lt;!--垂直框架--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"25%,50%,25%"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_a.html"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_b.html"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_c.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--水平框架--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"25%,50%,25%"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_a.html"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_b.html"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_c.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--水平垂直混合框架--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"50%,50%"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_a.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"25%,75%"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_b.html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_c.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="使用-标签"><a href="#使用-标签" class="headerlink" title="使用  标签"></a>使用 <noframes> 标签</noframes></h3><p>noframes 元素可为那些不支持框架的浏览器显示文本。noframes 元素位于 frameset 元素内部。<br>注释：如果浏览器有能力处理框架，就不会显示出 frameset 元素中的文本。<br>重要事项：如果您希望 frameset 添加 <code>&lt;noframes&gt;</code> 标签，就必须把其中的文本包装在 <code>&lt;body&gt;&lt;/body&gt;</code> 标签中！<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"25%,50%,25%"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_a.html"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_b.html"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_c.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">noframes</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>您的浏览器无法处理框架！<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">noframes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="含有-noresize-”noresize”-属性的框架结构"><a href="#含有-noresize-”noresize”-属性的框架结构" class="headerlink" title="含有 noresize=”noresize” 属性的框架结构"></a>含有 noresize=”noresize” 属性的框架结构</h3><p>noresize 属性使框架是不可调整尺寸的。在框架间的边框上拖动鼠标，你会发现边框是无法移动的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"50%,*,25%"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_a.html"</span> <span class="attr">noresize</span>=<span class="string">"noresize"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_b.html"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_c.html"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="导航框架"><a href="#导航框架" class="headerlink" title="导航框架"></a>导航框架</h3><p>导航框架包含一个将第二个框架作为目标的链接列表。名为 “contents.htm” 的文件包含三个链接.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"120,*"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/html_contents.html"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_a.html"</span> <span class="attr">name</span>=<span class="string">"showframe"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h3><p>一些老的浏览器不支持 iframe。如果得不到支持，iframe 是不可见的。<br><code>&lt;iframe src=&quot;/i/eg_landscape.jpg&quot;&gt;&lt;/iframe&gt;</code></p>
<h3 id="跳转至框架内的一个指定的节"><a href="#跳转至框架内的一个指定的节" class="headerlink" title="跳转至框架内的一个指定的节"></a>跳转至框架内的一个指定的节</h3><p>其中的一个框架设置了指向另一个文件内指定的节的链接。这个”link.htm”文件内指定的节使用 <code>&lt;a name=&quot;C10&quot;&gt;</code> 进行标识。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"20%,80%"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/frame_a.html"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/link.html#C10"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="使用框架导航跳转至指定的节"><a href="#使用框架导航跳转至指定的节" class="headerlink" title="使用框架导航跳转至指定的节"></a>使用框架导航跳转至指定的节</h3><p>左侧的导航框架包含了一个链接列表，这些链接将第二个框架作为目标。第二个框架显示被链接的文档。导航框架其中的链接指向目标文件中指定的节。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"180,*"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/content.html"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"/example/html/link.html"</span> <span class="attr">name</span>=<span class="string">"showframe"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="HTML-表格"><a href="#HTML-表格" class="headerlink" title="HTML 表格"></a>HTML 表格</h2><p>每个表格由 table 标签开始, 每个表格行由 tr 标签开始, 每个表格数据由 td 标签开始.<br>border控制表格边框宽度,当不指定border或者指定border=”0”时,则表示无边框.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># 一列表格</div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"># 一行三列表格</div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"># 两行三列表格</div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>400<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>600<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="表格中的表头-Heading"><a href="#表格中的表头-Heading" class="headerlink" title="表格中的表头(Heading)"></a>表格中的表头(Heading)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="空单元格"><a href="#空单元格" class="headerlink" title="空单元格"></a>空单元格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Some text<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Some text<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Some text<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中一个单元没有边框。这是因为它是空的。在该单元中插入一个空格后，仍然没有边框。我们的技巧是在单元中插入一个 no-breaking 空格。<br>no-breaking 空格是一个字符实体。no-breaking 空格由 “&amp;” 符号开始，然后是字符”nbsp”，并以分号结尾(“;”)。</p>
<h3 id="带有标题的表格"><a href="#带有标题的表格" class="headerlink" title="带有标题的表格"></a>带有标题的表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"6"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>我的标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>400<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>600<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="跨行或跨列的表格单元格-合并单元格"><a href="#跨行或跨列的表格单元格-合并单元格" class="headerlink" title="跨行或跨列的表格单元格(合并单元格)"></a>跨行或跨列的表格单元格(合并单元格)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># 横跨两列的单元格：</div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"># 横跨两行的单元格：</div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="表格内的包括段落-表格-列表和文本"><a href="#表格内的包括段落-表格-列表和文本" class="headerlink" title="表格内的包括段落, 表格, 列表和文本"></a>表格内的包括段落, 表格, 列表和文本</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>这个单元包含一个表格：</div><div class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span>A<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span>B<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span>C<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span>D<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>这个单元包含一个列表：</div><div class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>菠萝<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>HELLO<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="单元格边距-Cell-padding"><a href="#单元格边距-Cell-padding" class="headerlink" title="单元格边距(Cell padding)"></a>单元格边距(Cell padding)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>First<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="表格的单元格间距-Cell-spacing"><a href="#表格的单元格间距-Cell-spacing" class="headerlink" title="表格的单元格间距(Cell spacing)"></a>表格的单元格间距(Cell spacing)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>First<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="向表格添加背景颜色或背景图像"><a href="#向表格添加背景颜色或背景图像" class="headerlink" title="向表格添加背景颜色或背景图像"></a>向表格添加背景颜色或背景图像</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">bgcolor</span>=<span class="string">"red"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>First<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">background</span>=<span class="string">"/i/eg_bg_07.gif"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>First<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="向表格单元添加背景颜色或者背景图像"><a href="#向表格单元添加背景颜色或者背景图像" class="headerlink" title="向表格单元添加背景颜色或者背景图像"></a>向表格单元添加背景颜色或者背景图像</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"red"</span>&gt;</span>First<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">background</span>=<span class="string">"/i/eg_bg_07.gif"</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="在表格单元中排列内容对齐方式"><a href="#在表格单元中排列内容对齐方式" class="headerlink" title="在表格单元中排列内容对齐方式"></a>在表格单元中排列内容对齐方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>消费项目....<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>一月<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>二月<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>衣服<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$241.10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$50.20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>化妆品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$30.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$44.45<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>食物<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$730.40<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$650.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>总计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$1001.50<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$744.65<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="表格的框架-frame-属性"><a href="#表格的框架-frame-属性" class="headerlink" title="表格的框架(frame)属性"></a>表格的框架(frame)属性</h3><p>注释：frame 属性无法在 Internet Explorer 中正确地显示。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Table with frame="box":<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">frame</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>January<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Table with frame="above":<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">frame</span>=<span class="string">"above"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>January<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Table with frame="below":<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">frame</span>=<span class="string">"below"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>January<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Table with frame="hsides":<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">frame</span>=<span class="string">"hsides"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>January<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Table with frame="vsides":<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">frame</span>=<span class="string">"vsides"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>January<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux环境搭建指南(debian9)]]></title>
      <url>http://arvin-he.github.io/2017/07/08/linux-envconfig-2017-07-08/</url>
      <content type="html"><![CDATA[<h2 id="关于virtualbox"><a href="#关于virtualbox" class="headerlink" title="关于virtualbox"></a>关于virtualbox</h2><ol>
<li>安装增强功能</li>
<li>设置共享文件夹</li>
<li>virtualbox快捷键</li>
</ol>
<h3 id="安装增强功能"><a href="#安装增强功能" class="headerlink" title="安装增强功能"></a>安装增强功能</h3><p>打开终端, 挂载目录:, 执行安装, 需要root权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mount  /dev/cdrom  /media/cdrom</div><div class="line">cd  /media/cdrom0</div><div class="line">sh  ./VBoxLinuxAdditions.run</div></pre></td></tr></table></figure></p>
<p>在xubuntu上<br>安装编译环境，执行如下命令<br>sudo apt-get install build-essential<br>映射设备<br>sudo mount /dev/cdrom /media/cdrom<br>进入cd /media/cdrom<br>执行 sudo ./VBoxLinuxAdditions.run<br>完成后重启</p>
<p>然后设置切换显示模式,注意使用快捷键切换</p>
<h3 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h3><p>点击虚拟机菜单栏上的”设备-&gt;分配数据空间”，固定分配一个文件夹，比如分配名为share的文件夹，<br>该文件夹存在于物理机上，我一般放在和虚拟机在同一目录下, 然后设置后将由你的虚拟机和物理机共享。<br>把数据空间挂载到vshare上，就是我在第一步中物理机里的share文件夹<br>然后挂载目录:<br>mount  -t  vboxsf share /home/debian/vshare<br>注意:<br>vshare是linux下的一个文件夹,目录就是/home/debian/vshare<br>要勾选自动挂载, 如下图所示.</p>
<p><img src="/2017/07/08/linux-envconfig-2017-07-08/1.png" alt=""></p>
<h3 id="VirtualBox显示切换快捷键"><a href="#VirtualBox显示切换快捷键" class="headerlink" title="VirtualBox显示切换快捷键"></a>VirtualBox显示切换快捷键</h3><p>Right Ctrl + F        – 切换到全屏模式<br>Right Ctrl + L        – 切换到无缝模式<br>Right Ctrl + C        – 切换到比例模式<br>Right Ctrl + Home     – 显示控制菜单</p>
<h2 id="关于debian环境搭建"><a href="#关于debian环境搭建" class="headerlink" title="关于debian环境搭建"></a>关于debian环境搭建</h2><h3 id="sudo-command-not-found"><a href="#sudo-command-not-found" class="headerlink" title="sudo command not found"></a>sudo command not found</h3><p>debian没有内置sudo这个工具,<br>切换到su,<br>apt-get install sudo<br>sudo vi /etc/sudoers</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># This file MUST be edited with the &apos;visudo&apos; command as root.</div><div class="line">#</div><div class="line"># Please consider adding local content in /etc/sudoers.d/ instead of</div><div class="line"># directly modifying this file.</div><div class="line">#</div><div class="line"># See the man page for details on how to write a sudoers file.</div><div class="line">#</div><div class="line">Defaults|   env_reset</div><div class="line">Defaults|   mail_badpass</div><div class="line">Defaults|   secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</div><div class="line"></div><div class="line"># Host alias specification</div><div class="line"></div><div class="line"># User alias specification</div><div class="line"></div><div class="line"># Cmnd alias specification</div><div class="line"></div><div class="line"># User privilege specification(在这一行, 添加一个用户)</div><div class="line">root|   ALL=(ALL:ALL) ALL</div><div class="line"></div><div class="line"># Members of the admin group may gain root privileges</div><div class="line">%admin ALL=(ALL) ALL</div><div class="line"></div><div class="line"># Allow members of group sudo to execute any command</div><div class="line">%sudo|  ALL=(ALL:ALL) ALL</div><div class="line"></div><div class="line"># See sudoers(5) for more information on &quot;#include&quot; directives:</div><div class="line"></div><div class="line">#includedir /etc/sudoers.d</div></pre></td></tr></table></figure>
<h3 id="更新源列表"><a href="#更新源列表" class="headerlink" title="更新源列表"></a>更新源列表</h3><p>cd /etc/apt/<br>cp source.list source.list.bak</p>
<h3 id="输入法安装"><a href="#输入法安装" class="headerlink" title="输入法安装"></a>输入法安装</h3><p>1.先安装，这四个<br>apt-get install fcitx，<br>apt-get install fcitx-ui-classic<br>apt-get install fcitx-ui-light<br>apt install ttf-wqy-*<br>2.百度sogo输入法linux.deb ,然后双击。。。</p>
<h3 id="安装vim-gedit-vscode"><a href="#安装vim-gedit-vscode" class="headerlink" title="安装vim, gedit, vscode"></a>安装vim, gedit, vscode</h3><h3 id="更改时间和时区"><a href="#更改时间和时区" class="headerlink" title="更改时间和时区"></a>更改时间和时区</h3><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>查看一下当前的hostname有2种方法</p>
<ol>
<li>打开一个终端，在命令提示符中可以看到主机名，主机名通常位于“@”符号后</li>
<li>在终端输入hostname指令<br>要修改hostname，需要root权限<br>如果是Ubuntu/Debian修改步骤和上面类似：<br>（1）修改/etc/hosts，将/etc/hosts内出现的h93都改成vm93。<br>（2）修改/etc/hostname，将该文件内容由h93修改为vm93。<br>（3）执行“hostname vm93”，临时修改一下。当下次重启系统，则真正生效。</li>
</ol>
<h3 id="在终端输入reboot-结果到了重新安装镜像的界面了"><a href="#在终端输入reboot-结果到了重新安装镜像的界面了" class="headerlink" title="在终端输入reboot,结果到了重新安装镜像的界面了"></a>在终端输入reboot,结果到了重新安装镜像的界面了</h3><p>Virtualbox安装好debian ,在终端输入reboot,结果到了重新安装镜像的界面了。这是因为安装的磁盘iso还在光驱中。所以，reboot会从光驱驱动，重新进入安装界面。这个时候，我一般不点击reboot。而是直接点击virtualbox的poweroff键。让他关闭虚拟机。然后在关闭虚拟机后，先弹出光驱中的iso。然后再重启virtualbox中的linux OS。</p>
<p>###<br>arvin is not in the sudoers file<br>this incident will be reported<br>you have mail in /var/mail/arvin</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之virtual]]></title>
      <url>http://arvin-he.github.io/2017/07/07/cpp-virtual-2017-07-07/</url>
      <content type="html"><![CDATA[<h3 id="virtual是什么"><a href="#virtual是什么" class="headerlink" title="virtual是什么"></a>virtual是什么</h3><h3 id="为什么虚析构函数要加virtual"><a href="#为什么虚析构函数要加virtual" class="headerlink" title="为什么虚析构函数要加virtual"></a>为什么虚析构函数要加virtual</h3><h3 id="virtual使用"><a href="#virtual使用" class="headerlink" title="virtual使用"></a>virtual使用</h3><p>1) 虚函数是动态绑定的，也就是说，使用虚函数的指针和引用能够正确找到实际类的对应函数，而不是执行定义类的函数。这是虚函数的基本功能，就不再解释了。 </p>
<p>2) 构造函数不能是虚函数。而且，在构造函数中调用虚函数，实际执行的是父类的对应函数，因为自己还没有构造好, 多态是被disable的。 </p>
<p>3) 析构函数可以是虚函数，而且，在一个复杂类结构中，这往往是必须的。</p>
<p>4) 将一个函数定义为纯虚函数，实际上是将这个类定义为抽象类，不能实例化对象。 </p>
<p>5) 纯虚函数通常没有定义体，但也完全可以拥有。</p>
<p>6)  析构函数可以是纯虚的，但纯虚析构函数必须有定义体，因为析构函数的调用是在子类中隐含的。 </p>
<p>7) 非纯的虚函数必须有定义体，不然是一个错误。 </p>
<p>8) 派生类的override虚函数定义必须和父类完全一致。除了一个特例，如果父类中返回值是一个指针或引用，子类override时可以返回这个指针（或引用）的派生。例如，在上面的例子中，在Base中定义了 virtual Base<em> clone(); 在Derived中可以定义为 virtual Derived</em> clone()。可以看到，这种放松对于Clone模式是非常有用的。 </p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cnblogs.com/chio/archive/2007/09/10/888260.html" target="_blank" rel="external">http://www.cnblogs.com/chio/archive/2007/09/10/888260.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之工厂方法模式]]></title>
      <url>http://arvin-he.github.io/2017/07/07/dp-factorymethod-2017-07-07/</url>
      <content type="html"><![CDATA[<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p>工厂方法模式包含如下角色：<br>Product：抽象产品<br>ConcreteProduct：具体产品<br>Factory：抽象工厂<br>ConcreteFactory：具体工厂</p>
<h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><p>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</p>
<h3 id="python-实现"><a href="#python-实现" class="headerlink" title="python 实现"></a>python 实现</h3><p>文件结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">C:\USERS\ARON\DESKTOP\DESIGNPATTERNS\FACTORYMETHOD</div><div class="line">    concretefactory.py</div><div class="line">    concreteproduct.py</div><div class="line">    factory.py</div><div class="line">    main.py</div><div class="line">    product.py</div><div class="line">    __init__.py</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># factory.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factoryMethod</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="comment"># product.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># concretefactory.py</span></div><div class="line"><span class="keyword">from</span> factory <span class="keyword">import</span> Factory</div><div class="line"><span class="keyword">from</span> concreteproduct <span class="keyword">import</span> ConcreteProduct</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory</span><span class="params">(Factory)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(ConcreteFactory, self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factoryMethod</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> ConcreteProduct()</div><div class="line"></div><div class="line"><span class="comment"># concreteproduct.py</span></div><div class="line"><span class="keyword">from</span> product <span class="keyword">import</span> Product</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span><span class="params">(Product)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(ConcreteProduct, self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"use product A"</span>)</div><div class="line"></div><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="keyword">from</span> product <span class="keyword">import</span> Product</div><div class="line"><span class="keyword">from</span> concretefactory <span class="keyword">import</span> ConcreteFactory</div><div class="line"><span class="keyword">from</span> concretefactory <span class="keyword">import</span> ConcreteFactory</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    fac = ConcreteFactory()</div><div class="line">    prod = fac.factoryMethod()</div><div class="line">    prod.use()</div></pre></td></tr></table></figure>
<p>最后运行结果: </p>
<p><img src="/2017/07/07/dp-factorymethod-2017-07-07/2.png" alt=""></p>
<h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// factory.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FACTORY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FACTORY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Factory();</div><div class="line">    <span class="keyword">virtual</span> ~Factory();</div><div class="line">    <span class="function"><span class="keyword">virtual</span> Product* <span class="title">factoryMethod</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// FACTORY_H</span></span></div><div class="line"></div><div class="line"><span class="comment">// factory.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line">Factory::Factory() &#123;&#125;</div><div class="line"></div><div class="line">Factory::~Factory() &#123;&#125;</div><div class="line"></div><div class="line">Product* Factory::factoryMethod()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// product.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PRODUCT_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_H</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Product();</div><div class="line">    <span class="keyword">virtual</span> ~Product();</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// PRODUCT_H</span></span></div><div class="line"></div><div class="line"><span class="comment">// product.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"></div><div class="line">Product::Product() &#123;&#125;</div><div class="line"></div><div class="line">Product::~Product() &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Product::use() &#123;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// concretefactory.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONCRETEFACTORY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CONCRETEFACTORY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory</span> :</span> <span class="keyword">public</span> Factory</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ConcreteFactory();</div><div class="line">    <span class="keyword">virtual</span> ~ConcreteFactory();</div><div class="line">    <span class="function"><span class="keyword">virtual</span> Product* <span class="title">factoryMethod</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CONCRETEFACTORY_H</span></span></div><div class="line"></div><div class="line"><span class="comment">// concretefactory.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"concretefactory.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"concreteproduct.h"</span></span></div><div class="line"></div><div class="line">ConcreteFactory::ConcreteFactory() &#123;&#125;</div><div class="line"></div><div class="line">ConcreteFactory::~ConcreteFactory() &#123;&#125;</div><div class="line"></div><div class="line">Product* ConcreteFactory::factoryMethod()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// concreteproduct.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONCRETEPRODUCT_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CONCRETEPRODUCT_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> :</span> <span class="keyword">public</span> Product</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ConcreteProduct();</div><div class="line">    <span class="keyword">virtual</span> ~ConcreteProduct();</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CONCRETEPRODUCT_H</span></span></div><div class="line"></div><div class="line"><span class="comment">// concreteproduct.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"concreteproduct.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">ConcreteProduct::ConcreteProduct() &#123;&#125;</div><div class="line"></div><div class="line">ConcreteProduct::~ConcreteProduct() &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> ConcreteProduct::use()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"use product A"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"concretefactory.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Factory* fac = <span class="keyword">new</span> ConcreteFactory();</div><div class="line">    Product* prod = fac-&gt;factoryMethod();</div><div class="line">    prod-&gt;use();</div><div class="line"></div><div class="line">    <span class="keyword">delete</span> fac;</div><div class="line">    <span class="keyword">delete</span> prod;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="/2017/07/07/dp-factorymethod-2017-07-07/1.png" alt=""></p>
<h3 id="工厂方法模式的优点"><a href="#工厂方法模式的优点" class="headerlink" title="工厂方法模式的优点"></a>工厂方法模式的优点</h3><p>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。<br>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。<br>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</p>
<h3 id="工厂方法模式的缺点"><a href="#工厂方法模式的缺点" class="headerlink" title="工厂方法模式的缺点"></a>工厂方法模式的缺点</h3><p>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。<br>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</p>
<h3 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h3><p>在以下情况下可以使用工厂方法模式：</p>
<ul>
<li>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。</li>
<li>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li>
<li>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</li>
</ul>
<h3 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h3><ul>
<li>使用多个工厂方法：在抽象工厂角色中可以定义多个工厂方法，从而使具体工厂角色实现这些不同的工厂方法，这些方法可以包含不同的业务逻辑，以满足对不同的产品对象的需求。</li>
<li>产品对象的重复使用：工厂对象将已经创建过的产品保存到一个集合（如数组、List等）中，然后根据客户对产品的请求，对集合进行查询。如果有满足要求的产品对象，就直接将该产品返回客户端；如果集合中没有这样的产品对象，那么就创建一个新的满足要求的产品对象，然后将这个对象在增加到集合中，再返回给客户端。</li>
<li>多态性的丧失和模式的退化：如果工厂仅仅返回一个具体产品对象，便违背了工厂方法的用意，发生退化，此时就不再是工厂方法模式了。一般来说，工厂对象应当有一个抽象的父类型，如果工厂等级结构中只有一个具体工厂类的话，抽象工厂就可以省略，也将发生了退化。当只有一个具体工厂，在具体工厂中可以创建所有的产品对象，并且工厂方法设计为静态方法时，工厂方法模式就退化成简单工厂模式。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解回调函数(callback)]]></title>
      <url>http://arvin-he.github.io/2017/07/07/callback-2017-07-07/</url>
      <content type="html"><![CDATA[<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>一个知乎上的比喻:<br>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。<br>简而言之，回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用它所指向的函数时，我们就说这是回调函数。</p>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>函数指针就是函数的地址, 回调函数是函数指针的应用.<br>一个函数指针是一个指针变量了，它所指向的是一个函数，它的值就是所指向函数的入口地址。</p>
<h3 id="python中的回调函数"><a href="#python中的回调函数" class="headerlink" title="python中的回调函数"></a>python中的回调函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_callback</span><span class="params">(input)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"function my_callback was called with %s input"</span> % (input,)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">caller</span><span class="params">(input, func)</span>:</span></div><div class="line">    func(input)</div><div class="line"> </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    caller(i, my_callback)</div><div class="line">    </div><div class="line">&gt;&gt;&gt;</div><div class="line">function my_callback was called <span class="keyword">with</span> <span class="number">0</span> input</div><div class="line">function my_callback was called <span class="keyword">with</span> <span class="number">1</span> input</div><div class="line">function my_callback was called <span class="keyword">with</span> <span class="number">2</span> input</div><div class="line">function my_callback was called <span class="keyword">with</span> <span class="number">3</span> input</div><div class="line">function my_callback was called <span class="keyword">with</span> <span class="number">4</span> input</div></pre></td></tr></table></figure>
<h3 id="js中的回调函数"><a href="#js中的回调函数" class="headerlink" title="js中的回调函数"></a>js中的回调函数</h3><p>JavaScript中，回调函数具体的定义为：函数A作为参数(函数引用)传递到另一个函数B中，并且这个函数B执行函数A。我们就说函数A叫做回调函数。如果没有名称(函数表达式)，就叫做匿名回调函数。<br>因此callback 不一定用于异步，一般同步(阻塞)的场景下也经常用到回调，比如要求执行某些操作后执行回调函数。<br>例子1: 同步(阻塞)中使用回调，目的是在func1代码执行完成后执行func2。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func1=<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    <span class="comment">//do something.</span></div><div class="line">    (callback &amp;&amp; <span class="keyword">typeof</span>(callback) === <span class="string">"function"</span>) &amp;&amp; callback();</div><div class="line">&#125;</div><div class="line"></div><div class="line">func1(func2);</div><div class="line">    <span class="keyword">var</span> func2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>例子2: 异步回调<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(callback);</div><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">  url: <span class="string">"test.html"</span>,</div><div class="line">  context: <span class="built_in">document</span>.body</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  $(<span class="keyword">this</span>).addClass(<span class="string">"done"</span>);</div><div class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">"error"</span>);</div><div class="line">&#125;).always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">"complete"</span>); </div><div class="line">&#125;);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">注意的是，ajax请求确实是异步的,不过这请求是由浏览器新开一个线程请求,当请求的状态变更时,如果先前已设置回调,这异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。见：http://www.phpv.net/html/1700.html</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure></p>
<h4 id="回调什么时候执行"><a href="#回调什么时候执行" class="headerlink" title="回调什么时候执行"></a>回调什么时候执行</h4><p>回调函数，一般在同步情境下是最后执行的，而在异步情境下有可能不执行，因为事件没有被触发或者条件不满足。</p>
<h4 id="回调函数的使用场合"><a href="#回调函数的使用场合" class="headerlink" title="回调函数的使用场合"></a>回调函数的使用场合</h4><ul>
<li>资源加载：动态加载js文件后执行回调，加载iframe后执行回调，ajax操作回调，图片加载完成执行回调，AJAX等等。</li>
<li>DOM事件及Node.js事件基于回调机制(Node.js回调可能会出现多层回调嵌套的问题)。</li>
<li>setTimeout的延迟时间为0，这个hack经常被用到，settimeout调用的函数其实就是一个callback的体现</li>
<li>链式调用：链式调用的时候，在赋值器(setter)方法中(或者本身没有返回值的方法中)很容易实现链式调用，而取值器(getter)相对来说不好实现链式调用，因为你需要取值器返回你需要的数据而不是this指针，如果要实现链式方法，可以用回调函数来实现</li>
<li>setTimeout、setInterval的函数调用得到其返回值。由于两个函数都是异步的，即：他们的调用时序和程序的主流程是相对独立的，所以没有办法在主体里面等待它们的返回值，它们被打开的时候程序也不会停下来等待，否则也就失去了setTimeout及setInterval的意义了，所以用return已经没有意义，只能使用callback。callback的意义在于将timer执行的结果通知给代理函数进行及时处理。</li>
</ul>
<h4 id="回调函数的传递"><a href="#回调函数的传递" class="headerlink" title="回调函数的传递"></a>回调函数的传递</h4><p>回调函数的传递是通过将函数引用或者函数表达式作为参数传递。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'myhtmlpage.html'</span>, myCallBack);<span class="comment">//这是对的</span></div><div class="line">$.get(<span class="string">'myhtmlpage.html'</span>, myCallBack(<span class="string">'foo'</span>, <span class="string">'bar'</span>));<span class="comment">//这是错的，那么要带参数呢？</span></div><div class="line">$.get(<span class="string">'myhtmlpage.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//带参数的使用函数表达式</span></div><div class="line">myCallBack(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>另外，最好保证回调存在且必须是函数引用或者函数表达式： (callback &amp;&amp; typeof(callback) === “function”) &amp;&amp; callback();</p>
<h3 id="如何使用回调函数"><a href="#如何使用回调函数" class="headerlink" title="如何使用回调函数"></a>如何使用回调函数</h3><p>使用回调函数，我们需要做三件事：</p>
<ol>
<li>声明</li>
<li>定义</li>
<li>设置触发条件：在你的函数种把你的回调函数名称转化为地址作为一个参数，以便于系统调用。<br>声明和定义时应注意，回调函数由系统调用，所以可以认为它属于windows系统，不要把它当作你的某个类的成员函数。<br>回调函数是一个程序员不能显示调用的函数，通过将回调函数的地址传给调用者从而实现调用。回调函数是十分有必要的，在我们想通过一个统一接口实现不同的内容，这时回调函数非常合适。</li>
</ol>
<h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><p>在visual c++中，可以在函数类型前加<code>_cdecl</code>,<code>_stdcall</code>或者<code>_pascal</code>来表示调用规范（默认为<code>_cdecl</code>）。调用规范影响编译器产生的给定函数名，参数传递的顺序，堆栈清理责任以及参数传递机制。<br>不过，在win32的程序中，我见得比较多的是CALLBACK，这个宏定义在windef.h中，<br><code>#define CALLBACK    __stdcall</code> 它约定了函数在它们返回到调用者之前，都会从堆栈中移除掉参数。</p>
<p>事实上回掉函数和普通函数是没区别的. 你同样可以使用定义的回调函数做其它事情. 调用约定是有调用者规定的(函数参数中规定了回调函数的类型, 函数类型包括了函数的调用约定, 参数, 返回值), CALLBACK 是 win16 一个遗留宏定义, 当初是定义成的 pascal 约定, 现在都是定义成 WINAPI宏, 使用的是 <code>__stdcall</code> 约定.<br>类静态成员函数可以作回调函数, 不用成员函数做回调函数的原因是成员函数的参数比参数表中列出的多了一个this指针(其实也是可以用的, 那种技巧没什么好处) </p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.zhihu.com/question/19801131" target="_blank" rel="external">回调函数（callback）是什么?</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法系列之希尔排序]]></title>
      <url>http://arvin-he.github.io/2017/07/07/algo-shellsort-2017-07-07/</url>
      <content type="html"><![CDATA[<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序(Shell Sort)是插入排序的一种。也称缩小增量排序或递减增量排序算法，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因DL．Shell于1959年提出而得名。<br>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>插入排序的改进版，是基于插入排序的以下2点性质而提出的改进方法：</p>
<p>插入排序对几乎已排好序的数据操作时，效率很高，可以达到线性排序的效率。但插入排序在每次往前插入时只能将数据移动一位，效率比较低。<br>所以希尔排序的思想是：</p>
<p>先是取一个合适的<code>gap&lt;n</code>作为间隔，将全部元素分为gap个子序列，所有距离为gap的元素放入同一个子序列，再对每个子序列进行直接插入排序；<br>缩小间隔gap，例如去gap=ceil(gap/2)，重复上述子序列划分和排序直到，最后gap=1时，将所有元素放在同一个序列中进行插入排序为止。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>开始时，gap取值较大，子序列中的元素较少，排序速度快，克服了直接插入排序的缺点；<br>其次，gap值逐渐变小后，虽然子序列的元素逐渐变多，但大多元素已基本有序，所以继承了直接插入排序的优点，能以近线性的速度排好序。</p>
<h3 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(arr)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux之gcc命令]]></title>
      <url>http://arvin-he.github.io/2017/07/06/linux-gcccmd-2017-07-06/</url>
      <content type="html"><![CDATA[<h3 id="在linux-下生成-so共享库"><a href="#在linux-下生成-so共享库" class="headerlink" title="在linux 下生成.so共享库"></a>在linux 下生成.so共享库</h3><p>要生成共享库，您需要先使用-fPIC（position independent code 位置无关代码）标志来编译C代码,<br><code>gcc -c -fPIC hello.c -o hello.o</code><br>这将生成一个目标文件（.o），现在你拿它并创建.so文件：<br><code>gcc hello.o -shared -o libhello.so</code><br>你也可以使用:<code>gcc -shared -o libhello.so -fPIC hello.c</code> 一步生成.so文件<br>我还建议添加 <code>-Wall</code>选项获取所有的警告，和<code>-g</code>选项获取调试信息，到你的gcc命令。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cookbook之C 语言扩展]]></title>
      <url>http://arvin-he.github.io/2017/07/06/ck-CExtends-2017-07-06/</url>
      <content type="html"><![CDATA[<h3 id="使用C扩展"><a href="#使用C扩展" class="headerlink" title="使用C扩展"></a>使用C扩展</h3><p>开发者有三种方法可以在自己的Python代码中来调用C编写的函数: ctypes，SWIG，Python/C API。每种方式也都有各自的利弊。<br>首先，我们要明确为什么要在Python中调用C？<br>常见原因如下：</p>
<ol>
<li>你要提升代码的运行速度，而且你知道C要比Python快50倍以上</li>
<li>C语言中有很多传统类库，而且有些正是你想要的，但你又不想用Python去重写它们</li>
<li>想对从内存到文件接口这样的底层资源进行访问</li>
<li>…</li>
</ol>
<h3 id="使用-ctypes-访问-C-代码"><a href="#使用-ctypes-访问-C-代码" class="headerlink" title="使用 ctypes 访问 C 代码"></a>使用 ctypes 访问 C 代码</h3><p>你有一些 C 函数已经被编译到共享库或 DLL 中。你希望可以使用纯 Python 代码调用这些函数，而不用编写额外的 C 代码或使用第三方扩展工具.<br>对于需要调用 C 代码的一些小的问题，通常使用 Python 标准库中的 ctypes 模块就足够了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sample.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> g = y;</div><div class="line">    <span class="keyword">while</span> (x &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        g = x;</div><div class="line">        x = y % x;</div><div class="line">        y = g;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> g;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">in_mandel</span><span class="params">(<span class="keyword">double</span> x0, <span class="keyword">double</span> y0, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> x = <span class="number">0</span>, y = <span class="number">0</span>, xtemp;</div><div class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</div><div class="line">        xtemp = x*x - y*y + x0;</div><div class="line">        y = <span class="number">2</span>*x*y + y0;</div><div class="line">        x = xtemp;</div><div class="line">        n -= <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (x*x + y*y &gt; <span class="number">4</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> *remainder)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> quot = a / b;</div><div class="line">    *remainder = a % b;</div><div class="line">    <span class="keyword">return</span> quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">avg</span><span class="params">(<span class="keyword">double</span>  *a, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">double</span> total = <span class="number">0.0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        total += a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total / n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></div><div class="line">    <span class="keyword">double</span> x, y;</div><div class="line">&#125;Point;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(Point *p1, Point *p2)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> hypot(p1-&gt;x - p2-&gt;x, p1-&gt;y - p2-&gt;y);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后将sample.c编译成libsample.so: <code>gcc -shared -o libsample.so -fPIC sample.c</code><br><strong>注意:</strong>对于 C 和 Python 代码一起打包的问题，如果你在使用 ctypes 来访问编译后的 C 代码，那么需要确保这个共享库放在sample.py 模块同一个地方.如果 C 函数库被安装到其他地方，那么你就要修改相应的路径。如果 C 函数库在你机器上被安装为一个标准库了，那么可以使用 <code>ctypes.util.find_library()</code> 函数来查找.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> ctypes.util <span class="keyword">import</span> find_library</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>find_library(<span class="string">'sample'</span>)</div><div class="line"><span class="string">'/usr/local/lib/libsample.so'</span></div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># sample.py</span></div><div class="line"><span class="keyword">import</span> ctypes</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">_file = <span class="string">"libsample.so"</span></div><div class="line">_path = os.path.join(os.path.abspath(<span class="string">"."</span>), _file)</div><div class="line"><span class="comment"># _path = os.path.join(*(os.path.split(__file__)[:-1]+(_file,)))</span></div><div class="line">_mod = ctypes.cdll.LoadLibrary(_path)</div><div class="line"></div><div class="line"></div><div class="line">my_add = _mod.my_add</div><div class="line">my_add.argtypes = (ctypes.c_int, ctypes.c_int)</div><div class="line">my_add.restype = ctypes.c_int</div><div class="line"></div><div class="line"></div><div class="line">gcd = _mod.gcd</div><div class="line">gcd.argtypes = (ctypes.c_int, ctypes.c_int)</div><div class="line">gcd.restype = ctypes.c_int</div><div class="line"></div><div class="line"></div><div class="line">in_mandel = _mod.in_mandel</div><div class="line">in_mandel.argtypes = (ctypes.c_double, ctypes.c_double, ctypes.c_int)</div><div class="line">in_mandel.restype = ctypes.c_int</div><div class="line"></div><div class="line"></div><div class="line">_divide = _mod.divide</div><div class="line">_divide.argtypes = (ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_int))</div><div class="line">_divide.restype = ctypes.c_int</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(x, y)</span>:</span></div><div class="line">    rem = ctypes.c_int()</div><div class="line">    quot = _divide(x, y, rem)</div><div class="line">    <span class="keyword">return</span> quot, rem.value</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleArrayType</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_param</span><span class="params">(self, param)</span>:</span></div><div class="line">        typename = type(param).__name__</div><div class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">"from_"</span> + typename):</div><div class="line">            <span class="keyword">return</span> getattr(self, <span class="string">"from_"</span> + typename)</div><div class="line">        <span class="keyword">elif</span> isinstance(param, ctypes.Array):</div><div class="line">            <span class="keyword">return</span> param</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">"can't convert %s"</span> % typename)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_array</span><span class="params">(self, param)</span>:</span></div><div class="line">        <span class="keyword">if</span> param.typecode != <span class="string">'d'</span>:</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">"must be an array of doubles"</span>)</div><div class="line">        ptr, _ = param.buffer_info()</div><div class="line">        <span class="keyword">return</span> ctypes.cast(ptr, ctypes.POINTER(ctypes.c_double))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_list</span><span class="params">(self, param)</span>:</span></div><div class="line">        val = ((ctypes.c_double)*len(param))(*param)</div><div class="line">        <span class="keyword">return</span> val</div><div class="line"></div><div class="line">    from_tuple = from_list</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_ndarray</span><span class="params">(self, param)</span>:</span></div><div class="line">        <span class="keyword">return</span> param.ctypes.data_as(ctypes.POINTER(ctypes.c_double))</div><div class="line"></div><div class="line"></div><div class="line">DoubleArray = DoubleArrayType()</div><div class="line">_avg = _mod.avg</div><div class="line">_avg.argtypes = (DoubleArray, ctypes.c_int)</div><div class="line">_avg.restype = ctypes.c_double</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">avg</span><span class="params">(values)</span>:</span></div><div class="line">    <span class="keyword">return</span> _avg(values, len(values))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(ctypes.Structure)</span>:</span></div><div class="line">    _fields_ =[(<span class="string">'x'</span>, ctypes.c_double),</div><div class="line">               (<span class="string">'y'</span>, ctypes.c_double)]</div><div class="line"></div><div class="line">distance = _mod.distance</div><div class="line">distance.argtypes = (ctypes.POINTER(Point), ctypes.POINTER(Point))</div><div class="line">distance.restype = ctypes.c_double</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="keyword">import</span> sample</div><div class="line"></div><div class="line">print(sample.gcd(<span class="number">35</span>, <span class="number">42</span>))</div><div class="line">print(sample.my_add(<span class="number">10</span>, <span class="number">20</span>))</div><div class="line">print(sample.in_mandel(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>))</div><div class="line">print(sample.divide(<span class="number">42</span>, <span class="number">8</span>))</div><div class="line">print(sample.avg([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">aron@aron-VirtualBox:~/Desktop/pycallc$ python3 main.py</div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">30</span></div><div class="line"><span class="number">1</span></div><div class="line">(<span class="number">5</span>, <span class="number">2</span>)</div><div class="line"><span class="number">2.0</span></div></pre></td></tr></table></figure>
<p>一旦你知道了C函数库的位置，那么就可以像下面这样使用<code>ctypes.cdll.LoadLibrary()</code> 来加载它，其中 <code>_path</code> 是标准库的全路径,加载模块<code>_mod = ctypes.cdll.LoadLibrary(_path)</code>,函数库被加载后，你需要编写几个语句来提取特定的符号并指定它们的类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># int in_mandel(double, double, int)</span></div><div class="line">in_mandel = _mod.in_mandel</div><div class="line">in_mandel.argtypes = (ctypes.c_double, ctypes.c_double, ctypes.c_int)</div><div class="line">in_mandel.restype = ctypes.c_int</div></pre></td></tr></table></figure></p>
<p>argtypes 属性是一个元组，包含了某个函数的输入参数类型<br>restype  是相应的返回类型<br>想让 Python 能够传递正确的参数类型并且正确的转换数据的话，那么这些类型签名的绑定是很重要的一步。如果你没有这么做，不但代码不能正常运行，还可能会导致整个解释器进程挂掉。使用<br>ctypes 有一个麻烦点的地方是原生的 C 代码使用的术语可能跟 Python 不能明确的对应上来。 divide() 函数是一个很好的例子，它通过一个参数除以另一个参数返回一个结果值。尽管这是一个很常见的 C 技术，但是在 Python 中却不知道怎样清晰的表达出来。</p>
<p>最后一些小的提示：如果你想在 Python 中访问一些小的 C 函数，那么 ctypes 是<br>一个很有用的函数库。尽管如此，如果你想要去访问一个很大的库，那么可能就需要<br>其他的方法了，比如 Swig 或 Cython.</p>
<p>由于 ctypes 并不是完全自动化，那么你就必须花费大量时间来编写所有的类型签名，<br>如果函数库够复杂，你还得去编写很多小的包装函数和支持类。<br>作为 ctypes 的一个替代，你还可以考虑下 CFFI。CFFI 提供了很多类似的功能，但是使用 C 语法并支持更多高级的 C 代码类型。</p>
<h3 id="Python-C-API"><a href="#Python-C-API" class="headerlink" title="Python/C API"></a>Python/C API</h3><p>不依靠其他工具，直接使用 Python 的扩展 API 来编写一些简单的 C 扩展模块。<br>Python/C API可能是被最广泛使用的方法。它不仅简单，而且可以在C代码中操作你的Python对象。<br>这种方法需要<strong>以特定的方式来编写C代码</strong>以供Python去调用它。所有的Python对象都被表示为一种叫做PyObject的结构体，并且Python.h头文件中提供了各种操作它的函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Python.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">static</span> PyObject* <span class="title">add</span><span class="params">(PyObject* self, PyObject* args)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!PyArg_ParseTuple(args, <span class="string">"i|i"</span>, &amp;a, &amp;b))</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">return</span> Py_BuildValue(<span class="string">"i"</span>, a+b);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">static</span> PyObject* <span class="title">sub</span><span class="params">(PyObject* self, PyObject* args)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(!PyArg_ParseTuple(args, <span class="string">"i|i"</span>, &amp;a, &amp;b))</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">return</span> Py_BuildValue(<span class="string">"i"</span>, a-b);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> PyMethodDef addMethods[]=&#123;</div><div class="line">    &#123;<span class="string">"add"</span>, add, METH_VARARGS&#125;,</div><div class="line">    &#123;<span class="string">"sub"</span>, sub, METH_VARARGS&#125;,</div><div class="line">    &#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* Module structure */</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">PyModuleDef</span> <span class="title">mytestmodule</span> = &#123;</span></div><div class="line">    PyModuleDef_HEAD_INIT,</div><div class="line">    <span class="string">"mytest"</span>, <span class="comment">/* name of module */</span></div><div class="line">    <span class="string">"A sample module"</span>, <span class="comment">/* Doc string (may be NULL) */</span></div><div class="line">    <span class="number">-1</span>, <span class="comment">/* Size of per-interpreter state or -1 */</span></div><div class="line">    addMethods <span class="comment">/* Method table */</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function">PyMODINIT_FUNC <span class="title">PyInit_mytest</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> PyModule_Create(&amp;mytestmodule);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>mytest.c编写好后就使用命令或者使用setup.py生成.so文件<br>方法1:使用命令生成.so<br><code>gcc -shared -I /usr/include/python3.5 -o mytest.so -fPIC mytest.c</code><br>方法2: 编写setup.py生成.so文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setup.py</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup, Extension</div><div class="line"></div><div class="line">setup(name=<span class="string">'mytest'</span>,</div><div class="line">      ext_modules=[</div><div class="line">      Extension(<span class="string">'mytest'</span>,</div><div class="line">                [<span class="string">'mytest.c'</span>],</div><div class="line">                include_dirs = [<span class="string">'/usr/include/python3.5'</span>],</div><div class="line">                )])</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong>使用setup.py生成的.so文件名字会变成<code>mytest.cpython-35m-x86_64-linux-gnu.so</code>,不是<code>mytest.so</code>,<br>重命名<code>mytest.cpython-35m-x86_64-linux-gnu.so</code>为<code>mytest.so</code>,不然会报找不到<code>Error:ImportError: No module named mytest</code>.</p>
<p>生成好.so文件,就直接在python代码中import,然后调用函数了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mytest</div><div class="line"></div><div class="line">print(mytest.add(<span class="number">5</span>, <span class="number">5</span>))</div><div class="line">print(mytest.sub(<span class="number">20</span>, <span class="number">6</span>))</div><div class="line"></div><div class="line">&lt;&lt;&lt; <span class="number">10</span></div><div class="line">&lt;&lt;&lt; <span class="number">14</span></div></pre></td></tr></table></figure></p>
<h3 id="从-C-语言中调用-Python-代码"><a href="#从-C-语言中调用-Python-代码" class="headerlink" title="从 C 语言中调用 Python 代码"></a>从 C 语言中调用 Python 代码</h3><p>想在 C 语言中使用某个 Python 函数作为一个回调。<br>在 C 语言中调用 Python，要记住最重要的是 C 语言会是主体。也就是说，C 语言负责构造参数、调用 Python 函数、检查异常、检查类型、提取返回值等.</p>
<h3 id="用-WSIG-包装-C-代码"><a href="#用-WSIG-包装-C-代码" class="headerlink" title="用 WSIG 包装 C 代码"></a>用 WSIG 包装 C 代码</h3><p>首先要说明的是swig可以进行很多语言的调用转换，不止是可以让python调用c。swig和sip都被称作wrapper，就是说他对你的原有函数进行了包装。看到之前用python c api的方式里，我们必须严格按照python c api的方式来写代码，破坏了原有c程序的可读性，于是wrapper的思想就是把原生c程序包装成python c api那种方式的代码，再去生成so文件。因此我们要做的是首先写c文件。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后再去写一个swig格式的接口文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">%module mytest</div><div class="line">%&#123;</div><div class="line">extern int add(int a, int b);</div><div class="line">extern int sub(int a, int b);</div><div class="line">%&#125;</div><div class="line"> </div><div class="line">extern int add(int a, int b);</div><div class="line">extern int sub(int a, int b);</div></pre></td></tr></table></figure></p>
<p>然后就可以运行swig，他会自动生成python c api写的代码，并且会自动编译出so文件来调用。</p>
<h3 id="用-sip-包装-C-代码"><a href="#用-sip-包装-C-代码" class="headerlink" title="用 sip 包装 C 代码"></a>用 sip 包装 C 代码</h3><p>sip是swig发展而来是方便python调用c的，所以基本使用方式都是差不多，只不过接口文件略有差异.</p>
<h3 id="cffi"><a href="#cffi" class="headerlink" title="cffi"></a>cffi</h3><p>cffi类似于ctypes直接在python程序中调用c程序，但是比ctypes更方便不要求编译成so再调用，<br>注意到上面的所有方式都是需要去编译成so文件后再在python中调用，而cffi允许你直接调用c文件来使用里面的函数了，为什么这么神奇呢，其实是cffi在解释过程中才帮你把c编译为so文件.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cffi <span class="keyword">import</span> FFI</div><div class="line">ffi = FFI()</div><div class="line">ffi.cdef(<span class="string">"""</span></div><div class="line"><span class="string">int add(int a, int b);</span></div><div class="line"><span class="string">int sub(int a, int b);</span></div><div class="line"><span class="string">"""</span>)</div><div class="line">lib = ffi.verify(<span class="string">'#include "mytest.c"'</span>)</div><div class="line">print(lib.add(<span class="number">1</span>,<span class="number">2</span>))</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cookbook之测试,调试和异常]]></title>
      <url>http://arvin-he.github.io/2017/07/05/ck-testdebugexception-2017-07-05/</url>
      <content type="html"><![CDATA[<h3 id="在单元测试中给对象打补丁"><a href="#在单元测试中给对象打补丁" class="headerlink" title="在单元测试中给对象打补丁"></a>在单元测试中给对象打补丁</h3><p>写的单元测试中需要给指定的对象打补丁，用来断言它们在测试中的期望行为（比如，断言被调用时的参数个数，访问指定的属性等）<br>unittest.mock.patch() 函数可被用来解决这个问题。 patch() 还可被用作一个装饰器、上下文管理器或单独使用，尽管并不常见。</p>
<h3 id="将测试输出用日志记录到文件中"><a href="#将测试输出用日志记录到文件中" class="headerlink" title="将测试输出用日志记录到文件中"></a>将测试输出用日志记录到文件中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    unittest.main()</div></pre></td></tr></table></figure>
<p>这样的话测试文件就是可执行的，并且会将运行测试的结果打印到标准输出上。如果你想重定向输出，就需要像下面这样修改 main() 函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(out=sys.stderr, verbosity=<span class="number">2</span>)</span>:</span></div><div class="line">    loader = unittest.TestLoader()</div><div class="line">    suite = loader.loadTestsFromModule(sys.modules[__name__])</div><div class="line">    unittest.TextTestRunner(out,verbosity=verbosity).run(suite)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'testing.out'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        main(f)</div></pre></td></tr></table></figure></p>
<h3 id="忽略或期望测试失败"><a href="#忽略或期望测试失败" class="headerlink" title="忽略或期望测试失败"></a>忽略或期望测试失败</h3><p>在单元测试中忽略或标记某些测试会按照预期运行失败。unittest 模块有装饰器可用来控制对指定测试方法的处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> platform</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_0</span><span class="params">(self)</span>:</span></div><div class="line">        self.assertTrue(<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="meta">    @unittest.skip('skipped test')</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self)</span>:</span></div><div class="line">        self.fail(<span class="string">'should have failed!'</span>)</div><div class="line"></div><div class="line"><span class="meta">    @unittest.skipIf(os.name=='posix', 'Not supported on Unix')</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_2</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">import</span> winreg</div><div class="line"></div><div class="line"><span class="meta">    @unittest.skipUnless(platform.system() == 'Darwin', 'Mac specific test')</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_3</span><span class="params">(self)</span>:</span></div><div class="line">        self.assertTrue(<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="meta">    @unittest.expectedFailure</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_4</span><span class="params">(self)</span>:</span></div><div class="line">        self.assertEqual(<span class="number">2</span>+<span class="number">2</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    unittest.main()</div></pre></td></tr></table></figure></p>
<p>kip() 装饰器能被用来忽略某个你不想运行的测试。 skipIf() 和 skipUnless()对于你只想在某个特定平台或 Python 版本或其他依赖成立时才运行测试的<br>时候非常有用。使用 @expected 的失败装饰器来标记那些确定会失败的测试，并且对这些测试你不想让测试框架打印更多信息。</p>
<h3 id="处理多个异常"><a href="#处理多个异常" class="headerlink" title="处理多个异常"></a>处理多个异常</h3><p>有一个代码片段可能会抛出多个不同的异常,可以用单个代码块处理不同的异常，可以将它们放入一个元组中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    client_obj.get_url(url)</div><div class="line"><span class="keyword">except</span> (URLError, ValueError, SocketTimeout):</div><div class="line">    client_obj.remove_url(url)</div></pre></td></tr></table></figure></p>
<p>如果你想对其中某个异常进行不同的处理，可以将其放入另外一个 except 语句中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    client_obj.get_url(url)</div><div class="line"><span class="keyword">except</span> (URLError, ValueError):</div><div class="line">    client_obj.remove_url(url)</div><div class="line"><span class="keyword">except</span> SocketTimeout:</div><div class="line">    client_obj.handle_url_timeout(url)</div></pre></td></tr></table></figure></p>
<p>很多的异常会有层级关系，对于这种情况，你可能使用它们的一个基类来捕获所有的异常。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(filename)</div><div class="line"><span class="keyword">except</span> (FileNotFoundError, PermissionError):</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># 用基类来捕获所有的异常</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(filename)</div><div class="line"><span class="keyword">except</span> OSError:</div><div class="line">    <span class="keyword">pass</span></div><div class="line">```    </div><div class="line"></div><div class="line">使用 <span class="keyword">as</span> 关键字来获得被抛出异常的引用</div><div class="line">```python</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(filename)</div><div class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> e:</div><div class="line">    <span class="keyword">if</span> e.errno == errno.ENOENT:</div><div class="line">        logger.error(<span class="string">'File not found'</span>)</div><div class="line">    <span class="keyword">elif</span> e.errno == errno.EACCES:</div><div class="line">        logger.error(<span class="string">'Permission denied'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        logger.error(<span class="string">'Unexpected error: %d'</span>, e.errno)</div></pre></td></tr></table></figure></p>
<h3 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h3><p>捕获所有的异常，可以直接捕获 Exception 即可, 这个将会捕获除了 SystemExit 、 KeyboardInterrupt 和 GeneratorExit 之外的<br>所有异常。如果你还想捕获这三个异常，将 Exception 改成 BaseException 即可.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    ...</div><div class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">    ...</div><div class="line">    log(<span class="string">'Reason:'</span>, e) <span class="comment"># Important!</span></div></pre></td></tr></table></figure></p>
<h3 id="捕获异常后抛出另外的异常"><a href="#捕获异常后抛出另外的异常" class="headerlink" title="捕获异常后抛出另外的异常"></a>捕获异常后抛出另外的异常</h3><p>链接异常，使用 raise from 语句来代替简单的 raise 语句, 同时保留两个异常的信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span><span class="keyword">try</span>:</div><div class="line"><span class="meta">... </span>    int(<span class="string">'N/A'</span>)</div><div class="line"><span class="meta">... </span><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</div><div class="line"><span class="meta">... </span>    <span class="keyword">raise</span> RuntimeError(<span class="string">'A parsing error occurred'</span>) <span class="keyword">from</span> e</div><div class="line">&gt;&gt;&gt;</div><div class="line">example()</div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> example</div><div class="line">ValueError: invalid literal <span class="keyword">for</span> int() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">'N/A'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">5</span>, <span class="keyword">in</span> example</div><div class="line">RuntimeError: A parsing error occurred</div></pre></td></tr></table></figure></p>
<h3 id="输出警告信息"><a href="#输出警告信息" class="headerlink" title="输出警告信息"></a>输出警告信息</h3><p>在你维护软件，提示用户某些信息，但是又不需要将其上升为异常级别，那么输出警告信息就会很有用了.<br>希望程序能生成警告信息（比如废弃特性或使用问题）,可使用 warning.warn() 函数.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> warnings</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y, logfile=None, debug=False)</span>:</span></div><div class="line">    <span class="keyword">if</span> logfile <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        warnings.warn(<span class="string">'logfile argument deprecated'</span>, DeprecationWarning)</div></pre></td></tr></table></figure></p>
<p>warn() 的参数是一个警告消息和一个警告类，警告类有如下几种：<br>UserWarning, DeprecationWarning, SyntaxWarning, RuntimeWarning, ResourceWarning, 或 Future-Warning.<br>对警告的处理取决于你如何运行解释器以及一些其他配置。例如，如果你使用 -W all 选项去运行 Python，你会得到如下的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bash % python3 -W all example.py</div><div class="line">example.py:5: DeprecationWarning: logfile argument is deprecated</div><div class="line">warnings.warn(&apos;logfile argument is deprecated&apos;, DeprecationWarning)</div></pre></td></tr></table></figure></p>
<p>通常来讲，警告会输出到标准错误上。如果你想讲警告转换为异常，可以使用 -W error 选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bash % python3 -W error example.py</div><div class="line">Traceback (most recent call last):</div><div class="line">File &quot;example.py&quot;, line 10, in &lt;module&gt;</div><div class="line">func(2, 3, logfile=&apos;log.txt&apos;)</div><div class="line">File &quot;example.py&quot;, line 5, in func</div><div class="line">warnings.warn(&apos;logfile argument is deprecated&apos;, DeprecationWarning)</div><div class="line">DeprecationWarning: logfile argument is deprecated</div></pre></td></tr></table></figure></p>
<p>默认情况下，并不是所有警告消息都会出现。-W 选项能控制警告消息的输出。 -W all 会输出所有警告消息，-W ignore 忽略掉所有警告，-W error 将警告转换成异常。<br>另外一种选择，你还可以使用 warnings.simplefilter() 函数控制输出。 always 参数会让所有警告消息出现，`ignore 忽略调所有的警告，error 将警告转换成异常。<br>warnings 模块对过滤和警告消息处理提供了大量的更高级的配置选项。</p>
<h3 id="调试基本的程序崩溃错误"><a href="#调试基本的程序崩溃错误" class="headerlink" title="调试基本的程序崩溃错误"></a>调试基本的程序崩溃错误</h3><p>程序奔溃后该怎样去调试它？<br>运行 python3 -i someprogram.py 可执行简单的调试。 -i 选项可让程序结束后打开一个交互式 shell。然后你就能查看环境.<br>可以在程序奔溃后打开 Python 的调试器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pdb</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pdb.pm()</div><div class="line">&gt; sample.py(<span class="number">4</span>)func()</div><div class="line">-&gt; return n + 10</div><div class="line">(Pdb) w</div><div class="line">sample.py(<span class="number">6</span>)&lt;module&gt;()</div><div class="line">-&gt; func('Hello')</div><div class="line">&gt; sample.py(<span class="number">4</span>)func()</div><div class="line">-&gt; return n + 10</div><div class="line">(Pdb) <span class="keyword">print</span> n</div><div class="line"><span class="string">'Hello'</span></div><div class="line">(Pdb) q</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>代码所在的环境很难获取交互 shell（比如在某个服务器上面），通常可以捕获异常后自己打印跟踪信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> traceback</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    func(arg)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    print(<span class="string">'**** AN ERROR OCCURRED ****'</span>)</div><div class="line">    traceback.print_exc(file=sys.stderr)</div></pre></td></tr></table></figure></p>
<p>要是你的程序没有奔溃，而只是产生了一些你看不懂的结果，你在感兴趣的地方插入一下 print() 语句也是个不错的选择。<br>不过，要是你打算这样做，有一些小技巧可以帮助你。首先，traceback.print stack() 函数会你程序运行到那个点的时候创建<br>一个跟踪栈。<br>另外，你还可以像下面这样使用 pdb.set trace() 在任何地方手动的启动调试器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pdb</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></div><div class="line">    ...</div><div class="line">    pdb.set_trace()</div><div class="line">    ....</div></pre></td></tr></table></figure></p>
<h3 id="给程序做性能测试"><a href="#给程序做性能测试" class="headerlink" title="给程序做性能测试"></a>给程序做性能测试</h3><p>测试程序运行所花费的时间并做性能测试。<br>只是简单的想测试下你的程序整体花费的时间，通常使用 Unix 时间函数就行了.<br>需要一个程序各个细节的详细报告，使用 cProfile 模块.<br>通常情况是介于这两个极端之间。比如你已经知道代码运行时在少数几个函数中花费了绝大部分时间。对于这些函数的性能测试，可以使用一个简单的装饰器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># timethis.py</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        start = time.perf_counter()</div><div class="line">        r = func(*args, **kwargs)</div><div class="line">        end = time.perf_counter()</div><div class="line">        print(<span class="string">'&#123;&#125;.&#123;&#125; : &#123;&#125;'</span>.format(func.__module__, func.__name__, end - start))</div><div class="line">        <span class="keyword">return</span> r</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>@timethis</div><div class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></div><div class="line"><span class="meta">... </span><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line"><span class="meta">... </span>n -= <span class="number">1</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>countdown(<span class="number">10000000</span>)</div><div class="line">__main__.countdown : <span class="number">0.803001880645752</span></div></pre></td></tr></table></figure></p>
<p>要测试某个代码块运行时间，你可以定义一个上下文管理器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</div><div class="line"></div><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeblock</span><span class="params">(label)</span>:</span></div><div class="line">    start = time.perf_counter()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">yield</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        end = time.perf_counter()</div><div class="line">        print(<span class="string">'&#123;&#125; : &#123;&#125;'</span>.format(label, end - start))</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> timeblock(<span class="string">'counting'</span>):</div><div class="line"><span class="meta">... </span>n = <span class="number">10000000</span></div><div class="line"><span class="meta">... </span><span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line"><span class="meta">... </span>n -= <span class="number">1</span></div><div class="line">...</div><div class="line">counting : <span class="number">1.5551159381866455</span></div></pre></td></tr></table></figure></p>
<p>对于测试很小的代码片段运行性能，使用 timeit 模块会很方便<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> timeit <span class="keyword">import</span> timeit</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'math.sqrt(2)'</span>, <span class="string">'import math'</span>)</div><div class="line"><span class="number">0.1432319980012835</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'sqrt(2)'</span>, <span class="string">'from math import sqrt'</span>)</div><div class="line"><span class="number">0.10836604500218527</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'math.sqrt(2)'</span>, <span class="string">'import math'</span>, number=<span class="number">10000000</span>)</div><div class="line"><span class="number">1.434852126003534</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'sqrt(2)'</span>, <span class="string">'from math import sqrt'</span>, number=<span class="number">10000000</span>)</div><div class="line"><span class="number">1.0270336690009572</span></div></pre></td></tr></table></figure></p>
<p>timeit 会执行参数中语句 100 万次并计算运行时间。第二个参数是运行测<br>试之前配置环境。如果你想改变循环执行次数，可以设置 number 参数.</p>
<p>当执行性能测试的时候，需要注意的是你获取的结果都是近似值。<code>time.perf_counter()</code> 函数会在给定平台上获取最高精度的计时值。不过，它仍然<br>还是基于时钟时间，很多因素会影响到它的精确度，比如机器负载。如果你对于cpu执行时间更感兴趣，使用 <code>time.process_time()</code> 来代替它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        start = time.process_time()</div><div class="line">        r = func(*args, **kwargs)</div><div class="line">        end = time.process_time()</div><div class="line">        print(<span class="string">'&#123;&#125;.&#123;&#125; : &#123;&#125;'</span>.format(func.__module__, func.__name__, end - start))</div><div class="line">        <span class="keyword">return</span> r</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure></p>
<h3 id="加速程序运行"><a href="#加速程序运行" class="headerlink" title="加速程序运行"></a>加速程序运行</h3><p>你的程序运行太慢，你想在不使用复杂技术比如 C 扩展或 JIT 编译器的情况下加快程序运行速度.<br>关于程序优化的第一个准则是“不要优化”，第二个准则是“不要优化那些无关紧要的部分”。<br>通常会发现你得程序在少数几个热点地方花费了大量时间</p>
<ol>
<li>使用函数<br>定义在全局范围的代码运行起来要比定义在函数中运行慢的多。这种速度差异是由于局部变量和全局变量的实现方式（使用局部变量要更快些）。因此，如果你想让程序运行更快些，只需要将脚本语句放入函数中即可,速度的差异取决于实际运行的程序，不过根据经验，使用函数带来 15-30% 的性能提升是很常见的。</li>
<li>尽可能去掉属性访问<br>每一次使用点 (.) 操作符来访问属性的时候会带来额外的开销。它会触发特定的方法，比如 <code>__getattribute__ ()</code> 和 <code>__getattr__ ()</code> ，这些方法会进行字典操作操作。<br>可以使用 from module import name 这样的导入形式，以及使用绑定的方法.<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 方式1</span></div><div class="line"><span class="keyword">import</span> math</div><div class="line">math.sqrt(n)</div><div class="line"><span class="comment"># 方式2</span></div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div></pre></td></tr></table></figure>
</li>
</ol>
<p>方式2消除了属性访问,用sqrt() 代替了 math.sqrt() </p>
<ol>
<li>理解局部变量<br>局部变量会比全局变量运行速度快,在内部循环中，可以将某个需要频繁访问的属性放入到一个局部变量中.对于类中的属性访问也同样适用于这个原理。通常来讲，查找某个值比如<br>self.name 会比访问一个局部变量要慢一些。</li>
<li>避免不必要的抽象<br>任何时候当你使用额外的处理层（比如装饰器、属性访问、描述器）去包装你的代码时，都会让程序运行变慢.</li>
<li>使用内置的容器<br>内置的数据类型比如字符串、元组、列表、集合和字典都是使用 C 来实现的，运行起来非常快。如果你想自己实现新的数据结构（比如链接列表、平衡树等），那么要想在性能上达到内置的速度几乎不可能，因此，还是乖乖的使用内置的吧.</li>
<li>避免创建不必要的数据结构或复制<br>理解或信任 Python 的内存模型，不要滥用 copy.deepcopy() 之类的函数</li>
</ol>
<p>作为一般准则，不要对程序的每一个部分都去优化, 因为这些修改回导致代码难以阅读和理解。你应该专注于优化产生性能瓶颈的地方，比如内部循环。<br>引用John Ousterhout 说过的话：“最好的性能优化时从不工作到工作状态的迁移”。直到你真的需要优化的时候再去考虑它。确保你程序正确的运行通常比让它运行更快要更重要一些（至少开始是这样的）.</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cookbook之脚本编程与系统管理]]></title>
      <url>http://arvin-he.github.io/2017/07/05/ck-sysmanager-2017-07-05/</url>
      <content type="html"><![CDATA[<h3 id="通过重定向-管道-文件接受输入"><a href="#通过重定向-管道-文件接受输入" class="headerlink" title="通过重定向/管道/文件接受输入"></a>通过重定向/管道/文件接受输入</h3><p>命令行的输出通过管道传递给该脚本、重定向文件到该脚本，在命令行中传递一个文件名或文件名列表给该脚本。<br>Python 内置的 fileinput 模块让这个变得简单</p>
<h3 id="终止程序并给出错误信息"><a href="#终止程序并给出错误信息" class="headerlink" title="终止程序并给出错误信息"></a>终止程序并给出错误信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.stderr.write(<span class="string">'It failed!\n'</span>)</div><div class="line"><span class="keyword">raise</span> SystemExit(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h3 id="解析命令行选项"><a href="#解析命令行选项" class="headerlink" title="解析命令行选项"></a>解析命令行选项</h3><p>argparse 模块可被用来解析命令行选项, argparse 模块是标准库中最大的模块之一，拥有大量的配置选项。</p>
<h3 id="运行时弹出密码输入提示"><a href="#运行时弹出密码输入提示" class="headerlink" title="运行时弹出密码输入提示"></a>运行时弹出密码输入提示</h3><p>你写了个脚本，运行时需要一个密码。此脚本是交互式的，因此不能将密码在脚本中硬编码，而是需要弹出一个密码输入提示，让用户自己输入.<br>Python 的 getpass 模块正是你所需要的.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> getpass</div><div class="line"></div><div class="line">user = getpass.getuser()</div><div class="line">passwd = getpass.getpass()</div><div class="line"></div><div class="line"><span class="keyword">if</span> svc_login(user, passwd): <span class="comment"># You must write svc_login()</span></div><div class="line">    print(<span class="string">'Yay!'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'Boo!'</span>)</div></pre></td></tr></table></figure></p>
<p>注意在前面代码中 getpass.getuser() 不会弹出用户名的输入提示。它会根据该用户的 shell 环境或者会依据本地系统的密码库（支持 pwd 模块的平台）来使用当前用户的登录名，如果你想显示的弹出用户名输入提示，使用内置的 input 函数：<code>user = input(&#39;Enter your username: &#39;)</code><br>还有一点很重要，有些系统可能不支持 getpass() 方法隐藏输入密码。这种情况下，Python 会提前警告你这些问题（例如它会警告你说密码会以明文形式显示）</p>
<h3 id="获取终端的大小"><a href="#获取终端的大小" class="headerlink" title="获取终端的大小"></a>获取终端的大小</h3><p>使用 os.get terminal size() 函数来做到这一点</p>
<h3 id="执行外部命令并获取它的输出"><a href="#执行外部命令并获取它的输出" class="headerlink" title="执行外部命令并获取它的输出"></a>执行外部命令并获取它的输出</h3><p>使用 subprocess.check output() 函数,<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">out_bytes = subprocess.check_output([<span class="string">'netstat'</span>,<span class="string">'-a'</span>])</div></pre></td></tr></table></figure></p>
<p>这段代码执行一个指定的命令并将执行结果以一个字节字符串的形式返回。如果你<br>需要文本形式返回，加一个解码步骤即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">out_text = out_bytes.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="comment"># 或者直接将输出解码</span></div><div class="line">out_text = subprocess.check_output([<span class="string">'netstat'</span>,<span class="string">'-a'</span>]).decode(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure></p>
<p>默认情况下，check output() 仅仅返回输入到标准输出的值。如果你需要同时收集标准输出和错误输出，使用 stderr 参数：<br><code>out_bytes = subprocess.check_output([&#39;cmd&#39;,&#39;arg1&#39;,&#39;arg2&#39;], stderr=subprocess.STDOUT)</code><br>如果你需要用一个超时机制来执行命令，使用 timeout 参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    out_bytes = subprocess.check_output([<span class="string">'cmd'</span>,<span class="string">'arg1'</span>,<span class="string">'arg2'</span>], timeout=<span class="number">5</span>)</div><div class="line"><span class="keyword">except</span> subprocess.TimeoutExpired <span class="keyword">as</span> e:</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>你想让命令被一个shell 执行，传递一个字符串参数，并设置参数 shell=True . 有时候你想要 Python 去执行一个复杂的 shell 命令的时候这个就很有用了，比如管道流、I/O 重定向和其他特<br>性。例如：<code>out_bytes = subprocess.check_output(&#39;grep python | wc &gt; out&#39;, shell=True)</code><br>使用 check output() 函数是执行外部命令并获取其返回值的最简单方式,如果你需要对子进程做更复杂的交互，比如给它发送输入，你得采用另外一种方法。这时候可直接使用 subprocess.Popen 类。</p>
<h3 id="复制或者移动文件和目录"><a href="#复制或者移动文件和目录" class="headerlink" title="复制或者移动文件和目录"></a>复制或者移动文件和目录</h3><p>你想要复制或移动文件和目录，但是又不想调用 shell 命令,shutil 模块有很多便捷的函数可以复制文件和目录.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> shutil</div><div class="line"><span class="comment"># Copy src to dst. (cp src dst)</span></div><div class="line">shutil.copy(src, dst)</div><div class="line"><span class="comment"># Copy files, but preserve metadata (cp -p src dst)</span></div><div class="line">shutil.copy2(src, dst)</div><div class="line"><span class="comment"># Copy directory tree (cp -R src dst)</span></div><div class="line">shutil.copytree(src, dst)</div><div class="line"><span class="comment"># Move src to dst (mv src dst)</span></div><div class="line">shutil.move(src, dst)</div></pre></td></tr></table></figure></p>
<p>如果源文件是一个符号链接，那么目标文件将会是符号链接指向的文件。如果你只想复制符号链接本身，那么需要指定关键字参数 follow symlinks,如果你想保留被复制目录中的符号链接<br><code>shutil.copytree(src, dst, symlinks=True)</code>.<br>copytree() 可以让你在复制过程中选择性的忽略某些文件或目录,<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ignore_pyc_files</span><span class="params">(dirname, filenames)</span>:</span></div><div class="line">    <span class="keyword">return</span> [name <span class="keyword">in</span> filenames <span class="keyword">if</span> name.endswith(<span class="string">'.pyc'</span>)]</div><div class="line"></div><div class="line">shutil.copytree(src, dst, ignore=ignore_pyc_files)</div></pre></td></tr></table></figure></p>
<p>对于文件元数据信息，copy2() 这样的函数只能尽自己最大能力来保留它。访问时间、创建时间和权限这些基本信息会被保留，但是对于所有者、ACLs、资源 fork 和其他更深层次的文件元信息就说不准了，这个还得依赖于底层操作系统类型和用户所拥有的访问权限。你通常不会去使用 shutil.copytree() 函数来执行系统备份。当处理文件名的时候，最好使用 os.path 中的函数来确保最大的可移植性（特别是同时要适用于 Unix 和Windows）。</p>
<p>使用 copytree() 复制文件夹的一个棘手的问题是对于错误的处理。例如，在复制过程中，函数可能会碰到损坏的符号链接，因为权限无法访问文件的问题等等。为了解决这个问题，所有碰到的问题会被收集到一个列表中并打包为一个单独的异常，到了最后再抛出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    shutil.copytree(src, dst)</div><div class="line"><span class="keyword">except</span> shutil.Error <span class="keyword">as</span> e:</div><div class="line">    <span class="keyword">for</span> src, dst, msg <span class="keyword">in</span> e.args[<span class="number">0</span>]:</div><div class="line">        <span class="comment"># src is source name</span></div><div class="line">        <span class="comment"># dst is destination name</span></div><div class="line">        <span class="comment"># msg is error message from exception</span></div><div class="line">        print(dst, src, msg)</div></pre></td></tr></table></figure></p>
<p>如果你提供关键字参数 ignore dangling symlinks=True ，这时候 copytree() 会忽略掉无效符号链接。</p>
<h3 id="创建和解压归档文件"><a href="#创建和解压归档文件" class="headerlink" title="创建和解压归档文件"></a>创建和解压归档文件</h3><p>shutil 模块拥有两个函数—— make archive() 和 unpack archive() 可派上用场.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> shutil</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.unpack_archive(<span class="string">'Python-3.3.0.tgz'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.make_archive(<span class="string">'py33'</span>,<span class="string">'zip'</span>,<span class="string">'Python-3.3.0'</span>)</div><div class="line"><span class="string">'/Users/beazley/Downloads/py33.zip'</span></div></pre></td></tr></table></figure></p>
<p><code>make archive()</code> 的第二个参数是期望的输出格式。可以使用<code>get_archive_formats()</code> 获取所有支持的归档格式列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.get_archive_formats()</div><div class="line">[(<span class="string">'bztar'</span>, <span class="string">"bzip2'ed tar-file"</span>), (<span class="string">'gztar'</span>, <span class="string">"gzip'ed tar-file"</span>),</div><div class="line">(<span class="string">'tar'</span>, <span class="string">'uncompressed tar file'</span>), (<span class="string">'zip'</span>, <span class="string">'ZIP file'</span>)]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>Python 还有其他的模块可用来处理多种归档格式（比如 tarfile, zipfile, gzip, bz2）的底层细节。</p>
<h3 id="通过文件名查找文件"><a href="#通过文件名查找文件" class="headerlink" title="通过文件名查找文件"></a>通过文件名查找文件</h3><p>查找文件，可使用 <code>os.walk()</code> 函数，传一个顶级目录名给它.查找特定的文件名并答应所有符合条件的文件全路径<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3.3</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findfile</span><span class="params">(start, name)</span>:</span></div><div class="line">    <span class="keyword">for</span> relpath, dirs, files <span class="keyword">in</span> os.walk(start):</div><div class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> files:</div><div class="line">            full_path = os.path.join(start, relpath, name)</div><div class="line">            print(os.path.normpath(os.path.abspath(full_path)))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    findfile(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</div></pre></td></tr></table></figure></p>
<p><code>os.walk()</code> 方法为我们遍历目录树，每次进入一个目录，它会返回一个三元组，包含相对于查找目录的相对路径，一个该目录下的目录名列表，以及那个目录下面的文件名列表。<br>对于每个元组，只需检测一下目标文件名是否在文件列表中。如果是就使用<code>os.path.join()</code> 合并路径。为了避免奇怪的路径名比如 <code>././foo//bar</code> ，使用了另外两个函数来修正结果。第一个是 <code>os.path.abspath()</code> , 它接受一个路径，可能是相对路径，最后返回绝对路径。第二个是 <code>os.path.normpath()</code> ，用来返回正常路径，可以解决双斜杆、对目录的多重引用的问题等。</p>
<h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>读取普通.ini 格式的配置文件, configparser 模块能被用来读取配置文件, 使用 <code>cfg.write()</code> 方法将其写回到文件<br><strong>注意:</strong>配置文件中的名字是不区分大小写的. 但可以指定是否对大小写敏感(通过指定configparser示例对象的optionxform属性<code>cf.optionxform = str</code>).<br>配置文件并不是从上而下的顺序执行,是一个整体被读取.如果碰到了变量替换，它实际上已经被替换完成了,<br>在下面这个配置中，prefix 变量在使用它的变量之前后之后定义都是可以的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[installation]</div><div class="line">library=%(prefix)s/lib</div><div class="line">include=%(prefix)s/include</div><div class="line">bin=%(prefix)s/bin</div><div class="line">prefix=/usr/local</div></pre></td></tr></table></figure></p>
<p>ConfigParser 有个容易被忽视的特性是它能一次读取多个配置文件然后合并成一个配置。</p>
<h3 id="给简单脚本增加日志功能"><a href="#给简单脚本增加日志功能" class="headerlink" title="给简单脚本增加日志功能"></a>给简单脚本增加日志功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># Configure the logging system</span></div><div class="line">    logging.basicConfig(filename=<span class="string">'app.log'</span>, level=logging.ERROR)</div><div class="line">    <span class="comment"># Variables (to make the calls that follow work)</span></div><div class="line">    hostname = <span class="string">'www.python.org'</span></div><div class="line">    item = <span class="string">'spam'</span></div><div class="line">    filename = <span class="string">'data.csv'</span></div><div class="line">    mode = <span class="string">'r'</span></div><div class="line">    <span class="comment"># Example logging calls (insert into your program)</span></div><div class="line">    logging.critical(<span class="string">'Host %s unknown'</span>, hostname)</div><div class="line">    logging.error(<span class="string">"Couldn't find %r"</span>, item)</div><div class="line">    logging.warning(<span class="string">'Feature is deprecated'</span>)</div><div class="line">    logging.info(<span class="string">'Opening file %r, mode=%r'</span>, filename, mode)</div><div class="line">    logging.debug(<span class="string">'Got here'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>上面的日志配置都是硬编码到程序中的。如果你想使用配置文件，可以像下面这样修改 basicConfig() 调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> logging.config</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># Configure the logging system</span></div><div class="line">    logging.config.fileConfig(<span class="string">'logconfig.ini'</span>)</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>创建一个下面这样的文件，名字叫 logconfig.ini ,如果你想修改配置，可以直接编辑文件 logconfig.ini 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[loggers]</div><div class="line">keys=root</div><div class="line"></div><div class="line">[handlers]</div><div class="line">keys=defaultHandler</div><div class="line"></div><div class="line">[formatters]</div><div class="line">keys=defaultFormatter</div><div class="line"></div><div class="line">[logger_root]</div><div class="line">level=INFO</div><div class="line">handlers=defaultHandler</div><div class="line">qualname=root</div><div class="line"></div><div class="line">[handler_defaultHandler]</div><div class="line">class=FileHandler</div><div class="line">formatter=defaultFormatter</div><div class="line">args=(&apos;app.log&apos;, &apos;a&apos;)</div><div class="line"></div><div class="line">[formatter_defaultFormatter]</div><div class="line">format=%(levelname)s:%(name)s:%(message)s</div></pre></td></tr></table></figure></p>
<h3 id="实现一个计时器记录程序执行多个任务所花费的时间"><a href="#实现一个计时器记录程序执行多个任务所花费的时间" class="headerlink" title="实现一个计时器记录程序执行多个任务所花费的时间"></a>实现一个计时器记录程序执行多个任务所花费的时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func=time.perf_counter)</span>:</span></div><div class="line">        self.elapsed = <span class="number">0.0</span></div><div class="line">        self._func = func</div><div class="line">        self._start = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._start <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'Already started'</span>)</div><div class="line">        self._start = self._func()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._start <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'Not started'</span>)</div><div class="line">        end = self._func()</div><div class="line">        self.elapsed += end - self._start</div><div class="line">        self._start = <span class="keyword">None</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        self.elapsed = <span class="number">0.0</span></div><div class="line">    </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">running</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._start <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        self.start()</div><div class="line">        <span class="keyword">return</span> self</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, *args)</span>:</span></div><div class="line">        self.stop()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n -= <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># Use 1: Explicit start/stop</span></div><div class="line">t = Timer()</div><div class="line">t.start()</div><div class="line">countdown(<span class="number">1000000</span>)</div><div class="line">t.stop()</div><div class="line">print(t.elapsed)</div><div class="line"></div><div class="line"><span class="comment"># Use 2: As a context manager</span></div><div class="line"><span class="keyword">with</span> t:</div><div class="line">    countdown(<span class="number">1000000</span>)</div><div class="line">    print(t.elapsed)</div><div class="line"></div><div class="line"><span class="keyword">with</span> Timer() <span class="keyword">as</span> t2:</div><div class="line">    countdown(<span class="number">1000000</span>)</div><div class="line">    print(t2.elapsed)</div></pre></td></tr></table></figure>
<h3 id="限制内存和-CPU-的使用量"><a href="#限制内存和-CPU-的使用量" class="headerlink" title="限制内存和 CPU 的使用量"></a>限制内存和 CPU 的使用量</h3><p>对在 Unix 系统上面运行的程序设置内存或 CPU 的使用限制。resource 模块能同时执行这两个任务</p>
<h3 id="启动一个-WEB-浏览器"><a href="#启动一个-WEB-浏览器" class="headerlink" title="启动一个 WEB 浏览器"></a>启动一个 WEB 浏览器</h3><p>通过脚本启动浏览器并打开指定的 URL 网页,webbrowser 模块能被用来启动一个浏览器，并且与平台无关.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> webbrowser</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>webbrowser.open(<span class="string">'http://www.python.org'</span>)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>它会使用默认浏览器打开指定网页。如果你还想对网页打开方式做更多控制，还可以使用下面这些函数：<br>打开一个新的浏览器窗口或者标签，只要浏览器支持就行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Open the page in a new browser window</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>webbrowser.open_new(<span class="string">'http://www.python.org'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Open the page in a new browser tab</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>webbrowser.open_new_tab(<span class="string">'http://www.python.org'</span>)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>如果你想指定浏览器类型，可以使用 webbrowser.get() 函数来指定某个特定浏览器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = webbrowser.get(<span class="string">'firefox'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.open(<span class="string">'http://www.python.org'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.open_new_tab(<span class="string">'http://docs.python.org'</span>)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cookbook之并发编程]]></title>
      <url>http://arvin-he.github.io/2017/07/05/ck-multi-program-2017-07-05/</url>
      <content type="html"><![CDATA[<h3 id="启动与停止线程"><a href="#启动与停止线程" class="headerlink" title="启动与停止线程"></a>启动与停止线程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Code to execute in an independent thread</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        print(<span class="string">'T-minus'</span>, n)</div><div class="line">        n -= <span class="number">1</span></div><div class="line">        time.sleep(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># Create and launch a thread</span></div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line">t = Thread(target=countdown, args=(<span class="number">10</span>,))</div><div class="line">t.start()</div></pre></td></tr></table></figure>
<p>当你创建好一个线程对象后，该对象并不会立即执行，除非你调用它的 start()方法（当你调用 start() 方法时，它会调用你传递进来的函数，并把你传递进来的参数传递给该函数）。Python 中的线程会在一个单独的系统级线程中执行（比如说一个POSIX 线程或者一个 Windows 线程），这些线程将由操作系统来全权管理。线程一旦启动，将独立执行直到目标函数返回。你可以查询一个线程对象的状态，看它是否还在执行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> t.is_alive():</div><div class="line">    print(<span class="string">'Still running'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'Completed'</span>)</div></pre></td></tr></table></figure></p>
<p>你也可以将一个线程加入到当前线程，并等待它终止：<code>t.join()</code><br>Python 解释器在所有线程都终止后才继续执行代码剩余的部分。对于需要长时间运行的线程或者需要一直运行的后台任务，你应当考虑使用后台线程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 后台线程, 指定daemon为true</span></div><div class="line">t = Thread(target=countdown, args=(<span class="number">10</span>,), daemon=<span class="keyword">True</span>)</div><div class="line">t.start()</div></pre></td></tr></table></figure></p>
<p>后台线程无法等待，不过，这些线程会在主线程终止时自动销毁。</p>
<h3 id="判断线程是否已经启动"><a href="#判断线程是否已经启动" class="headerlink" title="判断线程是否已经启动"></a>判断线程是否已经启动</h3><p>使用 threading 库中的 Event 对象。Event 对象包含一个可由线程设置的信号标志，它允许线程等待某些事件的发生。在初始情况下，event 对象中的信号标志被设置为假。如果有线程等待一个 event 对象，而这个 event 对象的标志为假，那么这个线程将会被一直阻塞直至该标志为真。一个线程如果将一个 event 对象的信号标志设置为真，它将唤醒所有等待这个 event 对象的线程。如果一个线程等待一个已经被设置为真的 event 对象，那么它将忽略这个事件，继续执行。</p>
<p>event 对象最好单次使用，就是说，你创建一个 event 对象，让某个线程等待这个对象，一旦这个对象被设置为真，你就应该丢弃它。尽管可以通过 clear() 方法来重置 event 对象，但是很难确保安全地清理 event 对象并对它重新赋值。很可能会发生错过事件、死锁或者其他问题（特别是，你无法保证重置 event 对象的代码会在线程再次等待这个 event 对象之前执行）。如果一个线程需要不停地重复使用 event 对象，你最好使用 Condition 对象来代替。</p>
<p>event 对象的一个重要特点是当它被设置为真时会唤醒所有等待它的线程。如果你只想唤醒单个线程，最好是使用信号量或者 Condition 对象来替代。</p>
<p>编写涉及到大量的线程间同步问题的代码会让你痛不欲生。比较合适的方式是使用队列来进行线程间通信或者每个把线程当作一个 Actor，利用 Actor 模型来控制并发。</p>
<h3 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h3><p>从一个线程向另一个线程发送数据最安全的方式可能就是使用 queue 库中的队列了。创建一个被多个线程共享的 Queue 对象，这些线程通过使用 put() 和 get() 操作来向队列中添加或者删除元素。<br>Queue 对象已经包含了必要的锁，所以你可以通过它在多个线程间多安全地共享数据。当使用队列时，协调生产者和消费者的关闭问题可能会有一些麻烦。一个通用的解决方法是在队列中放置一个特殊的值，当消费者读到这个值的时候，终止执行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="comment"># Object that signals shutdown</span></div><div class="line">_sentinel = object()</div><div class="line"><span class="comment"># A thread that produces data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(out_q)</span>:</span></div><div class="line">    <span class="keyword">while</span> running:</div><div class="line">        <span class="comment"># Produce some data</span></div><div class="line">        ...</div><div class="line">        out_q.put(data)</div><div class="line">    <span class="comment"># Put the sentinel on the queue to indicate completion</span></div><div class="line">    out_q.put(_sentinel)</div><div class="line"></div><div class="line"><span class="comment"># A thread that consumes data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(in_q)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="comment"># Get some data</span></div><div class="line">        data = in_q.get()</div><div class="line">        <span class="comment"># Check for termination</span></div><div class="line">        <span class="keyword">if</span> data <span class="keyword">is</span> _sentinel:</div><div class="line">            in_q.put(_sentinel)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="comment"># Process the data</span></div><div class="line">        ...</div></pre></td></tr></table></figure></p>
<p>本例中有一个特殊的地方：消费者在读到这个特殊值之后立即又把它放回到队列中，将之传递下去。这样，所有监听这个队列的消费者线程就可以全部关闭了。</p>
<p>创建一个线程安全的优先级队列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> heapq</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self._queue = []</div><div class="line">        self._count = <span class="number">0</span></div><div class="line">        self._cv = threading.Condition()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, item, priority)</span>:</span></div><div class="line">        <span class="keyword">with</span> self._cv:</div><div class="line">            heapq.heappush(self._queue, (-priority, self._count, item))</div><div class="line">            self._count += <span class="number">1</span></div><div class="line">            self._cv.notify()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">with</span> self._cv:</div><div class="line">            <span class="keyword">while</span> len(self._queue) == <span class="number">0</span>:</div><div class="line">                self._cv.wait()</div><div class="line">            <span class="keyword">return</span> heapq.heappop(self._queue)[<span class="number">-1</span>]</div></pre></td></tr></table></figure></p>
<p>使用队列来进行线程间通信是一个单向、不确定的过程。通常情况下，你没有办法知道接收数据的线程是什么时候接收到的数据并开始工作的。<br>使用线程队列有一个要注意的问题是，向队列中添加数据项时并不会复制此数据项，线程间通信实际上是在线程间传递对象引用。如果你担心对象的共享<br>状态，那你最好只传递不可修改的数据结构（如：整型、字符串或者元组）或者一个对象的深拷贝。</p>
<h3 id="给关键部分加锁"><a href="#给关键部分加锁" class="headerlink" title="给关键部分加锁"></a>给关键部分加锁</h3><p>使用 threading 库中的 Lock 对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedCounter</span>:</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">A counter object that can be shared by multiple threads.</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial_value = <span class="number">0</span>)</span>:</span></div><div class="line">    self._value = initial_value</div><div class="line">    self._value_lock = threading.Lock()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(self,delta=<span class="number">1</span>)</span>:</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">Increment the counter with locking</span></div><div class="line"><span class="string">'''</span></div><div class="line">    <span class="keyword">with</span> self._value_lock:</div><div class="line">        self._value += delta</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decr</span><span class="params">(self,delta=<span class="number">1</span>)</span>:</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">Decrement the counter with locking</span></div><div class="line"><span class="string">'''</span></div><div class="line">    <span class="keyword">with</span> self._value_lock:</div><div class="line">        self._value -= delta</div></pre></td></tr></table></figure></p>
<p>Lock 对象和 with 语句块一起使用可以保证互斥执行，就是每次只有一个线程可以执行 with 语句包含的代码块。with 语句会在这个代码块执行前自动获取锁，在执行结束后自动释放锁。</p>
<p>线程调度本质上是不确定的，因此，在多线程程序中错误地使用锁机制可能会导致随机数据损坏或者其他的异常行为，我们称之为竞争条件。为了避免竞争条件，最好只在临界区（对临界资源进行操作的那部分代码）使用锁。</p>
<p>关于信号量<br>信号量对象是一个建立在共享计数器基础上的同步原语。如果计数器不为 0，with 语句将计数器减 1，线程被允许执行。with 语句执行结束后，计数器加１。如果计数器为 0，线程将被阻塞，直到其他线程结束将计数器加 1。尽管你可以在程序中像标准锁一样使用信号量来做线程同步，但是这种方式并不被推荐，因为使用信号量为程序增加的复杂性会影响程序性能。相对于简单地作为锁使用，信号量更适用于那些需要在线程之间引入信号或者限制的程序。比如，你需要限制一段代码的并发访问量，你就可以像下面这样使用信号量完成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Semaphore</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"></div><div class="line"><span class="comment"># At most, five threads allowed to run at once</span></div><div class="line">_fetch_url_sema = Semaphore(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_url</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">with</span> _fetch_url_sema:</div><div class="line">        <span class="keyword">return</span> urllib.request.urlopen(url)</div></pre></td></tr></table></figure></p>
<h3 id="防止死锁的加锁机制"><a href="#防止死锁的加锁机制" class="headerlink" title="防止死锁的加锁机制"></a>防止死锁的加锁机制</h3><p>在多线程程序中，死锁问题很大一部分是由于线程同时获取多个锁造成的.举个例子：一个线程获取了第一个锁，然后在获取第二个锁的时候发生阻塞，那么这个线程就可能阻塞其他线程的执行，从而导致整个程序假死。解决死锁问题的一种方案是为程序中的每一个锁分配一个唯一的 id，然后只允许按照升序规则来使用多个锁，这个规则使用上下文管理器是非常容易实现的，示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</div><div class="line"></div><div class="line"><span class="comment"># Thread-local state to stored information on locks already acquired</span></div><div class="line">_local = threading.local()</div><div class="line"></div><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire</span><span class="params">(*locks)</span>:</span></div><div class="line">    <span class="comment"># Sort locks by object identifier</span></div><div class="line">    locks = sorted(locks, key=<span class="keyword">lambda</span> x: id(x))</div><div class="line"></div><div class="line">    <span class="comment"># Make sure lock order of previously acquired locks is not violated</span></div><div class="line">    acquired = getattr(_local,<span class="string">'acquired'</span>,[])</div><div class="line">    <span class="keyword">if</span> acquired <span class="keyword">and</span> max(id(lock) <span class="keyword">for</span> lock <span class="keyword">in</span> acquired) &gt;= id(locks[<span class="number">0</span>]):</div><div class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'Lock Order Violation'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Acquire all of the locks</span></div><div class="line">    acquired.extend(locks)</div><div class="line">    _local.acquired = acquired</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">for</span> lock <span class="keyword">in</span> locks:</div><div class="line">            lock.acquire()</div><div class="line">        <span class="keyword">yield</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="comment"># Release locks in reverse order of acquisition</span></div><div class="line">        <span class="keyword">for</span> lock <span class="keyword">in</span> reversed(locks):</div><div class="line">            lock.release()</div><div class="line">        <span class="keyword">del</span> acquired[-len(locks):]</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line">x_lock = threading.Lock()</div><div class="line">y_lock = threading.Lock()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">with</span> acquire(x_lock, y_lock):</div><div class="line">            print(<span class="string">'Thread-1'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">with</span> acquire(y_lock, x_lock):</div><div class="line">            print(<span class="string">'Thread-2'</span>)</div><div class="line"></div><div class="line">t1 = threading.Thread(target=thread_1)</div><div class="line">t1.daemon = <span class="keyword">True</span></div><div class="line">t1.start()</div><div class="line"></div><div class="line">t2 = threading.Thread(target=thread_2)</div><div class="line">t2.daemon = <span class="keyword">True</span></div><div class="line">t2.start()</div><div class="line"></div><div class="line"><span class="comment"># 下面的写法会导致线程崩溃,发生崩溃的原因在于，每个线程都记录着自己已经获取到的锁。 </span></div><div class="line"><span class="comment"># acquire() 函数会检查之前已经获取的锁列表，由于锁是按照升序排列获取的，</span></div><div class="line"><span class="comment"># 所以函数会认为之前已获取的锁的 id 必定小于新申请到的锁，这时就会触发异常。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">with</span> acquire(x_lock):</div><div class="line">            <span class="keyword">with</span> acquire(y_lock):</div><div class="line">                print(<span class="string">'Thread-1'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">with</span> acquire(y_lock):</div><div class="line">            <span class="keyword">with</span> acquire(x_lock):</div><div class="line">                print(<span class="string">'Thread-2'</span>)</div></pre></td></tr></table></figure>
<p>死锁是每一个多线程程序都会面临的一个问题,根据经验来讲，尽可能保证每一个线程只能同时保持一个锁，这样程序<br>就不会被死锁问题所困扰。一旦有线程同时申请多个锁，一切就不可预料了。</p>
<p>死锁的检测与恢复是一个几乎没有优雅的解决方案的扩展话题。一个比较常用的死锁检测与恢复的方案是引入看门狗计数器。当线程正常运行的时候会每隔一段时间重置计数器，在没有发生死锁的情况下，一切都正常进行。一旦发生死锁，由于无法重置计数器导致定时器超时，这时程序会通过重启自身恢复到正常状态。</p>
<p>避免死锁是另外一种解决死锁问题的方式，在进程获取锁的时候会严格按照对象 id升序排列获取，经过数学证明，这样保证程序不会进入死锁状态。避免死锁的主要思想是，单纯地按照对象 id 递增的顺序加锁不会产生循环依赖，而循环依赖是死锁的一个必要条件，从而避免程序进入死锁状态。</p>
<p>要特别注意到，为了避免死锁，所有的加锁操作必须使用 acquire() 函数。如果代码中的某部分绕过 acquire 函数直接申请锁，那么整个死锁避免机制就不起作用了。</p>
<h3 id="创建一个线程池"><a href="#创建一个线程池" class="headerlink" title="创建一个线程池"></a>创建一个线程池</h3><p>通常，你应该只在 I/O 处理相关代码中使用线程池,创建大的线程池的一个可能需要关注的问题是内存的使用.</p>
<h3 id="实现消息发布-订阅模型"><a href="#实现消息发布-订阅模型" class="headerlink" title="实现消息发布/订阅模型"></a>实现消息发布/订阅模型</h3><p>要实现发布/订阅的消息通信模式，你通常要引入一个单独的“交换机”或“网关”对象作为所有消息的中介。也就是说，不直接将消息从一个任务发送到另一个，而是将其发送给交换机，然后由交换机将它发送给一个或多个被关联任务。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SVN命令使用]]></title>
      <url>http://arvin-he.github.io/2017/06/29/svncmd-2017-06-29/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>版本管理基本上是多人协作开发中必不可少的工具，常用的版本管理工具有：svn和git。虽然都有可视化的工具帮助我们使用这些工具，然而当你用上命令行之后，我想你会选择抛弃这些可视化工具。下面是我整理的一些常用的svn命令。</p>
<h3 id="SVN命令格式"><a href="#SVN命令格式" class="headerlink" title="SVN命令格式"></a>SVN命令格式</h3><p>svn命令格式: <code>svn &lt;subcommand&gt; [options] [args]</code><br>subcommand 是子命令<br>options 是选项,可选<br>args 是参数,可选</p>
<h3 id="SVN常用命令"><a href="#SVN常用命令" class="headerlink" title="SVN常用命令"></a>SVN常用命令</h3><p><strong>说明:</strong> 绝大部分svn命令都是在svn的工作目录下执行的, 只有少数几个例外.</p>
<h4 id="1-帮助和日志查看"><a href="#1-帮助和日志查看" class="headerlink" title="1. 帮助和日志查看"></a>1. 帮助和日志查看</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">svn help/h                      --查看帮助信息</div><div class="line">svn help &lt;subcommand&gt;           --查看子命令的帮助信息</div><div class="line">svn --version                   -- 查看程序版本信息和RA模块</div><div class="line">svn --version --quiet           --仅查看snv的版本号</div><div class="line">svn log                         --查看所有日志</div><div class="line">svn log -l 10                   --查看最新10条日志</div><div class="line">svn info --show-item revision   --查看工程的版本号</div></pre></td></tr></table></figure>
<h4 id="2-检出-查看-导入"><a href="#2-检出-查看-导入" class="headerlink" title="2. 检出/查看/导入"></a>2. 检出/查看/导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 检出代码</div><div class="line">svn checkout/co [directory] project(本地目录名，可选)</div><div class="line"></div><div class="line"># 检出版本3</div><div class="line">svn checkout/co –revision/r 3 [directory] project(本地目录名，可选)</div><div class="line"></div><div class="line"># 查看检出版本信息(注意:要进入到svn的工作目录中去)</div><div class="line">svn info</div><div class="line"></div><div class="line"># 导入(import)项目,项目尚未创建，将本地的目录放到SVN版本仓库中</div><div class="line">svn import project(本地目录名) [directory] </div><div class="line"></div><div class="line"># 查看svn工作目录下的文件和目录</div><div class="line">svn list/ls</div><div class="line"></div><div class="line"># 查看svn最新修改的最新版本号</div><div class="line">svn info yourdir --show-item last-changed-revision</div></pre></td></tr></table></figure>
<h4 id="3-更新-增加-修改-删除-重命名-拷贝-创建目录"><a href="#3-更新-增加-修改-删除-重命名-拷贝-创建目录" class="headerlink" title="3. 更新/增加/修改/删除/重命名/拷贝/创建目录"></a>3. 更新/增加/修改/删除/重命名/拷贝/创建目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 更新仓库内容到本地</div><div class="line">svn update/up</div><div class="line"></div><div class="line"># 更新到版本3</div><div class="line">svn update/up –revision/r 3</div><div class="line"></div><div class="line"># 增加一些新的文件，纳入项目的版本控制</div><div class="line">svn add a.py b.py ...</div><div class="line"></div><div class="line"># 删除废弃的不用的文件</div><div class="line">svn delete/del/remove/rm a.py</div><div class="line"></div><div class="line"># 重命名文件</div><div class="line">svn move/mv a.py aa.py</div><div class="line"></div><div class="line"># 新增目录</div><div class="line">svn mkdir mydir</div><div class="line"></div><div class="line"># 拷贝</div><div class="line">svn copy/cp srcdir/a.py dstdir/a.py</div></pre></td></tr></table></figure>
<h4 id="4-检查-查看差异"><a href="#4-检查-查看差异" class="headerlink" title="4. 检查/查看差异"></a>4. 检查/查看差异</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 检查修改状态</div><div class="line">svn status/stat/st</div><div class="line"></div><div class="line"># 对比一个目录下的差异</div><div class="line">svn diff/di folder(本地目录名，可选，默认当前目录)</div><div class="line"></div><div class="line"># 对比具体文本差异</div><div class="line">svn diff/di –revision/r 3 index.html</div><div class="line"></div><div class="line"># 查看index.html版本3和版本4的差别</div><div class="line">svn diff/di –revision/r 3:4 index.html</div></pre></td></tr></table></figure>
<h4 id="5-取消修改"><a href="#5-取消修改" class="headerlink" title="5. 取消修改"></a>5. 取消修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 回滚整个目录的修改</div><div class="line">svn revert . -R/--recursive </div><div class="line"></div><div class="line"># 撤销某个文件的修改</div><div class="line">svn revert a.py</div></pre></td></tr></table></figure>
<h4 id="6-分支操作"><a href="#6-分支操作" class="headerlink" title="6. 分支操作"></a>6. 分支操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 创建分支</div><div class="line">svn copy/cp svn://xxx.com/repo/trunk svn://xxx.com/repo/branches/test -m &apos;make branch test&apos;</div><div class="line"></div><div class="line"># 将工作目录转到分支</div><div class="line">svn switch/sw svn://xxx.com/repo/branches/test</div><div class="line"></div><div class="line"># 将工作目录转到主干</div><div class="line">svn switch/sw svn://xxx.com/repo/trunk</div></pre></td></tr></table></figure>
<h4 id="7-合并一个分支到主干"><a href="#7-合并一个分支到主干" class="headerlink" title="7. 合并一个分支到主干"></a>7. 合并一个分支到主干</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 查询出自创建分支以后分支上的所有修改，最下面的那个版本号就是我们要找的版本号</div><div class="line">cd branches/test(分支目录) </div><div class="line">svn log –stop-on-copy </div><div class="line"></div><div class="line"># 查询出自创建分支以后分支上的所有修改，最下面的那个版本号就是我们要找的版本号</div><div class="line">cd trunk(主干目录) </div><div class="line">svn -q –stop-on-copy svn://xxx.com/repo/branches/test(分支url) </div><div class="line"></div><div class="line"># 合并到主干</div><div class="line">cd trunk（主干目录） </div><div class="line">svn merge -r 11340(分支版本):HEAD svn://xxx.com/repo/branches/test(分支url)</div></pre></td></tr></table></figure>
<h4 id="8-两个分支合并"><a href="#8-两个分支合并" class="headerlink" title="8. 两个分支合并"></a>8. 两个分支合并</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 假设99是从旧主干引出，100打完tag，表示是新主干。合并最新代码的意思是：将新主干与旧主干比对，并添加到99中。这样99既有自己的新增的代码，也同时有最新线上的代码。</div><div class="line">cd 99_Branch </div><div class="line">svn merge svn://xxx.com/repo/tags/project_Old_BL svn://xxx.com/repo/tags/project_New_BL svn ci -m &apos;merge 100 trunk&apos;</div><div class="line"></div><div class="line"># 但是后来，其他人又向100提了代码，所以还需要将100分支（即打了tag后的100，打了tag前的100已是主干）合并至99中。合并办法：找出100分支，比对与新主干之间的差别，并添加到99中。这样99就有最新的全部代码了。</div><div class="line">cd 99_Branch </div><div class="line">svn merge svn://xxx.com/repo/tags/project_New_BL svn:/xxx.com/repo/branches/100_Branch svn ci -m &apos;merge 100 branch&apos; </div><div class="line"></div><div class="line"># 合并主干到分支</div><div class="line">svn merge -r LastRevisionMergedFromTrunkToBranch:HEAD svn:/xxx.com/repo/branches/99_Branch</div></pre></td></tr></table></figure>
<h4 id="9-发布"><a href="#9-发布" class="headerlink" title="9. 发布"></a>9. 发布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 给当前主干打个标签，并且这个标签不再改动了，但是实际上标签和分支是一个意思，你可以在标签上继续做改动，但这不推荐。</div><div class="line">svn copy/cp svn://xxx.com/repo/trunk svn://xxx.com/repo/tags/RB-1.0</div></pre></td></tr></table></figure>
<h4 id="10-提交-导出代码"><a href="#10-提交-导出代码" class="headerlink" title="10. 提交/导出代码"></a>10. 提交/导出代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 提交代码</div><div class="line">svn commit/ci -m &apos;message&apos; </div><div class="line"></div><div class="line"># 导出代码, 不包含svn版本信息</div><div class="line">svn export svn://xxx.com/repo/branches/test folder(本地目录)</div></pre></td></tr></table></figure>
<h4 id="11-解决冲突"><a href="#11-解决冲突" class="headerlink" title="11. 解决冲突"></a>11. 解决冲突</h4><p>当发生冲突的时候，会提示如下信息：</p>
<blockquote>
<p>Conflict discovered in ‘index.html’.<br>Select: (p) postpone, (df) diff-full, (e) edit,<br>(mc) mine-conflict, (tc) theirs-conflict,<br>(s) show all options:<br>svn detects that theres a conflict here and require you to take some kind of action.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">如果你输入s选项，则会列出所有svn解决冲突的选项，如下所示：</div><div class="line">(e) edit - change merged file in an editor #直接进入编辑</div><div class="line">(df) diff-full -show all changes made to merged file #显示更改至目标文件的所有变化</div><div class="line">(r) resolved -accept merged version of file</div><div class="line">(dc) display-conflict -show all conflicts(ignoring merged version) #显示所有冲突</div><div class="line">(mc) mine-conflict -accept my version for all conflicts (same) #冲突以本地为准</div><div class="line">(tc) theirs-conflict -accept their version for all conflicts (same) #冲突以服务器为准</div><div class="line">(mf) mine-full -accept my version of entire file (even non-conflicts) #完全以本地为准</div><div class="line">(tf) theirs-full -accept their version of entire file (same) #完全以服务器为准</div><div class="line">(p) postpone -mark the conflict to be resolved later #标记冲突，稍后解决</div><div class="line">(l) launch -launch external tool to resolve conflict</div><div class="line">(s) show all -show this list</div><div class="line"></div><div class="line">一般我们会选择p稍后解决冲突，这样会生成三个文件：.mine, .rOLDREV, .rNEWREV。</div><div class="line">比如：index.html index.html.mine index.html.r1 index.html.r2 </div><div class="line">解决冲突方法大致有一下几种：</div><div class="line"></div><div class="line">1).手工修改index.html文件，然后将当前index.html作为最后提交的版本</div><div class="line">svn resolve index.html –-accept working </div><div class="line">2).选择base版本，即index.html.rOLDREV作为最后提交的版本</div><div class="line">svn resolve index.html –-accept base </div><div class="line">3).使用index.html.rNEWREV作为最后提交的版本</div><div class="line">svn resolve index.html –-accept theirs-full </div><div class="line">4).使用index.html.mine作为最后提交的版本</div><div class="line">svn resolve index.html –-accept mine-full </div><div class="line"># 或者用下面这条命令也可以 </div><div class="line">svn resolve index.html –-accept theirs-conflict</div></pre></td></tr></table></figure>
<h4 id="12-查看最近svn几次的版本号"><a href="#12-查看最近svn几次的版本号" class="headerlink" title="12. 查看最近svn几次的版本号"></a>12. 查看最近svn几次的版本号</h4><p>通过查看svn日志,然后用正则表达式匹配出版本号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取最近几次提交的版本号</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_commit_revisions</span><span class="params">(svn_path, commit_times=<span class="string">"5"</span>)</span>:</span></div><div class="line">    output = subprocess.check_output(</div><div class="line">        [<span class="string">"svn"</span>, <span class="string">"log"</span>, svn_path, <span class="string">"-v"</span>, <span class="string">"--limit"</span>, commit_times]).decode(<span class="string">"gbk"</span>).strip()</div><div class="line">    svn_logs = [item.strip() <span class="keyword">for</span> item <span class="keyword">in</span> output.splitlines() <span class="keyword">if</span> item]</div><div class="line">    <span class="comment"># 存放最近几次提交的版本号</span></div><div class="line">    revisions_info = []</div><div class="line">    <span class="comment"># 匹配版本号</span></div><div class="line">    pattern1 = re.compile(<span class="string">r'^r[0-9]* '</span>)</div><div class="line">    <span class="keyword">for</span> msg <span class="keyword">in</span> svn_logs:</div><div class="line">        match1 = pattern1.match(msg)</div><div class="line">        <span class="keyword">if</span> match1:</div><div class="line">            revision = match1.group().strip()</div><div class="line">            revisions_info.append(revision[<span class="number">1</span>:])</div><div class="line">    <span class="keyword">return</span> revisions_info</div><div class="line"></div><div class="line"><span class="comment"># 获取最新修改的版本号</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base_revision</span><span class="params">(svn_path)</span>:</span></div><div class="line">    revision = subprocess.check_output(</div><div class="line">        [<span class="string">"svn"</span>, <span class="string">"info"</span>, svn_path, <span class="string">"--show-item"</span>, <span class="string">"last-changed-revision"</span>]).decode(<span class="string">"gbk"</span>).strip()</div><div class="line">    print(<span class="string">"revision = &#123;&#125;"</span>.format(revision))</div><div class="line">    <span class="keyword">return</span> revision</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.phpxs.com/post/5059/" target="_blank" rel="external">常用的svn和git命令</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用软件列表]]></title>
      <url>http://arvin-he.github.io/2017/06/27/softwarelist-2017-06-27/</url>
      <content type="html"><![CDATA[<h2 id="Windows软件列表"><a href="#Windows软件列表" class="headerlink" title="Windows软件列表"></a>Windows软件列表</h2><h3 id="日常常用软件列表"><a href="#日常常用软件列表" class="headerlink" title="日常常用软件列表"></a>日常常用软件列表</h3><ul>
<li>办公<ul>
<li>Office</li>
</ul>
</li>
<li>下载<ul>
<li>迅雷</li>
</ul>
</li>
<li>浏览器<ul>
<li>Chrome</li>
<li>FireFox国际版</li>
</ul>
</li>
<li>截图<ul>
<li>ShareX</li>
</ul>
</li>
<li>音视频<ul>
<li>QQ影音</li>
<li>foobar2000</li>
<li>PotPlayer</li>
</ul>
</li>
<li>压缩<ul>
<li>7-Zip</li>
</ul>
</li>
<li>PDF<ul>
<li>SumatraPDF</li>
</ul>
</li>
<li>输入法<ul>
<li>QQ拼音</li>
<li>必应拼音</li>
</ul>
</li>
<li>邮件客户端<ul>
<li>Foxmail</li>
</ul>
</li>
<li>文件搜索<ul>
<li>Everything</li>
<li>Listary</li>
</ul>
</li>
<li>文件管理<ul>
<li>Total Commander</li>
<li>Clover</li>
</ul>
</li>
<li>剪贴板<ul>
<li>Ditto</li>
</ul>
</li>
<li>强制解锁<ul>
<li>unlocker</li>
</ul>
</li>
<li>科学上网<ul>
<li>Hosts</li>
<li>lantern</li>
</ul>
</li>
</ul>
<h3 id="开发常用软件列表"><a href="#开发常用软件列表" class="headerlink" title="开发常用软件列表"></a>开发常用软件列表</h3><ul>
<li>文本编辑器<ul>
<li>VS Code</li>
<li>Sublime Text3</li>
<li>Atom</li>
<li>Notepad++</li>
</ul>
</li>
<li>命令行工具<ul>
<li>cmder</li>
</ul>
</li>
<li>编译工具<ul>
<li>MSYS2</li>
<li>Mingw</li>
<li>Mingw-w64</li>
<li>Cygwin</li>
<li>CMake</li>
<li>GYP</li>
<li>Ninja</li>
<li>Microsoft Build Tools</li>
</ul>
</li>
<li>虚拟机<ul>
<li>VirtualBox</li>
<li>VmWare</li>
</ul>
</li>
<li>代码阅读<ul>
<li>Source Insight</li>
<li>SlickEdit</li>
<li>Understand</li>
</ul>
</li>
<li>UML建模<ul>
<li>Enterprise Architect</li>
<li>StarUML</li>
</ul>
</li>
<li>IDE<ul>
<li>Visual Studio</li>
<li>Jetbrains全家桶</li>
<li>Qt Creator</li>
</ul>
</li>
<li>版本控制<ul>
<li>Git</li>
<li>SVN</li>
</ul>
</li>
<li>文件对比<ul>
<li>BeyondCompare</li>
</ul>
</li>
<li>数据库客户端<ul>
<li>Navicat</li>
</ul>
</li>
<li>网络抓包<ul>
<li>wireshark</li>
<li>Fiddler</li>
</ul>
</li>
</ul>
<h2 id="Linux软件列表"><a href="#Linux软件列表" class="headerlink" title="Linux软件列表"></a>Linux软件列表</h2>]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法系列之插入排序]]></title>
      <url>http://arvin-he.github.io/2017/06/23/algo-insertsort-2017-06-23/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>从第一个元素开始，该元素可以认为已经被排序<br>取出下一个元素，在已经排序的元素序列中从后向前扫描<br>如果该元素（已排序）大于新元素，将该元素移到下一位置<br>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置<br>将新元素插入到该位置中<br>重复步骤2</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>时间复杂度为O(N^2)，空间复杂度为O(1)。算法是稳定的，比较次数和交换次数都与初始序列有关。</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>直接插入排序每次往前插入时，是按顺序依次往前找，可在这里进行优化，往前找合适的插入位置时采用二分查找的方式，即折半插入。<br>折半插入排序相对直接插入排序而言：平均性能更快，时间复杂度降至O(NlogN)，排序是稳定的，但排序的比较次数与初始序列无关，总是需要foor(log(i))+1次排序比较。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>当数据基本有序时，采用插入排序可以明显减少数据交换和数据移动次数，进而提升排序效率。</p>
<h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(arr)</span>:</span></div><div class="line">    count = len(arr)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, count):</div><div class="line">        temp = arr[i]</div><div class="line">        j = i<span class="number">-1</span></div><div class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> arr[j] &gt; temp:</div><div class="line">                arr[j], arr[j+<span class="number">1</span>] = temp, arr[j]</div><div class="line">            j -= <span class="number">1</span></div><div class="line">    print(arr)</div><div class="line">    <span class="keyword">return</span> arr</div><div class="line"></div><div class="line">insert_sort(arr)</div></pre></td></tr></table></figure>
<p>运行结果:<br><img src="/2017/06/23/algo-insertsort-2017-06-23/1.png" alt=""></p>
<h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// 法1</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort1</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> temp = arr[i];</div><div class="line">            <span class="keyword">int</span> j;</div><div class="line">            <span class="keyword">for</span> (j=i<span class="number">-1</span>; j&gt;=<span class="number">0</span> &amp;&amp; arr[j]&gt;temp; j--)</div><div class="line">            &#123;</div><div class="line">                arr[j+<span class="number">1</span>] = arr[j];</div><div class="line">            &#125;</div><div class="line">            arr[j+<span class="number">1</span>] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 法2, 似乎更好理解</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> temp = arr[i];</div><div class="line">        <span class="keyword">int</span> j = i<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span> (j&gt;=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; temp)</div><div class="line">            &#123;</div><div class="line">                arr[j+<span class="number">1</span>] = arr[j];</div><div class="line">                arr[j] = temp;</div><div class="line">            &#125;</div><div class="line">            j -= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//改进的插入排序，往前插入比较时，进行二分查找</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_binary_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> temp = arr[i];</div><div class="line">            <span class="keyword">int</span> low = <span class="number">0</span>, high = i<span class="number">-1</span>, mid;</div><div class="line">            <span class="keyword">while</span> (low&lt;=high)</div><div class="line">            &#123;</div><div class="line">                mid = (low+high)/<span class="number">2</span>;</div><div class="line">                <span class="keyword">if</span> (temp &lt; arr[mid])</div><div class="line">                &#123;</div><div class="line">                    high = mid - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    low = mid + <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j&gt;low; j--)</div><div class="line">            &#123;</div><div class="line">                arr[j] = arr[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">            arr[low] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">6</span>&#125;;</div><div class="line">    insert_sort(arr, <span class="number">9</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt;<span class="string">"   "</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:<br><img src="/2017/06/23/algo-insertsort-2017-06-23/2.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://segmentfault.com/a/1190000004994003" target="_blank" rel="external">https://segmentfault.com/a/1190000004994003</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之简单工厂模式]]></title>
      <url>http://arvin-he.github.io/2017/06/22/dp-simplefactory-2017-06-22/</url>
      <content type="html"><![CDATA[<h3 id="简单工厂模式-Simple-Factory-Pattern"><a href="#简单工厂模式-Simple-Factory-Pattern" class="headerlink" title="简单工厂模式(Simple Factory Pattern)"></a>简单工厂模式(Simple Factory Pattern)</h3><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>
<h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># prodcut.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># productA.py</span></div><div class="line"><span class="keyword">from</span> product <span class="keyword">import</span> Product</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span><span class="params">(Product)</span>:</span></div><div class="line">    product_type = <span class="string">"A"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(ProductA, self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"prodcut A"</span>)</div><div class="line"></div><div class="line"><span class="comment"># productB.py</span></div><div class="line"><span class="keyword">from</span> product <span class="keyword">import</span> Product</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span><span class="params">(Product)</span>:</span></div><div class="line">    product_type = <span class="string">"B"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(ProductB, self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">use</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"product B"</span>)</div><div class="line"></div><div class="line"><span class="comment"># factory.py</span></div><div class="line"><span class="keyword">from</span> productA <span class="keyword">import</span> ProductA</div><div class="line"><span class="keyword">from</span> productB <span class="keyword">import</span> ProductB</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createProduct</span><span class="params">(product_type)</span>:</span></div><div class="line">    prod = <span class="keyword">None</span></div><div class="line">    <span class="keyword">if</span> product_type == <span class="string">"A"</span>:</div><div class="line">        prod = ProductA()</div><div class="line">    <span class="keyword">elif</span> product_type == <span class="string">"B"</span>:</div><div class="line">        prod = ProductB()</div><div class="line">    <span class="keyword">return</span> prod</div><div class="line"></div><div class="line"><span class="comment"># main.py</span></div><div class="line"><span class="keyword">from</span> factory <span class="keyword">import</span> createProduct</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    prodA = createProduct(<span class="string">"A"</span>)</div><div class="line">    prodB = createProduct(<span class="string">"B"</span>)</div><div class="line">    prodA.use()</div><div class="line">    prodB.use()</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="/2017/06/22/dp-simplefactory-2017-06-22/2.png" alt=""></p>
<h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 工厂类</span></div><div class="line"><span class="comment">//factory.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FACTORY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FACTORY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Factory();</div><div class="line">    <span class="keyword">virtual</span> ~Factory();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Product* <span class="title">createProduct</span><span class="params">(<span class="built_in">string</span> proname)</span></span>;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// FACTORY_H</span></span></div><div class="line"></div><div class="line"><span class="comment">// factory.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"concreateproducta.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"concreateproductb.h"</span></span></div><div class="line"></div><div class="line">Factory::Factory()&#123;&#125;</div><div class="line"></div><div class="line">Factory::~Factory()&#123;&#125;</div><div class="line"></div><div class="line">Product* Factory::createProduct(<span class="built_in">string</span> proname)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (proname == <span class="string">"A"</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreateProductA();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (proname == <span class="string">"B"</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreateProductB();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 产品基类</span></div><div class="line"><span class="comment">//product.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PRODUCT_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_H</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Product();</div><div class="line">    <span class="keyword">virtual</span> ~Product();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// PRODUCT_H</span></span></div><div class="line"></div><div class="line"><span class="comment">//product.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"></div><div class="line">Product::Product()&#123;&#125;</div><div class="line"></div><div class="line">Product::~Product()&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//产品A派生类</span></div><div class="line"><span class="comment">//concreateproducta.h </span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONCREATEPRODUCTA_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CONCREATEPRODUCTA_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreateProductA</span>:</span> <span class="keyword">public</span> Product</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ConcreateProductA();</div><div class="line">    <span class="keyword">virtual</span> ~ConcreateProductA();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CONCREATEPRODUCTA_H</span></span></div><div class="line"></div><div class="line"><span class="comment">//concreateproducta.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"concreateproducta.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">ConcreateProductA::ConcreateProductA()&#123;&#125;</div><div class="line"></div><div class="line">ConcreateProductA::~ConcreateProductA()&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> ConcreateProductA::Use()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"use product A"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//产品B派生类</span></div><div class="line"><span class="comment">//concreateproductb.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONCREATEPRODUCTB_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CONCREATEPRODUCTB_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreateProductB</span>:</span> <span class="keyword">public</span> Product</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ConcreateProductB();</div><div class="line">    <span class="keyword">virtual</span> ~ConcreateProductB();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CONCREATEPRODUCTB_H</span></span></div><div class="line"></div><div class="line"><span class="comment">//concreateproductb.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"concreateproductb.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">ConcreateProductB::ConcreateProductB()&#123;&#125;</div><div class="line"></div><div class="line">ConcreateProductB::~ConcreateProductB()&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> ConcreateProductB::Use()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"use product B"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"product.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Product* prodA = Factory::createProduct(<span class="string">"A"</span>);</div><div class="line">    Product* prodB = Factory::createProduct(<span class="string">"B"</span>);</div><div class="line">    prodA-&gt;Use();</div><div class="line">    prodB-&gt;Use();</div><div class="line">    <span class="keyword">delete</span> prodA;</div><div class="line">    <span class="keyword">delete</span> prodB;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="/2017/06/22/dp-simplefactory-2017-06-22/1.png" alt=""></p>
<h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul>
<li>将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。</li>
<li>在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的参数保存在XML等格式的配置文件中，修改参数时无须修改任何源代码。</li>
<li>简单工厂模式最大的问题在于工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。</li>
<li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>
</ul>
<h3 id="简单工厂模式的优点"><a href="#简单工厂模式的优点" class="headerlink" title="简单工厂模式的优点"></a>简单工厂模式的优点</h3><ul>
<li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。</li>
<li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。</li>
<li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</li>
</ul>
<h3 id="简单工厂模式的缺点"><a href="#简单工厂模式的缺点" class="headerlink" title="简单工厂模式的缺点"></a>简单工厂模式的缺点</h3><ul>
<li>由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。</li>
<li>使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。</li>
<li>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</li>
<li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</li>
</ul>
<h3 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h3><p>在以下情况下可以使用简单工厂模式：</p>
<ul>
<li>工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li>
<li>客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>简单工厂模式包含三个角色：工厂角色负责实现创建所有实例的内部逻辑；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>
<li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">图说设计模式</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法系列之冒泡排序]]></title>
      <url>http://arvin-he.github.io/2017/06/21/algo-bubblesort-2017-06-21/</url>
      <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>时间复杂度为O(N^2)，空间复杂度为O(1)。排序是稳定的，排序比较次数与初始序列无关，但交换次数与初始序列有关。</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>若初始序列就是排序好的，对于冒泡排序仍然还要比较O(N^2)次，但无交换次数。可根据这个进行优化，设置一个flag，当在一趟序列中没有发生交换，则该序列已排序好，但优化后排序的时间复杂度没有发生量级的改变。</p>
<h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">6</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(raw_list)</span>:</span></div><div class="line">    count = len(arr)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> arr[i] &gt; arr[j]:</div><div class="line">                arr[i], arr[j] = arr[j], arr[i]</div><div class="line">                <span class="comment">#temp = arr[j]</span></div><div class="line">                <span class="comment">#arr[j] = arr[i]</span></div><div class="line">                <span class="comment">#arr[i] = temp</span></div><div class="line">    <span class="keyword">return</span> arr</div></pre></td></tr></table></figure>
<p>运行结果:<br><img src="/2017/06/21/algo-bubblesort-2017-06-21/2.png" alt=""></p>
<h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;len; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[j])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> temp = arr[i];</div><div class="line">                arr[i] = arr[j];</div><div class="line">                arr[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 改进的冒泡排序</span></div><div class="line"><span class="comment">//每次从后往前冒一个最小值，且每次能确定一个数在序列中的最终位置</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//比较n-1次</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)</div><div class="line">    &#123;         </div><div class="line">        <span class="keyword">bool</span> exchange = <span class="literal">true</span>;   <span class="comment">// 冒泡的改进，若在一趟中没有发生逆序，则该序列已有序</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = len<span class="number">-1</span>; j &gt;i; j--)  <span class="comment">// 每次从后边冒出一个最小值</span></div><div class="line">        &#123;    </div><div class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>])   <span class="comment">// 发生逆序，则交换</span></div><div class="line">            &#123;   </div><div class="line">                swap(arr[j], arr[j - <span class="number">1</span>]);</div><div class="line">                exchange = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (exchange)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">6</span>&#125;;</div><div class="line">    bubble_sort(arr, <span class="number">9</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt;<span class="string">"   "</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="/2017/06/21/algo-bubblesort-2017-06-21/1.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://segmentfault.com/a/1190000004994003" target="_blank" rel="external">https://segmentfault.com/a/1190000004994003</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之yield与yield from理解]]></title>
      <url>http://arvin-he.github.io/2017/06/20/python-yield-2017-06-20/</url>
      <content type="html"><![CDATA[<h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>为了理解什么是 yield, 你必须理解什么是生成器(generator)。<br>在函数中使用yield关键字，函数就变成了一个generator。<br>函数里有了yield后，执行到yield就会停住，当需要再往下算时才会再往下算。所以生成器函数即使是有无限循环也没关系，它需要算到多少就会算多少，不需要就不往下算。</p>
<h3 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h3><p><code>yield from &lt;expr&gt;</code> 其中<code>&lt;expr&gt;</code>是一个可迭代的表达式，自动调用 iter()，获取迭代器。所以要求<code>&lt;expr&gt;</code>是可迭代对象。此外, yield from是可以实现嵌套生成器的使用.</p>
<p>yield from 包含几个概念：</p>
<ul>
<li>委派生成器: 包含yield from表达式的生成器函数</li>
<li>子生成器: 从yield from部分获取的生成器。</li>
<li>调用方: 调用委派生成器的(调用方)代码</li>
</ul>
<p>yield from 可用于简化for循环中的yield表达式。</p>
<p>yield from 是 Python3.3 后新加的语言结构。和其他语言的await关键字类似，<br>它表示：在生成器 gen 中使用 <code>yield from subgen()</code>时，subgen 会获得控制权，<br>把产出的值传个gen的调用方，即调用方可以直接控制subgen。于此同时，gen会阻塞，等待subgen执行完毕, 然后在接着运行gen.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></div><div class="line">   ...:     <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">'AB'</span>:</div><div class="line">   ...:         <span class="keyword">yield</span> c</div><div class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</div><div class="line">   ...:         <span class="keyword">yield</span> i</div><div class="line">   ...:</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: list(gen())</div><div class="line">Out[<span class="number">2</span>]: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="number">1</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure></p>
<p>改写为:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">3</span>]: <span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></div><div class="line">   ...:     <span class="keyword">yield</span> <span class="keyword">from</span> <span class="string">'AB'</span></div><div class="line">   ...:     <span class="keyword">yield</span> <span class="keyword">from</span> range(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line">   ...:</div><div class="line"></div><div class="line">In [<span class="number">4</span>]: list(gen())</div><div class="line">Out[<span class="number">4</span>]: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="number">1</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure></p>
<p>下面看一个cookbook的例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Example of flattening a nested sequence using subgenerators</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(items, ignore_types=<span class="params">(str, bytes)</span>)</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> items:</div><div class="line">        <span class="keyword">if</span> isinstance(x, Iterable) <span class="keyword">and</span> <span class="keyword">not</span> isinstance(x, ignore_types):</div><div class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> flatten(x) <span class="comment"># 这里递归调用，如果x是可迭代对象，继续分解</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">yield</span> x</div><div class="line"></div><div class="line">items = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], <span class="number">7</span>], <span class="number">8</span>]</div><div class="line"></div><div class="line"><span class="comment"># Produces 1 2 3 4 5 6 7 8</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flatten(items):</div><div class="line">    print(x)</div><div class="line"></div><div class="line">items = [<span class="string">'Dave'</span>, <span class="string">'Paula'</span>, [<span class="string">'Thomas'</span>, <span class="string">'Lewis'</span>]]</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flatten(items):</div><div class="line">    print(x)</div></pre></td></tr></table></figure></p>
<p>yield from 的主要功能是打开双向通道，把最外层的调用方与最内层的子生成器连接起来，使两者可以直接发送和产出值，还可以直接传入异常，而不用在中间的协程添加异常处理的代码。</p>
<p>委派生成器在 yield from 表达式处暂停时，调用方可以直接把数据发给子生成器，子生成器再把产出的值发送给调用方。子生成器返回之后，解释器会抛出StopIteration异常，并把返回值附加到异常对象上，指示委派生成器恢复。</p>
<p>此外，当迭代器是另一个生成器时，允许子生成器执行return语句返回一个值，该值将成为yield from表达式的值。</p>
<p>PEP380 分6点说明了yield from 的行为:</p>
<ul>
<li>子生成器产出的值都直接传给委派生成器的调用方</li>
<li>使用send() 方法发给委派生成器的值都直接传给迭代器。如果发送的值是None，那么会调用子迭代器的 <code>__next__()</code>方法。如果发送的值不是None，那么会调用迭代器的send()方法。如果调用的方法抛出StopIteration异常，那么委派生成器恢复运行。任何其他异常都传给委派生成器。</li>
<li>引发委托生成器的GeneratorExit以外的异常传递给迭代器的throw（）方法。如果调用throw()方法时抛出 StopIteration 异常，委派生成器恢复运行。StopIteration之外的异常会向上传给委派生成器。</li>
<li>如果把 GeneratorExit 异常传入委派生成器，或者在委派生成器上调用close() 方法，那么在迭代器上调用close() 方法，如果迭代器有的话。如果调用close() 方法导致异常抛出，那么异常会向上传给委派生成器；否则，委派生成器抛出 GeneratorExit 异常。</li>
<li>yield from表达式的值是迭代器终止时迭代器抛出StopIteration异常的第一个参数。</li>
<li>生成器退出时，生成器（或子生成器）中的return expr 表达式会触发 StopIteration(expr) 异常抛出。</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.python.org/dev/peps/pep-0380/#proposal" target="_blank" rel="external">pep-0380</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unix/Linux命令参考]]></title>
      <url>http://arvin-he.github.io/2017/06/19/linux-cheatsheet-2017-06-19/</url>
      <content type="html"><![CDATA[<h2 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h2><p>ls – 列出目录<br>ls -al – 使用格式化列出隐藏文件<br>cd dir - 更改目录到 dir<br>cd – 更改到 home 目录<br>pwd – 显示当前目录<br>mkdir dir – 创建目录 dir<br>rm file – 删除 file<br>rm -r dir – 删除目录 dir<br>rm -f file – 强制删除 file<br>rm -rf dir – 强制删除目录 dir *<br>cp file1 file2 – 将 file1 复制到 file2<br>cp -r dir1 dir2 – 将 dir1 复制到 dir2; 如果 dir2 不存在则创建它<br>mv file1 file2 – 将 file1 重命名或移动到 file2; 如果file2 是一个存在的目录则将 file1 移动到目录 file2 中<br>ln -s file link – 创建 file 的符号连接 link<br>touch file – 创建 file<br>cat &gt; file – 将标准输入添加到 file<br>more file – 查看 file 的内容<br>head file – 查看 file 的前 10 行<br>tail file – 查看 file 的后 10 行<br>tail -f file – 从后 10 行开始查看 file 的内容</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>ps – 显示当前的活动进程<br>top – 显示所有正在运行的进程<br>kill pid – 杀掉进程 id pid<br>killall proc – 杀掉所有名为 proc 的进程 *<br>bg – 列出已停止或后台的作业<br>fg – 将最近的作业带到前台<br>fg n – 将作业 n 带到前台</p>
<h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p>chmod octal file – 更改 file 的权限<br>● 4 – 读 (r)<br>● 2 – 写 (w)<br>● 1 – 执行 (x)<br>示例:<br>chmod 777 – 为所有用户添加读、写、执行权限<br>chmod 755 – 为所有者添加 rwx 权限, 为组和其他用户添加rx 权限<br>更多选项参阅 man chmod.</p>
<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>ssh user@host – 以 user 用户身份连接到 host<br>ssh -p port user@host – 在端口 port 以 user 用户身份连接到 host<br>ssh-copy-id user@host – 将密钥添加到 host 以实现无密码登录</p>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>grep pattern files – 搜索 files 中匹配 pattern 的内容<br>grep -r pattern dir – 递归搜索 dir 中匹配 pattern 的内容<br>command | grep pattern – 搜索 command 输出中匹配pattern 的内容</p>
<h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><p>date – 显示当前日期和时间<br>cal – 显示当月的日历<br>uptime – 显示系统从开机到现在所运行的时间<br>w – 显示登录的用户<br>whoami – 查看你的当前用户名<br>finger user – 显示 user 的相关信息<br>uname -a – 显示内核信息<br>cat /proc/cpuinfo – 查看 cpu 信息<br>cat /proc/meminfo – 查看内存信息<br>man command – 显示 command 的说明手册<br>df – 显示磁盘占用情况<br>du – 显示目录空间占用情况<br>free – 显示内存及交换区占用情况</p>
<h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>tar cf file.tar files – 创建包含 files 的 tar 文件file.tar<br>tar xf file.tar – 从 file.tar 提取文件<br>tar czf file.tar.gz files – 使用 Gzip 压缩创建tar 文件<br>tar xzf file.tar.gz – 使用 Gzip 提取 tar 文件<br>tar cjf file.tar.bz2 – 使用 Bzip2 压缩创建 tar 文件<br>tar xjf file.tar.bz2 – 使用 Bzip2 提取 tar 文件<br>gzip file – 压缩 file 并重命名为 file.gz<br>gzip -d file.gz – 将 file.gz 解压缩为 file</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>ping host – ping host 并输出结果<br>whois domain – 获取 domain 的 whois 信息<br>dig domain – 获取 domain 的 DNS 信息<br>dig -x host – 逆向查询 host<br>wget file – 下载 file<br>wget -c file – 断点续传</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>从源代码安装:<br>./configure<br>make<br>make install<br>dpkg -i pkg.deb – 安装包 (Debian)<br>rpm -Uvh pkg.rpm – 安装包 (RPM)</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Ctrl+C – 停止当前命令<br>Ctrl+Z – 停止当前命令，并使用 fg 恢复<br>Ctrl+D – 注销当前会话，与 exit 相似<br>Ctrl+W – 删除当前行中的字<br>Ctrl+U – 删除整行<br>!! - 重复上次的命令<br>exit – 注销当前会话 <strong> 小心使用</strong>。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol>
<li>tree命令<br>windows和linux都有tree命令，主要功能是创建文件列表，将所有文件以树的形式列出来.<br>windows下的tree功能比较弱，只有两个参数，<br>/F 是递归显示每个文件夹的名称；如<code>tree /F .</code> 显示当前目录文件树形结构<br>/A 是使用ASCII字符而不是扩展字符</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript笔记1]]></title>
      <url>http://arvin-he.github.io/2017/06/17/js-notes1-2017-06-17/</url>
      <content type="html"><![CDATA[<ol>
<li><p>Number<br>JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span>; <span class="comment">// 整数123</span></div><div class="line"><span class="number">0.456</span>; <span class="comment">// 浮点数0.456</span></div><div class="line"><span class="number">1.2345e3</span>; <span class="comment">// 科学计数法表示1.2345x1000，等同于1234.5</span></div><div class="line"><span class="number">-99</span>; <span class="comment">// 负数</span></div><div class="line"><span class="literal">NaN</span>; <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span></div><div class="line"><span class="literal">Infinity</span>; <span class="comment">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串<br>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。<br><strong>注意:</strong> ‘’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。</p>
</li>
<li><p>判断相等<br>JavaScript在设计时，有两种比较相等运算符：<br>第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；<br>第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。<br>由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。</p>
</li>
</ol>
<p>另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：<code>NaN === NaN; // false</code>,<br>唯一能判断NaN的方法是通过isNaN()函数：<code>isNaN(NaN); // true</code>.</p>
<p>最后要注意浮点数的相等比较：<br><code>1 / 3 === (1 - 2 / 3); // false</code><br>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。<br>要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：<br><code>Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</code></p>
<ol>
<li>null和undefined<br>null表示一个“空”的值，它和0以及空字符串’’不同，0是一个数值，’’表示长度为0的字符串，而null表示“空”。<br>在其他语言中，也有类似JavaScript的null的表示，例如Java也用null，Swift用nil，Python用None表示。</li>
</ol>
<p>但是，在JavaScript中，还有一个和null类似的undefined，它表示“未定义”。<br>JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。<br>事实证明，区分两者的意义不大。大多数情况下，我们都应该用null。<br>undefined仅仅在判断函数参数是否传递的情况下有用。</p>
<ol>
<li><p>数组<br>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。如:<code>[1, 2, 3.14, &#39;Hello&#39;, null, true];</code><br>另一种创建数组的方法是通过Array()函数实现: <code>new Array(1, 2, 3); // 创建了数组[1, 2, 3]</code>, 出于代码的可读性考虑，强烈建议直接使用[]。</p>
</li>
<li><p>对象<br>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    name: <span class="string">'Bob'</span>,</div><div class="line">    age: <span class="number">20</span>,</div><div class="line">    tags: [<span class="string">'js'</span>, <span class="string">'web'</span>, <span class="string">'mobile'</span>],</div><div class="line">    city: <span class="string">'Beijing'</span>,</div><div class="line">    hasCar: <span class="literal">true</span>,</div><div class="line">    zipcode: <span class="literal">null</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。相当于一个字典.</p>
<ol>
<li>循环遍历<br>Array可以采用下标循环，遍历Map和Set就无法使用下标.<br>为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。<br>具有iterable类型的集合可以通过新的for … of循环来遍历。</li>
</ol>
<p>for … of循环和for … in循环有何区别？<br>for … in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。<br>当我们手动给Array对象添加了额外的属性后，for … in循环将带来意想不到的意外效果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.name = <span class="string">'Hello'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> a) &#123;</div><div class="line">    alert(x); <span class="comment">// '0', '1', '2', 'name'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>for … in循环将把name包括在内，但Array的length属性却不包括在内。for … of循环则完全修复了这些问题，它只循环集合本身的元素.<br>然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">    <span class="comment">// element: 指向当前元素的值</span></div><div class="line">    <span class="comment">// index: 指向当前索引</span></div><div class="line">    <span class="comment">// array: 指向Array对象本身</span></div><div class="line">    alert(element);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</div><div class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, sameElement, set</span>) </span>&#123;</div><div class="line">    alert(element);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Map的回调函数参数依次为value、key和map本身：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'x'</span>], [<span class="number">2</span>, <span class="string">'y'</span>], [<span class="number">3</span>, <span class="string">'z'</span>]]);</div><div class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</div><div class="line">    alert(value);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得Array的element：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line">    alert(element);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ol>
<li>函数定义<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> -x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。<br>如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。</p>
<p>匿名函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; ... &#125; <span class="comment">// 这是一个匿名函数，它没有函数名。</span></div></pre></td></tr></table></figure></p>
<p>关于arguments<br>JavaScript有一个关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<br>利用arguments，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值：</p>
<p>=&gt; 是什么?</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之单例模式]]></title>
      <url>http://arvin-he.github.io/2017/06/16/dp-singleton-2017-06-16/</url>
      <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。<br>单例模式的要点有三个：</p>
<ol>
<li>某个类只能有一个实例；</li>
<li>它必须自行创建这个实例；</li>
<li>它必须自行向整个系统提供这个实例。<br>单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</li>
</ol>
<h3 id="python中的单例模式"><a href="#python中的单例模式" class="headerlink" title="python中的单例模式"></a>python中的单例模式</h3><p>在python中可以有多种方法实现单例模式:</p>
<ul>
<li>使用模块</li>
<li>使用<code>__new__</code></li>
<li>使用装饰器(decorator)</li>
<li>使用元类</li>
</ul>
<h4 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h4><p>其实，Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code> 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysingleton.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">my_singleton = My_Singleton()</div></pre></td></tr></table></figure></p>
<p>将上面的代码保存在文件 mysingleton.py 中，然后这样使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 从mysingleton模块导入实例my_singleton</span></div><div class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</div><div class="line"></div><div class="line">my_singleton.foo()</div></pre></td></tr></table></figure></p>
<h4 id="使用-new"><a href="#使用-new" class="headerlink" title="使用__new__"></a>使用<code>__new__</code></h4><p>为了使类只能出现一个实例，我们可以使用 <code>__new__</code> 来控制实例的创建过程，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    _instance = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</div><div class="line">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)</div><div class="line">        <span class="keyword">return</span> cls._instance</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(Singleton)</span>:</span></div><div class="line">    a = <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>在上面的代码中，我们将类的实例和一个类变量 <code>_instance</code> 关联起来，如果 <code>cls._instance</code> 为 None 则创建实例，否则直接返回 <code>cls._instance</code>。<br>执行情况如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">4</span>]: one = MyClass()</div><div class="line"></div><div class="line">In [<span class="number">5</span>]: two = MyClass()</div><div class="line"></div><div class="line">In [<span class="number">6</span>]: one == two</div><div class="line">Out[<span class="number">6</span>]: <span class="keyword">True</span></div><div class="line"></div><div class="line">In [<span class="number">7</span>]: id(one)</div><div class="line">Out[<span class="number">7</span>]: <span class="number">64402928</span></div><div class="line"></div><div class="line">In [<span class="number">8</span>]: id(two)</div><div class="line">Out[<span class="number">8</span>]: <span class="number">64402928</span></div></pre></td></tr></table></figure></p>
<h4 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h4><p>装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></div><div class="line">    instances = &#123;&#125;</div><div class="line"><span class="meta">    @wraps(cls)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</div><div class="line">            instances[cls] = cls(*args, **kw)</div><div class="line">        <span class="keyword">return</span> instances[cls]</div><div class="line">    <span class="keyword">return</span> getinstance</div><div class="line"></div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></div><div class="line">    a = <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>在上面，我们定义了一个装饰器 singleton，它返回了一个内部函数 getinstance，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，cls(<em>args, *</em>kw) 作为 value 存到 instances 中，否则，直接返回 instances[cls]。</p>
<h4 id="使用metaclass"><a href="#使用metaclass" class="headerlink" title="使用metaclass"></a>使用metaclass</h4><p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p>
<ul>
<li>拦截类的创建</li>
<li>修改类的定义</li>
<li>返回修改后的类<br>使用元类实现单例模式,代码如下:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></div><div class="line">    _instances = &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</div><div class="line">            cls._instances[cls] = super(Singleton, cls).__call(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> cls._instance[cls]</div><div class="line"></div><div class="line"><span class="comment"># py2</span></div><div class="line"><span class="comment">#class MyClass(object):</span></div><div class="line"><span class="comment">#    __metaclass__ = Singleton</span></div><div class="line"></div><div class="line"><span class="comment"># py3</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(metaclass=Singleton)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>以上是python中实现单例模式的一些方法</p>
<h3 id="C-中的单例模式"><a href="#C-中的单例模式" class="headerlink" title="C++中的单例模式"></a>C++中的单例模式</h3><p>代码分析:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	Singleton * sg = Singleton::getInstance();</div><div class="line">	sg-&gt;singletonOperation();</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// singleton.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SINGLETON_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SINGLETON_H</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">virtual</span> ~Singleton();</div><div class="line">    <span class="comment">// 提供一个公有的静态工厂方法</span></div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getinstance</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SingletonOperation</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="comment">// 提供一个自身的静态私有成员变量</span></div><div class="line">    <span class="keyword">static</span> Singleton *instance;</div><div class="line">    <span class="comment">// 构造函数私有化</span></div><div class="line">    Singleton();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SINGLETON_H</span></span></div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// singleton.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"singleton.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">Singleton *Singleton::instance = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">Singleton::Singleton()</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Singleton::~Singleton()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Singleton* Singleton::getinstance()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (instance == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Singleton::SingletonOperation()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"SingletonOperation"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="/2017/06/16/dp-singleton-2017-06-16/1.png" alt=""></p>
<h4 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h4><p>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式包含的角色只有一个，就是单例类——Singleton。单例类拥有一个<strong>私有构造函数</strong>，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个<strong>静态私有</strong>成员变量与<strong>静态公有</strong>的工厂方法，该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</p>
<p>在单例模式的实现过程中，需要注意如下三点：</p>
<ul>
<li>单例类的构造函数为私有；</li>
<li>提供一个自身的静态私有成员变量；</li>
<li>提供一个公有的静态工厂方法。</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。<br>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。<br>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。<br>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。<br>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。</p>
<h3 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h3><p>在以下情况下可以使用单例模式：</p>
<p>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器，或者需要考虑资源消耗太大而只允许创建一个对象。<br>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。<br>在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://funhacks.net/2017/01/17/singleton/" target="_blank" rel="external">http://funhacks.net/2017/01/17/singleton/</a></li>
<li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">图说设计模式</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之super理解]]></title>
      <url>http://arvin-he.github.io/2017/06/16/python-super-2017-06-16/</url>
      <content type="html"><![CDATA[<h3 id="super使用场景"><a href="#super使用场景" class="headerlink" title="super使用场景"></a>super使用场景</h3><p>在类的继承中，如果重写某个方法，该方法会覆盖父类的同名方法，但有时，我们希望能调用子类的方法的同时也能调用父类的同名方法，这时，可通过使用 super 来实现，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Hello, I am %s.'</span> % self.name)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(self)</span>:</span></div><div class="line">        super(Dog, self).greet()   <span class="comment"># Python3 可使用 super().greet()</span></div><div class="line">        print(<span class="string">'WangWang...'</span>)</div><div class="line"></div><div class="line">```     </div><div class="line"></div><div class="line">在上面，Animal 是父类，Dog 是子类，我们在 Dog 类重定义了 greet 方法，为了能同时实现父类的功能，我们又调用了父类的方法，看下面的使用：</div><div class="line">```python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dog = Dog(<span class="string">'dog'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dog.greet()</div><div class="line">Hello, I am dog.</div><div class="line">WangWang..</div></pre></td></tr></table></figure></p>
<h3 id="super最常用的用法"><a href="#super最常用的用法" class="headerlink" title="super最常用的用法"></a>super最常用的用法</h3><p>super 的一个最常见用法可以说是在子类中调用父类的初始化方法了，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        self.a = a</div><div class="line">        self.b = b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b, c)</span>:</span></div><div class="line">        <span class="comment"># Python3 可使用 super().__init__(a, b)</span></div><div class="line">        super(A, self).__init__(a, b) </div><div class="line">        self.c = c</div><div class="line">```       </div><div class="line"></div><div class="line"><span class="comment">### 深入理解super</span></div><div class="line">看了上面的例子，你可能会觉得 super 的使用就是获取了父类，并调用父类的方法。其实，在上面的情况下，super 获得的类刚好是父类，但在其他情况就不一定了，super 其实和父类没有实质性的关联。</div><div class="line">下面看一个稍微复杂的例子，涉及到多重继承，代码如下：</div><div class="line">```python</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"enter Base"</span>)</div><div class="line">        print(<span class="string">"leave Base"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"enter A"</span>)</div><div class="line">        super(A, self).__init__()</div><div class="line">        print(<span class="string">"leave A"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"enter B"</span>)</div><div class="line">        super(B, self).__init__()</div><div class="line">        print(<span class="string">"leave B"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"enter C"</span>)</div><div class="line">        super(C, self).__init__()</div><div class="line">        print(<span class="string">"leave C"</span>)</div></pre></td></tr></table></figure></p>
<p>实例化子类C看看结果:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</div><div class="line">enter C</div><div class="line">enter A</div><div class="line">enter B</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">leave B</div><div class="line">leave A</div><div class="line">leave C</div></pre></td></tr></table></figure></p>
<p>如果 super 代表『调用父类的方法』，那么为什么 enter A 的下一句不是 enter Base 而是 enter B。<br>原因是: super 和父类没有实质性的关联，下面请看 super 是怎么运作的。</p>
<h3 id="MRO列表"><a href="#MRO列表" class="headerlink" title="MRO列表"></a>MRO列表</h3><p>事实上，对于你定义的每一个类，Python 会计算出一个方法解析顺序列表(Method Resolution Order, MRO)，它表明了类继承的顺序，我们使用下面的方法获得某个类的 MRO 列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>C.mro()   <span class="comment"># or C.__mro__ or C().__class__.mro()</span></div><div class="line">[__main__.C, __main__.A, __main__.B, __main__.Base, object]</div></pre></td></tr></table></figure></p>
<p>那么这个 MRO 列表的顺序是怎么定的呢?<br>它是通过一个 C3 线性化算法来实现的，这里不深究这个算法，感兴趣的可以自己去了解，总之，一个类的 MRO 列表就是合并<strong>所有父类</strong>的 MRO 列表，并遵循以下三条原则：</p>
<ol>
<li>子类永远在父类前面</li>
<li>如果有多个父类，会根据它们在列表中的顺序被检查</li>
<li>如果对下一个类存在两个合法的选择，选择第一个父类</li>
</ol>
<h3 id="super原理及实现"><a href="#super原理及实现" class="headerlink" title="super原理及实现"></a>super原理及实现</h3><p>super 的定义如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">super</span><span class="params">(cls, inst)</span>:</span></div><div class="line">    mro = inst.__class__.mro()</div><div class="line">    <span class="keyword">return</span> mro[mro.index(cls) + <span class="number">1</span>]</div></pre></td></tr></table></figure></p>
<p>其中, 第一个参数 cls 代表类, 第二个参数 inst 代表实例, 上面的代码做了两件事:</p>
<ol>
<li>获取 inst 的 MRO 列表</li>
<li>查找 cls 在当前 MRO 列表中的 index, 并返回它的下一个类，即 mro[index + 1]</li>
</ol>
<p>当你调用 super(cls, inst) 时，Python 会在 inst 的 MRO 列表上搜索 cls 的下一个类。下面就详细分析一下:<br>首先看类 C 的<code>__init__</code>方法：<code>super(C, self).__init__()</code>.<br>这里的 self 是当前 C 的实例，self.class.mro() 结果是：<br><code>[__main__.C, __main__.A, __main__.B, __main__.Base, object]</code><br>可以看到，C 的下一个类是 A，于是，跳到了 A 的<code>__init__</code>，这时会打印出 enter A，并执行下面一行代码：<code>super(A, self).__init__()</code>,<br><strong>注意:</strong> 这里的 self 也是当前 C 的实例，MRO 列表跟上面是一样的，搜索 A 在 MRO 中的下一个类，发现是 B，于是，跳到了 B 的<code>__init__</code>，这时会打印出 enter B，而不是 enter Base。打印出enter B后, 搜索 B 在 MRO 中的下一个类是Base, 调用Base的<code>__init__</code>, 打印出enter Base 和 leave Base, 然后又跳到B的<code>__init__</code>,执行完 B 的<br><code>__init__</code>, 再然后是 A 的<code>__init__</code>, 最后是 C 的<code>__init__</code>. 整个过程还是比较清晰的，关键是要理解 super 的工作方式，而不是想当然地认为 super 调用了父类的方法。</p>
<p>总结:</p>
<ol>
<li>super 和父类没有实质性的关联。</li>
<li>super(cls, inst) 获得的是 cls 在 inst 的 MRO 列表中的下一个类。</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://funhacks.net/2016/11/09/super/" target="_blank" rel="external">你不知道的super</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之Matplotlib绘图]]></title>
      <url>http://arvin-he.github.io/2017/06/16/python-matplotlib-2017-06-16/</url>
      <content type="html"><![CDATA[<h3 id="Matplotlib简介"><a href="#Matplotlib简介" class="headerlink" title="Matplotlib简介"></a>Matplotlib简介</h3><p>Matplotlib 可能是 Python 2D-绘图领域使用最广泛的包了。它能让使用者轻松地将数据图形化，并提供多样化的输出格式。这里将会探索 matplotlib 的常见用法。</p>
<h3 id="IPython和pylab"><a href="#IPython和pylab" class="headerlink" title="IPython和pylab"></a>IPython和pylab</h3><p>IPython 是 Python 的一个增强shell。它在下列方面有所增强： named inputs and outputs、shell commands、debug. 在命令行终端给 IPython 加上参数 -pylab （0.12 以后的版本是 –pylab）之后，就可以像 Matlab/Mathematica 那样以交互的方式绘图。</p>
<p>pylab 是 matplotlib 面向对象绘图库的一个接口。它的语法和 Matlab 十分相近。也就是说，它主要的绘图命令和 Matlab 对应的命令有相似的参数。</p>
<h3 id="简单绘制"><a href="#简单绘制" class="headerlink" title="简单绘制"></a>简单绘制</h3><p>这里将先尝试用默认配置在同一张图上绘制正弦和余弦函数图像，然后逐步添加各项功能来美化。<br>第一步: 获取正弦函数和余弦函数的值,并绘制正弦和余弦曲线</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">X = np.linspace(-np.pi, np.pi, <span class="number">256</span>, endpoint=<span class="keyword">True</span>)</div><div class="line">C, S = np.cos(X), np.sin(X)</div><div class="line"></div><div class="line">plt.plot(X, C)</div><div class="line">plt.plot(X, S)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>X是一个numpy数组,并从[-π, π]中等间距取256个值, 即坐标系的X轴上的取值<br>C是余弦曲线上对应于X轴各个取值的余弦值,即坐标系上y轴的取值<br>S是正弦曲线上对应于X轴各个取值的正弦值,即坐标系上y轴的取值<br>运行结果:<br><img src="/2017/06/16/python-matplotlib-2017-06-16/1.png" alt=""></p>
<p>Matplotlib有一系列默认设置允许定制各种属性,你可以控制mayplotlib几乎所有的属性,如:<br>图像尺寸, dpi(分辨率), 线宽, 颜色, 样式, 坐标轴, 坐标轴和网格属性, 文本, 字体等属性. 不过，matplotlib 的默认配置在大多数情况下已经做得足够好，你可能只在很少的情况下才会想更改这些默认配置。</p>
<p>在下面的脚本中，我们已经实例化了(并注释了)影响曲线外观的设置。这些设置已被明确设置为默认值，但现在您可以交互地设置这些值来探索其影响(请参阅下面的线条属性和线条样式).<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 创建一个大小为8x6 inch的新图形，每英寸使用80点</span></div><div class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>), dpi=<span class="number">80</span>)</div><div class="line"></div><div class="line"><span class="comment"># 从1x1的网格创建一个新的子图</span></div><div class="line">plt.subplot(<span class="number">111</span>)</div><div class="line"></div><div class="line">X = np.linspace(-np.pi, np.pi, <span class="number">256</span>,endpoint=<span class="keyword">True</span>)</div><div class="line">C,S = np.cos(X), np.sin(X)</div><div class="line"></div><div class="line"><span class="comment"># Plot cosine using blue color with a continuous line of width 1 (pixels)</span></div><div class="line">plt.plot(X, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">"-"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Plot sine using green color with a continuous line of width 1 (pixels)</span></div><div class="line">plt.plot(X, S, color=<span class="string">"green"</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">"-"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Set x 上下限</span></div><div class="line">plt.xlim(<span class="number">-4.0</span>,<span class="number">4.0</span>)</div><div class="line"></div><div class="line"><span class="comment"># Set x 刻度</span></div><div class="line">plt.xticks(np.linspace(<span class="number">-4</span>,<span class="number">4</span>,<span class="number">9</span>,endpoint=<span class="keyword">True</span>))</div><div class="line"></div><div class="line"><span class="comment"># Set y limits</span></div><div class="line">plt.ylim(<span class="number">-1.0</span>,<span class="number">1.0</span>)</div><div class="line"></div><div class="line"><span class="comment"># Set y ticks</span></div><div class="line">plt.yticks(np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">5</span>,endpoint=<span class="keyword">True</span>))</div><div class="line"></div><div class="line"><span class="comment"># Save figure using 72 dots per inch</span></div><div class="line"><span class="comment"># savefig("../figures/exercice_2.png",dpi=72)</span></div><div class="line"></div><div class="line"><span class="comment"># Show result on screen</span></div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.labri.fr/perso/nrougier/teaching/matplotlib/" target="_blank" rel="external">Matplotlib教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式简介]]></title>
      <url>http://arvin-he.github.io/2017/06/15/dp-brief-2017-06-15/</url>
      <content type="html"><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>在软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在1990年代从建筑设计领域引入到计算机科学的。<br>设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。面向对象设计模式通常以类别或对象来描述其中的关系和相互作用，但不涉及用来完成应用程序的特定类别或对象。设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。<br>并非所有的软件模式都是设计模式，设计模式特指软件“设计”层次上的问题。还有其它非设计模式的模式，如架构模式。同时，算法不能算是一种设计模式，因为算法主要是用来解决计算上的问题，而非设计上的问题。</p>
<h3 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h3><p>设计模式主要分3大类,每一类中又有几个不同的模式</p>
<ol>
<li>创建型模式</li>
<li>结构型模式</li>
<li>行为型模式</li>
</ol>
<h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ol>
<li>简单工厂模式</li>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>建造者模式</li>
<li>单例模式</li>
</ol>
<h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><ol>
<li>适配器模式</li>
<li>桥接模式</li>
<li>装饰模式</li>
<li>外观模式</li>
<li>享元模式</li>
<li>代理模式</li>
</ol>
<h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ol>
<li>命令模式</li>
<li>中介者模式</li>
<li>观察者模式</li>
<li>状态模式</li>
<li>策略模式</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之Scrapy初识]]></title>
      <url>http://arvin-he.github.io/2017/06/15/python-scrapy1-201-06-15/</url>
      <content type="html"><![CDATA[<h3 id="Scrapy简介"><a href="#Scrapy简介" class="headerlink" title="Scrapy简介"></a>Scrapy简介</h3><p>Scrapy是用Python开发的一个快速,高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试。Scrapy吸引人的地方在于它是一个框架，任何人都可以根据需求方便的修改。它也提供了多种类型爬虫的基类，如BaseSpider、sitemap爬虫等，最新版本又提供了web2.0爬虫的支持。Scratch，是抓取的意思，Scrapy大概是源于Scratch吧.Scrapy 使用了 Twisted异步网络库来处理网络通讯。整体架构大致如下:</p>
<p><img src="/2017/06/15/python-scrapy1-201-06-15/1.png" alt=""></p>
<h3 id="Scrapy框架及组件"><a href="#Scrapy框架及组件" class="headerlink" title="Scrapy框架及组件"></a>Scrapy框架及组件</h3><ul>
<li>引擎(Scrapy)<br>用来处理整个系统的数据流处理, 触发事务(框架核心)</li>
<li>调度器(Scheduler)<br>用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</li>
<li>下载器(Downloader)<br>用于下载网页内容, 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的)</li>
<li>爬虫(Spiders)<br>爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面.</li>
<li>项目管道(Pipeline)<br>负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据。</li>
<li>下载器中间件(Downloader Middlewares)<br>位于Scrapy引擎和下载器之间的框架，主要是处理Scrapy引擎与下载器之间的请求及响应。</li>
<li>爬虫中间件(Spider Middlewares)<br>介于Scrapy引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出。</li>
<li>调度中间件(Scheduler Middlewares)<br>介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。</li>
</ul>
<p>Scarpy运作流程:</p>
<ol>
<li>引擎从调度器中取出一个链接(URL)用于接下来的抓取</li>
<li>引擎把URL封装成一个请求(Request)传给下载器</li>
<li>下载器把资源下载下来，并封装成应答包(Response)</li>
<li>爬虫解析Response</li>
<li>解析出实体（Item）,则交给实体管道进行进一步的处理</li>
<li>解析出的是链接（URL）,则把URL交给调度器等待抓取</li>
</ol>
<h3 id="Scrapy安装"><a href="#Scrapy安装" class="headerlink" title="Scrapy安装"></a>Scrapy安装</h3><p>Scrapy已经支持python3,使用pip安装, 在命令行窗口输入: <code>pip install scrapy</code>, 回车.<br><strong>注意：</strong> windows平台需要依赖pywin32，请根据自己系统32/64位选择下载安装，<a href="https://sourceforge.net/projects/pywin32/" target="_blank" rel="external">下载地址</a></p>
<h3 id="Scrapy基本使用"><a href="#Scrapy基本使用" class="headerlink" title="Scrapy基本使用"></a>Scrapy基本使用</h3><h4 id="创建爬虫项目"><a href="#创建爬虫项目" class="headerlink" title="创建爬虫项目"></a>创建爬虫项目</h4><p>运行命令: <code>scrapy startproject project_name</code>, 回车, 自动创建的目录如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">λ tree /F .</div><div class="line">C:\USERS\ARON\SCRAPYTEST</div><div class="line">│  scrapy.cfg</div><div class="line">│</div><div class="line">└─scrapytest</div><div class="line">    │  items.py</div><div class="line">    │  middlewares.py</div><div class="line">    │  pipelines.py</div><div class="line">    │  settings.py</div><div class="line">    │  __init__.py</div><div class="line">    │</div><div class="line">    ├─spiders</div><div class="line">       │  __init__.py</div></pre></td></tr></table></figure></p>
<p>文件说明：<br>scrapy.cfg  项目的配置信息,主要为Scrapy命令行工具提供一个基础的配置信息(真正爬虫相关的配置信息在settings.py文件中）<br>items.py    设置数据存储模板，用于结构化数据，如：Django的Model<br>pipelines   数据处理行为，如：一般结构化的数据持久化<br>settings.py 配置文件，如：递归的层数、并发数，延迟下载等<br>spiders     爬虫目录，如：创建文件，编写爬虫规则<br>注意：一般创建爬虫文件时，以网站域名命名</p>
<h4 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h4><p>编写一个爬取校花网上的校花图片, 在spiders目录中新建 xiaohuar_spider.py 文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python3</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoHuarSpider</span><span class="params">(scrapy.spider.Spider)</span>:</span></div><div class="line">    name = <span class="string">"xiaohuar"</span></div><div class="line">    allowed_domains = [<span class="string">"xiaohuar.com"</span>]</div><div class="line">    start_urls = [<span class="string">"http://www.xiaohuar.com/hua/"</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        current_url = response.current_url</div><div class="line">        body = response.body</div><div class="line">        unicode_body = response.body_as_unicode()</div></pre></td></tr></table></figure></p>
<p><strong>注意点:</strong></p>
<ol>
<li>爬虫文件需要定义一个类，并继承scrapy.spiders.Spider</li>
<li>必须定义name，即爬虫名，如果没有name，会报错.</li>
<li>编写函数parse，<strong>注意:</strong>该函数名不能改变，因为Scrapy源码中默认callback函数的函数名就是parse；</li>
<li>定义需要爬取的url，放在list中，因为可以爬取多个url，Scrapy源码是一个For循环，从上到下爬取这些url，使用生成器迭代将url发送给下载器下载url的html。</li>
</ol>
<h4 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h4><p>进入scarpytest目录, 运行命令:<code>scrapy crawl xiaohau --nolog</code>, 回车<br>格式：scrapy crawl+爬虫名  –nolog即不显示日志</p>
<h3 id="scrapy查询语法"><a href="#scrapy查询语法" class="headerlink" title="scrapy查询语法"></a>scrapy查询语法</h3><p>当爬取大量的网页，如果自己写正则匹配，会很麻烦，也很浪费时间，令人欣慰的是，scrapy内部支持更简单的查询语法，帮助我们去html中查询我们需要的标签和标签内容以及标签属性。下面逐一进行介绍：</p>
<ul>
<li>查询子子孙孙中的某个标签(以div标签为例)：<code>//div</code></li>
<li>查询儿子中的某个标签(以div标签为例)：<code>/div</code></li>
<li>查询标签中带有某个class属性的标签：<code>//div[@class=’c1′]</code>,即子子孙孙中标签是div且class=‘c1’的标签</li>
<li>查询标签中带有某个class=‘c1’并且自定义属性name=‘alex’的标签：<code>//div[@class=’c1′][@name=’alex’]</code></li>
<li>查询某个标签的文本内容：<code>//div/span/text()</code> 即查询子子孙孙中div下面的span标签中的文本内容</li>
<li>查询某个属性的值（例如查询a标签的href属性）：<code>//a/@href</code></li>
</ul>
<p>示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    <span class="comment"># 分析页面</span></div><div class="line">    <span class="comment"># 找到页面中符合规则的内容（校花图片），保存</span></div><div class="line">    <span class="comment"># 找到所有的a标签，再访问其他a标签，一层一层的搞下去</span></div><div class="line"></div><div class="line">    hxs = HtmlXPathSelector(response)<span class="comment">#创建查询对象</span></div><div class="line"></div><div class="line">    <span class="comment"># 如果url是 http://www.xiaohuar.com/list-1-\d+.html</span></div><div class="line">    <span class="comment">#如果url能够匹配到需要爬取的url，即本站url</span></div><div class="line">    <span class="keyword">if</span> re.match(<span class="string">'http://www.xiaohuar.com/list-1-\d+.html'</span>, response.url): </div><div class="line">        <span class="comment">#select中填写查询目标，按scrapy查询语法书写</span></div><div class="line">        items = hxs.select(<span class="string">'//div[@class="item_list infinite_scroll"]/div'</span>) </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(items)):</div><div class="line">            <span class="comment">#查询所有img标签的src属性，即获取校花图片地址</span></div><div class="line">            src = hxs.select(<span class="string">'//div[@class="item_list infinite_scroll"]/div[%d]//div[@class="img"]/a/img/@src'</span> % i).extract()</div><div class="line">            <span class="comment">#获取span的文本内容，即校花姓名</span></div><div class="line">            name = hxs.select(<span class="string">'//div[@class="item_list infinite_scroll"]/div[%d]//div[@class="img"]/span/text()'</span> % i).extract() </div><div class="line">            <span class="comment">#校花学校</span></div><div class="line">            school = hxs.select(<span class="string">'//div[@class="item_list infinite_scroll"]/div[%d]//div[@class="img"]/div[@class="btns"]/a/text()'</span> % i).extract() </div><div class="line">            <span class="keyword">if</span> src:</div><div class="line">                <span class="comment">#相对路径拼接</span></div><div class="line">                ab_src = <span class="string">"http://www.xiaohuar.com"</span> + src[<span class="number">0</span>]</div><div class="line">                <span class="comment">#文件名，因为python27默认编码格式是unicode编码，因此我们需要编码成utf-8</span></div><div class="line">                file_name = <span class="string">"%s_%s.jpg"</span> % (school[<span class="number">0</span>].encode(<span class="string">'utf-8'</span>), name[<span class="number">0</span>].encode(<span class="string">'utf-8'</span>)) </div><div class="line">                file_path = os.path.join(<span class="string">"/Users/wupeiqi/PycharmProjects/beauty/pic"</span>, file_name)</div><div class="line">                urllib.urlretrieve(ab_src, file_path)</div></pre></td></tr></table></figure></p>
<p>注：<code>urllib.urlretrieve(ab_src, file_path)</code> ，接收文件路径和需要保存的路径，会自动去文件路径下载并保存到我们指定的本地路径。</p>
<h3 id="递归爬取网页"><a href="#递归爬取网页" class="headerlink" title="递归爬取网页"></a>递归爬取网页</h3><p>上述代码仅仅实现了一个url的爬取，如果该url的爬取的内容中包含了其他url，而我们也想对其进行爬取，那么如何实现递归爬取网页呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取所有的url，继续访问，并在其中寻找相同的url</span></div><div class="line">all_urls = hxs.select(<span class="string">'//a/@href'</span>).extract()</div><div class="line"><span class="keyword">for</span> url <span class="keyword">in</span> all_urls:</div><div class="line">    <span class="keyword">if</span> url.startswith(<span class="string">'http://www.xiaohuar.com/list-1-'</span>):</div><div class="line">        <span class="keyword">yield</span> Request(url, callback=self.parse)</div></pre></td></tr></table></figure></p>
<p>通过yield生成器向每一个url发送request请求,并执行返回函数parse,从而递归获取校花图片和校花姓名学校等信息。<br>注：可以修改settings.py 中的配置文件，以此来指定“递归”的层数，如: <code>DEPTH_LIMIT = 1</code></p>
<h3 id="scrapy查询语法中的正则："><a href="#scrapy查询语法中的正则：" class="headerlink" title="scrapy查询语法中的正则："></a>scrapy查询语法中的正则：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</div><div class="line">html = <span class="string">"""&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="string">&lt;html&gt;</span></div><div class="line"><span class="string">&lt;head lang="en"&gt;</span></div><div class="line"><span class="string">    &lt;meta charset="UTF-8"&gt;</span></div><div class="line"><span class="string">    &lt;title&gt;&lt;/title&gt;</span></div><div class="line"><span class="string">&lt;/head&gt;</span></div><div class="line"><span class="string">&lt;body&gt;</span></div><div class="line"><span class="string">    &lt;li class="item-"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></div><div class="line"><span class="string">    &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></div><div class="line"><span class="string">    &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></div><div class="line"><span class="string">&lt;/body&gt;</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div><div class="line"><span class="string">"""</span></div><div class="line">response = HtmlResponse(url=<span class="string">'http://example.com'</span>, body=html,encoding=<span class="string">'utf-8'</span>)</div><div class="line">ret = Selector(response=response).xpath(<span class="string">'//li[re:test(@class, "item-\d*")]//@href'</span>).extract()</div><div class="line">print(ret)</div></pre></td></tr></table></figure>
<p>语法规则：<br><code>Selector(response=response查询对象).xpath(‘//li[re:test(@class, “item-d*”)]//@href’).extract()</code>，即根据re正则匹配，test即匹配，属性名是class，匹配的正则表达式是”item-d*”，然后获取该标签的href属性。<br><a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/topics/selectors.html" target="_blank" rel="external">更多选择器规则</a></p>
<p>选择器规则示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> JinLuoSiItem</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> HtmlXPathSelector</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JinLuoSiSpider</span><span class="params">(scrapy.spiders.Spider)</span>:</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    url_set = set()</div><div class="line"> </div><div class="line">    name = <span class="string">"jluosi"</span></div><div class="line">    domain = <span class="string">'http://www.jluosi.com'</span></div><div class="line">    allowed_domains = [<span class="string">"jluosi.com"</span>]</div><div class="line"> </div><div class="line">    start_urls = [</div><div class="line">        <span class="string">"http://www.jluosi.com:80/ec/goodsDetail.action?jls=QjRDNEIzMzAzOEZFNEE3NQ=="</span>,</div><div class="line">    ]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        md5_obj = hashlib.md5()</div><div class="line">        md5_obj.update(response.url)</div><div class="line">        md5_url = md5_obj.hexdigest()</div><div class="line">        <span class="keyword">if</span> md5_url <span class="keyword">in</span> JinLuoSiSpider.url_set:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            JinLuoSiSpider.url_set.add(md5_url)</div><div class="line">            hxs = HtmlXPathSelector(response)</div><div class="line">            <span class="keyword">if</span> response.url.startswith(<span class="string">'http://www.jluosi.com:80/ec/goodsDetail.action'</span>):</div><div class="line">                item = JinLuoSiItem()</div><div class="line">                item[<span class="string">'company'</span>] = hxs.select(<span class="string">'//div[@class="ShopAddress"]/ul/li[1]/text()'</span>).extract()</div><div class="line">                item[<span class="string">'link'</span>] = hxs.select(<span class="string">'//div[@class="ShopAddress"]/ul/li[2]/text()'</span>).extract()</div><div class="line">                item[<span class="string">'qq'</span>] = hxs.select(<span class="string">'//div[@class="ShopAddress"]//a/@href'</span>).re(<span class="string">'.*uin=(?P&lt;qq&gt;\d*)&amp;'</span>)</div><div class="line">                item[<span class="string">'address'</span>] = hxs.select(<span class="string">'//div[@class="ShopAddress"]/ul/li[4]/text()'</span>).extract()</div><div class="line"> </div><div class="line">                item[<span class="string">'title'</span>] = hxs.select(<span class="string">'//h1[@class="goodsDetail_goodsName"]/text()'</span>).extract()</div><div class="line"> </div><div class="line">                item[<span class="string">'unit'</span>] = hxs.select(<span class="string">'//table[@class="R_WebDetail_content_tab"]//tr[1]//td[3]/text()'</span>).extract()</div><div class="line">                product_list = []</div><div class="line">                product_tr = hxs.select(<span class="string">'//table[@class="R_WebDetail_content_tab"]//tr'</span>)</div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,len(product_tr)):</div><div class="line">                    temp = &#123;</div><div class="line">                        <span class="string">'standard'</span>:hxs.select(<span class="string">'//table[@class="R_WebDetail_content_tab"]//tr[%d]//td[2]/text()'</span> %i).extract()[<span class="number">0</span>].strip(),</div><div class="line">                        <span class="string">'price'</span>:hxs.select(<span class="string">'//table[@class="R_WebDetail_content_tab"]//tr[%d]//td[3]/text()'</span> %i).extract()[<span class="number">0</span>].strip(),</div><div class="line">                    &#125;</div><div class="line">                    product_list.append(temp)</div><div class="line"> </div><div class="line">                item[<span class="string">'product_list'</span>] = product_list</div><div class="line">                <span class="keyword">yield</span> item</div><div class="line"> </div><div class="line">            current_page_urls = hxs.select(<span class="string">'//a/@href'</span>).extract()</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(current_page_urls)):</div><div class="line">                url = current_page_urls[i]</div><div class="line">                <span class="keyword">if</span> url.startswith(<span class="string">'http://www.jluosi.com'</span>):</div><div class="line">                    url_ab = url</div><div class="line">                    <span class="keyword">yield</span> Request(url_ab, callback=self.parse)</div></pre></td></tr></table></figure></p>
<p>获取响应cookie<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    <span class="keyword">from</span> scrapy.http.cookies <span class="keyword">import</span> CookieJar</div><div class="line">    cookieJar = CookieJar()</div><div class="line">    cookieJar.extract_cookies(response, response.request)</div><div class="line">    print(cookieJar._cookies)</div></pre></td></tr></table></figure></p>
<h3 id="格式化处理"><a href="#格式化处理" class="headerlink" title="格式化处理"></a>格式化处理</h3><p>上述实例只是简单的图片处理，所以在parse方法中直接处理。如果对于想要获取更多的数据（获取页面的价格、商品名称、QQ等），则可以利用Scrapy的items将数据格式化，然后统一交由pipelines来处理。即不同功能用不同文件实现。</p>
<p>items：即用户需要爬取哪些数据，是用来格式化数据，并告诉pipelines哪些数据需要保存。</p>
<p>示例items.py文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Define here the models for your scraped items</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># See documentation in:</span></div><div class="line"><span class="comment"># http://doc.scrapy.org/en/latest/topics/items.html</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JieYiCaiItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    company = scrapy.Field()</div><div class="line">    title = scrapy.Field()</div><div class="line">    qq = scrapy.Field()</div><div class="line">    info = scrapy.Field()</div><div class="line">    more = scrapy.Field()</div></pre></td></tr></table></figure></p>
<p>即：需要爬取所有url中的公司名，title，qq，基本信息info，更多信息more。<br>上述定义模板，以后对于从请求的源码中获取的数据同样按照此结构来获取，所以在spider中需要有一下操作：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">from</span> beauty.items <span class="keyword">import</span> JieYiCaiItem</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> HtmlXPathSelector</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</div><div class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JieYiCaiSpider</span><span class="params">(scrapy.spiders.Spider)</span>:</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    url_set = set()</div><div class="line"> </div><div class="line">    name = <span class="string">"jieyicai"</span></div><div class="line">    domain = <span class="string">'http://www.jieyicai.com'</span></div><div class="line">    allowed_domains = [<span class="string">"jieyicai.com"</span>]</div><div class="line"> </div><div class="line">    start_urls = [<span class="string">"http://www.jieyicai.com"</span>,]</div><div class="line"> </div><div class="line">    rules = [</div><div class="line">        <span class="comment">#下面是符合规则的网址,但是不抓取内容,只是提取该页的链接(这里网址是虚构的,实际使用时请替换)</span></div><div class="line">        <span class="comment">#Rule(SgmlLinkExtractor(allow=(r'http://test_url/test?page_index=\d+'))),</span></div><div class="line">        <span class="comment">#下面是符合规则的网址,提取内容,(这里网址是虚构的,实际使用时请替换)</span></div><div class="line">        <span class="comment">#Rule(LinkExtractor(allow=(r'http://www.jieyicai.com/Product/Detail.aspx?pid=\d+')), callback="parse"),</span></div><div class="line">    ]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        md5_obj = hashlib.md5()</div><div class="line">        md5_obj.update(response.url)</div><div class="line">        md5_url = md5_obj.hexdigest()</div><div class="line">        <span class="keyword">if</span> md5_url <span class="keyword">in</span> JieYiCaiSpider.url_set:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            JieYiCaiSpider.url_set.add(md5_url)</div><div class="line">            </div><div class="line">            hxs = HtmlXPathSelector(response)</div><div class="line">            <span class="keyword">if</span> response.url.startswith(<span class="string">'http://www.jieyicai.com/Product/Detail.aspx'</span>):</div><div class="line">                item = JieYiCaiItem()</div><div class="line">                item[<span class="string">'company'</span>] = hxs.select(<span class="string">'//span[@class="username g-fs-14"]/text()'</span>).extract()</div><div class="line">                item[<span class="string">'qq'</span>] = hxs.select(<span class="string">'//span[@class="g-left bor1qq"]/a/@href'</span>).re(<span class="string">'.*uin=(?P&lt;qq&gt;\d*)&amp;'</span>)</div><div class="line">                item[<span class="string">'info'</span>] = hxs.select(<span class="string">'//div[@class="padd20 bor1 comard"]/text()'</span>).extract()</div><div class="line">                item[<span class="string">'more'</span>] = hxs.select(<span class="string">'//li[@class="style4"]/a/@href'</span>).extract()</div><div class="line">                item[<span class="string">'title'</span>] = hxs.select(<span class="string">'//div[@class="g-left prodetail-text"]/h2/text()'</span>).extract()</div><div class="line">                <span class="keyword">yield</span> item</div><div class="line"> </div><div class="line">            current_page_urls = hxs.select(<span class="string">'//a/@href'</span>).extract()</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(current_page_urls)):</div><div class="line">                url = current_page_urls[i]</div><div class="line">                <span class="keyword">if</span> url.startswith(<span class="string">'/'</span>):</div><div class="line">                    url_ab = JieYiCaiSpider.domain + url</div><div class="line">                    <span class="keyword">yield</span> Request(url_ab, callback=self.parse)</div><div class="line">```                    </div><div class="line"></div><div class="line">上述代码中：对url进行md5加密的目的是避免url过长，也方便保存在缓存或数据库中。</div><div class="line">此处代码的关键在于：</div><div class="line">* 将获取的数据封装在了Item对象中</div><div class="line">* <span class="keyword">yield</span> Item对象 （一旦parse中执行<span class="keyword">yield</span> Item对象，则自动将该对象交个pipelines的类来处理）</div><div class="line"></div><div class="line">```python</div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Define your item pipelines here</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></div><div class="line"><span class="comment"># See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</div><div class="line"><span class="keyword">import</span> MySQLdb.cursors</div><div class="line"><span class="keyword">import</span> re</div><div class="line"> </div><div class="line">mobile_re = re.compile(<span class="string">r'(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]&#123;8&#125;'</span>)</div><div class="line">phone_re = re.compile(<span class="string">r'(\d+-\d+|\d+)'</span>)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonPipeline</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.file = open(<span class="string">'/Users/wupeiqi/PycharmProjects/beauty/beauty/jieyicai.json'</span>, <span class="string">'wb'</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        line = <span class="string">"%s  %s\n"</span> % (item[<span class="string">'company'</span>][<span class="number">0</span>].encode(<span class="string">'utf-8'</span>), item[<span class="string">'title'</span>][<span class="number">0</span>].encode(<span class="string">'utf-8'</span>))</div><div class="line">        self.file.write(line)</div><div class="line">        <span class="keyword">return</span> item</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBPipeline</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.db_pool = adbapi.ConnectionPool(<span class="string">'MySQLdb'</span>,</div><div class="line">                                             db=<span class="string">'DbCenter'</span>,</div><div class="line">                                             user=<span class="string">'root'</span>,</div><div class="line">                                             passwd=<span class="string">'123'</span>,</div><div class="line">                                             cursorclass=MySQLdb.cursors.DictCursor,</div><div class="line">                                             use_unicode=<span class="keyword">True</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        query = self.db_pool.runInteraction(self._conditional_insert, item)</div><div class="line">        query.addErrback(self.handle_error)</div><div class="line">        <span class="keyword">return</span> item</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_conditional_insert</span><span class="params">(self, tx, item)</span>:</span></div><div class="line">        tx.execute(<span class="string">"select nid from company where company = %s"</span>, (item[<span class="string">'company'</span>][<span class="number">0</span>], ))</div><div class="line">        result = tx.fetchone()</div><div class="line">        <span class="keyword">if</span> result:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            phone_obj = phone_re.search(item[<span class="string">'info'</span>][<span class="number">0</span>].strip())</div><div class="line">            phone = phone_obj.group() <span class="keyword">if</span> phone_obj <span class="keyword">else</span> <span class="string">' '</span></div><div class="line"> </div><div class="line">            mobile_obj = mobile_re.search(item[<span class="string">'info'</span>][<span class="number">1</span>].strip())</div><div class="line">            mobile = mobile_obj.group() <span class="keyword">if</span> mobile_obj <span class="keyword">else</span> <span class="string">' '</span></div><div class="line"> </div><div class="line">            values = (</div><div class="line">                item[<span class="string">'company'</span>][<span class="number">0</span>],</div><div class="line">                item[<span class="string">'qq'</span>][<span class="number">0</span>],</div><div class="line">                phone,</div><div class="line">                mobile,</div><div class="line">                item[<span class="string">'info'</span>][<span class="number">2</span>].strip(),</div><div class="line">                item[<span class="string">'more'</span>][<span class="number">0</span>])</div><div class="line">            tx.execute(<span class="string">"insert into company(company,qq,phone,mobile,address,more) values(%s,%s,%s,%s,%s,%s)"</span>, values)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_error</span><span class="params">(self, e)</span>:</span></div><div class="line">        print(<span class="string">'error'</span>,e)</div></pre></td></tr></table></figure></p>
<p>上述代码中多个类的目的是，可以同时保存在文件和数据库中，保存的优先级可以在配置文件settings中定义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    &apos;beauty.pipelines.DBPipeline&apos;: 300,</div><div class="line">    &apos;beauty.pipelines.JsonPipeline&apos;: 100,</div><div class="line">&#125;</div><div class="line"># 每行后面的整型值，确定了他们运行的顺序，item按数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内。</div></pre></td></tr></table></figure>
<h3 id="设置编码"><a href="#设置编码" class="headerlink" title="设置编码"></a>设置编码</h3><p>自Scrapy1.2 起，增加了<code>FEED_EXPORT_ENCODING</code>属性，用于设置输出编码.在settings.py中添加下面的配置即可.<br><code>FEED_EXPORT_ENCODING = &#39;utf-8&#39;</code></p>
<h3 id="运行爬虫-1"><a href="#运行爬虫-1" class="headerlink" title="运行爬虫"></a>运行爬虫</h3><p>首先需要列出所有可运行的爬虫，输入: <code>scrapy list</code>, 回车, 这会列出所有爬虫类中指定的name属性。<br>然后，我们可以按照name来指定运行爬虫, 如:<code>scrapy crawl &#39;csdn_blog&#39; -o blog.json</code>.</p>
<h3 id="关于ROBOTSTXT-OBEY"><a href="#关于ROBOTSTXT-OBEY" class="headerlink" title="关于ROBOTSTXT_OBEY"></a>关于ROBOTSTXT_OBEY</h3><p>在settings.py文件，ROBOTSTXT_OBEY默认为True，就是要遵守robots.txt 的规则.<br>那么 robots.txt 是什么东西呢？<br>robots.txt 是遵循 Robot 协议的一个文件，它保存在网站的服务器中，它的作用是，告诉<strong>搜索引擎爬虫</strong>，本网站哪些目录下的网页不希望被爬取收录。在Scrapy启动后，会在第一时间访问网站的 robots.txt 文件，然后决定该网站的爬取范围。当然，我们并不是在做搜索引擎，而且在某些情况下我们想要获取的内容恰恰是被 robots.txt 所禁止访问的。所以，某些时候，我们就要将此配置项设置为 False ，拒绝遵守 Robot协议 ！所以在这里设置为False。当然可能本次爬取不一定会被它限制，但一般来说会首先选择禁止它。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://python.jobbole.com/86405/" target="_blank" rel="external">http://python.jobbole.com/86405/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之进程]]></title>
      <url>http://arvin-he.github.io/2017/06/12/python-process-2017-06-12/</url>
      <content type="html"><![CDATA[<h3 id="多进程模块-multiprocessing-简介"><a href="#多进程模块-multiprocessing-简介" class="headerlink" title="多进程模块(multiprocessing)简介"></a>多进程模块(multiprocessing)简介</h3><p>multiprocessing是多进程模块，多进程提供了任务并发性，能充分利用多核处理器, 避免了GIL（全局解释锁）对资源的影响。由于GIL（全局解释锁）的问题，多线程并不能充分利用多核处理器，如果是一个CPU计算型的任务，应该使用多进程模块 multiprocessing 。它的工作方式与线程库完全不同，但是两种库的语法却非常相似。multiprocessing给每个进程赋予单独的Python解释器，这样就规避了全局解释锁所带来的问题。</p>
<h4 id="multiprocessing常用类"><a href="#multiprocessing常用类" class="headerlink" title="multiprocessing常用类:"></a>multiprocessing常用类:</h4><ol>
<li><code>Process(group=None, target=None, name=None, args=(), kwargs={})</code><br>派生一个进程对象，然后调用start()方法启动</li>
<li><code>Pool(processes=None, initializer=None, initargs=())</code><br>返回一个进程池对象，processes进程池进程数量</li>
<li><code>Pipe(duplex=True)</code><br>返回两个连接对象由管道连接</li>
<li><code>Queue(maxsize=0)</code><br>返回队列对象，操作方法跟Queue.Queue一样</li>
<li><code>multiprocessing.dummy</code><br>这个库是用于实现多线程</li>
</ol>
<h4 id="Process-类有以下些方法："><a href="#Process-类有以下些方法：" class="headerlink" title="Process()类有以下些方法："></a>Process()类有以下些方法：</h4><p><code>run()</code><br><code>start()</code> :启动进程对象<br><code>join([timeout])</code> :等待子进程终止，才返回结果。可选超时。<br><code>name</code> : 进程名字<br><code>is_alive()</code> :返回进程是否存活<br><code>daemon</code> : 进程的守护标记，一个布尔值<br><code>pid</code>: 返回进程ID<br><code>exitcode</code> :子进程退出状态码<br><code>terminate()</code> :终止进程。在unix上使用SIGTERM信号，在windows上使用TerminateProcess()。</p>
<h4 id="Pool-类有以下些方法："><a href="#Pool-类有以下些方法：" class="headerlink" title="Pool()类有以下些方法："></a>Pool()类有以下些方法：</h4><p><code>apply(func, args=(), kwds={})</code> :等效内建函数apply()<br><code>apply_async(func, args=(), kwds={}, callback=None)</code> : 异步，等效内建函数apply()<br><code>map(func, iterable, chunksize=None)</code> : 等效内建函数map()<br><code>map_async(func, iterable, chunksize=None, callback=None)</code> :异步，等效内建函数map()<br><code>imap(func, iterable, chunksize=1)</code> :等效内建函数itertools.imap()<br><code>imap_unordered(func, iterable, chunksize=1)</code> :像imap()方法，但结果顺序是任意的<br><code>close()</code> :关闭进程池<br><code>terminate()</code> : 终止工作进程，垃圾收集连接池对象<br><code>join()</code> :等待工作进程退出。必须先调用close()或terminate()</p>
<h4 id="Pool-apply-async-和Pool-map-aysnc-又提供了以下几个方法："><a href="#Pool-apply-async-和Pool-map-aysnc-又提供了以下几个方法：" class="headerlink" title="Pool.apply_async()和Pool.map_aysnc()又提供了以下几个方法："></a><code>Pool.apply_async()</code>和<code>Pool.map_aysnc()</code>又提供了以下几个方法：</h4><p><code>get([timeout])</code> : 获取结果对象里的结果。如果超时没有，则抛出TimeoutError异常<br><code>wait([timeout])</code> : 等待可用的结果或超时<br><code>ready()</code> : 返回调用是否已经完成<br><code>successful()</code></p>
<h3 id="multiprocessing使用"><a href="#multiprocessing使用" class="headerlink" title="multiprocessing使用"></a>multiprocessing使用</h3><p>一个简单的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(name)</span>:</span></div><div class="line">    print(name)</div><div class="line">    print(<span class="string">"parent pid = &#123;&#125;"</span>.format(os.getppid()))</div><div class="line">    print(<span class="string">"current pid = &#123;&#125;"</span>.format(os.getpid()))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    p = Process(target=worker, args=(<span class="string">'func worker'</span>, ))</div><div class="line">    p.start()</div><div class="line">    p.join()</div><div class="line">    print(p.name)</div><div class="line"></div><div class="line"><span class="comment">#输出结果</span></div><div class="line">func worker</div><div class="line">parent pid = <span class="number">5476</span></div><div class="line">current pid = <span class="number">5992</span></div><div class="line">Process<span class="number">-1</span></div></pre></td></tr></table></figure></p>
<p>关于<code>join([timeout])</code>方法说明:如果可选参数timeout为None(默认值)，该方法将阻塞，直到调用join()方法的进程终止。如果超时为正数，则阻塞最多超时timeout的设定值。请注意，如果方法终止或方法超时，该方法返回None。检查进程的exitcode以确定是否终止。</p>
<p>给子进程命名,方便管理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"this is worker1 func"</span>)</div><div class="line">    print(<span class="string">"current pid = &#123;&#125;"</span>.format(os.getpid()))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker2</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"this is worker2 func"</span>)</div><div class="line">    print(<span class="string">"current pid = &#123;&#125;"</span>.format(os.getpid()))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    print(<span class="string">"parent pid = &#123;&#125;"</span>.format(os.getppid()))</div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">        p1 = Process(name=<span class="string">"worker1"</span>, target=worker1)</div><div class="line">        p1.start()</div><div class="line">        p1.join()</div><div class="line">        print(<span class="string">"child process name = &#123;&#125;"</span>.format(p1.name))</div><div class="line">    p2 = Process(name=<span class="string">"worker2"</span>, target=worker2)</div><div class="line">    p2.start()</div><div class="line">    p2.join()</div><div class="line">    print(<span class="string">"child process name = &#123;&#125;"</span>.format(p2.name))</div><div class="line"></div><div class="line"><span class="comment"># 输出结果</span></div><div class="line">parent pid = <span class="number">2816</span></div><div class="line">this <span class="keyword">is</span> worker1 func</div><div class="line">current pid = <span class="number">2428</span></div><div class="line">child process name = worker1</div><div class="line">this <span class="keyword">is</span> worker1 func</div><div class="line">current pid = <span class="number">3192</span></div><div class="line">child process name = worker1</div><div class="line">this <span class="keyword">is</span> worker1 func</div><div class="line">current pid = <span class="number">4736</span></div><div class="line">child process name = worker1</div><div class="line">this <span class="keyword">is</span> worker2 func</div><div class="line">current pid = <span class="number">976</span></div><div class="line">child process name = worker2</div></pre></td></tr></table></figure></p>
<p>关于daemon<br>这里的daemon不同于linux中守护进程的概念,这里的daemon参数是一个布尔值,<br>如果daemon为None则创建子进程时daemon参数从父进程继承过来.<br>如果daemon为true,则创建的子进程随着父进程退出而退出,<br>如果daemon为false,则创建的子进程随着父进程退出而不退出,<br>注意: 一个守护进程不允许创建子进程,否则当父进程退出后,该守护进程终止后会使由该守守护进守护进程创建的子进程变成独立进程,此外，它们不是Unix守护程序或服务，它们是正常进程，如果非守护进程已退出，则该进程将被终止（并且未加入）。</p>
<h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p><strong>有一点要强调：</strong>任务的执行周期决定于CPU核数和任务分配算法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, current_process</div><div class="line"><span class="keyword">import</span> os, time, sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(n)</span>:</span></div><div class="line">    print(<span class="string">'hello world'</span>, n)</div><div class="line">    <span class="comment"># 获取当前进程名字</span></div><div class="line">    print(<span class="string">'process name:'</span>, current_process().name)</div><div class="line">    <span class="comment"># 休眠用于执行时有时间查看当前执行的进程</span></div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p = Pool(processes=<span class="number">3</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">        r = p.apply_async(worker, args=(i,))</div><div class="line">        <span class="comment"># 获取结果中的数据</span></div><div class="line">        r.get(timeout=<span class="number">5</span>)  </div><div class="line">    p.close()</div><div class="line"></div><div class="line"><span class="comment"># 运行结果:</span></div><div class="line">hello world <span class="number">0</span></div><div class="line">process name: SpawnPoolWorker<span class="number">-2</span></div><div class="line">hello world <span class="number">1</span></div><div class="line">process name: SpawnPoolWorker<span class="number">-3</span></div><div class="line">hello world <span class="number">2</span></div><div class="line">process name: SpawnPoolWorker<span class="number">-1</span></div><div class="line">hello world <span class="number">3</span></div><div class="line">process name: SpawnPoolWorker<span class="number">-2</span></div><div class="line">hello world <span class="number">4</span></div><div class="line">process name: SpawnPoolWorker<span class="number">-3</span></div><div class="line">hello world <span class="number">5</span></div><div class="line">process name: SpawnPoolWorker<span class="number">-1</span></div><div class="line">hello world <span class="number">6</span></div><div class="line">process name: SpawnPoolWorker<span class="number">-2</span></div><div class="line">hello world <span class="number">7</span></div><div class="line">process name: SpawnPoolWorker<span class="number">-3</span></div></pre></td></tr></table></figure></p>
<p>进程池生成了3个子进程，通过循环执行8次worker函数，进程池会从子进程1开始去处理任务，当到达最大进程时，会继续从子进程1开始。</p>
<p>进程池map方法, map()方法是将序列中的元素通过函数处理返回新列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'http://%s'</span> % url</div><div class="line">urls = [<span class="string">'www.baidu.com'</span>, <span class="string">'www.jd.com'</span>]</div><div class="line">pool = Pool(<span class="number">2</span>)s</div><div class="line">r = pool.map(worker, urls)</div><div class="line">pool.close()</div><div class="line">print(r)</div></pre></td></tr></table></figure></p>
<p>上面的hasmultiprocess函数的用法非常中规中矩且常见，但是我认为更好的写法是使用Pool，也就是对应线程池的进程池. 其中map方法用起来和内置的map函数一样，却有多进程的支持。</p>
<h3 id="dummy模块"><a href="#dummy模块" class="headerlink" title="dummy模块"></a>dummy模块</h3><p>当出现要从多线程改成多进程或者多进程改成多线程的时候，可以使用multiprocessing.dummy这个子模块，dummy」这个词有「模仿」的意思，如果分不清任务是CPU密集型还是IO密集型就是用这个模块. <code>from multiprocessing.dummy import Pool</code>, 这样在多线程/多进程之间切换非常方便。如果一个任务拿不准是CPU密集还是I/O密集型，且没有其它不能选择多进程方式的因素，都统一直接上多进程模式。</p>
<h3 id="基于Pipe的parmap"><a href="#基于Pipe的parmap" class="headerlink" title="基于Pipe的parmap"></a>基于Pipe的parmap</h3><p>进程间的通信（IPC）常用的是rpc、socket、pipe（管道）和消息队列（queue）。<br>ultiprocessing支持两种类型进程间通信：Queue和Pipe。<br>多进程模块中涉及到了后面3种。先看一个官网给出的最基本的管道的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(conn)</span>:</span></div><div class="line">    conn.send([<span class="string">'hello'</span>])</div><div class="line">    conn.close()</div><div class="line"></div><div class="line">parent_conn, child_conn = Pipe()</div><div class="line">p = Process(target=f, args=(child_conn,))</div><div class="line">p.start()</div><div class="line">print(parent_conn.recv())</div><div class="line">p.join()</div></pre></td></tr></table></figure></p>
<p>其中Pipe返回的是管道2边的对象：「父连接」和「子连接」。当子连接发送一个带有hello字符串的列表，父连接就会收到，所以parent_conn.recv()就会打印出来。这样就可以简单的实现在多进程之间传输Python内置的数据结构了。但是先说明，不能被xmlrpclib序列化的对象是不能这么传输的。</p>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h3 id="同步机制"><a href="#同步机制" class="headerlink" title="同步机制"></a>同步机制</h3><p>multiprocessing的Lock、Condition、Event、RLock、Semaphore等同步原语和threading模块的机制是一样的，用法也类似.</p>
<h3 id="进程间共享状态"><a href="#进程间共享状态" class="headerlink" title="进程间共享状态"></a>进程间共享状态</h3><p>multiprocessing提供的在进程间共享状态的方式有2种：</p>
<h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><p>主要通过Value或者Array来实现。常见的共享的有以下几种：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> multiprocessing.sharedctypes <span class="keyword">import</span> typecode_to_type</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: typecode_to_type</div><div class="line">Out[<span class="number">2</span>]:</div><div class="line">&#123;<span class="string">'B'</span>: ctypes.c_ubyte,</div><div class="line"> <span class="string">'H'</span>: ctypes.c_ushort,</div><div class="line"> <span class="string">'I'</span>: ctypes.c_ulong,</div><div class="line"> <span class="string">'L'</span>: ctypes.c_ulong,</div><div class="line"> <span class="string">'b'</span>: ctypes.c_byte,</div><div class="line"> <span class="string">'c'</span>: ctypes.c_char,</div><div class="line"> <span class="string">'d'</span>: ctypes.c_double,</div><div class="line"> <span class="string">'f'</span>: ctypes.c_float,</div><div class="line"> <span class="string">'h'</span>: ctypes.c_short,</div><div class="line"> <span class="string">'i'</span>: ctypes.c_long,</div><div class="line"> <span class="string">'l'</span>: ctypes.c_long,</div><div class="line"> <span class="string">'u'</span>: ctypes.c_wchar&#125;</div></pre></td></tr></table></figure></p>
<p> 而且共享的时候还可以给Value或者Array传递lock参数来决定是否带锁，如果不指定默认为RLock。</p>
<h3 id="进程间对象共享"><a href="#进程间对象共享" class="headerlink" title="进程间对象共享"></a>进程间对象共享</h3><p>一个multiprocessing.Manager对象会控制一个服务器进程，其他进程可以通过代理的方式来访问这个服务器进程。<br>常见的共享方式有以下几种：</p>
<ol>
<li>Namespace。创建一个可分享的命名空间。</li>
<li>Value/Array。和上面共享ctypes对象的方式一样。</li>
<li>dict/list。创建一个可分享的dict/list，支持对应数据结构的方法。</li>
<li>Condition/Event/Lock/Queue/Semaphore。创建一个可分享的对应同步原语的对象。</li>
</ol>
<h3 id="分布式的进程间通信"><a href="#分布式的进程间通信" class="headerlink" title="分布式的进程间通信"></a>分布式的进程间通信</h3><p>用Manager和Queue就可以实现简单的分布式的不同服务器的不同进程间的通信（C/S模式）。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://juejin.im/post/5847853661ff4b006c431c64" target="_blank" rel="external">理解Python并发编程 - 进程篇</a></li>
<li><a href="https://yq.aliyun.com/articles/65091?utm_campaign=wenzhang&amp;utm_medium=article&amp;utm_source=QQ-qun&amp;utm_content=m_8078" target="_blank" rel="external">Python多进程与多线程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之线程]]></title>
      <url>http://arvin-he.github.io/2017/06/12/python-thread-2017-06-12/</url>
      <content type="html"><![CDATA[<h3 id="关于GIL"><a href="#关于GIL" class="headerlink" title="关于GIL"></a>关于GIL</h3><p>Python（特指CPython）的多线程不能利用多核的优势，这是因为全局解释锁（GIL）的限制。如果是cpu密集型(计算型)的任务，使用多线程GIL就会让多线程变慢。<br>GIL是必须的，这是Python设计的问题：Python解释器是非线程安全的。这意味着当从线程内尝试安全的访问Python对象的时候将有一个全局的强制锁。 在任何时候，仅仅一个单一的线程能够获取Python对象或者C API。每100个字节的Python指令解释器将重新获取锁，这（潜在的）阻塞了I/O操作。因为锁，CPU密集型的代码使用线程库时，不会获得性能的提高（但是当它使用之后介绍的多进程库时，性能可以获得提高）。</p>
<h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><p>Python线程包含多种同步机制:</p>
<ol>
<li>Semaphore（信号量）</li>
<li>Lock（锁）</li>
<li>RLock（可重入锁）</li>
<li>Condition（条件）</li>
<li>Event</li>
<li>Queue</li>
</ol>
<h3 id="Semaphore（信号量）"><a href="#Semaphore（信号量）" class="headerlink" title="Semaphore（信号量）"></a>Semaphore（信号量）</h3><p>在多线程编程中，为了防止不同的线程同时对一个公用的资源（比如全局变量）进行修改，需要进行同时访问的数量（通常是1）。<br>信号量同步基于内部计数器，每调用一次acquire()，计数器减1；每调用一次release()，计数器加1.当计数器为0时，acquire()调用被阻塞。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Semaphore</div><div class="line"></div><div class="line">sema = Semaphore(<span class="number">3</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(tid)</span>:</span></div><div class="line">    <span class="keyword">with</span> sema:</div><div class="line">        print(<span class="string">'&#123;&#125; acquire sema'</span>.format(tid))</div><div class="line">        wt = random() * <span class="number">2</span></div><div class="line">        time.sleep(wt)</div><div class="line">    print(<span class="string">'&#123;&#125; release sema'</span>.format(tid))</div><div class="line"></div><div class="line"></div><div class="line">threads = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    t = Thread(target=foo, args=(i,))</div><div class="line">    threads.append(t)</div><div class="line">    t.start()</div><div class="line"></div><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">    t.join()</div></pre></td></tr></table></figure></p>
<p>这个例子中，限制了同时能访问资源的数量为3。看一下运行的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">0 acquire sema</div><div class="line">1 acquire sema</div><div class="line">2 acquire sema</div><div class="line">0 release sema</div><div class="line">3 acquire sema</div><div class="line">2 release sema</div><div class="line">4 acquire sema</div><div class="line">1 release sema</div><div class="line">3 release sema</div><div class="line">4 release sema</div></pre></td></tr></table></figure></p>
<h3 id="Lock（锁）"><a href="#Lock（锁）" class="headerlink" title="Lock（锁）"></a>Lock（锁）</h3><p>Lock也可以叫做<strong>互斥锁</strong>，其实相当于信号量为1。<br>不加锁：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"></div><div class="line">value = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> value</div><div class="line">    newvalue = value + <span class="number">1</span></div><div class="line">    time.sleep(<span class="number">0.001</span>)  <span class="comment"># 使用sleep让线程有机会切换</span></div><div class="line">    value = newvalue</div><div class="line"></div><div class="line"></div><div class="line">threads = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">    t = Thread(target=foo)</div><div class="line">    t.start()</div><div class="line">    threads.append(t)</div><div class="line"></div><div class="line"><span class="comment"># 创建了100个线程</span></div><div class="line">print(len(threads))</div><div class="line"></div><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">    t.join()</div><div class="line"></div><div class="line">print(value)</div></pre></td></tr></table></figure></p>
<p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">100</div><div class="line">10</div></pre></td></tr></table></figure></p>
<p>加锁<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</div><div class="line"></div><div class="line"><span class="comment"># 全局变量</span></div><div class="line">value = <span class="number">0</span></div><div class="line">lock = Lock()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> value</div><div class="line">    <span class="comment"># 加锁,执行完会自动释放锁</span></div><div class="line">    <span class="keyword">with</span> lock:</div><div class="line">        new = value + <span class="number">1</span></div><div class="line">        time.sleep(<span class="number">0.001</span>)</div><div class="line">        value = new</div><div class="line"></div><div class="line">threads = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">    t = Thread(target=foo)</div><div class="line">    t.start()</div><div class="line">    threads.append(t)</div><div class="line"></div><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">    t.join()</div><div class="line"></div><div class="line">print(value)</div></pre></td></tr></table></figure></p>
<p>运行结果:100</p>
<h3 id="RLock（可重入锁）"><a href="#RLock（可重入锁）" class="headerlink" title="RLock（可重入锁）"></a>RLock（可重入锁）</h3><p>acquire() 能够不被阻塞的被同一个线程调用多次。但是要注意的是release()需要调用与acquire()相同的次数才能释放锁。</p>
<h3 id="Condition（条件）"><a href="#Condition（条件）" class="headerlink" title="Condition（条件）"></a>Condition（条件）</h3><p>一个线程等待特定条件，而另一个线程发出特定条件满足的信号。最好说明的例子就是「生产者/消费者」模型：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(cond)</span>:</span></div><div class="line">    t = threading.currentThread()</div><div class="line">    <span class="keyword">with</span> cond:</div><div class="line">        <span class="comment"># wait()方法创建了一个名为waiter的锁，</span></div><div class="line">        <span class="comment"># 并且设置锁的状态为locked。这个waiter锁用于线程间的通讯</span></div><div class="line">        cond.wait()</div><div class="line">        print(<span class="string">'&#123;&#125;: Resource is available to consumer'</span>.format(t.name))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(cond)</span>:</span></div><div class="line">    t = threading.currentThread()</div><div class="line">    <span class="keyword">with</span> cond:</div><div class="line">        print(<span class="string">'&#123;&#125;: Making resource available'</span>.format(t.name))</div><div class="line">        <span class="comment"># 释放waiter锁，唤醒消费者</span></div><div class="line">        cond.notifyAll()</div><div class="line"></div><div class="line"></div><div class="line">condition = threading.Condition()</div><div class="line"></div><div class="line">c1 = threading.Thread(name=<span class="string">'c1'</span>, target=consumer, args=(condition,))</div><div class="line">c2 = threading.Thread(name=<span class="string">'c2'</span>, target=consumer, args=(condition,))</div><div class="line">p = threading.Thread(name=<span class="string">'p'</span>, target=producer, args=(condition,))</div><div class="line"></div><div class="line">c1.start()</div><div class="line">time.sleep(<span class="number">1</span>)</div><div class="line">c2.start()</div><div class="line">time.sleep(<span class="number">1</span>)</div><div class="line">p.start()</div></pre></td></tr></table></figure></p>
<p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p: Making resource available</div><div class="line">c2: Resource is available to consumer</div><div class="line">c1: Resource is available to consumer</div></pre></td></tr></table></figure></p>
<p>可以看到生产者发送通知之后，消费者都收到了。</p>
<h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>一个线程发送/传递事件，另外的线程等待事件的触发.同样的用「生产者/消费者」模型的例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"></div><div class="line">TIMEOUT = <span class="number">2</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(event, mylist)</span>:</span></div><div class="line">    t = threading.currentThread()</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        event_is_set = event.wait(TIMEOUT)</div><div class="line">        <span class="keyword">if</span> event_is_set:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                integer = mylist.pop()</div><div class="line">                print(<span class="string">'&#123;&#125; popped from list by &#123;&#125;'</span>.format(integer, t.name))</div><div class="line">                <span class="comment"># 重置事件状态</span></div><div class="line">                event.clear()</div><div class="line">            <span class="keyword">except</span> IndexError:</div><div class="line">                <span class="comment"># 为了让刚启动时容错</span></div><div class="line">                <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(event, mylist)</span>:</span></div><div class="line">    t = threading.currentThread()</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        integer = randint(<span class="number">10</span>, <span class="number">100</span>)</div><div class="line">        mylist.append(integer)</div><div class="line">        print(<span class="string">'&#123;&#125; appended to list by &#123;&#125;'</span>.format(integer, t.name))</div><div class="line">        <span class="comment"># 设置事件</span></div><div class="line">        event.set()</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line">event = threading.Event()</div><div class="line">mylist = []</div><div class="line">threads = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> (<span class="string">'consumer1'</span>, <span class="string">'consumer2'</span>):</div><div class="line">    t = threading.Thread(name=name, target=consumer, args=(event, mylist))</div><div class="line">    t.start()</div><div class="line">    threads.append(t)</div><div class="line"></div><div class="line">p = threading.Thread(name=<span class="string">'producer1'</span>, target=producer, args=(event, mylist))</div><div class="line">p.start()</div><div class="line">threads.append(p)</div><div class="line"></div><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">    t.join()</div></pre></td></tr></table></figure>
<p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">86 appended to list by producer1 </div><div class="line">86 popped from list by consumer1 </div><div class="line">29 appended to list by producer1 </div><div class="line">29 popped from list by consumer1 </div><div class="line">36 appended to list by producer1 </div><div class="line">36 popped from list by consumer2 </div><div class="line">47 appended to list by producer1 </div><div class="line">47 popped from list by consumer2 </div><div class="line">16 appended to list by producer1 </div><div class="line">16 popped from list by consumer1 </div><div class="line">95 appended to list by producer1 </div><div class="line">95 popped from list by consumer1 </div><div class="line">51 appended to list by producer1 </div><div class="line">51 popped from list by consumer1 </div><div class="line">36 appended to list by producer1 </div><div class="line">36 popped from list by consumer1 </div><div class="line">12 appended to list by producer1 </div><div class="line">12 popped from list by consumer1 </div><div class="line">12 appended to list by producer1 </div><div class="line">12 popped from list by consumer1</div></pre></td></tr></table></figure></p>
<p>可以看到事件被2个消费者比较平均的接收并处理了。如果使用了wait方法，线程就会等待我们设置事件，这也有助于保证任务的完成。</p>
<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>队列在并发开发中最常用的。我们借助「生产者/消费者」模式来理解：<br>生产者把生产的「消息」放入队列，消费者从这个队列中对去对应的消息执行。</p>
<p>大家主要关心如下4个方法就好了：</p>
<ol>
<li>put: 向队列中添加一个项。</li>
<li>get: 从队列中删除并返回一个项。</li>
<li>task_done: 当某一项任务完成时调用。</li>
<li>join: 阻塞直到所有的项目都被处理完。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</div><div class="line"></div><div class="line">q = Queue()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n * <span class="number">2</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        wt = random()</div><div class="line">        time.sleep(wt)</div><div class="line">        q.put((double, wt))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        task, arg = q.get()</div><div class="line">        print(arg, task(arg))</div><div class="line">        q.task_done()</div><div class="line"></div><div class="line"><span class="keyword">for</span> target <span class="keyword">in</span>(producer, consumer):</div><div class="line">    t = threading.Thread(target=target)</div><div class="line">    t.start()</div></pre></td></tr></table></figure>
<p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0.5001101134617869 1.0002202269235738</div><div class="line">0.2397443354990395 0.479488670998079</div><div class="line">0.018426830503480485 0.03685366100696097</div><div class="line">0.9260989761246562 1.8521979522493124</div><div class="line">0.808116115591099 1.616232231182198</div><div class="line">0.5868108877921562 1.1736217755843124</div><div class="line">0.5195607837070528 1.0391215674141057</div><div class="line">0.32311190835552184 0.6462238167110437</div></pre></td></tr></table></figure></p>
<p>这就是最简化的队列架构。</p>
<p>Queue模块还自带了PriorityQueue（带有优先级）和LifoQueue（后进先出）2种特殊队列。<br>下面展示线程安全的优先级队列的用法，<br>PriorityQueue要求我们put的数据的格式是(priority_number, data)，我们看看下面的例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</div><div class="line"></div><div class="line">q = PriorityQueue()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n*<span class="number">2</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">()</span>:</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> count &gt; <span class="number">5</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        pri = randint(<span class="number">0</span>, <span class="number">100</span>)</div><div class="line">        print(<span class="string">'put :&#123;&#125;'</span>.format(pri))</div><div class="line">        <span class="comment"># (priority, func, args)</span></div><div class="line">        q.put((pri, double, pri))</div><div class="line">        count += <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> q.empty():</div><div class="line">            <span class="keyword">break</span></div><div class="line">        pri, task, arg = q.get()</div><div class="line">        print(<span class="string">'[PRI:&#123;&#125;] &#123;&#125; * 2 = &#123;&#125;'</span>.format(pri, arg, task(arg)))</div><div class="line">        q.task_done()</div><div class="line">        time.sleep(<span class="number">0.1</span>)</div><div class="line"></div><div class="line"></div><div class="line">t = threading.Thread(target=producer)</div><div class="line">t.start()</div><div class="line">time.sleep(<span class="number">1</span>)</div><div class="line">t = threading.Thread(target=consumer)</div><div class="line">t.start()</div></pre></td></tr></table></figure>
<p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">put :54</div><div class="line">put :70</div><div class="line">put :62</div><div class="line">put :54</div><div class="line">put :20</div><div class="line">put :75</div><div class="line">[PRI:20] 20 * 2 = 40</div><div class="line">[PRI:54] 54 * 2 = 108</div><div class="line">[PRI:54] 54 * 2 = 108</div><div class="line">[PRI:62] 62 * 2 = 124</div><div class="line">[PRI:70] 70 * 2 = 140</div><div class="line">[PRI:75] 75 * 2 = 150</div></pre></td></tr></table></figure></p>
<p>可以看到put时的数字是随机的，但是get时先从优先级更高（数字小表示优先级高）开始获取的。</p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>面向对象开发中，创建和销毁对象是很费时间的，因为创建一个对象要获取内存资源或者其它更多资源。无节制的创建和销毁线程是一种极大的浪费。那我们可不可以把执行完任务的线程不销毁而重复利用呢？仿佛就是把这些线程放进一个池子，一方面我们可以控制同时工作的线程数量，一方面也避免了创建和销毁产生的开销。</p>
<p>线程池在标准库中其实是有体现的，只是在官方文章中基本没有被提及：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: pool = ThreadPool(<span class="number">5</span>)</div><div class="line"></div><div class="line">In [<span class="number">3</span>]: pool.map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, range(<span class="number">5</span>))</div><div class="line">Out[<span class="number">3</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</div></pre></td></tr></table></figure></p>
<p>自己实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n*<span class="number">2</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue)</span>:</span></div><div class="line">        super(Worker, self).__init__()</div><div class="line">        self._q = queue</div><div class="line">        self.daemon = <span class="keyword">True</span></div><div class="line">        self.start()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            f, args, kwargs = self._q.get()</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="comment"># 线程名字</span></div><div class="line">                print(<span class="string">'USE: &#123;&#125;'</span>.format(self.name))</div><div class="line">                print(f(*args, **kwargs))</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                print(e)</div><div class="line">            self._q.task_done()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_t=<span class="number">5</span>)</span>:</span></div><div class="line">        self._q = Queue(num_t)</div><div class="line">        <span class="comment"># 创建5个工作线程</span></div><div class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_t):</div><div class="line">            Worker(self._q)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_task</span><span class="params">(self,  f,  *args, **kwargs)</span>:</span></div><div class="line">        self._q.put((f, args, kwargs))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait_complete</span><span class="params">(self)</span>:</span></div><div class="line">        self._q.join()</div><div class="line"></div><div class="line"></div><div class="line">pool = ThreadPool()</div><div class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">    wt = random()</div><div class="line">    pool.add_task(double, wt)</div><div class="line">    time.sleep(wt)</div><div class="line"></div><div class="line">pool.wait_complete()</div></pre></td></tr></table></figure></p>
<p>运行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">USE: Thread-1</div><div class="line">0.4563649806005714</div><div class="line">USE: Thread-2</div><div class="line">1.818831738188373</div><div class="line">USE: Thread-3</div><div class="line">1.3641601633838014</div><div class="line">USE: Thread-4</div><div class="line">1.4812490759517853</div><div class="line">USE: Thread-5</div><div class="line">0.9838021089438205</div><div class="line">USE: Thread-1</div><div class="line">0.5131452235979674</div><div class="line">USE: Thread-2</div><div class="line">1.7305538822346334</div><div class="line">USE: Thread-3</div><div class="line">1.8682661663096352</div></pre></td></tr></table></figure></p>
<p>线程池会保证同时提供5个线程工作，但是我们有8个待完成的任务，可以看到线程按顺序被循环利用了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://juejin.im/post/5845134da22b9d006c2959c3" target="_blank" rel="external">理解Python并发编程 - 线程篇</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之_magic变量和函数]]></title>
      <url>http://arvin-he.github.io/2017/06/09/python-magicVarFunc-2017-06-09/</url>
      <content type="html"><![CDATA[<h3 id="关于下划线-的说明"><a href="#关于下划线-的说明" class="headerlink" title="关于下划线(_)的说明"></a>关于下划线(_)的说明</h3><ul>
<li>单下划线开头：弱内部使用标识，无法被from M import *所引用</li>
<li>单下划线结尾：避免和python关键字冲突，可以加个后置下划线,如exec_()</li>
<li>双下划线开头：类成员变量中的私有变量，</li>
<li>双下划线开头，双下划线结尾：这是magic对象或属性的名字，永远不要将这样的命名方式应用于自己的变量和函数</li>
</ul>
<h3 id="magic变量和magic函数"><a href="#magic变量和magic函数" class="headerlink" title="magic变量和magic函数"></a>magic变量和magic函数</h3><h4 id="1-name-变量"><a href="#1-name-变量" class="headerlink" title="1. __name__ 变量"></a>1. <code>__name__</code> 变量</h4><p>   <code>__name__</code>属性是直接内置在.py文件中的, 这个属性经常用来当做一个使用模式的标识.</p>
<pre><code>* 如果.py文件是在命令行运行的文件, 即被执行的文件，则`__name__`将被设置为`__main__`。
* 如果.py文件是被import，`__name__`将被设置为.py文件的名字
</code></pre><h4 id="2-file-变量"><a href="#2-file-变量" class="headerlink" title="2. __file__ 变量"></a>2. <code>__file__</code> 变量</h4><p><code>__file__</code>可以用来获取python脚本的“路径+脚本名称”，这可能是一个相对路径也可能是一个绝对路径，取决按照什么路径来执行的脚本，一般来说<code>__file__</code>变量和os.path配合，可以用来获取python脚本的绝对路径：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">5</span>]: <span class="keyword">import</span> os</div><div class="line">In [<span class="number">7</span>]: print(os.path.realpath(test1.__file__))</div><div class="line">C:\Users\aron\Desktop\test1.py</div></pre></td></tr></table></figure></p>
<h4 id="3-import-函数"><a href="#3-import-函数" class="headerlink" title="3. __import__ 函数"></a>3. <code>__import__</code> 函数</h4><p>python导入模块时，一般使用import，而import语句其实也是调用builtin函数,即<code>__import__()</code>函数实现的导入，直接使用<code>__import__</code>比较少见，除非导入的模块是不确定的，需要在运行时才能确定导入哪些模块，可以使用<code>__import__</code>，默认接收需要导入的模块名的字符串：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">9</span>]: model = __import__(<span class="string">'test'</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>]</div><div class="line"></div><div class="line">In [<span class="number">11</span>]: model.Fib(<span class="number">5</span>)</div><div class="line">Out[<span class="number">11</span>]: &lt;test.Fib at <span class="number">0x49ea9b0</span>&gt;</div></pre></td></tr></table></figure></p>
<h4 id="4-str-函数"><a href="#4-str-函数" class="headerlink" title="4. __str__ 函数"></a>4. <code>__str__</code> 函数</h4><p><code>__str__</code>是一个比较常用的内置函数，在定义类的时候经常使用，<code>__str__</code>函数返回一个字符串，这个字符串就是此对象被print时显示的内容，如果不定义这个函数，将会显示默认的格式：<code>&lt;__main__.A object at 0x0000000001FB7C50&gt;</code>.这个函数在django的model类中如果定义的话，print一条数据库中的数据，可以指定显示任何的值.<br><strong>注意：</strong>在python3.x中<code>__str__</code>被废弃，使用<code>__repr__</code></p>
<h4 id="5-init-函数"><a href="#5-init-函数" class="headerlink" title="5. __init__ 函数"></a>5. <code>__init__</code> 函数</h4><p><code>__init__</code>比较常见，是对象的初始化函数</p>
<h4 id="6-new-函数"><a href="#6-new-函数" class="headerlink" title="6. __new__ 函数"></a>6. <code>__new__</code> 函数</h4><p><code>__new__()</code>函数是类创建对象时调用的内置函数，必须返回一个生成的对象，<br><code>__new__()</code>函数在<code>__init__()</code>函数之前执行。一般来说没有必要重载这个函数，除非需要更改new对象的流程,有一种场景“单例模式”要求只能存在一个class A的对象，如果重复创建，那么返回的已经创建过的对象的引用。可以这样使用<code>__new__</code>函数.<br>单例模式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">"_instance"</span> <span class="keyword">in</span> vars(cls):</div><div class="line">            cls._instance=super(A,cls).__new__(cls)</div><div class="line">        <span class="keyword">return</span> cls._instance</div><div class="line">a=A()</div><div class="line">b=A()</div><div class="line"><span class="keyword">print</span> id(a)==id(b)</div><div class="line">out&gt;&gt;<span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<h4 id="7-class-变量"><a href="#7-class-变量" class="headerlink" title="7. __class__ 变量"></a>7. <code>__class__</code> 变量</h4><p><code>instance.__class__</code>表示这个对象的类对象，但在python中，类也是一个对象,例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">12</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    ...:     <span class="keyword">pass</span></div><div class="line">    ...:</div><div class="line"></div><div class="line">In [<span class="number">13</span>]: a = A()</div><div class="line"></div><div class="line">In [<span class="number">14</span>]: B = a.__class__</div><div class="line"></div><div class="line">In [<span class="number">15</span>]: B</div><div class="line">Out[<span class="number">15</span>]: __main__.A</div><div class="line"></div><div class="line">In [<span class="number">16</span>]: b = B()</div><div class="line"></div><div class="line">In [<span class="number">17</span>]: print(type(b))</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">A</span>'&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看出，a是A类的一个对象，<code>a.__class__</code>就是A类，将这个类赋值给B，使用B()又可以创建出一个对象b，这个对象b也是A类的对象，这个<code>__class__</code>有什么用呢？请看下面的例子</p>
<h4 id="8-add-函数"><a href="#8-add-函数" class="headerlink" title="8. __add__ 函数"></a>8. <code>__add__</code> 函数</h4><p>这里其实包含一系列函数，包括<code>__sub__</code>，<code>__mul__</code>，<code>__mod__</code>，<code>__pow__</code>，<code>__xor__</code>,<br>这些函数是对加、减、乘、除、乘方、异或、等运算的重载，重写这些函数, 则我们自定义的对象可以具备运算功能.<br>下面我们就自定义了一个加法操作1+2=1+2*2=5<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,v)</span>:</span></div><div class="line">        self.v=v</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self,other)</span>:</span></div><div class="line">        <span class="comment">#创建创建一个新的对象</span></div><div class="line">        x=self.__class__(self.v + <span class="number">2</span>*other.v)</div><div class="line">        <span class="keyword">return</span> x</div><div class="line"></div><div class="line">a=A(<span class="number">1</span>)</div><div class="line">b=A(<span class="number">2</span>)</div><div class="line">c=a+b</div><div class="line"><span class="keyword">print</span> c.v</div><div class="line">ouot&gt;&gt;<span class="number">5</span></div></pre></td></tr></table></figure></p>
<h4 id="9-doc-文档字符串变量"><a href="#9-doc-文档字符串变量" class="headerlink" title="9. __doc__ 文档字符串变量"></a>9. <code>__doc__</code> 文档字符串变量</h4><p>python建议在定义一个类、模块、函数的时候定义一段说明文字，以便提取这些变量字符串,方便做成说明文档,例子如下：<br>调用别的模块、函数时如果不清楚使用方法，也可以直接查看doc文档字符串.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#c.py</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">script c's doc</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    class A's doc</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    function B's doc</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> __doc__</div><div class="line"><span class="keyword">print</span> A.__doc__</div><div class="line"><span class="keyword">print</span> B.__doc__</div><div class="line">out&gt;&gt;script c<span class="string">'s doc</span></div><div class="line"><span class="string">out&gt;&gt;class A'</span>s doc</div><div class="line">out&gt;&gt;function B<span class="string">'s doc</span></div></pre></td></tr></table></figure></p>
<h4 id="10-iter-函数-和-next-函数"><a href="#10-iter-函数-和-next-函数" class="headerlink" title="10. __iter__ 函数 和 __next__ 函数"></a>10. <code>__iter__</code> 函数 和 <code>__next__</code> 函数</h4><p>凡是可以被<code>for...in</code>的循环调用的对象，我们称之为可以被迭代的对象，list，str，tuple都可以被迭代，它们都实现了内部的迭代器函数，比如说list，tuple，字符串这些数据结构的迭代器如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">b=(<span class="string">'i'</span>,<span class="number">1</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="keyword">print</span> a.__iter__()</div><div class="line"><span class="keyword">print</span> b.__iter__()</div><div class="line">out&gt;&gt;&lt;listiterator object at <span class="number">0x0000000001CC7C50</span>&gt;</div><div class="line">out&gt;&gt;&lt;tupleiterator object at <span class="number">0x0000000001CC7B00</span>&gt;</div></pre></td></tr></table></figure></p>
<p>如果我们要实现一个我们自己的迭代器对象，那么我们必须实现两个默认的方法:<code>__iter__</code>和<code>__next__</code>。<br><code>__iter__()</code>函数将会返回一个迭代器对象，<code>__next__()</code>函数每次被调用都返回一个值，如果迭代完毕，则raise一个StopIteration的错误，用来终止迭代。<br>下面的例子将实现一个可以迭代的对象，输出a~z的26个字母，该对象接收一个int参数用来表示输出字母的数量，如果该参数超过字母表的长度，则循环从‘a-z’再次进行循环输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n)</span>:</span></div><div class="line">        self.stop=n</div><div class="line">        self.value=<span class="number">0</span></div><div class="line">        <span class="comment">#字母列表</span></div><div class="line">        self.alph=[chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>)]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment">#如果超过长度超过26则重置</span></div><div class="line">        <span class="keyword">if</span> self.value==len(self.alph):</div><div class="line">            self.value=<span class="number">0</span></div><div class="line">            self.stop=self.stop-len(self.alph)</div><div class="line">        <span class="comment">#最终，已完成n个字符的输出，则结束迭代</span></div><div class="line">        <span class="keyword">if</span> self.value&gt;self.stop:</div><div class="line">            <span class="keyword">raise</span> StopIteration    </div><div class="line">        x=self.alph[self.value]</div><div class="line">        self.value+=<span class="number">1</span></div><div class="line">        <span class="keyword">return</span> x</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A(<span class="number">1000</span>):</div><div class="line">    <span class="keyword">print</span> i,</div><div class="line">out&gt;&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f</div><div class="line"> g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k .....</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> <code>__next__</code>是python3中的, python2的是next()</p>
<h4 id="11-dict-变量-slot-变量-和-all-变量"><a href="#11-dict-变量-slot-变量-和-all-变量" class="headerlink" title="11. __dict__ 变量, __slot__ 变量 和 __all__ 变量"></a>11. <code>__dict__</code> 变量, <code>__slot__</code> 变量 和 <code>__all__</code> 变量</h4><p>这三个变量有一些关系，<code>__dict__</code>在类和对象中都存在，它是一个包含变量名和变量的字典，见以下的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#a.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    c=<span class="number">3</span></div><div class="line">    d=<span class="number">4</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a=<span class="number">1</span></div><div class="line">        self.b=<span class="number">2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> A().__dict__</div><div class="line"><span class="keyword">print</span> A.__dict__</div><div class="line"></div><div class="line">out&gt;&gt;&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div><div class="line">out&gt;&gt;&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'func'</span>: &lt;function func at <span class="number">0x00000000021F2BA8</span>&gt;, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'A'</span> objects&gt;, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'A'</span> objects&gt;, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__init__'</span>: &lt;function __init__ at <span class="number">0x00000000021F2AC8</span>&gt;&#125;</div></pre></td></tr></table></figure></p>
<p>一个对象的<code>__dict__</code>只包含self定义的变量，<br>一个类的<code>__dict__</code>包含了类里面的函数（func函数）、类变量，以及很多隐性的变量，包括<code>__dict__</code>变量本身也是隐性的。</p>
<p><code>__slot__</code>变量的用法理解起来比较要难一点，正常的情况下，我们实例化一个对象，可以给这个对象增加任意的成员变量，即使不在类里面定义的变量都可以.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#a.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a=<span class="number">1</span></div><div class="line">        self.b=<span class="number">2</span></div><div class="line"></div><div class="line">a=A()</div><div class="line"><span class="comment">#给a增加一个x变量</span></div><div class="line">a.x=<span class="number">1</span></div><div class="line"><span class="comment">#也可以给a增加一个匿名函数</span></div><div class="line">a.y=<span class="keyword">lambda</span> x,y:x*y</div><div class="line"><span class="keyword">print</span> a.x</div><div class="line"><span class="keyword">print</span> a.y(<span class="number">3</span>,<span class="number">5</span>)</div><div class="line">out&gt;&gt;<span class="number">1</span></div><div class="line">out&gt;&gt;<span class="number">15</span></div></pre></td></tr></table></figure></p>
<p>但如果我们想限制一下对象绑定的变量，我们可以在类定义的时候增加一个slots变量，这个变量是一个<strong>字符串元组</strong>，例子如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__=(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'x'</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a=<span class="number">1</span></div><div class="line">        self.b=<span class="number">2</span></div><div class="line"></div><div class="line">    <span class="comment">#__slots__=('a','b',)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">a=A()</div><div class="line">a.x=<span class="number">1</span></div><div class="line"><span class="comment">#执行到a.y时会报错：AttributeError: 'A' object has no attribute 'y'</span></div><div class="line">a.y=<span class="keyword">lambda</span> x,y:x*y</div><div class="line"><span class="keyword">print</span> a.y(<span class="number">3</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure></p>
<p><code>__all__</code>变量是一个字符串列表，<br>它定义了每一个模块会被<code>from module_name import *</code>这样的语句可以被import的内容（变量，类，函数）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#a.py 不定义__all__</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a=<span class="number">1</span></div><div class="line">        self.b=<span class="number">2</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">c=<span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment">#b.py</span></div><div class="line"><span class="keyword">from</span> a <span class="keyword">import</span> *</div><div class="line"><span class="keyword">print</span> A</div><div class="line"><span class="keyword">print</span> B</div><div class="line"><span class="keyword">print</span> c</div><div class="line">out&gt;&gt;&lt;<span class="class"><span class="keyword">class</span> '<span class="title">learn_draft</span>.<span class="title">A</span>'&gt;</span></div><div class="line"><span class="class"><span class="title">out</span>&gt;&gt;&lt;<span class="title">function</span> <span class="title">B</span> <span class="title">at</span> 0<span class="title">x00000000021D1438</span>&gt;</span></div><div class="line"><span class="class"><span class="title">out</span>&gt;&gt;10</span></div></pre></td></tr></table></figure></p>
<p>如果在a.py中定义<code>__all__=[&#39;A&#39;,&#39;c&#39;]</code>,则B函数对于b.py来说是不可见的</p>
<h4 id="12-hash-函数"><a href="#12-hash-函数" class="headerlink" title="12. __hash__ 函数"></a>12. <code>__hash__</code> 函数</h4><p>哈希函数，在python中的对象有一个hashable（可哈希）的概念.<br>对于数字、字符串、元组来说，是不可变的，也就是可哈希的，因此这些对象也可以作为字典的key值。<br>对于列表、字典等，是可变对象，因此是不可哈希的，也就不能作为字典的key值。<br>是否可哈希，可以调用内置函数<code>hash()</code>进行计算，<code>hash()</code>函数返回计算的到的hash值。<br>完全相同的变量，调用哈希算法的到的hash值一定是相同的</p>
<p>当然一般来说，我们不会去重新定义一个对象的<code>__hash__</code>函数，除非我们想实现一个自定义的需求，<br>在stackoverflow有人提出这样一个需求，需要判断有相同词频的字符串是相等的，也就是说“abb”和“bab”这样的字符串是相等的，这个时候我们可以继承字符串类，然后重写哈希函数，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> collections</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrequencyString</span><span class="params">(str)</span>:</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normalized</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self._normalized</div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            self._normalized = normalized = <span class="string">''</span>.join(sorted(collections.Counter(self).elements()))</div><div class="line">            <span class="keyword">return</span> normalized</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.normalized == other.normalized</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> hash(self.normalized)</div></pre></td></tr></table></figure></p>
<h4 id="13-getattr-函数和-setattr-函数，-delattr-函数"><a href="#13-getattr-函数和-setattr-函数，-delattr-函数" class="headerlink" title="13. __getattr__ 函数和__setattr__ 函数，__delattr__ 函数"></a>13. <code>__getattr__</code> 函数和<code>__setattr__</code> 函数，<code>__delattr__</code> 函数</h4><p>先介绍两个内置函数，<code>getattr()</code>和<code>setattr()</code>,使用这两个函数可以获取对象的属性，或者给对象的属性赋值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#a.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a=<span class="number">1</span></div><div class="line">        self.b=<span class="number">2</span></div><div class="line">a=A()</div><div class="line">setattr(a,<span class="string">'a'</span>,<span class="number">3</span>)</div><div class="line"><span class="keyword">print</span> a.a</div><div class="line"><span class="keyword">print</span> getattr(a,<span class="string">'b'</span>)</div><div class="line">out&gt;&gt;<span class="number">3</span></div><div class="line">out&gt;&gt;<span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>其实使用这两个函数和直接访问<code>a.a</code>, <code>a.b</code>没有任何区别，但好处是setattr和getattr接受两个字符串去确定访问对象a的哪一个属性，和<code>__import__</code>一样，可以在运行时在决定去访问对象变量的名字，在实际工作中经常会使用这两个函数。</p>
<p><code>__getattr__()</code>这个函数是在访问对象不存在的成员变量是才会访问的，见下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a=<span class="number">1</span></div><div class="line">        self.b=<span class="number">2</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self,name)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'getattr'</span></div><div class="line">        <span class="keyword">return</span> self.a</div><div class="line"></div><div class="line">a=A()</div><div class="line"><span class="keyword">print</span> a.d</div><div class="line">out&gt;&gt;getattr</div><div class="line">out&gt;&gt;<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>在调用a.d时，d不是a的成员变量，则python会去查找对象是否存在<code>__getattr__()</code>函数，如果存在，则返回<code>__getattr__()</code>函数的返回值，我们这里返回的是self.a的值1。</p>
<p>由于<code>__getattr__()</code>的特性，我们可以将<code>__getattr__()</code>设计成一个公共的接口函数，在autotest的<code>proxy.py</code>中就看到了这样的用法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceProxy</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, serviceURL, serviceName=None, headers=None)</span>:</span></div><div class="line">    self.__serviceURL = serviceURL</div><div class="line">    self.__serviceName = serviceName</div><div class="line">    self.__headers = headers <span class="keyword">or</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.__serviceName <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        name = <span class="string">"%s.%s"</span> % (self.__serviceName, name)</div><div class="line">    <span class="keyword">return</span> ServiceProxy(self.__serviceURL, name, self.__headers)</div><div class="line"></div><div class="line"><span class="comment">#调用的时候，op是执行的特定操作的字符串，op传入__getattr__将会把ServiceProxy对象重新的内部变量重新赋值，然后返回一个更新之后的对象</span></div><div class="line">function = getattr(self.proxy, op)</div></pre></td></tr></table></figure></p>
<p><code>__setattr__</code>和<code>__getattr__</code>不一样，对象的所有属性赋值，都会经过<code>__setattr__()</code>函数，看下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a=<span class="number">1</span></div><div class="line">        self.b=<span class="number">2</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self,name)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'getattr'</span></div><div class="line">        <span class="keyword">return</span> self.a</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'setattr %s'</span> % name</div><div class="line">        <span class="keyword">if</span> name == <span class="string">'f'</span>:</div><div class="line">            <span class="keyword">return</span> object.__setattr__(self,name,value+<span class="number">1000</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> object.__setattr__(self,  name, value)</div><div class="line"></div><div class="line">a=A()</div><div class="line">a.f=<span class="number">1000</span></div><div class="line"><span class="keyword">print</span> a.f</div><div class="line">out&gt;&gt;setattr a</div><div class="line">out&gt;&gt;setattr b</div><div class="line">out&gt;&gt;setattr f</div><div class="line">out&gt;&gt;<span class="number">2000</span></div></pre></td></tr></table></figure></p>
<p>从输出可以看到init函数的self.a和self.b的赋值也经过了<code>__setattr__</code>，而且在赋值的时候我们自定义了一个if逻辑，如果name是‘f’，那么value会增加1000，最终的a.f是2000</p>
<p><code>__delattr__</code>是删除一个对象属性用的。</p>
<h4 id="14-call-函数"><a href="#14-call-函数" class="headerlink" title="14. __call__ 函数"></a>14. <code>__call__</code> 函数</h4><p>如果一个对象实现了<code>__call__()</code>函数，那么这个对象可以认为是一个函数对象，使用加括号的方法就可以调用，见下面例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.li=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,n)</span>:</span></div><div class="line">        <span class="comment">#返回li列表的第n个元素</span></div><div class="line">        <span class="keyword">return</span> self.li[n]</div><div class="line"></div><div class="line">a=A()</div><div class="line"><span class="comment">#a可以当做函数一样调用</span></div><div class="line"><span class="keyword">print</span> a(<span class="number">0</span>),a(<span class="number">1</span>),a(<span class="number">2</span>)</div><div class="line">out&gt;&gt;a b c</div></pre></td></tr></table></figure></p>
<p>在实际工作中<code>__call__</code>函数非常有用，可以把一个对象变成callable的对象.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.jianshu.com/p/1112320c5784" target="_blank" rel="external">http://www.jianshu.com/p/1112320c5784</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之Pandas入门]]></title>
      <url>http://arvin-he.github.io/2017/06/08/python-pandas-2017-06-08/</url>
      <content type="html"><![CDATA[<p>这是一个简短的为新手入门的pandas教程,更高级的用法请查看<a href="http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook" target="_blank" rel="external">ccokbook</a><br>这里安装numpy, mayplotlit 和 pandas省略.首先导入如下包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">In [<span class="number">3</span>]: <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div></pre></td></tr></table></figure></p>
<h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><p>传递一个list来创建一个 Series 对象, pandas会自动创建索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">4</span>]: s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.nan, <span class="number">6</span>, <span class="number">8</span>])</div><div class="line"></div><div class="line">In [<span class="number">5</span>]: s</div><div class="line">Out[<span class="number">5</span>]:</div><div class="line"><span class="number">0</span>    <span class="number">1.0</span></div><div class="line"><span class="number">1</span>    <span class="number">3.0</span></div><div class="line"><span class="number">2</span>    <span class="number">5.0</span></div><div class="line"><span class="number">3</span>    NaN</div><div class="line"><span class="number">4</span>    <span class="number">6.0</span></div><div class="line"><span class="number">5</span>    <span class="number">8.0</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure></p>
<p>传递一个numpy的array创建一个DataFrame对象, 同时以datetime为索引和带label的列<br>DataFrame 是有多个列的数据表，每个列拥有一个 label，当然，DataFrame 也有索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建datetime索引</span></div><div class="line">In [<span class="number">6</span>]: dates = pd.date_range(<span class="string">'20170608'</span>, periods=<span class="number">6</span>)</div><div class="line"></div><div class="line">In [<span class="number">7</span>]: dates</div><div class="line">Out[<span class="number">7</span>]:</div><div class="line">DatetimeIndex([<span class="string">'2017-06-08'</span>, <span class="string">'2017-06-09'</span>, <span class="string">'2017-06-10'</span>, <span class="string">'2017-06-11'</span>,</div><div class="line">               <span class="string">'2017-06-12'</span>, <span class="string">'2017-06-13'</span>],</div><div class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</div><div class="line"></div><div class="line">In [<span class="number">8</span>]: df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=list(<span class="string">'ABCD'</span>))</div><div class="line"></div><div class="line">In [<span class="number">9</span>]: df</div><div class="line">Out[<span class="number">9</span>]:</div><div class="line">                   A         B         C         D</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.561773</span>  <span class="number">0.881191</span> <span class="number">-2.697783</span> <span class="number">-0.034672</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.053409</span>  <span class="number">0.814811</span>  <span class="number">0.294231</span> <span class="number">-1.753744</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.699722</span>  <span class="number">0.971518</span> <span class="number">-2.592852</span>  <span class="number">1.088473</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.411028</span>  <span class="number">0.312229</span> <span class="number">-1.879164</span>  <span class="number">1.388484</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.173929</span> <span class="number">-0.572149</span>  <span class="number">2.044024</span> <span class="number">-0.101223</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span> <span class="number">-0.906777</span> <span class="number">-0.207889</span> <span class="number">-0.776134</span>  <span class="number">2.327599</span></div></pre></td></tr></table></figure></p>
<p>传递一个dict来创建一个DataFrame, 每个 dict 的 value 会被转化成一个 Series,<br>可以认为，DataFrame 是由多个 Series 组成的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">10</span>]: df2 = pd.DataFrame(&#123;</div><div class="line">    ...: <span class="string">'A'</span>: <span class="number">1.</span>,</div><div class="line">    ...: <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20170608'</span>),</div><div class="line">    ...: <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)), dtype=<span class="string">'float32'</span>),</div><div class="line">    ...: <span class="string">'D'</span>: np.array([<span class="number">3</span>]*<span class="number">4</span>, dtype=<span class="string">'int32'</span>),</div><div class="line">    ...: <span class="string">'E'</span>: pd.Categorical([<span class="string">'test'</span>, <span class="string">'train'</span>, <span class="string">'test'</span>, <span class="string">'train'</span>]),</div><div class="line">    ...: <span class="string">'F'</span>: <span class="string">'foo'</span>&#125;)</div><div class="line"></div><div class="line">In [<span class="number">11</span>]: df2</div><div class="line">Out[<span class="number">11</span>]:</div><div class="line">     A          B    C  D      E    F</div><div class="line"><span class="number">0</span>  <span class="number">1.0</span> <span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">1.0</span>  <span class="number">3</span>   test  foo</div><div class="line"><span class="number">1</span>  <span class="number">1.0</span> <span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">1.0</span>  <span class="number">3</span>  train  foo</div><div class="line"><span class="number">2</span>  <span class="number">1.0</span> <span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">1.0</span>  <span class="number">3</span>   test  foo</div><div class="line"><span class="number">3</span>  <span class="number">1.0</span> <span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">1.0</span>  <span class="number">3</span>  train  foo</div></pre></td></tr></table></figure></p>
<p>每列数据的格式用 dtypes 查看<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">12</span>]: df2.dtypes</div><div class="line">Out[<span class="number">12</span>]:</div><div class="line">A           float64</div><div class="line">B    datetime64[ns]</div><div class="line">C           float32</div><div class="line">D             int32</div><div class="line">E          category</div><div class="line">F            object</div><div class="line">dtype: object</div></pre></td></tr></table></figure></p>
<h3 id="数据查看"><a href="#数据查看" class="headerlink" title="数据查看"></a>数据查看</h3><p>查看指定列的数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">15</span>]: df2.A</div><div class="line">Out[<span class="number">15</span>]:</div><div class="line"><span class="number">0</span>    <span class="number">1.0</span></div><div class="line"><span class="number">1</span>    <span class="number">1.0</span></div><div class="line"><span class="number">2</span>    <span class="number">1.0</span></div><div class="line"><span class="number">3</span>    <span class="number">1.0</span></div><div class="line">Name: A, dtype: float64</div></pre></td></tr></table></figure></p>
<p>用 head 和 tail 查看顶端和底端的几列, <code>head()</code>和<code>tail()</code>函数默认值都是5<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">16</span>]: df.head()                                 </div><div class="line">Out[<span class="number">16</span>]:                                           </div><div class="line">                   A         B         C         D </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.561773</span>  <span class="number">0.881191</span> <span class="number">-2.697783</span> <span class="number">-0.034672</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.053409</span>  <span class="number">0.814811</span>  <span class="number">0.294231</span> <span class="number">-1.753744</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.699722</span>  <span class="number">0.971518</span> <span class="number">-2.592852</span>  <span class="number">1.088473</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.411028</span>  <span class="number">0.312229</span> <span class="number">-1.879164</span>  <span class="number">1.388484</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.173929</span> <span class="number">-0.572149</span>  <span class="number">2.044024</span> <span class="number">-0.101223</span> </div><div class="line">                                                   </div><div class="line">In [<span class="number">17</span>]: df.tail(<span class="number">3</span>)                                </div><div class="line">Out[<span class="number">17</span>]:                                           </div><div class="line">                   A         B         C         D </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.411028</span>  <span class="number">0.312229</span> <span class="number">-1.879164</span>  <span class="number">1.388484</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.173929</span> <span class="number">-0.572149</span>  <span class="number">2.044024</span> <span class="number">-0.101223</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span> <span class="number">-0.906777</span> <span class="number">-0.207889</span> <span class="number">-0.776134</span>  <span class="number">2.327599</span> </div><div class="line">                                                   </div><div class="line">In [<span class="number">18</span>]: df.head(<span class="number">2</span>)                                </div><div class="line">Out[<span class="number">18</span>]:                                           </div><div class="line">                   A         B         C         D </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.561773</span>  <span class="number">0.881191</span> <span class="number">-2.697783</span> <span class="number">-0.034672</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.053409</span>  <span class="number">0.814811</span>  <span class="number">0.294231</span> <span class="number">-1.753744</span> </div><div class="line">                                                   </div><div class="line">In [<span class="number">19</span>]: df.tail()                                 </div><div class="line">Out[<span class="number">19</span>]:                                           </div><div class="line">                   A         B         C         D </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.053409</span>  <span class="number">0.814811</span>  <span class="number">0.294231</span> <span class="number">-1.753744</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.699722</span>  <span class="number">0.971518</span> <span class="number">-2.592852</span>  <span class="number">1.088473</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.411028</span>  <span class="number">0.312229</span> <span class="number">-1.879164</span>  <span class="number">1.388484</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.173929</span> <span class="number">-0.572149</span>  <span class="number">2.044024</span> <span class="number">-0.101223</span> </div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span> <span class="number">-0.906777</span> <span class="number">-0.207889</span> <span class="number">-0.776134</span>  <span class="number">2.327599</span></div></pre></td></tr></table></figure></p>
<p>单独查看 index 和 columns 和 数据, DataFrame 内部用 numpy 格式存储数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">20</span>]: df.index</div><div class="line">Out[<span class="number">20</span>]:</div><div class="line">DatetimeIndex([<span class="string">'2017-06-08'</span>, <span class="string">'2017-06-09'</span>, <span class="string">'2017-06-10'</span>, <span class="string">'2017-06-11'</span>,</div><div class="line">               <span class="string">'2017-06-12'</span>, <span class="string">'2017-06-13'</span>],</div><div class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</div><div class="line"></div><div class="line">In [<span class="number">21</span>]: df.columns</div><div class="line">Out[<span class="number">21</span>]: Index([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>], dtype=<span class="string">'object'</span>)</div><div class="line"></div><div class="line">In [<span class="number">22</span>]: df.values</div><div class="line">Out[<span class="number">22</span>]:</div><div class="line">array([[<span class="number">-0.56177253</span>,  <span class="number">0.88119144</span>, <span class="number">-2.6977834</span> , <span class="number">-0.03467225</span>],</div><div class="line">       [<span class="number">-0.05340873</span>,  <span class="number">0.81481114</span>,  <span class="number">0.29423114</span>, <span class="number">-1.75374372</span>],</div><div class="line">       [<span class="number">-1.69972161</span>,  <span class="number">0.97151768</span>, <span class="number">-2.59285248</span>,  <span class="number">1.08847275</span>],</div><div class="line">       [<span class="number">-2.41102846</span>,  <span class="number">0.3122287</span> , <span class="number">-1.87916396</span>,  <span class="number">1.38848363</span>],</div><div class="line">       [<span class="number">-0.17392908</span>, <span class="number">-0.57214913</span>,  <span class="number">2.04402398</span>, <span class="number">-0.10122313</span>],</div><div class="line">       [<span class="number">-0.90677665</span>, <span class="number">-0.20788934</span>, <span class="number">-0.77613381</span>,  <span class="number">2.32759919</span>]])</div></pre></td></tr></table></figure></p>
<p>describe() 显示数据的概要。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">23</span>]: df.describe()</div><div class="line">Out[<span class="number">23</span>]:</div><div class="line">              A         B         C         D</div><div class="line">count  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span></div><div class="line">mean  <span class="number">-0.967773</span>  <span class="number">0.366618</span> <span class="number">-0.934613</span>  <span class="number">0.485819</span></div><div class="line">std    <span class="number">0.922339</span>  <span class="number">0.639667</span>  <span class="number">1.852466</span>  <span class="number">1.428378</span></div><div class="line">min   <span class="number">-2.411028</span> <span class="number">-0.572149</span> <span class="number">-2.697783</span> <span class="number">-1.753744</span></div><div class="line"><span class="number">25</span>%   <span class="number">-1.501485</span> <span class="number">-0.077860</span> <span class="number">-2.414430</span> <span class="number">-0.084585</span></div><div class="line"><span class="number">50</span>%   <span class="number">-0.734275</span>  <span class="number">0.563520</span> <span class="number">-1.327649</span>  <span class="number">0.526900</span></div><div class="line"><span class="number">75</span>%   <span class="number">-0.270890</span>  <span class="number">0.864596</span>  <span class="number">0.026640</span>  <span class="number">1.313481</span></div><div class="line">max   <span class="number">-0.053409</span>  <span class="number">0.971518</span>  <span class="number">2.044024</span>  <span class="number">2.327599</span></div></pre></td></tr></table></figure></p>
<p>和 numpy 一样，可以方便的得到转置,就是行列转换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">24</span>]: df.T</div><div class="line">Out[<span class="number">24</span>]:</div><div class="line">   <span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">2017</span><span class="number">-06</span><span class="number">-09</span>  <span class="number">2017</span><span class="number">-06</span><span class="number">-10</span>  <span class="number">2017</span><span class="number">-06</span><span class="number">-11</span>  <span class="number">2017</span><span class="number">-06</span><span class="number">-12</span>  <span class="number">2017</span><span class="number">-06</span><span class="number">-13</span></div><div class="line">A   <span class="number">-0.561773</span>   <span class="number">-0.053409</span>   <span class="number">-1.699722</span>   <span class="number">-2.411028</span>   <span class="number">-0.173929</span>   <span class="number">-0.906777</span></div><div class="line">B    <span class="number">0.881191</span>    <span class="number">0.814811</span>    <span class="number">0.971518</span>    <span class="number">0.312229</span>   <span class="number">-0.572149</span>   <span class="number">-0.207889</span></div><div class="line">C   <span class="number">-2.697783</span>    <span class="number">0.294231</span>   <span class="number">-2.592852</span>   <span class="number">-1.879164</span>    <span class="number">2.044024</span>   <span class="number">-0.776134</span></div><div class="line">D   <span class="number">-0.034672</span>   <span class="number">-1.753744</span>    <span class="number">1.088473</span>    <span class="number">1.388484</span>   <span class="number">-0.101223</span>    <span class="number">2.327599</span></div></pre></td></tr></table></figure></p>
<p>对 axis 按照 index 排序（axis=1 是指根据列名来排序, axis=0 是根据行名来排序）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">26</span>]: df.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>)</div><div class="line">Out[<span class="number">26</span>]:</div><div class="line">                   D         C         B         A</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.034672</span> <span class="number">-2.697783</span>  <span class="number">0.881191</span> <span class="number">-0.561773</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-1.753744</span>  <span class="number">0.294231</span>  <span class="number">0.814811</span> <span class="number">-0.053409</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span>  <span class="number">1.088473</span> <span class="number">-2.592852</span>  <span class="number">0.971518</span> <span class="number">-1.699722</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span>  <span class="number">1.388484</span> <span class="number">-1.879164</span>  <span class="number">0.312229</span> <span class="number">-2.411028</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.101223</span>  <span class="number">2.044024</span> <span class="number">-0.572149</span> <span class="number">-0.173929</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>  <span class="number">2.327599</span> <span class="number">-0.776134</span> <span class="number">-0.207889</span> <span class="number">-0.906777</span></div></pre></td></tr></table></figure></p>
<p>按值排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">30</span>]: df.sort_values(by=<span class="string">'B'</span>)</div><div class="line">Out[<span class="number">30</span>]:</div><div class="line">                   A         B         C         D</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.173929</span> <span class="number">-0.572149</span>  <span class="number">2.044024</span> <span class="number">-0.101223</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span> <span class="number">-0.906777</span> <span class="number">-0.207889</span> <span class="number">-0.776134</span>  <span class="number">2.327599</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.411028</span>  <span class="number">0.312229</span> <span class="number">-1.879164</span>  <span class="number">1.388484</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.053409</span>  <span class="number">0.814811</span>  <span class="number">0.294231</span> <span class="number">-1.753744</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.561773</span>  <span class="number">0.881191</span> <span class="number">-2.697783</span> <span class="number">-0.034672</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.699722</span>  <span class="number">0.971518</span> <span class="number">-2.592852</span>  <span class="number">1.088473</span></div></pre></td></tr></table></figure></p>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p><strong>注意:</strong> 以下这些对交互式环境很友好，但是作为 production code 请用优化过的 <code>.at, .iat, .loc, .iloc, .ix</code>等.</p>
<p>获取行/列<br>从 DataFrame 选择一个列，就得到了 Series<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">31</span>]: df[<span class="string">'A'</span>]</div><div class="line">Out[<span class="number">31</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>   <span class="number">-0.561773</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span>   <span class="number">-0.053409</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span>   <span class="number">-1.699722</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span>   <span class="number">-2.411028</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span>   <span class="number">-0.173929</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>   <span class="number">-0.906777</span></div><div class="line">Freq: D, Name: A, dtype: float64</div></pre></td></tr></table></figure></p>
<p>使用[] 对行切片<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">35</span>]: df[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">Out[<span class="number">35</span>]:</div><div class="line">                   A         B         C         D</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.561773</span>  <span class="number">0.881191</span> <span class="number">-2.697783</span> <span class="number">-0.034672</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.053409</span>  <span class="number">0.814811</span>  <span class="number">0.294231</span> <span class="number">-1.753744</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.699722</span>  <span class="number">0.971518</span> <span class="number">-2.592852</span>  <span class="number">1.088473</span></div></pre></td></tr></table></figure></p>
<p>通过标签选择<br>通过时间戳的下标（dates[0] = Timestamp(‘20130101’)）来访问<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">36</span>]: df.loc[dates[<span class="number">1</span>]]</div><div class="line">Out[<span class="number">36</span>]:</div><div class="line">A   <span class="number">-0.053409</span></div><div class="line">B    <span class="number">0.814811</span></div><div class="line">C    <span class="number">0.294231</span></div><div class="line">D   <span class="number">-1.753744</span></div><div class="line">Name: <span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</div></pre></td></tr></table></figure></p>
<p>选择多个标签<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">38</span>]: df.loc[:,[<span class="string">'A'</span>, <span class="string">'B'</span>]]</div><div class="line">Out[<span class="number">38</span>]:</div><div class="line">                   A         B</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.561773</span>  <span class="number">0.881191</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.053409</span>  <span class="number">0.814811</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.699722</span>  <span class="number">0.971518</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.411028</span>  <span class="number">0.312229</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.173929</span> <span class="number">-0.572149</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span> <span class="number">-0.906777</span> <span class="number">-0.207889</span></div></pre></td></tr></table></figure></p>
<p>注意那个冒号，用法和 MATLAB 或 NumPy 是一样的！所以也可以这样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">39</span>]: df.loc[dates[<span class="number">0</span>]:dates[<span class="number">2</span>], [<span class="string">'A'</span>, <span class="string">'B'</span>]]</div><div class="line">Out[<span class="number">39</span>]:</div><div class="line">                   A         B</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.561773</span>  <span class="number">0.881191</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.053409</span>  <span class="number">0.814811</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.699722</span>  <span class="number">0.971518</span></div></pre></td></tr></table></figure></p>
<p>依旧和 MATLAB 一样，当有一个维度是标量（而不是范围或序列）的时候，选择出的矩阵维度会减少<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">40</span>]: df.loc[dates[<span class="number">0</span>], [<span class="string">'A'</span>, <span class="string">'B'</span>]]</div><div class="line">Out[<span class="number">40</span>]:</div><div class="line">A   <span class="number">-0.561773</span></div><div class="line">B    <span class="number">0.881191</span></div><div class="line">Name: <span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</div></pre></td></tr></table></figure></p>
<p>如果对所有的维度都写了标量，不就是选出一个元素吗？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">41</span>]: df.loc[dates[<span class="number">0</span>], <span class="string">'A'</span>]</div><div class="line">Out[<span class="number">41</span>]: <span class="number">-0.56177252662051747</span></div></pre></td></tr></table></figure></p>
<p>这种情况通常用 at ，速度更快<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">42</span>]: df.at[dates[<span class="number">0</span>], <span class="string">'A'</span>]</div><div class="line">Out[<span class="number">42</span>]: <span class="number">-0.56177252662051747</span></div></pre></td></tr></table></figure></p>
<p>通过位置选择,即整数下标选择, 和 MATLAB 完全一样<br>这个就和数组类似啦，直接看例子。选出第4行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">43</span>]: df.iloc[<span class="number">3</span>]</div><div class="line">Out[<span class="number">43</span>]:</div><div class="line">A   <span class="number">-2.411028</span></div><div class="line">B    <span class="number">0.312229</span></div><div class="line">C   <span class="number">-1.879164</span></div><div class="line">D    <span class="number">1.388484</span></div><div class="line">Name: <span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</div></pre></td></tr></table></figure></p>
<p>选出3~4行，0~1列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">45</span>]: df.iloc[<span class="number">3</span>:<span class="number">5</span>, <span class="number">0</span>:<span class="number">2</span>]</div><div class="line">Out[<span class="number">45</span>]:</div><div class="line">                   A         B</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.411028</span>  <span class="number">0.312229</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.173929</span> <span class="number">-0.572149</span></div></pre></td></tr></table></figure></p>
<p>也能用 list 选择, 挑出指定行和列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">46</span>]: df.iloc[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">3</span>]]</div><div class="line">Out[<span class="number">46</span>]:</div><div class="line">                   A         D</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.053409</span> <span class="number">-1.753744</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.699722</span>  <span class="number">1.088473</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.173929</span> <span class="number">-0.101223</span></div></pre></td></tr></table></figure></p>
<p>也可以用slice<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">47</span>]: df.iloc[<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">3</span>]</div><div class="line">Out[<span class="number">47</span>]:</div><div class="line">                   B         C</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span>  <span class="number">0.814811</span>  <span class="number">0.294231</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span>  <span class="number">0.971518</span> <span class="number">-2.592852</span></div></pre></td></tr></table></figure></p>
<p>选择单个元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">48</span>]: df.iloc[<span class="number">0</span>,<span class="number">0</span>]</div><div class="line">Out[<span class="number">48</span>]: <span class="number">-0.56177252662051747</span></div><div class="line"></div><div class="line">In [<span class="number">49</span>]: df.iat[<span class="number">0</span>,<span class="number">0</span>]</div><div class="line">Out[<span class="number">49</span>]: <span class="number">-0.56177252662051747</span></div></pre></td></tr></table></figure></p>
<h3 id="布尔值索引"><a href="#布尔值索引" class="headerlink" title="布尔值索引"></a>布尔值索引</h3><p>根据单列的值来选择数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">7</span>]: df[df.A &gt; <span class="number">0</span>]</div><div class="line">Out[<span class="number">7</span>]:</div><div class="line">                   A         B         C        D</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>  <span class="number">0.909448</span> <span class="number">-0.302722</span> <span class="number">-2.198783</span> <span class="number">-0.47542</span></div></pre></td></tr></table></figure></p>
<p>从DataFrame中选择符合条件的值, 其中不符合条件的用NaN填充<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">8</span>]: df[df &gt; <span class="number">0</span>]</div><div class="line">Out[<span class="number">8</span>]:</div><div class="line">                   A         B         C         D</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>       NaN       NaN       NaN       NaN</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span>       NaN  <span class="number">1.297100</span>       NaN  <span class="number">0.231742</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span>       NaN  <span class="number">2.380203</span>       NaN       NaN</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span>       NaN  <span class="number">2.262221</span>  <span class="number">1.135382</span>  <span class="number">1.166144</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span>       NaN       NaN       NaN       NaN</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>  <span class="number">0.909448</span>       NaN       NaN       NaN</div></pre></td></tr></table></figure></p>
<p>isin() 函数：是否在集合中, 用来过滤数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">9</span>]: df2 = df.copy()</div><div class="line"></div><div class="line">In [<span class="number">10</span>]: df2[<span class="string">'E'</span>] = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'three'</span>, <span class="string">'one'</span>]</div><div class="line"></div><div class="line">In [<span class="number">11</span>]: df2</div><div class="line">Out[<span class="number">11</span>]:</div><div class="line">                   A         B         C         D      E</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.993188</span> <span class="number">-0.098497</span> <span class="number">-0.898984</span> <span class="number">-0.060261</span>    one</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span>  <span class="number">1.297100</span> <span class="number">-0.161798</span>  <span class="number">0.231742</span>    two</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.792578</span>  <span class="number">2.380203</span> <span class="number">-0.116943</span> <span class="number">-1.486425</span>  three</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.126554</span>  <span class="number">2.262221</span>  <span class="number">1.135382</span>  <span class="number">1.166144</span>   four</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.421283</span> <span class="number">-1.725798</span> <span class="number">-0.588929</span> <span class="number">-0.191101</span>  three</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>  <span class="number">0.909448</span> <span class="number">-0.302722</span> <span class="number">-2.198783</span> <span class="number">-0.475420</span>    one</div><div class="line"></div><div class="line">In [<span class="number">12</span>]: df2[df2[<span class="string">'E'</span>].isin([<span class="string">'two'</span>, <span class="string">'four'</span>])]</div><div class="line">Out[<span class="number">12</span>]:</div><div class="line">                   A         B         C         D     E</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span>  <span class="number">1.297100</span> <span class="number">-0.161798</span>  <span class="number">0.231742</span>   two</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.126554</span>  <span class="number">2.262221</span>  <span class="number">1.135382</span>  <span class="number">1.166144</span>  four</div></pre></td></tr></table></figure></p>
<h3 id="设置-setting"><a href="#设置-setting" class="headerlink" title="设置 setting"></a>设置 setting</h3><p>为 DataFrame 增加新的列，按 index 对应<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">13</span>]: s1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], index=pd.date_range(<span class="string">'20170608'</span>, periods=<span class="number">6</span>))</div><div class="line"></div><div class="line">In [<span class="number">14</span>]: s1</div><div class="line">Out[<span class="number">14</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>    <span class="number">1</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span>    <span class="number">2</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span>    <span class="number">3</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span>    <span class="number">4</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span>    <span class="number">5</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>    <span class="number">6</span></div><div class="line">Freq: D, dtype: int64</div><div class="line"></div><div class="line">In [<span class="number">15</span>]: df[<span class="string">'F'</span>] = s1</div><div class="line"></div><div class="line">In [<span class="number">16</span>]: df</div><div class="line">Out[<span class="number">16</span>]:</div><div class="line">                   A         B         C         D  F</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span> <span class="number">-0.993188</span> <span class="number">-0.098497</span> <span class="number">-0.898984</span> <span class="number">-0.060261</span>  <span class="number">1</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span>  <span class="number">1.297100</span> <span class="number">-0.161798</span>  <span class="number">0.231742</span>  <span class="number">2</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.792578</span>  <span class="number">2.380203</span> <span class="number">-0.116943</span> <span class="number">-1.486425</span>  <span class="number">3</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.126554</span>  <span class="number">2.262221</span>  <span class="number">1.135382</span>  <span class="number">1.166144</span>  <span class="number">4</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.421283</span> <span class="number">-1.725798</span> <span class="number">-0.588929</span> <span class="number">-0.191101</span>  <span class="number">5</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>  <span class="number">0.909448</span> <span class="number">-0.302722</span> <span class="number">-2.198783</span> <span class="number">-0.475420</span>  <span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>通过label, 下标和numpy数组设置值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 通过label设置值</span></div><div class="line">In [<span class="number">17</span>]: df.at[dates[<span class="number">0</span>], <span class="string">'A'</span>] = <span class="number">0</span></div><div class="line"><span class="comment"># 通过下标设置值</span></div><div class="line">In [<span class="number">19</span>]: df.iat[<span class="number">0</span>,<span class="number">1</span>] = <span class="number">0</span></div><div class="line"><span class="comment"># 用 numpy 数组设置值</span></div><div class="line">In [<span class="number">21</span>]: df.loc[:, <span class="string">'D'</span>] = np.array([<span class="number">5</span>] * len(df))</div><div class="line">In [<span class="number">23</span>]: df</div><div class="line"></div><div class="line">Out[<span class="number">23</span>]:</div><div class="line">                   A         B         C  D  F</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-0.898984</span>  <span class="number">5</span>  <span class="number">1</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span>  <span class="number">1.297100</span> <span class="number">-0.161798</span>  <span class="number">5</span>  <span class="number">2</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.792578</span>  <span class="number">2.380203</span> <span class="number">-0.116943</span>  <span class="number">5</span>  <span class="number">3</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.126554</span>  <span class="number">2.262221</span>  <span class="number">1.135382</span>  <span class="number">5</span>  <span class="number">4</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.421283</span> <span class="number">-1.725798</span> <span class="number">-0.588929</span>  <span class="number">5</span>  <span class="number">5</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>  <span class="number">0.909448</span> <span class="number">-0.302722</span> <span class="number">-2.198783</span>  <span class="number">5</span>  <span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>通过布尔值设置值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">28</span>]: df[df&gt;<span class="number">0</span>] = -df</div><div class="line"></div><div class="line">In [<span class="number">29</span>]: df</div><div class="line">Out[<span class="number">29</span>]:</div><div class="line">                   A         B         C  D  F</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-0.898984</span> <span class="number">-5</span> <span class="number">-1</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span> <span class="number">-1.297100</span> <span class="number">-0.161798</span> <span class="number">-5</span> <span class="number">-2</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.792578</span> <span class="number">-2.380203</span> <span class="number">-0.116943</span> <span class="number">-5</span> <span class="number">-3</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.126554</span> <span class="number">-2.262221</span> <span class="number">-1.135382</span> <span class="number">-5</span> <span class="number">-4</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.421283</span> <span class="number">-1.725798</span> <span class="number">-0.588929</span> <span class="number">-5</span> <span class="number">-5</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span> <span class="number">-0.909448</span> <span class="number">-0.302722</span> <span class="number">-2.198783</span> <span class="number">-5</span> <span class="number">-6</span></div></pre></td></tr></table></figure></p>
<h3 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h3><p>pandas 用 np.nan 表示缺失值。通常它不会被计算。<br>Reindexing 允许你改变/增加/删除 指定轴的index, 并返回数据的拷贝<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">30</span>]: df1 = df.reindex(index=dates[<span class="number">0</span>:<span class="number">4</span>], columns=list(df.columns) + [<span class="string">'E'</span>])</div><div class="line"></div><div class="line">In [<span class="number">31</span>]: df1.loc[dates[<span class="number">0</span>]:dates[<span class="number">1</span>], <span class="string">'E'</span>] = <span class="number">1</span></div><div class="line"></div><div class="line">In [<span class="number">32</span>]: df1</div><div class="line">Out[<span class="number">32</span>]:</div><div class="line">                   A         B         C  D  F    E</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-0.898984</span> <span class="number">-5</span> <span class="number">-1</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span> <span class="number">-1.297100</span> <span class="number">-0.161798</span> <span class="number">-5</span> <span class="number">-2</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.792578</span> <span class="number">-2.380203</span> <span class="number">-0.116943</span> <span class="number">-5</span> <span class="number">-3</span>  NaN</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.126554</span> <span class="number">-2.262221</span> <span class="number">-1.135382</span> <span class="number">-5</span> <span class="number">-4</span>  NaN</div></pre></td></tr></table></figure></p>
<p>丢弃有NaN的行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">33</span>]: df1.dropna()  <span class="comment"># 或者 df1.dropna(how='any')</span></div><div class="line">Out[<span class="number">33</span>]:</div><div class="line">                   A       B         C  D  F    E</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">0.000000</span>  <span class="number">0.0000</span> <span class="number">-0.898984</span> <span class="number">-5</span> <span class="number">-1</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span> <span class="number">-1.2971</span> <span class="number">-0.161798</span> <span class="number">-5</span> <span class="number">-2</span>  <span class="number">1.0</span></div></pre></td></tr></table></figure></p>
<p>填充缺失值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">35</span>]: df1.fillna(value=<span class="number">5</span>)</div><div class="line">Out[<span class="number">35</span>]:</div><div class="line">                   A         B         C  D  F    E</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-0.898984</span> <span class="number">-5</span> <span class="number">-1</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span> <span class="number">-1.297100</span> <span class="number">-0.161798</span> <span class="number">-5</span> <span class="number">-2</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.792578</span> <span class="number">-2.380203</span> <span class="number">-0.116943</span> <span class="number">-5</span> <span class="number">-3</span>  <span class="number">5.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.126554</span> <span class="number">-2.262221</span> <span class="number">-1.135382</span> <span class="number">-5</span> <span class="number">-4</span>  <span class="number">5.0</span></div></pre></td></tr></table></figure></p>
<p>获取布尔值的 mask：哪些值是 NaN, 则为true,否则为false<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">36</span>]: pd.isnull(df1)</div><div class="line">Out[<span class="number">36</span>]:</div><div class="line">                A      B      C      D      F      E</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span></div><div class="line"></div><div class="line">In [<span class="number">37</span>]: df1</div><div class="line">Out[<span class="number">37</span>]:</div><div class="line">                   A         B         C  D  F    E</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-0.898984</span> <span class="number">-5</span> <span class="number">-1</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span> <span class="number">-1.297100</span> <span class="number">-0.161798</span> <span class="number">-5</span> <span class="number">-2</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.792578</span> <span class="number">-2.380203</span> <span class="number">-0.116943</span> <span class="number">-5</span> <span class="number">-3</span>  NaN</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.126554</span> <span class="number">-2.262221</span> <span class="number">-1.135382</span> <span class="number">-5</span> <span class="number">-4</span>  NaN</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> 这里的df1数据其实没有改变, 返回的是运算后的数据拷贝</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>说明: 操作都会把NaN(缺失值)排除在外</p>
<h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><p>平均值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对每一列做平均值</span></div><div class="line">In [<span class="number">38</span>]: df.mean() <span class="comment"># df.mean(0)</span></div><div class="line">Out[<span class="number">38</span>]:</div><div class="line">A   <span class="number">-0.918710</span></div><div class="line">B   <span class="number">-1.328007</span></div><div class="line">C   <span class="number">-0.850137</span></div><div class="line">D   <span class="number">-5.000000</span></div><div class="line">F   <span class="number">-3.500000</span></div><div class="line">dtype: float64</div><div class="line"></div><div class="line"><span class="comment"># 对每一行做平均值</span></div><div class="line">In [<span class="number">40</span>]: df.mean(<span class="number">1</span>)</div><div class="line">Out[<span class="number">40</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>   <span class="number">-1.379797</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span>   <span class="number">-1.744259</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span>   <span class="number">-2.457945</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span>   <span class="number">-2.904831</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span>   <span class="number">-2.547202</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>   <span class="number">-2.882190</span></div><div class="line">Freq: D, dtype: float64</div></pre></td></tr></table></figure></p>
<p>操作具有不同维度的对象需要对齐。pandas会沿着指定的维度自动广播<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">42</span>]: s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>], index=dates).shift(<span class="number">2</span>)</div><div class="line"></div><div class="line">In [<span class="number">43</span>]: s</div><div class="line">Out[<span class="number">43</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>    NaN</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span>    NaN</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span>    <span class="number">1.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span>    <span class="number">3.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span>    <span class="number">5.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>    NaN</div><div class="line">Freq: D, dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">45</span>]: df.sub(s, axis=<span class="string">'index'</span>)</div><div class="line">Out[<span class="number">45</span>]:</div><div class="line">                   A         B         C     D     F</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>       NaN       NaN       NaN   NaN   NaN</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span>       NaN       NaN       NaN   NaN   NaN</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-2.792578</span> <span class="number">-3.380203</span> <span class="number">-1.116943</span>  <span class="number">-6.0</span>  <span class="number">-4.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-5.126554</span> <span class="number">-5.262221</span> <span class="number">-4.135382</span>  <span class="number">-8.0</span>  <span class="number">-7.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-5.421283</span> <span class="number">-6.725798</span> <span class="number">-5.588929</span> <span class="number">-10.0</span> <span class="number">-10.0</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span>       NaN       NaN       NaN   NaN   NaN</div><div class="line"></div><div class="line">In [<span class="number">46</span>]: df</div><div class="line">Out[<span class="number">46</span>]:</div><div class="line">                   A         B         C  D  F</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-0.898984</span> <span class="number">-5</span> <span class="number">-1</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span> <span class="number">-1.297100</span> <span class="number">-0.161798</span> <span class="number">-5</span> <span class="number">-2</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-1.792578</span> <span class="number">-2.380203</span> <span class="number">-0.116943</span> <span class="number">-5</span> <span class="number">-3</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-2.126554</span> <span class="number">-2.262221</span> <span class="number">-1.135382</span> <span class="number">-5</span> <span class="number">-4</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-0.421283</span> <span class="number">-1.725798</span> <span class="number">-0.588929</span> <span class="number">-5</span> <span class="number">-5</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span> <span class="number">-0.909448</span> <span class="number">-0.302722</span> <span class="number">-2.198783</span> <span class="number">-5</span> <span class="number">-6</span></div></pre></td></tr></table></figure></p>
<h3 id="Apply"><a href="#Apply" class="headerlink" title="Apply"></a>Apply</h3><p>对数据（行或列） Apply 函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">47</span>]: df.apply(np.cumsum)</div><div class="line">Out[<span class="number">47</span>]:</div><div class="line">                   A         B         C   D   F</div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-08</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> <span class="number">-0.898984</span>  <span class="number">-5</span>  <span class="number">-1</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-09</span> <span class="number">-0.262396</span> <span class="number">-1.297100</span> <span class="number">-1.060782</span> <span class="number">-10</span>  <span class="number">-3</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-10</span> <span class="number">-2.054974</span> <span class="number">-3.677303</span> <span class="number">-1.177726</span> <span class="number">-15</span>  <span class="number">-6</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-11</span> <span class="number">-4.181527</span> <span class="number">-5.939523</span> <span class="number">-2.313108</span> <span class="number">-20</span> <span class="number">-10</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-12</span> <span class="number">-4.602811</span> <span class="number">-7.665321</span> <span class="number">-2.902037</span> <span class="number">-25</span> <span class="number">-15</span></div><div class="line"><span class="number">2017</span><span class="number">-06</span><span class="number">-13</span> <span class="number">-5.512259</span> <span class="number">-7.968043</span> <span class="number">-5.100820</span> <span class="number">-30</span> <span class="number">-21</span></div><div class="line"></div><div class="line">In [<span class="number">48</span>]: df.apply(<span class="keyword">lambda</span> x: x.max() -x.min())</div><div class="line">Out[<span class="number">48</span>]:</div><div class="line">A    <span class="number">2.126554</span></div><div class="line">B    <span class="number">2.380203</span></div><div class="line">C    <span class="number">2.081839</span></div><div class="line">D    <span class="number">0.000000</span></div><div class="line">F    <span class="number">5.000000</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure></p>
<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">49</span>]: s = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">7</span>, size=<span class="number">10</span>))</div><div class="line"></div><div class="line">In [<span class="number">50</span>]: s</div><div class="line">Out[<span class="number">50</span>]:</div><div class="line"><span class="number">0</span>    <span class="number">0</span></div><div class="line"><span class="number">1</span>    <span class="number">4</span></div><div class="line"><span class="number">2</span>    <span class="number">6</span></div><div class="line"><span class="number">3</span>    <span class="number">2</span></div><div class="line"><span class="number">4</span>    <span class="number">6</span></div><div class="line"><span class="number">5</span>    <span class="number">6</span></div><div class="line"><span class="number">6</span>    <span class="number">0</span></div><div class="line"><span class="number">7</span>    <span class="number">0</span></div><div class="line"><span class="number">8</span>    <span class="number">3</span></div><div class="line"><span class="number">9</span>    <span class="number">1</span></div><div class="line">dtype: int32</div><div class="line"></div><div class="line">In [<span class="number">52</span>]: s.value_counts()     </div><div class="line">Out[<span class="number">52</span>]:                      </div><div class="line"><span class="number">6</span>    <span class="number">3</span>                        </div><div class="line"><span class="number">0</span>    <span class="number">3</span>                        </div><div class="line"><span class="number">4</span>    <span class="number">1</span>                        </div><div class="line"><span class="number">3</span>    <span class="number">1</span>                        </div><div class="line"><span class="number">2</span>    <span class="number">1</span>                        </div><div class="line"><span class="number">1</span>    <span class="number">1</span>                        </div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">53</span>]: s = pd.Series([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'Aaba'</span>, <span class="string">'Baca'</span>, np.nan, <span class="string">'CABA'</span>, <span class="string">'dog'</span>, <span class="string">'cat'</span>])</div><div class="line"></div><div class="line">In [<span class="number">54</span>]: s.str.lower()</div><div class="line">Out[<span class="number">54</span>]:</div><div class="line"><span class="number">0</span>       a</div><div class="line"><span class="number">1</span>       b</div><div class="line"><span class="number">2</span>       c</div><div class="line"><span class="number">3</span>    aaba</div><div class="line"><span class="number">4</span>    baca</div><div class="line"><span class="number">5</span>     NaN</div><div class="line"><span class="number">6</span>    caba</div><div class="line"><span class="number">7</span>     dog</div><div class="line"><span class="number">8</span>     cat</div><div class="line">dtype: object</div></pre></td></tr></table></figure>
<h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>简单地按行拼接<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">55</span>]: df = pd.DataFrame(np.random.randn(<span class="number">10</span>, <span class="number">4</span>))</div><div class="line"></div><div class="line">In [<span class="number">56</span>]: df</div><div class="line">Out[<span class="number">56</span>]:</div><div class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"><span class="number">0</span>  <span class="number">1.279835</span>  <span class="number">0.488299</span>  <span class="number">0.122145</span>  <span class="number">1.066159</span></div><div class="line"><span class="number">1</span> <span class="number">-0.566047</span> <span class="number">-0.625790</span> <span class="number">-0.941786</span> <span class="number">-0.209994</span></div><div class="line"><span class="number">2</span>  <span class="number">0.364785</span>  <span class="number">1.185549</span> <span class="number">-0.381762</span>  <span class="number">1.752895</span></div><div class="line"><span class="number">3</span> <span class="number">-0.568627</span> <span class="number">-0.235160</span> <span class="number">-1.602423</span>  <span class="number">0.603979</span></div><div class="line"><span class="number">4</span>  <span class="number">0.698751</span> <span class="number">-1.656823</span> <span class="number">-0.306150</span>  <span class="number">2.019342</span></div><div class="line"><span class="number">5</span> <span class="number">-0.423725</span>  <span class="number">1.321606</span>  <span class="number">0.894416</span> <span class="number">-0.249282</span></div><div class="line"><span class="number">6</span> <span class="number">-0.125866</span> <span class="number">-2.315650</span>  <span class="number">0.376551</span>  <span class="number">1.050506</span></div><div class="line"><span class="number">7</span> <span class="number">-0.189071</span> <span class="number">-0.933617</span> <span class="number">-0.051930</span> <span class="number">-0.375252</span></div><div class="line"><span class="number">8</span>  <span class="number">0.478909</span> <span class="number">-2.041329</span>  <span class="number">1.217890</span> <span class="number">-1.020701</span></div><div class="line"><span class="number">9</span> <span class="number">-1.287622</span> <span class="number">-0.173968</span>  <span class="number">0.387218</span> <span class="number">-0.004477</span></div><div class="line"></div><div class="line"><span class="comment"># 拆分成piece</span></div><div class="line">In [<span class="number">57</span>]: pieces = [df[:<span class="number">3</span>], df[<span class="number">3</span>:<span class="number">7</span>], df[<span class="number">7</span>:]]</div><div class="line"></div><div class="line">In [<span class="number">58</span>]: pieces</div><div class="line">Out[<span class="number">58</span>]:</div><div class="line">[          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"> <span class="number">0</span>  <span class="number">1.279835</span>  <span class="number">0.488299</span>  <span class="number">0.122145</span>  <span class="number">1.066159</span></div><div class="line"> <span class="number">1</span> <span class="number">-0.566047</span> <span class="number">-0.625790</span> <span class="number">-0.941786</span> <span class="number">-0.209994</span></div><div class="line"> <span class="number">2</span>  <span class="number">0.364785</span>  <span class="number">1.185549</span> <span class="number">-0.381762</span>  <span class="number">1.752895</span>,</div><div class="line">           <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"> <span class="number">3</span> <span class="number">-0.568627</span> <span class="number">-0.235160</span> <span class="number">-1.602423</span>  <span class="number">0.603979</span></div><div class="line"> <span class="number">4</span>  <span class="number">0.698751</span> <span class="number">-1.656823</span> <span class="number">-0.306150</span>  <span class="number">2.019342</span></div><div class="line"> <span class="number">5</span> <span class="number">-0.423725</span>  <span class="number">1.321606</span>  <span class="number">0.894416</span> <span class="number">-0.249282</span></div><div class="line"> <span class="number">6</span> <span class="number">-0.125866</span> <span class="number">-2.315650</span>  <span class="number">0.376551</span>  <span class="number">1.050506</span>,</div><div class="line">           <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"> <span class="number">7</span> <span class="number">-0.189071</span> <span class="number">-0.933617</span> <span class="number">-0.051930</span> <span class="number">-0.375252</span></div><div class="line"> <span class="number">8</span>  <span class="number">0.478909</span> <span class="number">-2.041329</span>  <span class="number">1.217890</span> <span class="number">-1.020701</span></div><div class="line"> <span class="number">9</span> <span class="number">-1.287622</span> <span class="number">-0.173968</span>  <span class="number">0.387218</span> <span class="number">-0.004477</span>]</div><div class="line"></div><div class="line">In [<span class="number">59</span>]: pd.concat(pieces)</div><div class="line">Out[<span class="number">59</span>]:</div><div class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"><span class="number">0</span>  <span class="number">1.279835</span>  <span class="number">0.488299</span>  <span class="number">0.122145</span>  <span class="number">1.066159</span></div><div class="line"><span class="number">1</span> <span class="number">-0.566047</span> <span class="number">-0.625790</span> <span class="number">-0.941786</span> <span class="number">-0.209994</span></div><div class="line"><span class="number">2</span>  <span class="number">0.364785</span>  <span class="number">1.185549</span> <span class="number">-0.381762</span>  <span class="number">1.752895</span></div><div class="line"><span class="number">3</span> <span class="number">-0.568627</span> <span class="number">-0.235160</span> <span class="number">-1.602423</span>  <span class="number">0.603979</span></div><div class="line"><span class="number">4</span>  <span class="number">0.698751</span> <span class="number">-1.656823</span> <span class="number">-0.306150</span>  <span class="number">2.019342</span></div><div class="line"><span class="number">5</span> <span class="number">-0.423725</span>  <span class="number">1.321606</span>  <span class="number">0.894416</span> <span class="number">-0.249282</span></div><div class="line"><span class="number">6</span> <span class="number">-0.125866</span> <span class="number">-2.315650</span>  <span class="number">0.376551</span>  <span class="number">1.050506</span></div><div class="line"><span class="number">7</span> <span class="number">-0.189071</span> <span class="number">-0.933617</span> <span class="number">-0.051930</span> <span class="number">-0.375252</span></div><div class="line"><span class="number">8</span>  <span class="number">0.478909</span> <span class="number">-2.041329</span>  <span class="number">1.217890</span> <span class="number">-1.020701</span></div><div class="line"><span class="number">9</span> <span class="number">-1.287622</span> <span class="number">-0.173968</span>  <span class="number">0.387218</span> <span class="number">-0.004477</span></div></pre></td></tr></table></figure></p>
<h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>和 SQL 的 join 是一个意思<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">60</span>]: left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</div><div class="line"></div><div class="line">In [<span class="number">61</span>]: right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</div><div class="line"></div><div class="line">In [<span class="number">62</span>]: left</div><div class="line">Out[<span class="number">62</span>]:</div><div class="line">   key  lval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span></div><div class="line"><span class="number">1</span>  foo     <span class="number">2</span></div><div class="line"></div><div class="line">In [<span class="number">63</span>]: right</div><div class="line">Out[<span class="number">63</span>]:</div><div class="line">   key  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">4</span></div><div class="line"><span class="number">1</span>  foo     <span class="number">5</span></div><div class="line"></div><div class="line">In [<span class="number">64</span>]: pd.merge(left, right, on=<span class="string">'key'</span>)</div><div class="line">Out[<span class="number">64</span>]:</div><div class="line">   key  lval  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span>     <span class="number">4</span></div><div class="line"><span class="number">1</span>  foo     <span class="number">1</span>     <span class="number">5</span></div><div class="line"><span class="number">2</span>  foo     <span class="number">2</span>     <span class="number">4</span></div><div class="line"><span class="number">3</span>  foo     <span class="number">2</span>     <span class="number">5</span></div></pre></td></tr></table></figure></p>
<h4 id="Append"><a href="#Append" class="headerlink" title="Append"></a>Append</h4><p>向 DataFrame 增加新的<strong>数据行</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">65</span>]: df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">4</span>), columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</div><div class="line"></div><div class="line">In [<span class="number">66</span>]: df</div><div class="line">Out[<span class="number">66</span>]:</div><div class="line">          A         B         C         D</div><div class="line"><span class="number">0</span> <span class="number">-0.303120</span>  <span class="number">0.419378</span>  <span class="number">0.111816</span> <span class="number">-0.160104</span></div><div class="line"><span class="number">1</span>  <span class="number">0.924466</span>  <span class="number">2.385372</span> <span class="number">-1.575671</span> <span class="number">-1.789283</span></div><div class="line"><span class="number">2</span>  <span class="number">1.106048</span> <span class="number">-0.087699</span>  <span class="number">1.714677</span> <span class="number">-0.058831</span></div><div class="line"><span class="number">3</span>  <span class="number">0.765727</span>  <span class="number">0.101523</span> <span class="number">-1.204472</span>  <span class="number">0.011180</span></div><div class="line"><span class="number">4</span> <span class="number">-2.084695</span> <span class="number">-0.517287</span> <span class="number">-0.497699</span>  <span class="number">0.153516</span></div><div class="line"><span class="number">5</span> <span class="number">-0.252460</span>  <span class="number">0.044590</span> <span class="number">-0.481047</span>  <span class="number">0.617817</span></div><div class="line"><span class="number">6</span> <span class="number">-0.121789</span> <span class="number">-1.663595</span> <span class="number">-0.464836</span> <span class="number">-0.858457</span></div><div class="line"><span class="number">7</span> <span class="number">-0.246298</span>  <span class="number">0.687569</span> <span class="number">-2.081519</span> <span class="number">-1.529134</span></div><div class="line"></div><div class="line">In [<span class="number">67</span>]: s = df.iloc[<span class="number">3</span>]</div><div class="line"></div><div class="line">In [<span class="number">68</span>]: df.append(s, ignore_index=<span class="keyword">True</span>)</div><div class="line">Out[<span class="number">68</span>]:</div><div class="line">          A         B         C         D</div><div class="line"><span class="number">0</span> <span class="number">-0.303120</span>  <span class="number">0.419378</span>  <span class="number">0.111816</span> <span class="number">-0.160104</span></div><div class="line"><span class="number">1</span>  <span class="number">0.924466</span>  <span class="number">2.385372</span> <span class="number">-1.575671</span> <span class="number">-1.789283</span></div><div class="line"><span class="number">2</span>  <span class="number">1.106048</span> <span class="number">-0.087699</span>  <span class="number">1.714677</span> <span class="number">-0.058831</span></div><div class="line"><span class="number">3</span>  <span class="number">0.765727</span>  <span class="number">0.101523</span> <span class="number">-1.204472</span>  <span class="number">0.011180</span></div><div class="line"><span class="number">4</span> <span class="number">-2.084695</span> <span class="number">-0.517287</span> <span class="number">-0.497699</span>  <span class="number">0.153516</span></div><div class="line"><span class="number">5</span> <span class="number">-0.252460</span>  <span class="number">0.044590</span> <span class="number">-0.481047</span>  <span class="number">0.617817</span></div><div class="line"><span class="number">6</span> <span class="number">-0.121789</span> <span class="number">-1.663595</span> <span class="number">-0.464836</span> <span class="number">-0.858457</span></div><div class="line"><span class="number">7</span> <span class="number">-0.246298</span>  <span class="number">0.687569</span> <span class="number">-2.081519</span> <span class="number">-1.529134</span></div><div class="line"><span class="number">8</span>  <span class="number">0.765727</span>  <span class="number">0.101523</span> <span class="number">-1.204472</span>  <span class="number">0.011180</span></div></pre></td></tr></table></figure></p>
<h4 id="Grouping"><a href="#Grouping" class="headerlink" title="Grouping"></a>Grouping</h4><p>和 SQL 中的 GROUP BY 类似，包括以下这几步：</p>
<ul>
<li>根据某些规则，把数据分组</li>
<li>对每组应用一个函数</li>
<li>合并结果到一个数据结构中</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">69</span>]: df = pd.DataFrame(&#123;</div><div class="line">    ...: <span class="string">'A'</span> : [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>,<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'foo'</span>, <span class="string">'foo'</span>],</div><div class="line">    ...: <span class="string">'B'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,<span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</div><div class="line">    ...: <span class="string">'C'</span> : np.random.randn(<span class="number">8</span>),</div><div class="line">    ...: <span class="string">'D'</span> : np.random.randn(<span class="number">8</span>)&#125;)</div><div class="line"></div><div class="line">In [<span class="number">70</span>]: df</div><div class="line">Out[<span class="number">70</span>]:</div><div class="line">     A      B         C         D</div><div class="line"><span class="number">0</span>  foo    one <span class="number">-1.203566</span> <span class="number">-1.199038</span></div><div class="line"><span class="number">1</span>  bar    one  <span class="number">2.368016</span> <span class="number">-1.059656</span></div><div class="line"><span class="number">2</span>  foo    two <span class="number">-0.704544</span> <span class="number">-1.047794</span></div><div class="line"><span class="number">3</span>  bar  three <span class="number">-0.511092</span>  <span class="number">1.121859</span></div><div class="line"><span class="number">4</span>  foo    two <span class="number">-0.723414</span> <span class="number">-1.225536</span></div><div class="line"><span class="number">5</span>  bar    two <span class="number">-0.363631</span>  <span class="number">0.111177</span></div><div class="line"><span class="number">6</span>  foo    one  <span class="number">0.271759</span>  <span class="number">0.500798</span></div><div class="line"><span class="number">7</span>  foo  three <span class="number">-0.248960</span>  <span class="number">2.035166</span></div><div class="line"></div><div class="line"><span class="comment"># 做 Group 操作并对每组求和</span></div><div class="line">In [<span class="number">71</span>]: df.groupby(<span class="string">'A'</span>).sum()</div><div class="line">Out[<span class="number">71</span>]:</div><div class="line">            C         D</div><div class="line">A</div><div class="line">bar  <span class="number">1.493293</span>  <span class="number">0.173380</span></div><div class="line">foo <span class="number">-2.608725</span> <span class="number">-0.936404</span></div><div class="line"></div><div class="line"><span class="comment"># 可以对两列进行 Group by 并求和</span></div><div class="line">In [<span class="number">72</span>]: df.groupby([<span class="string">'A'</span>, <span class="string">'B'</span>]).sum()</div><div class="line">Out[<span class="number">72</span>]:</div><div class="line">                  C         D</div><div class="line">A   B</div><div class="line">bar one    <span class="number">2.368016</span> <span class="number">-1.059656</span></div><div class="line">    three <span class="number">-0.511092</span>  <span class="number">1.121859</span></div><div class="line">    two   <span class="number">-0.363631</span>  <span class="number">0.111177</span></div><div class="line">foo one   <span class="number">-0.931807</span> <span class="number">-0.698240</span></div><div class="line">    three <span class="number">-0.248960</span>  <span class="number">2.035166</span></div><div class="line">    two   <span class="number">-1.427958</span> <span class="number">-2.273330</span></div></pre></td></tr></table></figure>
<h3 id="Reshape"><a href="#Reshape" class="headerlink" title="Reshape"></a>Reshape</h3><h4 id="Stack-叠层"><a href="#Stack-叠层" class="headerlink" title="Stack 叠层"></a>Stack 叠层</h4><p>准备数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">73</span>]: tuples = list(zip(*[[<span class="string">'bar'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>, <span class="string">'baz'</span>,</div><div class="line">    ...: <span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'qux'</span>, <span class="string">'qux'</span>],</div><div class="line">    ...: [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>,</div><div class="line">    ...: <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>]]))</div><div class="line"></div><div class="line">In [<span class="number">75</span>]: index = pd.MultiIndex.from_tuples(tuples, names=[<span class="string">'first'</span>, <span class="string">'second'</span>])</div><div class="line"></div><div class="line">In [<span class="number">76</span>]: df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">2</span>), index=index, columns=[<span class="string">'A'</span>,<span class="string">'B'</span>])</div><div class="line"></div><div class="line">In [<span class="number">77</span>]: df2 = df[:<span class="number">4</span>]</div><div class="line"></div><div class="line">In [<span class="number">78</span>]: df2</div><div class="line">Out[<span class="number">78</span>]:</div><div class="line">                     A         B</div><div class="line">first second</div><div class="line">bar   one     <span class="number">0.181096</span> <span class="number">-0.610853</span></div><div class="line">      two    <span class="number">-1.326709</span>  <span class="number">0.269153</span></div><div class="line">baz   one    <span class="number">-0.455180</span> <span class="number">-0.070055</span></div><div class="line">      two    <span class="number">-0.953993</span> <span class="number">-0.235160</span></div><div class="line">```      </div><div class="line"></div><div class="line">stack() 把 DataFrame 的所有列“压缩”到 index 里去</div><div class="line">```python</div><div class="line">In [<span class="number">79</span>]: stacked = df2.stack()</div><div class="line"></div><div class="line">In [<span class="number">80</span>]: stacked</div><div class="line">Out[<span class="number">80</span>]:</div><div class="line">first  second</div><div class="line">bar    one     A    <span class="number">0.181096</span></div><div class="line">               B   <span class="number">-0.610853</span></div><div class="line">       two     A   <span class="number">-1.326709</span></div><div class="line">               B    <span class="number">0.269153</span></div><div class="line">baz    one     A   <span class="number">-0.455180</span></div><div class="line">               B   <span class="number">-0.070055</span></div><div class="line">       two     A   <span class="number">-0.953993</span></div><div class="line">               B   <span class="number">-0.235160</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure></p>
<p>反之，只要是 MultiIndex 都可以用 unstack() 恢复出列，默认把最后一个 index 解开<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">81</span>]: stacked.unstack()</div><div class="line">Out[<span class="number">81</span>]:</div><div class="line">                     A         B</div><div class="line">first second</div><div class="line">bar   one     <span class="number">0.181096</span> <span class="number">-0.610853</span></div><div class="line">      two    <span class="number">-1.326709</span>  <span class="number">0.269153</span></div><div class="line">baz   one    <span class="number">-0.455180</span> <span class="number">-0.070055</span></div><div class="line">      two    <span class="number">-0.953993</span> <span class="number">-0.235160</span></div><div class="line"></div><div class="line">In [<span class="number">82</span>]: stacked.unstack(<span class="number">1</span>)</div><div class="line">Out[<span class="number">82</span>]:</div><div class="line">second        one       two</div><div class="line">first</div><div class="line">bar   A  <span class="number">0.181096</span> <span class="number">-1.326709</span></div><div class="line">      B <span class="number">-0.610853</span>  <span class="number">0.269153</span></div><div class="line">baz   A <span class="number">-0.455180</span> <span class="number">-0.953993</span></div><div class="line">      B <span class="number">-0.070055</span> <span class="number">-0.235160</span></div><div class="line"></div><div class="line">In [<span class="number">83</span>]: stacked.unstack(<span class="number">0</span>)</div><div class="line">Out[<span class="number">83</span>]:</div><div class="line">first          bar       baz</div><div class="line">second</div><div class="line">one    A  <span class="number">0.181096</span> <span class="number">-0.455180</span></div><div class="line">       B <span class="number">-0.610853</span> <span class="number">-0.070055</span></div><div class="line">two    A <span class="number">-1.326709</span> <span class="number">-0.953993</span></div><div class="line">       B  <span class="number">0.269153</span> <span class="number">-0.235160</span></div></pre></td></tr></table></figure></p>
<h3 id="Pivot-Table-旋转"><a href="#Pivot-Table-旋转" class="headerlink" title="Pivot Table 旋转"></a>Pivot Table 旋转</h3><p>准备数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">84</span>]: df = pd.DataFrame(&#123;<span class="string">'A'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>] * <span class="number">3</span>,</div><div class="line">    ...:  <span class="string">'B'</span> : [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>] * <span class="number">4</span>,</div><div class="line">    ...: <span class="string">'C'</span> : [<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'bar'</span>, <span class="string">'bar'</span>] * <span class="number">2</span>,</div><div class="line">    ...: <span class="string">'D'</span> : np.random.randn(<span class="number">12</span>),</div><div class="line">    ...: <span class="string">'E'</span> : np.random.randn(<span class="number">12</span>)&#125;)</div><div class="line"></div><div class="line">In [<span class="number">85</span>]: df</div><div class="line">Out[<span class="number">85</span>]:</div><div class="line">        A  B    C         D         E</div><div class="line"><span class="number">0</span>     one  A  foo <span class="number">-0.379428</span> <span class="number">-0.050681</span></div><div class="line"><span class="number">1</span>     one  B  foo  <span class="number">1.650807</span>  <span class="number">0.024530</span></div><div class="line"><span class="number">2</span>     two  C  foo  <span class="number">0.349554</span>  <span class="number">1.202692</span></div><div class="line"><span class="number">3</span>   three  A  bar <span class="number">-1.516381</span> <span class="number">-0.163382</span></div><div class="line"><span class="number">4</span>     one  B  bar  <span class="number">0.360722</span> <span class="number">-0.241622</span></div><div class="line"><span class="number">5</span>     one  C  bar <span class="number">-0.276398</span>  <span class="number">0.581192</span></div><div class="line"><span class="number">6</span>     two  A  foo  <span class="number">0.304563</span> <span class="number">-0.663271</span></div><div class="line"><span class="number">7</span>   three  B  foo  <span class="number">1.328499</span>  <span class="number">0.485223</span></div><div class="line"><span class="number">8</span>     one  C  foo  <span class="number">1.665213</span> <span class="number">-0.577843</span></div><div class="line"><span class="number">9</span>     one  A  bar <span class="number">-0.229248</span> <span class="number">-0.335329</span></div><div class="line"><span class="number">10</span>    two  B  bar <span class="number">-0.133112</span>  <span class="number">1.119350</span></div><div class="line"><span class="number">11</span>  three  C  bar <span class="number">-0.383992</span>  <span class="number">0.787800</span></div></pre></td></tr></table></figure></p>
<p>pivot 是把原来的数据(values)作为新表的行(index)、列(columns)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">86</span>]: pd.pivot_table(df, values=<span class="string">'D'</span>, index=[<span class="string">'A'</span>, <span class="string">'B'</span>], columns=[<span class="string">'C'</span>])</div><div class="line">Out[<span class="number">86</span>]:</div><div class="line">C             bar       foo</div><div class="line">A     B</div><div class="line">one   A <span class="number">-0.229248</span> <span class="number">-0.379428</span></div><div class="line">      B  <span class="number">0.360722</span>  <span class="number">1.650807</span></div><div class="line">      C <span class="number">-0.276398</span>  <span class="number">1.665213</span></div><div class="line">three A <span class="number">-1.516381</span>       NaN</div><div class="line">      B       NaN  <span class="number">1.328499</span></div><div class="line">      C <span class="number">-0.383992</span>       NaN</div><div class="line">two   A       NaN  <span class="number">0.304563</span></div><div class="line">      B <span class="number">-0.133112</span>       NaN</div><div class="line">      C       NaN  <span class="number">0.349554</span></div></pre></td></tr></table></figure></p>
<h3 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h3><p>pandas 的时间序列功能在金融应用中很有用。</p>
<p>resample功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">88</span>]: rng = pd.date_range(<span class="string">'9/6/2017'</span>, periods=<span class="number">100</span>, freq=<span class="string">'S'</span>)</div><div class="line"></div><div class="line">In [<span class="number">89</span>]: ts = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">500</span>, len(rng)), index=rng)</div><div class="line"></div><div class="line">In [<span class="number">90</span>]: ts.resample(<span class="string">'5Min'</span>).sum()</div><div class="line">Out[<span class="number">90</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-06</span>    <span class="number">26085</span></div><div class="line">Freq: <span class="number">5</span>T, dtype: int32</div></pre></td></tr></table></figure></p>
<p>时区表示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">94</span>]: rng = pd.date_range(<span class="string">'9/6/2017 00:00'</span>, periods=<span class="number">5</span>, freq=<span class="string">'D'</span>)</div><div class="line"></div><div class="line">In [<span class="number">95</span>]: ts = pd.Series(np.random.randn(len(rng)), rng)</div><div class="line"></div><div class="line">In [<span class="number">96</span>]: ts</div><div class="line">Out[<span class="number">96</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-06</span>   <span class="number">-0.715837</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-07</span>    <span class="number">1.021448</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-08</span>    <span class="number">1.186508</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-09</span>    <span class="number">0.606852</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-10</span>    <span class="number">0.566530</span></div><div class="line">Freq: D, dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">97</span>]: ts_utc = ts.tz_localize(<span class="string">'UTC'</span>)</div><div class="line"></div><div class="line">In [<span class="number">98</span>]: ts_utc</div><div class="line">Out[<span class="number">98</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-0.715837</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-07</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">1.021448</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">1.186508</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">0.606852</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">0.566530</span></div><div class="line">Freq: D, dtype: float64</div></pre></td></tr></table></figure></p>
<p>时区转换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">100</span>]: ts_utc.tz_convert(<span class="string">'US/Eastern'</span>)</div><div class="line">Out[<span class="number">100</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-05</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>   <span class="number">-0.715837</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-06</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>    <span class="number">1.021448</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-07</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>    <span class="number">1.186508</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-08</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>    <span class="number">0.606852</span></div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-09</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">-04</span>:<span class="number">00</span>    <span class="number">0.566530</span></div><div class="line">Freq: D, dtype: float64</div></pre></td></tr></table></figure></p>
<p>在时间跨度表示之间进行转换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">101</span>]: rng = pd.date_range(<span class="string">'9/6/2017'</span>, periods=<span class="number">5</span>, freq=<span class="string">'M'</span>)</div><div class="line"></div><div class="line">In [<span class="number">102</span>]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</div><div class="line"></div><div class="line">In [<span class="number">103</span>]: ts</div><div class="line">Out[<span class="number">103</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-30</span>   <span class="number">-0.337867</span></div><div class="line"><span class="number">2017</span><span class="number">-10</span><span class="number">-31</span>    <span class="number">0.546883</span></div><div class="line"><span class="number">2017</span><span class="number">-11</span><span class="number">-30</span>    <span class="number">0.063004</span></div><div class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-31</span>    <span class="number">0.419636</span></div><div class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-31</span>    <span class="number">2.562404</span></div><div class="line">Freq: M, dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">104</span>]: ps = ts.to_period()</div><div class="line"></div><div class="line">In [<span class="number">105</span>]: ps</div><div class="line">Out[<span class="number">105</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-09</span>   <span class="number">-0.337867</span></div><div class="line"><span class="number">2017</span><span class="number">-10</span>    <span class="number">0.546883</span></div><div class="line"><span class="number">2017</span><span class="number">-11</span>    <span class="number">0.063004</span></div><div class="line"><span class="number">2017</span><span class="number">-12</span>    <span class="number">0.419636</span></div><div class="line"><span class="number">2018</span><span class="number">-01</span>    <span class="number">2.562404</span></div><div class="line">Freq: M, dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">106</span>]: ps.to_timestamp()</div><div class="line">Out[<span class="number">106</span>]:</div><div class="line"><span class="number">2017</span><span class="number">-09</span><span class="number">-01</span>   <span class="number">-0.337867</span></div><div class="line"><span class="number">2017</span><span class="number">-10</span><span class="number">-01</span>    <span class="number">0.546883</span></div><div class="line"><span class="number">2017</span><span class="number">-11</span><span class="number">-01</span>    <span class="number">0.063004</span></div><div class="line"><span class="number">2017</span><span class="number">-12</span><span class="number">-01</span>    <span class="number">0.419636</span></div><div class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">2.562404</span></div><div class="line">Freq: MS, dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">107</span>]: prng = pd.period_range(<span class="string">'1990Q1'</span>, <span class="string">'2000Q4'</span>, freq=<span class="string">'Q-NOV'</span>)</div><div class="line"></div><div class="line">In [<span class="number">108</span>]: ts = pd.Series(np.random.randn(len(prng)), prng)</div><div class="line"></div><div class="line">In [<span class="number">109</span>]: ts.index = (prng.asfreq(<span class="string">'M'</span>, <span class="string">'e'</span>) + <span class="number">1</span>).asfreq(<span class="string">'H'</span>, <span class="string">'s'</span>) + <span class="number">9</span></div><div class="line"></div><div class="line">In [<span class="number">110</span>]: ts.head()</div><div class="line">Out[<span class="number">110</span>]:</div><div class="line"><span class="number">1990</span><span class="number">-03</span><span class="number">-01</span> <span class="number">09</span>:<span class="number">00</span>   <span class="number">-0.315663</span></div><div class="line"><span class="number">1990</span><span class="number">-06</span><span class="number">-01</span> <span class="number">09</span>:<span class="number">00</span>    <span class="number">2.092510</span></div><div class="line"><span class="number">1990</span><span class="number">-09</span><span class="number">-01</span> <span class="number">09</span>:<span class="number">00</span>    <span class="number">0.337302</span></div><div class="line"><span class="number">1990</span><span class="number">-12</span><span class="number">-01</span> <span class="number">09</span>:<span class="number">00</span>    <span class="number">0.037893</span></div><div class="line"><span class="number">1991</span><span class="number">-03</span><span class="number">-01</span> <span class="number">09</span>:<span class="number">00</span>    <span class="number">0.463572</span></div><div class="line">Freq: H, dtype: float64</div></pre></td></tr></table></figure></p>
<h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">111</span>]: df = pd.DataFrame(&#123;<span class="string">"id"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="string">"raw_grade"</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'e'</span>]&#125;)</div><div class="line"></div><div class="line">In [<span class="number">112</span>]: df</div><div class="line">Out[<span class="number">112</span>]:</div><div class="line">   id raw_grade</div><div class="line"><span class="number">0</span>   <span class="number">1</span>         a</div><div class="line"><span class="number">1</span>   <span class="number">2</span>         b</div><div class="line"><span class="number">2</span>   <span class="number">3</span>         b</div><div class="line"><span class="number">3</span>   <span class="number">4</span>         a</div><div class="line"><span class="number">4</span>   <span class="number">5</span>         a</div><div class="line"><span class="number">5</span>   <span class="number">6</span>         e</div><div class="line"></div><div class="line">In [<span class="number">113</span>]: df[<span class="string">'grade'</span>] = df[<span class="string">'raw_grade'</span>].astype(<span class="string">'category'</span>)</div><div class="line"></div><div class="line">In [<span class="number">114</span>]: df[<span class="string">'grade'</span>]</div><div class="line">Out[<span class="number">114</span>]:</div><div class="line"><span class="number">0</span>    a</div><div class="line"><span class="number">1</span>    b</div><div class="line"><span class="number">2</span>    b</div><div class="line"><span class="number">3</span>    a</div><div class="line"><span class="number">4</span>    a</div><div class="line"><span class="number">5</span>    e</div><div class="line">Name: grade, dtype: category</div><div class="line">Categories (<span class="number">3</span>, object): [a, b, e]</div></pre></td></tr></table></figure>
<p>类别可以 inplace 地赋值：（只是改一下对应的字符串嘛，类别是用 Index 对象存储的）<br><code>In [115]: df[&#39;grade&#39;].cat.categories = [&quot;very good&quot;, &quot;good&quot;, &quot;very bad&quot;]</code><br>修改类别时，如果有新的类别，会自动加进去<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">117</span>]: df[<span class="string">'grade'</span>] = df[<span class="string">'grade'</span>].cat.set_categories([<span class="string">"very bad"</span>, <span class="string">"bad"</span>, <span class="string">"medium"</span>, <span class="string">"good"</span>, <span class="string">"very good"</span>])</div><div class="line"></div><div class="line">In [<span class="number">118</span>]: df[<span class="string">'grade'</span>]</div><div class="line">Out[<span class="number">118</span>]:</div><div class="line"><span class="number">0</span>    very good</div><div class="line"><span class="number">1</span>         good</div><div class="line"><span class="number">2</span>         good</div><div class="line"><span class="number">3</span>    very good</div><div class="line"><span class="number">4</span>    very good</div><div class="line"><span class="number">5</span>     very bad</div><div class="line">Name: grade, dtype: category</div><div class="line">Categories (<span class="number">5</span>, object): [very bad, bad, medium, good, very good]</div></pre></td></tr></table></figure></p>
<p>根据类别排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">119</span>]: df.sort_values(by=<span class="string">'grade'</span>)</div><div class="line">Out[<span class="number">119</span>]:</div><div class="line">   id raw_grade      grade</div><div class="line"><span class="number">5</span>   <span class="number">6</span>         e   very bad</div><div class="line"><span class="number">1</span>   <span class="number">2</span>         b       good</div><div class="line"><span class="number">2</span>   <span class="number">3</span>         b       good</div><div class="line"><span class="number">0</span>   <span class="number">1</span>         a  very good</div><div class="line"><span class="number">3</span>   <span class="number">4</span>         a  very good</div><div class="line"><span class="number">4</span>   <span class="number">5</span>         a  very good</div></pre></td></tr></table></figure></p>
<p>做 group by 的时候，空的类别也会被呈现出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">120</span>]: df.groupby(<span class="string">'grade'</span>).size()</div><div class="line">Out[<span class="number">120</span>]:</div><div class="line">grade</div><div class="line">very bad     <span class="number">1</span></div><div class="line">bad          <span class="number">0</span></div><div class="line">medium       <span class="number">0</span></div><div class="line">good         <span class="number">2</span></div><div class="line">very good    <span class="number">3</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure></p>
<h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">121</span>]: ts = pd.Series(np.random.randn(<span class="number">1000</span>), index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">1000</span>))</div><div class="line"></div><div class="line">In [<span class="number">122</span>]: ts = ts.cumsum()</div><div class="line"></div><div class="line">In [<span class="number">123</span>]: ts.plot()</div><div class="line">Out[<span class="number">123</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x6a0be10</span>&gt;</div></pre></td></tr></table></figure>
<p><img src="/2017/06/08/python-pandas-2017-06-08/1.png" alt=""></p>
<p>对于DtaFrame,可以直接plot<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">124</span>]: df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index=ts.index, columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</div><div class="line"></div><div class="line">In [<span class="number">125</span>]: df = df.cumsum()</div><div class="line"></div><div class="line">In [<span class="number">126</span>]: plt.figure(); df.plot(); plt.legend(loc=<span class="string">'best'</span>)</div><div class="line">Out[<span class="number">126</span>]: &lt;matplotlib.legend.Legend at <span class="number">0x6c3e8f0</span>&gt;</div></pre></td></tr></table></figure></p>
<p><img src="/2017/06/08/python-pandas-2017-06-08/2.png" alt=""></p>
<h3 id="读写数据"><a href="#读写数据" class="headerlink" title="读写数据"></a>读写数据</h3><h4 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">127</span>]: df.to_csv(<span class="string">'foo.csv'</span>)                            </div><div class="line">                                                          </div><div class="line">In [<span class="number">128</span>]: pd.read_csv(<span class="string">'foo.csv'</span>)                          </div><div class="line">Out[<span class="number">128</span>]:                                                 </div><div class="line">     Unnamed: <span class="number">0</span>         A         B          C          D </div><div class="line"><span class="number">0</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">1.239452</span>  <span class="number">1.983851</span>   <span class="number">0.578987</span>   <span class="number">1.155658</span> </div><div class="line"><span class="number">1</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">0.295568</span>  <span class="number">3.704782</span>   <span class="number">1.962402</span>   <span class="number">0.885559</span> </div><div class="line"><span class="number">2</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-03</span> <span class="number">-0.139800</span>  <span class="number">3.872238</span>   <span class="number">2.793025</span>   <span class="number">0.972079</span> </div><div class="line"><span class="number">3</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-04</span> <span class="number">-0.804336</span>  <span class="number">3.259410</span>   <span class="number">2.159552</span>   <span class="number">1.785479</span> </div><div class="line"><span class="number">4</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-05</span>  <span class="number">0.171984</span>  <span class="number">3.027446</span>   <span class="number">2.253854</span>   <span class="number">0.779544</span> </div><div class="line"><span class="number">5</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-06</span>  <span class="number">1.781807</span>  <span class="number">1.836517</span>   <span class="number">4.558960</span>   <span class="number">1.999731</span> </div><div class="line"><span class="number">6</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-07</span>  <span class="number">0.650927</span>  <span class="number">0.154262</span>   <span class="number">3.650160</span>   <span class="number">0.685396</span> </div><div class="line"><span class="number">7</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-08</span>  <span class="number">0.492898</span> <span class="number">-0.198763</span>   <span class="number">3.646034</span>  <span class="number">-0.073848</span> </div><div class="line"><span class="number">8</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-09</span> <span class="number">-0.100468</span> <span class="number">-0.623716</span>   <span class="number">3.217366</span>   <span class="number">0.220008</span> </div><div class="line"><span class="number">9</span>    <span class="number">2000</span><span class="number">-01</span><span class="number">-10</span> <span class="number">-0.905394</span>  <span class="number">0.282200</span>   <span class="number">3.153474</span>  <span class="number">-0.189584</span> </div><div class="line"><span class="number">10</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-11</span> <span class="number">-0.962155</span> <span class="number">-1.147225</span>   <span class="number">3.353251</span>   <span class="number">1.283288</span> </div><div class="line"><span class="number">11</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-12</span> <span class="number">-1.853063</span> <span class="number">-1.539308</span>   <span class="number">5.246351</span>   <span class="number">0.222400</span> </div><div class="line"><span class="number">12</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-13</span> <span class="number">-3.385665</span> <span class="number">-2.982384</span>   <span class="number">3.952838</span>   <span class="number">0.319281</span> </div><div class="line"><span class="number">13</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-14</span> <span class="number">-4.411986</span> <span class="number">-2.914887</span>   <span class="number">4.775386</span>   <span class="number">0.597495</span> </div><div class="line"><span class="number">14</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-15</span> <span class="number">-5.938706</span> <span class="number">-3.437068</span>   <span class="number">6.882886</span>   <span class="number">1.105879</span> </div><div class="line"><span class="number">15</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-16</span> <span class="number">-6.537699</span> <span class="number">-1.947668</span>   <span class="number">8.142251</span>   <span class="number">0.948407</span> </div><div class="line"><span class="number">16</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-17</span> <span class="number">-6.786304</span> <span class="number">-2.735740</span>   <span class="number">8.484593</span>   <span class="number">1.034685</span> </div><div class="line"><span class="number">17</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-18</span> <span class="number">-7.145344</span> <span class="number">-1.666703</span>   <span class="number">9.420653</span>  <span class="number">-0.919941</span> </div><div class="line"><span class="number">18</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-19</span> <span class="number">-8.283291</span>  <span class="number">0.101307</span>  <span class="number">10.654933</span>  <span class="number">-0.936284</span> </div><div class="line"><span class="number">19</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-20</span> <span class="number">-8.330414</span>  <span class="number">0.820054</span>  <span class="number">11.207165</span>  <span class="number">-2.622354</span> </div><div class="line"><span class="number">20</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-21</span> <span class="number">-7.942291</span>  <span class="number">1.559753</span>   <span class="number">9.201008</span>  <span class="number">-2.923220</span> </div><div class="line"><span class="number">21</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-22</span> <span class="number">-4.675543</span>  <span class="number">2.337827</span>  <span class="number">10.364670</span>  <span class="number">-3.112916</span> </div><div class="line"><span class="number">22</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-23</span> <span class="number">-5.774614</span>  <span class="number">0.408297</span>   <span class="number">9.441821</span>  <span class="number">-2.040018</span> </div><div class="line"><span class="number">23</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-24</span> <span class="number">-5.993547</span> <span class="number">-0.480329</span>  <span class="number">10.311053</span>   <span class="number">0.852373</span> </div><div class="line"><span class="number">24</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-25</span> <span class="number">-4.137167</span>  <span class="number">0.099883</span>  <span class="number">10.224100</span>   <span class="number">0.576367</span> </div><div class="line"><span class="number">25</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-26</span> <span class="number">-2.866354</span> <span class="number">-0.772702</span>  <span class="number">11.812000</span>   <span class="number">1.671981</span> </div><div class="line"><span class="number">26</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-27</span> <span class="number">-1.764316</span> <span class="number">-2.534161</span>  <span class="number">11.634361</span>   <span class="number">1.638750</span> </div><div class="line"><span class="number">27</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-28</span> <span class="number">-3.220852</span> <span class="number">-3.353006</span>  <span class="number">11.399995</span>  <span class="number">-0.562762</span> </div><div class="line"><span class="number">28</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-29</span> <span class="number">-0.889241</span> <span class="number">-2.794083</span>  <span class="number">10.445614</span>   <span class="number">0.473105</span> </div><div class="line"><span class="number">29</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-30</span>  <span class="number">0.428342</span> <span class="number">-3.857681</span>  <span class="number">10.930199</span>  <span class="number">-0.118981</span> </div><div class="line">..          ...       ...       ...        ...        ... </div><div class="line"><span class="number">970</span>  <span class="number">2002</span><span class="number">-08</span><span class="number">-28</span> <span class="number">-2.853884</span> <span class="number">-2.041226</span>  <span class="number">28.387424</span>  <span class="number">17.129529</span> </div><div class="line"><span class="number">971</span>  <span class="number">2002</span><span class="number">-08</span><span class="number">-29</span> <span class="number">-5.058352</span>  <span class="number">0.041153</span>  <span class="number">28.095666</span>  <span class="number">16.654813</span> </div><div class="line"><span class="number">972</span>  <span class="number">2002</span><span class="number">-08</span><span class="number">-30</span> <span class="number">-4.478272</span> <span class="number">-1.613275</span>  <span class="number">26.989764</span>  <span class="number">17.653338</span> </div><div class="line"><span class="number">973</span>  <span class="number">2002</span><span class="number">-08</span><span class="number">-31</span> <span class="number">-2.815382</span> <span class="number">-2.764649</span>  <span class="number">26.197949</span>  <span class="number">16.442647</span> </div><div class="line"><span class="number">974</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-01</span> <span class="number">-2.621575</span> <span class="number">-2.785604</span>  <span class="number">28.007243</span>  <span class="number">14.962121</span> </div><div class="line"><span class="number">975</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-02</span> <span class="number">-2.476145</span> <span class="number">-3.128888</span>  <span class="number">27.541079</span>  <span class="number">12.853070</span> </div><div class="line"><span class="number">976</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-03</span> <span class="number">-0.483923</span> <span class="number">-3.061629</span>  <span class="number">27.130099</span>  <span class="number">13.401077</span> </div><div class="line"><span class="number">977</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-04</span> <span class="number">-0.885055</span> <span class="number">-2.059356</span>  <span class="number">26.139260</span>  <span class="number">12.725815</span> </div><div class="line"><span class="number">978</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-05</span> <span class="number">-3.438688</span> <span class="number">-3.060238</span>  <span class="number">26.267361</span>  <span class="number">13.601928</span> </div><div class="line"><span class="number">979</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-06</span> <span class="number">-3.646110</span> <span class="number">-2.908451</span>  <span class="number">27.639157</span>  <span class="number">13.749199</span> </div><div class="line"><span class="number">980</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-07</span> <span class="number">-3.742097</span> <span class="number">-5.843492</span>  <span class="number">27.138204</span>  <span class="number">14.621900</span> </div><div class="line"><span class="number">981</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-08</span> <span class="number">-4.367495</span> <span class="number">-5.523435</span>  <span class="number">26.429433</span>  <span class="number">14.372776</span> </div><div class="line"><span class="number">982</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-09</span> <span class="number">-6.481100</span> <span class="number">-7.691100</span>  <span class="number">26.325775</span>  <span class="number">14.060133</span> </div><div class="line"><span class="number">983</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-10</span> <span class="number">-4.406432</span> <span class="number">-5.925796</span>  <span class="number">25.808105</span>  <span class="number">13.717117</span> </div><div class="line"><span class="number">984</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-11</span> <span class="number">-5.747746</span> <span class="number">-6.226884</span>  <span class="number">26.334882</span>  <span class="number">13.539911</span> </div><div class="line"><span class="number">985</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-12</span> <span class="number">-5.075507</span> <span class="number">-5.976265</span>  <span class="number">25.582403</span>  <span class="number">13.955776</span> </div><div class="line"><span class="number">986</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-13</span> <span class="number">-5.957833</span> <span class="number">-4.514403</span>  <span class="number">26.154568</span>  <span class="number">15.948706</span> </div><div class="line"><span class="number">987</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-14</span> <span class="number">-4.822016</span> <span class="number">-3.510714</span>  <span class="number">26.770429</span>  <span class="number">14.903106</span> </div><div class="line"><span class="number">988</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-15</span> <span class="number">-5.413908</span> <span class="number">-3.678965</span>  <span class="number">29.255640</span>  <span class="number">15.903795</span> </div><div class="line"><span class="number">989</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-16</span> <span class="number">-7.305733</span> <span class="number">-4.970404</span>  <span class="number">30.726133</span>  <span class="number">17.075891</span> </div><div class="line"><span class="number">990</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-17</span> <span class="number">-6.921962</span> <span class="number">-3.342561</span>  <span class="number">32.499852</span>  <span class="number">15.309124</span> </div><div class="line"><span class="number">991</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-18</span> <span class="number">-7.650811</span> <span class="number">-3.539989</span>  <span class="number">31.823857</span>  <span class="number">15.100428</span> </div><div class="line"><span class="number">992</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-19</span> <span class="number">-7.680999</span> <span class="number">-2.289270</span>  <span class="number">31.098525</span>  <span class="number">12.891011</span> </div><div class="line"><span class="number">993</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-20</span> <span class="number">-7.849671</span> <span class="number">-1.712562</span>  <span class="number">31.364746</span>  <span class="number">13.909086</span> </div><div class="line"><span class="number">994</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-21</span> <span class="number">-8.739466</span> <span class="number">-2.122690</span>  <span class="number">32.004201</span>  <span class="number">14.095981</span> </div><div class="line"><span class="number">995</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-22</span> <span class="number">-8.740361</span> <span class="number">-0.656488</span>  <span class="number">29.674406</span>  <span class="number">12.590248</span> </div><div class="line"><span class="number">996</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-23</span> <span class="number">-6.309331</span> <span class="number">-0.986256</span>  <span class="number">30.370786</span>  <span class="number">13.450941</span> </div><div class="line"><span class="number">997</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-24</span> <span class="number">-6.205371</span> <span class="number">-0.419119</span>  <span class="number">30.260205</span>  <span class="number">12.028273</span> </div><div class="line"><span class="number">998</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-25</span> <span class="number">-7.573782</span> <span class="number">-2.492400</span>  <span class="number">31.063298</span>  <span class="number">12.361099</span> </div><div class="line"><span class="number">999</span>  <span class="number">2002</span><span class="number">-09</span><span class="number">-26</span> <span class="number">-7.317950</span> <span class="number">-2.840246</span>  <span class="number">31.560766</span>  <span class="number">12.502660</span></div></pre></td></tr></table></figure>
<h4 id="HDF5"><a href="#HDF5" class="headerlink" title="HDF5"></a>HDF5</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">129</span>]: df.to_hdf(<span class="string">'foo.h5'</span>,<span class="string">'df'</span>)</div><div class="line"></div><div class="line">In [<span class="number">130</span>]: pd.read_hdf(<span class="string">'foo.h5'</span>,<span class="string">'df'</span>)</div></pre></td></tr></table></figure>
<h4 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">131</span>]: df.to_excel(<span class="string">'foo.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</div><div class="line"></div><div class="line">In [<span class="number">132</span>]: pd.read_excel(<span class="string">'foo.xlsx'</span>, <span class="string">'Sheet1'</span>, index_col=<span class="keyword">None</span>, na_values=[<span class="string">'NA'</span>])</div></pre></td></tr></table></figure>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>如下，不能直接把返回值当作布尔值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">131</span>]: <span class="keyword">if</span> pd.Series([<span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">False</span>]):</div><div class="line">     ...:     print(<span class="string">'I was true'</span>)</div><div class="line">     ...:</div><div class="line">---------------------------------------------------------------------------</div><div class="line">ValueError                                Traceback (most recent call last)</div><div class="line">&lt;ipython-input<span class="number">-131</span>-ec15f6b92216&gt; <span class="keyword">in</span> &lt;module&gt;()</div><div class="line">----&gt; 1 if pd.Series([False, True, False]):</div><div class="line">      <span class="number">2</span>     print(<span class="string">'I was true'</span>)</div><div class="line">      <span class="number">3</span></div><div class="line"></div><div class="line">c:\python34\lib\site-packages\pandas\core\generic.py <span class="keyword">in</span> __nonzero__(self)</div><div class="line">    <span class="number">953</span>         <span class="keyword">raise</span> ValueError(<span class="string">"The truth value of a &#123;0&#125; is ambiguous. "</span></div><div class="line">    <span class="number">954</span>                          <span class="string">"Use a.empty, a.bool(), a.item(), a.any() or a.all()."</span></div><div class="line">--&gt; 955                          .format(self.__class__.__name__))</div><div class="line">    <span class="number">956</span></div><div class="line">    <span class="number">957</span>     __bool__ = __nonzero__</div><div class="line"></div><div class="line">ValueError: The truth value of a Series <span class="keyword">is</span> ambiguous. Use a.empty, a.bool(), a.item(), a.any() <span class="keyword">or</span> a.all().</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://pandas.pydata.org/pandas-docs/stable/10min.html" target="_blank" rel="external">pandas十分钟入门</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之Numpy使用]]></title>
      <url>http://arvin-he.github.io/2017/06/08/python-numpy-2017-06-08/</url>
      <content type="html"><![CDATA[<h3 id="Numpy相关介绍"><a href="#Numpy相关介绍" class="headerlink" title="Numpy相关介绍"></a>Numpy相关介绍</h3><p>NumPy 是一个 Python 包。 它代表 “Numeric Python”。 它是一个由多维数组对象和用于处理数组的例程集合组成的库。<br>使用NumPy，开发人员可以执行以下操作：</p>
<ul>
<li>数组的算数和逻辑运算。</li>
<li>傅立叶变换和用于图形操作的例程。</li>
<li>与线性代数有关的操作, NumPy 拥有线性代数和随机数生成的内置函数。</li>
</ul>
<p>NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用。 这种组合广泛用于替代 MatLab，是一个流行的技术计算平台, 此外NumPy 是开源的.</p>
<h3 id="Numpy安装"><a href="#Numpy安装" class="headerlink" title="Numpy安装"></a>Numpy安装</h3><p>在命令行窗口,输入:<code>pip install numpy</code>, 回车后就自动安装.</p>
<h3 id="NumPy-之-Ndarray-对象"><a href="#NumPy-之-Ndarray-对象" class="headerlink" title="NumPy 之 Ndarray 对象"></a>NumPy 之 Ndarray 对象</h3><p>NumPy 中定义的最重要的对象是称为 ndarray 的 N 维数组类型。<br>它描述相同类型的元素集合。 可以使用基于零的索引访问集合中的项目。<br>基本的ndarray是使用 NumPy 中的数组函数创建的, ndarray 对象由计算机内存中的一维连续区域组成，带有将每个元素映射到内存块中某个位置的索引方案。 内存块以按行（C 风格）或按列（FORTRAN 或 MatLab 风格）的方式保存元素。</p>
<p><code>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">object 任何暴露数组接口方法的对象都会返回一个数组或任何（嵌套）序列。</div><div class="line">dtype 数组的所需数据类型，可选。</div><div class="line">copy 可选，默认为true，对象是否被复制。</div><div class="line">order C（按行）、F（按列）或A（任意，默认）。</div><div class="line">subok 默认情况下，返回的数组被强制为基类数组。 如果为true，则返回子类。</div><div class="line">ndimin 指定返回数组的最小维数。</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 最小维度  </span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </div><div class="line">a = np.array([<span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], ndmin =  <span class="number">2</span>)</div><div class="line">b = np.array([<span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>], dtype = complex)  </div><div class="line">print(a)</div><div class="line">print(b)</div><div class="line"></div><div class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]]</div><div class="line">[ <span class="number">1.</span>+<span class="number">0.j</span>,  <span class="number">2.</span>+<span class="number">0.j</span>,  <span class="number">3.</span>+<span class="number">0.j</span>]</div></pre></td></tr></table></figure>
<h3 id="NumPy的数据类型"><a href="#NumPy的数据类型" class="headerlink" title="NumPy的数据类型"></a>NumPy的数据类型</h3><p>NumPy 支持比 Python 更多种类的数值类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">bool_ 存储为一个字节的布尔值（真或假）</div><div class="line">int_ 默认整数，相当于 C 的long，通常为int32或int64</div><div class="line">intc 相当于 C 的int，通常为int32或int64</div><div class="line">intp 用于索引的整数，相当于 C 的size_t，通常为int32或int64</div><div class="line">int8 字节（-128 ~ 127）</div><div class="line">int16 16 位整数（-32768 ~ 32767）</div><div class="line">int32 32 位整数（-2147483648 ~ 2147483647）</div><div class="line">int64 64 位整数（-9223372036854775808 ~ 9223372036854775807）</div><div class="line">uint8 8 位无符号整数（0 ~ 255）</div><div class="line">uint16 16 位无符号整数（0 ~ 65535）</div><div class="line">uint32 32 位无符号整数（0 ~ 4294967295）</div><div class="line">uint64 64 位无符号整数（0 ~ 18446744073709551615）</div><div class="line">float_ float64的简写</div><div class="line">float16 半精度浮点：符号位，5 位指数，10 位尾数</div><div class="line">float32 单精度浮点：符号位，8 位指数，23 位尾数</div><div class="line">float64 双精度浮点：符号位，11 位指数，52 位尾数</div><div class="line">complex_ complex128的简写</div><div class="line">complex64 复数，由两个 32 位浮点表示（实部和虚部）</div><div class="line">complex128 复数，由两个 64 位浮点表示（实部和虚部）</div></pre></td></tr></table></figure></p>
<h3 id="数据类型对象-dtype"><a href="#数据类型对象-dtype" class="headerlink" title="数据类型对象 (dtype)"></a>数据类型对象 (dtype)</h3><p>数据类型对象描述了对应于数组的固定内存块的解释，取决于以下方面：</p>
<ul>
<li>数据类型（整数、浮点或者 Python 对象）</li>
<li>数据大小</li>
<li>字节序（小端或大端）</li>
<li>在结构化类型的情况下，字段的名称，每个字段的数据类型，和每个字段占用的内存块部分。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">numpy.dtype(object, align, copy)</div><div class="line">Object：被转换为数据类型的对象。</div><div class="line">Align：如果为true，则向字段添加间隔，使其类似 C 的结构体。</div><div class="line">Copy ? 生成dtype对象的新副本，如果为flase，结果是内建数据类型对象的引用。</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用数组标量类型  </span></div><div class="line"><span class="comment">#int8，int16，int32，int64 可替换为等价的字符串 'i1'，'i2'，'i4'，以及其他。  </span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </div><div class="line">dt = np.dtype(np.int32)  </div><div class="line">dt2 = np.dtype(<span class="string">'i4'</span>) </div><div class="line"><span class="comment"># 使用端号标记</span></div><div class="line">dt3 = np.dtype(<span class="string">'&gt;i4'</span>)  </div><div class="line">print(dt)</div><div class="line">print(dt2)</div><div class="line">print(dt3)</div><div class="line"></div><div class="line">int32</div><div class="line">int32</div><div class="line">&gt;i4</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 首先创建结构化数据类型。  </span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </div><div class="line">dt = np.dtype([(<span class="string">'age'</span>,np.int8)])</div><div class="line"><span class="comment"># 将其应用于 ndarray 对象  </span></div><div class="line">a = np.array([(<span class="number">10</span>,),(<span class="number">20</span>,),(<span class="number">30</span>,)], dtype = dt) </div><div class="line"></div><div class="line">student = np.dtype([(<span class="string">'name'</span>,<span class="string">'S20'</span>),  (<span class="string">'age'</span>,  <span class="string">'i1'</span>),  (<span class="string">'marks'</span>,  <span class="string">'f4'</span>)]) </div><div class="line">stu = np.array([(<span class="string">'abc'</span>,  <span class="number">21</span>,  <span class="number">50</span>),(<span class="string">'xyz'</span>,  <span class="number">18</span>,  <span class="number">75</span>)], dtype = student)  </div><div class="line"></div><div class="line">print(dt)</div><div class="line">print(a)</div><div class="line"><span class="comment"># 名称可用于访问 age 列的内容  </span></div><div class="line">print(a[<span class="string">'age'</span>])</div><div class="line">print(stu)</div><div class="line"></div><div class="line"><span class="comment"># 输出结果</span></div><div class="line">[(<span class="string">'age'</span>, <span class="string">'i1'</span>)]</div><div class="line">[(<span class="number">10</span>,) (<span class="number">20</span>,) (<span class="number">30</span>,)]</div><div class="line">[<span class="number">10</span> <span class="number">20</span> <span class="number">30</span>]</div><div class="line">[(<span class="string">'abc'</span>, <span class="number">21</span>, <span class="number">50.0</span>), (<span class="string">'xyz'</span>, <span class="number">18</span>, <span class="number">75.0</span>)]</div></pre></td></tr></table></figure>
<p>每个内建类型都有一个唯一定义它的字符代码：<br>‘b’：布尔值<br>‘i’：符号整数<br>‘u’：无符号整数<br>‘f’：浮点<br>‘c’：复数浮点<br>‘m’：时间间隔<br>‘M’：日期时间<br>‘O’：Python 对象<br>‘S’, ‘a’：字节串<br>‘U’：Unicode<br>‘V’：原始数据（void）</p>
<h3 id="NumPy-数组属性"><a href="#NumPy-数组属性" class="headerlink" title="NumPy - 数组属性"></a>NumPy - 数组属性</h3><p>ndarray.shape : 返回一个包含数组维度的元组，可以用于调整数组大小<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </div><div class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])  </div><div class="line"></div><div class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]) </div><div class="line"><span class="comment"># 调整数组大小 </span></div><div class="line">b.shape = (<span class="number">3</span>,<span class="number">2</span>)</div><div class="line">c = a.reshape(<span class="number">3</span>,<span class="number">2</span>)</div><div class="line">print(a.shape)</div><div class="line">print(b)</div><div class="line">print(c)</div><div class="line"><span class="comment"># 输出</span></div><div class="line">(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">[[<span class="number">1</span>, <span class="number">2</span>] </div><div class="line"> [<span class="number">3</span>, <span class="number">4</span>] </div><div class="line"> [<span class="number">5</span>, <span class="number">6</span>]]</div><div class="line"></div><div class="line">[[<span class="number">1</span>, <span class="number">2</span>] </div><div class="line"> [<span class="number">3</span>, <span class="number">4</span>] </div><div class="line"> [<span class="number">5</span>, <span class="number">6</span>]]</div></pre></td></tr></table></figure></p>
<p>ndarray.ndim<br>返回数组的维数。<br>numpy.itemsize<br>返回数组中每个元素的字节单位长度。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">In [<span class="number">5</span>]: b = np.arange(<span class="number">24</span>)                                                </div><div class="line">                                                                         </div><div class="line">In [<span class="number">6</span>]: print(b)                                                         </div><div class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]</div><div class="line">                                                                         </div><div class="line">In [<span class="number">7</span>]: c = b.reshape(<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>)                                           </div><div class="line">                                                                         </div><div class="line">In [<span class="number">8</span>]: print(c)                                                         </div><div class="line">[[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>]                                                             </div><div class="line">  [ <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]                                                             </div><div class="line">  [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]                                                             </div><div class="line">  [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]                                                            </div><div class="line">                                                                         </div><div class="line"> [[<span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]                                                             </div><div class="line">  [<span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]                                                             </div><div class="line">  [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span>]                                                             </div><div class="line">  [<span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]]]                                                           </div><div class="line">                                                                         </div><div class="line">In [<span class="number">9</span>]: print(c.ndim)                                                    </div><div class="line"><span class="number">3</span>    </div><div class="line"></div><div class="line">In [<span class="number">10</span>]: x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], dtype = np.int8)</div><div class="line"></div><div class="line">In [<span class="number">11</span>]: print(x.itemsize)</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<p>numpy.flags: 返回了它们的当前标志</p>
<ol>
<li>C_CONTIGUOUS (C) 数组位于单一的、C 风格的连续区段内</li>
<li>F_CONTIGUOUS (F) 数组位于单一的、Fortran 风格的连续区段内</li>
<li>OWNDATA (O) 数组的内存从其它对象处借用</li>
<li>WRITEABLE (W) 数据区域可写入。 将它设置为flase会锁定数据，使其只读</li>
<li>ALIGNED (A) 数据和任何元素会为硬件适当对齐</li>
<li>UPDATEIFCOPY (U) 这个数组是另一数组的副本。当这个数组释放时，源数组会由这个数组中的元素更新</li>
</ol>
<h3 id="NumPy-数组创建例程"><a href="#NumPy-数组创建例程" class="headerlink" title="NumPy - 数组创建例程"></a>NumPy - 数组创建例程</h3><p>numpy.empty<br>它创建指定形状和dtype的未初始化数组。 它使用以下构造函数：<code>numpy.empty(shape, dtype = float, order = &#39;C&#39;)</code><br><strong>注意：</strong>数组元素为随机值，因为它们未初始化。<br>numpy.zeros<br>返回特定大小，以 0 填充的新数组。 <code>numpy.zeros(shape, dtype = float, order = &#39;C&#39;)</code><br>numpy.ones<br>返回特定大小，以 1 填充的新数组。 <code>numpy.ones(shape, dtype = None, order = &#39;C&#39;)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: x = np.empty([<span class="number">3</span>,<span class="number">2</span>], dtype=int)</div><div class="line"></div><div class="line">In [<span class="number">3</span>]: print(x)</div><div class="line">[[<span class="number">64618546</span> <span class="number">64654448</span>]</div><div class="line"> [<span class="number">64655120</span> <span class="number">64654288</span>]</div><div class="line"> [<span class="number">64654960</span> <span class="number">64654864</span>]]</div><div class="line"></div><div class="line">In [<span class="number">4</span>]: y = np.zeros(<span class="number">5</span>)</div><div class="line"></div><div class="line">In [<span class="number">5</span>]: print(y)</div><div class="line">[ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</div><div class="line"></div><div class="line"><span class="comment"># 自定义类型</span></div><div class="line">In [<span class="number">6</span>]: a = np.zeros((<span class="number">2</span>,<span class="number">2</span>), dtype =  [(<span class="string">'x'</span>,  <span class="string">'i4'</span>),  (<span class="string">'y'</span>,  <span class="string">'i4'</span>)])</div><div class="line"></div><div class="line">In [<span class="number">7</span>]: print(a)</div><div class="line">[[(<span class="number">0</span>, <span class="number">0</span>) (<span class="number">0</span>, <span class="number">0</span>)]</div><div class="line"> [(<span class="number">0</span>, <span class="number">0</span>) (<span class="number">0</span>, <span class="number">0</span>)]]</div><div class="line"></div><div class="line">In [<span class="number">8</span>]: b = np.ones(<span class="number">5</span>)</div><div class="line"></div><div class="line">In [<span class="number">9</span>]: print(b)</div><div class="line">[ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div></pre></td></tr></table></figure></p>
<h3 id="NumPy来自现有数据的数组"><a href="#NumPy来自现有数据的数组" class="headerlink" title="NumPy来自现有数据的数组"></a>NumPy来自现有数据的数组</h3><p>numpy.asarray<br>将 Python 序列转换为ndarray。 <code>numpy.asarray(a, dtype = None, order = None)</code><br>其中: a 任意形式的输入参数，比如列表、列表的元组、元组、元组的元组、元组的列表<br>numpy.frombuffer<br>此函数将缓冲区解释为一维数组。 暴露缓冲区接口的任何对象都用作参数来返回ndarray。<code>numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)</code></p>
<ol>
<li>buffer 任何暴露缓冲区接口的对象</li>
<li>dtype 返回数组的数据类型，默认为float</li>
<li>count 需要读取的数据数量，默认为-1，读取所有数据</li>
<li>offset 需要读取的起始位置，默认为0</li>
</ol>
<p>numpy.fromiter<br>从任何可迭代对象构建一个ndarray对象，返回一个新的一维数组。numpy.fromiter(iterable, dtype, count = -1)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">12</span>]: s = <span class="string">'Hello World'</span></div><div class="line"></div><div class="line">In [<span class="number">13</span>]: c = np.frombuffer(s, dtype=<span class="string">'S1'</span>)</div><div class="line">---------------------------------------------------------------------------</div><div class="line">AttributeError                            Traceback (most recent call last)</div><div class="line">&lt;ipython-input<span class="number">-13</span>-e77d207ef97e&gt; <span class="keyword">in</span> &lt;module&gt;()</div><div class="line">----&gt; 1 c = np.frombuffer(s, dtype='S1')</div><div class="line"></div><div class="line">AttributeError: <span class="string">'str'</span> object has no attribute <span class="string">'__buffer__'</span></div><div class="line"></div><div class="line">In [<span class="number">15</span>]: c = np.fromiter(s, dtype=<span class="string">'S1'</span>)</div><div class="line"></div><div class="line">In [<span class="number">16</span>]: print(c)</div><div class="line">[<span class="string">b'H'</span> <span class="string">b'e'</span> <span class="string">b'l'</span> <span class="string">b'l'</span> <span class="string">b'o'</span> <span class="string">b' '</span> <span class="string">b'W'</span> <span class="string">b'o'</span> <span class="string">b'r'</span> <span class="string">b'l'</span> <span class="string">b'd'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="NumPy来自数值范围的数组"><a href="#NumPy来自数值范围的数组" class="headerlink" title="NumPy来自数值范围的数组"></a>NumPy来自数值范围的数组</h3><p>numpy.arange<br>返回ndarray对象，包含给定范围内的等间隔值。<code>numpy.arange(start, stop, step, dtype)</code><br>numpy.linspace<br>指定了范围之间的均匀间隔数量，而不是步长. <code>numpy.linspace(start, stop, num, endpoint, retstep, dtype)</code></p>
<ol>
<li>start 序列的起始值</li>
<li>stop 序列的终止值，如果endpoint为true，该值包含于序列中</li>
<li>num 要生成的等间隔样例数量，默认为50</li>
<li>endpoint 序列中是否包含stop值，默认为ture</li>
<li>retstep 如果为true，返回样例，以及连续数字之间的步长</li>
<li>dtype 输出ndarray的数据类型</li>
</ol>
<p>numpy.logspace<br>返回一个ndarray对象，其中包含在对数刻度上均匀分布的数字。 刻度的开始和结束端点是某个底数的幂，通常为 10。<code>numpy.logscale(start, stop, num, endpoint, base, dtype)</code></p>
<ol>
<li>start 起始值是base ** start</li>
<li>stop 终止值是base ** stop</li>
<li>num 范围内的数值数量，默认为50</li>
<li>endpoint 如果为true，终止值包含在输出数组当中</li>
<li>base 对数空间的底数，默认为10</li>
<li>dtype 输出数组的数据类型，如果没有提供，则取决于其它参数</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">17</span>]: d = np.linspace(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>)</div><div class="line">In [<span class="number">18</span>]: print(d)</div><div class="line">[ <span class="number">10.</span>   <span class="number">12.5</span>  <span class="number">15.</span>   <span class="number">17.5</span>  <span class="number">20.</span> ]</div><div class="line"></div><div class="line">In [<span class="number">19</span>]: e = np.linspace(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>, endpoint=<span class="keyword">False</span>)</div><div class="line">In [<span class="number">20</span>]: print(e)</div><div class="line">[ <span class="number">10.</span>  <span class="number">12.</span>  <span class="number">14.</span>  <span class="number">16.</span>  <span class="number">18.</span>]</div><div class="line"></div><div class="line">In [<span class="number">22</span>]: f = np.linspace(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>, retstep=<span class="keyword">True</span>)</div><div class="line">In [<span class="number">23</span>]: print(f)</div><div class="line">(array([ <span class="number">10.</span> ,  <span class="number">12.5</span>,  <span class="number">15.</span> ,  <span class="number">17.5</span>,  <span class="number">20.</span> ]), <span class="number">2.5</span>)</div><div class="line"></div><div class="line"><span class="comment"># 默认底数是 10</span></div><div class="line">In [<span class="number">25</span>]: g = np.logspace(<span class="number">1.0</span>, <span class="number">2.0</span>, num=<span class="number">10</span>)</div><div class="line">In [<span class="number">26</span>]: print(g)</div><div class="line">[  <span class="number">10.</span>           <span class="number">12.91549665</span>   <span class="number">16.68100537</span>   <span class="number">21.5443469</span>    <span class="number">27.82559402</span></div><div class="line">   <span class="number">35.93813664</span>   <span class="number">46.41588834</span>   <span class="number">59.94842503</span>   <span class="number">77.42636827</span>  <span class="number">100.</span>        ]</div><div class="line"></div><div class="line"><span class="comment"># 将对数空间的底数设置为 2</span></div><div class="line">In [<span class="number">29</span>]: a = np.logspace(<span class="number">1</span>, <span class="number">6</span>, num=<span class="number">10</span>, base=<span class="number">2</span>)</div><div class="line">In [<span class="number">30</span>]: print(a)</div><div class="line">[  <span class="number">2.</span>           <span class="number">2.93946898</span>   <span class="number">4.32023896</span>   <span class="number">6.34960421</span>   <span class="number">9.33223232</span></div><div class="line">  <span class="number">13.71590373</span>  <span class="number">20.1587368</span>   <span class="number">29.62799079</span>  <span class="number">43.54528001</span>  <span class="number">64.</span>        ]</div></pre></td></tr></table></figure>
<h3 id="NumPy-切片和索引"><a href="#NumPy-切片和索引" class="headerlink" title="NumPy - 切片和索引"></a>NumPy - 切片和索引</h3><p>单维数组切片和list的切片一样, 下面主要介绍多维数组的切片和索引<br>切片还可以使用省略号（…），来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的ndarray。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">31</span>]: b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</div><div class="line"></div><div class="line">In [<span class="number">32</span>]: print(b[<span class="number">1</span>:])</div><div class="line">[[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</div><div class="line"> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</div><div class="line"></div><div class="line"><span class="comment"># 返回第二列元素的数组</span></div><div class="line">In [<span class="number">33</span>]: print(b[..., <span class="number">1</span>])</div><div class="line">[<span class="number">2</span> <span class="number">5</span> <span class="number">8</span>]</div><div class="line"><span class="comment"># 返回第二行元素的数组</span></div><div class="line">In [<span class="number">34</span>]: print(b[<span class="number">1</span>, ...])</div><div class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</div><div class="line"><span class="comment"># 返回从第二列向后切片所有元素：</span></div><div class="line">In [<span class="number">36</span>]: print(b[..., <span class="number">1</span>:])</div><div class="line">[[<span class="number">2</span> <span class="number">3</span>]</div><div class="line"> [<span class="number">5</span> <span class="number">6</span>]</div><div class="line"> [<span class="number">8</span> <span class="number">9</span>]]</div></pre></td></tr></table></figure></p>
<h3 id="Numpy高级索引"><a href="#Numpy高级索引" class="headerlink" title="Numpy高级索引"></a>Numpy高级索引</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://blog.csdn.net/wizardforcel/article/details/53932970" target="_blank" rel="external">TutorialsPoint NumPy 教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之asyncio使用]]></title>
      <url>http://arvin-he.github.io/2017/06/06/python-asyncio-2017-06-06/</url>
      <content type="html"><![CDATA[<h3 id="asyncio简介"><a href="#asyncio简介" class="headerlink" title="asyncio简介"></a>asyncio简介</h3><p>asyncio是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。<br>asyncio的编程模型就是一个消息循环。我们从asyncio模块中直接获取一个EventLoop的引用，然后把需要执行的协程扔到EventLoop中执行，就实现了异步IO。</p>
<p>到了Python 3.5添加了async和await两个关键字，分别用来替换asyncio.coroutine和yield from。自此，协程成为新的语法，而不再是一种生成器类型了。此外,事件循环与协程的引入，可以极大提高高负载下程序的I/O性能。除此之外还增加了async with(异步上下文管理)、async for(异步迭代器)语法。还有在新发布的Python 3.6里面可以用异步生成器了.</p>
<p>当给一个函数添加了async关键字，就会把它变成一个异步函数。<br>async/await是Python提供的异步编程API，而asyncio只是一个利用 async/await API进行异步编程的框架.<br>现存的一些库其实并不能原生的支持asyncio（因为会发生阻塞或者功能不可用），比如requests，<br>如果要写爬虫，配合asyncio的应该用aiohttp，其他的如数据库驱动等各种Python对应的库也都得使用对应的aioXXX版本了。</p>
<p>需要进行协程切换的地方，就需要使用await关键字</p>
<h3 id="同步与异步-阻塞与非阻塞概念"><a href="#同步与异步-阻塞与非阻塞概念" class="headerlink" title="同步与异步/阻塞与非阻塞概念"></a>同步与异步/阻塞与非阻塞概念</h3><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><p>同步和异步关注的是消息通信机制 (synchronous communication/ asynchronous communication)<br>所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由调用者主动等待这个调用的结果。<br>而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。<br>典型的异步编程模型比如Node.js，举个通俗的例子：<br>你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下”，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。<br>而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。</p>
<h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.<br>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。<br>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。<br>还是上面的例子，<br>你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。<br>在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。</p>
<h3 id="asyncio使用"><a href="#asyncio使用" class="headerlink" title="asyncio使用"></a>asyncio使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="comment"># 将heloo</span></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Hello world!"</span>)</div><div class="line">    <span class="comment"># 异步调用asyncio.sleep(1):</span></div><div class="line">    r = <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"Hello again!"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 获取EventLoop:</span></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line"><span class="comment"># 执行coroutine</span></div><div class="line">loop.run_until_complete(hello())</div><div class="line">loop.close()</div></pre></td></tr></table></figure>
<p><code>@asyncio.coroutine</code>把一个generator标记为coroutine类型，然后，我们就把这个coroutine扔到EventLoop中执行。</p>
<p><code>hello()</code>会首先打印出Hello world!，然后，<code>yield from</code>语法可以让我们方便地调用另一个generator。由于<code>asyncio.sleep()</code>也是一个coroutine，所以线程不会等待<code>asyncio.sleep()</code>，而是直接中断并执行下一个消息循环。当<code>asyncio.sleep()</code>返回时，线程就可以从yield from拿到返回值（此处是None），然后接着执行下一行语句。</p>
<p>把asyncio.sleep(1)看成是一个耗时1秒的IO操作，在此期间，主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。</p>
<p>我们用Task封装两个coroutine试试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello1</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'Hello 1 in! (%s)'</span> % threading.currentThread())</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">'Hello 1 out! (%s)'</span> % threading.currentThread())</div><div class="line"></div><div class="line">    </div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'Hello 2 in! (%s)'</span> % threading.currentThread())</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">'Hello 2 out! (%s)'</span> % threading.currentThread())</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">tasks = [hello1(), hello2()]</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">loop.close()</div><div class="line"></div><div class="line"></div><div class="line">Hello <span class="number">1</span> <span class="keyword">in</span>! (&lt;_MainThread(MainThread, started <span class="number">6620</span>)&gt;)</div><div class="line">Hello <span class="number">2</span> <span class="keyword">in</span>! (&lt;_MainThread(MainThread, started <span class="number">6620</span>)&gt;)</div><div class="line">Hello <span class="number">1</span> out! (&lt;_MainThread(MainThread, started <span class="number">6620</span>)&gt;)</div><div class="line">Hello <span class="number">2</span> out! (&lt;_MainThread(MainThread, started <span class="number">6620</span>)&gt;)</div></pre></td></tr></table></figure></p>
<p>由打印的当前线程名称可以看出，两个coroutine是由同一个线程并发执行的。<br>如果把asyncio.sleep()换成真正的IO操作，则多个coroutine就可以由一个线程并发执行。</p>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>Python 3.5开始引入了新的语法async和await，可以让coroutine的代码更简洁易读。<br><strong>请注意:</strong>async和await是针对coroutine的新语法,要使用新语法,只需要做两步简单的替换：</p>
<ol>
<li>把@asyncio.coroutine替换为async；</li>
<li>把yield from替换为await。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Hello world!"</span>)</div><div class="line">    r = <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"Hello again!"</span>)</div></pre></td></tr></table></figure>
<p>async/await新语法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Hello world!"</span>)</div><div class="line">    r = <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">"Hello again!"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://juejin.im/post/5857b8a98e450a006cb060fc" target="_blank" rel="external">https://juejin.im/post/5857b8a98e450a006cb060fc</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00144661533005329786387b5684be385062a121e834ac7000" target="_blank" rel="external">廖雪峰教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之gevent使用]]></title>
      <url>http://arvin-he.github.io/2017/06/06/python-gevent-2017-06-06/</url>
      <content type="html"><![CDATA[<h3 id="Greenlets"><a href="#Greenlets" class="headerlink" title="Greenlets"></a>Greenlets</h3><p>在gevent中用到的主要模式是Greenlet, 它是以C扩展模块形式接入Python的轻量级协程。 Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。<strong>在任何时刻，只有一个协程在运行。</strong> 在gevent里面，上下文切换是通过yielding来完成的. 当我们在受限于网络或IO的函数中使用gevent，这些函数会被协作式的调度， gevent的真正能力会得到发挥。Gevent处理了所有的细节， 来保证你的网络库会在可能的时候，隐式交出greenlet上下文的执行权。<br>greenlet具有确定性。在相同配置相同输入的情况下，它们总是 会产生相同的输出。<br>即使gevent通常带有确定性，当开始与如socket或文件等外部服务交互时， 不确定性也可能溜进你的程序中。因此尽管gevent线程是一种“确定的并发”形式， 使用它仍然可能会遇到像使用POSIX线程或进程时遇到的那些问题。涉及并发长期存在的问题就是竞争条件(race condition)。简单来说， 当两个并发线程/进程都依赖于某个共享资源同时都尝试去修改它的时候， 就会出现竞争条件。这会导致资源修改的结果状态依赖于时间和执行顺序。 这是个问题，我们一般会做很多努力尝试避免竞争条件， 因为它会导致整个程序行为变得不确定。最好的办法是始终避免所有全局的状态。全局状态和导入时(import-time)副作用总是会 反咬你一口！</p>
<h3 id="创建Greenlets"><a href="#创建Greenlets" class="headerlink" title="创建Greenlets"></a>创建Greenlets</h3><p>gevent对Greenlet初始化提供了一些封装，最常用的使用模板之一有<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> Greenlet</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(message, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Each thread will be passed the message, and n arguments</span></div><div class="line"><span class="string">    in its initialization.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    gevent.sleep(n)</div><div class="line">    print(message)</div><div class="line"></div><div class="line"><span class="comment"># Initialize a new Greenlet instance running the named function foo</span></div><div class="line">thread1 = Greenlet.spawn(foo, <span class="string">"Hello"</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># Wrapper for creating and running a new Greenlet from the named</span></div><div class="line"><span class="comment"># function foo, with the passed arguments</span></div><div class="line">thread2 = gevent.spawn(foo, <span class="string">"I live!"</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># Lambda expressions</span></div><div class="line">thread3 = gevent.spawn(<span class="keyword">lambda</span> x: (x+<span class="number">1</span>), <span class="number">2</span>)</div><div class="line"></div><div class="line">threads = [thread1, thread2, thread3]</div><div class="line"></div><div class="line"><span class="comment"># Block until all threads complete.</span></div><div class="line">gevent.joinall(threads)</div><div class="line"></div><div class="line"></div><div class="line">Hello</div><div class="line">I live!</div></pre></td></tr></table></figure></p>
<p>除使用基本的Greenlet类之外，你也可以子类化Greenlet类，重载它的_run方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> Greenlet</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGreenlet</span><span class="params">(Greenlet)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, message, n)</span>:</span></div><div class="line">        Greenlet.__init__(self)</div><div class="line">        self.message = message</div><div class="line">        self.n = n</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.message)</div><div class="line">        gevent.sleep(self.n)</div><div class="line"></div><div class="line">g = MyGreenlet(<span class="string">"Hi there!"</span>, <span class="number">3</span>)</div><div class="line">g.start()</div><div class="line">g.join()</div><div class="line"></div><div class="line">Hi there!</div></pre></td></tr></table></figure>
<h3 id="Greenlet状态"><a href="#Greenlet状态" class="headerlink" title="Greenlet状态"></a>Greenlet状态</h3><p>就像任何其他成段代码，Greenlet也可能以不同的方式运行失败。 Greenlet可能未能成功抛出异常，不能停止运行，或消耗了太多的系统资源。</p>
<p>一个greenlet的状态通常是一个依赖于时间的参数。在greenlet中有一些标志， 让你可以监视它的线程内部状态：</p>
<p>started – Boolean, 指示此Greenlet是否已经启动<br>ready() – Boolean, 指示此Greenlet是否已经停止<br>successful() – Boolean, 指示此Greenlet是否已经停止而且没抛异常<br>value – 任意值, 此Greenlet代码返回的值<br>exception – 异常, 此Greenlet内抛出的未捕获异常</p>
<h3 id="程序停止"><a href="#程序停止" class="headerlink" title="程序停止"></a>程序停止</h3><p>当主程序(main program)收到一个SIGQUIT信号时，不能成功做yield操作的 Greenlet可能会令意外地挂起程序的执行。这导致了所谓的僵尸进程， 它需要在Python解释器之外被kill掉。对此，一个通用的处理模式就是在主程序中监听SIGQUIT信号，在程序退出 调用gevent.shutdown。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">import</span> signal</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_forever</span><span class="params">()</span>:</span></div><div class="line">    gevent.sleep(<span class="number">1000</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    gevent.signal(signal.SIGQUIT, gevent.shutdown)</div><div class="line">    thread = gevent.spawn(run_forever)</div><div class="line">    thread.join()</div></pre></td></tr></table></figure></p>
<h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>超时是一种对一块代码或一个Greenlet的运行时间的约束。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> Timeout</div><div class="line"></div><div class="line">seconds = <span class="number">10</span></div><div class="line"></div><div class="line">timeout = Timeout(seconds)</div><div class="line">timeout.start()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">()</span>:</span></div><div class="line">    gevent.sleep(<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    gevent.spawn(wait).join()</div><div class="line"><span class="keyword">except</span> Timeout:</div><div class="line">    print(<span class="string">'Could not complete'</span>)</div></pre></td></tr></table></figure></p>
<p>超时类也可以用在上下文管理器(context manager)中, 也就是with语句内。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> Timeout</div><div class="line"></div><div class="line">time_to_wait = <span class="number">5</span> <span class="comment"># seconds</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TooLong</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> Timeout(time_to_wait, TooLong):</div><div class="line">    gevent.sleep(<span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<h3 id="猴子补丁-Monkey-patching"><a href="#猴子补丁-Monkey-patching" class="headerlink" title="猴子补丁(Monkey patching)"></a>猴子补丁(Monkey patching)</h3><p>我们现在来到gevent的死角了. 在此之前，我已经避免提到猴子补丁(monkey patching) 以尝试使gevent这个强大的协程模型变得生动有趣，但现在到了讨论猴子补丁的黑色艺术 的时候了。你之前可能注意到我们提到了monkey.patch_socket()这个命令，这个 纯粹副作用命令是用来改变标准socket库的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line">print(socket.socket)</div><div class="line"></div><div class="line">print(<span class="string">"After monkey patch"</span>)</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</div><div class="line">monkey.patch_socket()</div><div class="line">print(socket.socket)</div><div class="line"></div><div class="line"><span class="keyword">import</span> select</div><div class="line">print(select.select)</div><div class="line">monkey.patch_select()</div><div class="line">print(<span class="string">"After monkey patch"</span>)</div><div class="line">print(select.select)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> '<span class="title">socket</span>.<span class="title">socket</span>'</span></div><div class="line"><span class="class"><span class="title">After</span> <span class="title">monkey</span> <span class="title">patch</span></span></div><div class="line"><span class="class"><span class="title">class</span> '<span class="title">gevent</span>.<span class="title">socket</span>.<span class="title">socket</span>'</span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">built</span>-<span class="title">in</span> <span class="title">function</span> <span class="title">select</span></span></div><div class="line"><span class="class"><span class="title">After</span> <span class="title">monkey</span> <span class="title">patch</span></span></div><div class="line"><span class="class"><span class="title">function</span> <span class="title">select</span> <span class="title">at</span> 0<span class="title">x1924de8</span></span></div></pre></td></tr></table></figure></p>
<p>Python的运行环境允许我们在运行时修改大部分的对象，包括模块，类甚至函数。 这是个一般说来令人惊奇的坏主意，因为它创造了“隐式的副作用”，如果出现问题 它很多时候是极难调试的。虽然如此，在极端情况下当一个库需要修改Python本身 的基础行为的时候，猴子补丁就派上用场了。在这种情况下，gevent能够 修改标准库里面大部分的阻塞式系统调用，包括socket、ssl、threading和 select等模块，而变为协作式运行。</p>
<p>例如，Redis的python绑定一般使用常规的tcp socket来与redis-server实例通信。 通过简单地调用gevent.monkey.patch_all()，可以使得redis的绑定协作式的调度 请求，与gevent栈的其它部分一起工作。</p>
<p>这让我们可以将一般不能与gevent共同工作的库结合起来，而不用写哪怕一行代码。 虽然猴子补丁仍然是邪恶的(evil)，但在这种情况下它是“有用的邪恶(useful evil)”。</p>
<h3 id="真实世界的应用"><a href="#真实世界的应用" class="headerlink" title="真实世界的应用"></a>真实世界的应用</h3><p>Gevent ZeroMQ<br>ZeroMQ 被它的作者描述为 “一个表现得像一个并发框架的socket库”。 它是一个非常强大的，为构建并发和分布式应用的消息传递层。</p>
<p>ZeroMQ提供了各种各样的socket原语。最简单的是请求-应答socket对 (Request-Response socket pair)。一个socket有两个方法send和recv， 两者一般都是阻塞操作。但是Travis Cline 的一个杰出的库弥补了这一点，这个库使用gevent.socket来以非阻塞的方式 轮询ZereMQ socket。通过命令：</p>
<p>pip install gevent-zeromq</p>
<p>你可以从PyPi安装gevent-zeremq。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Note: Remember to ``pip install pyzmq gevent_zeromq``</span></div><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent_zeromq <span class="keyword">import</span> zmq</div><div class="line"></div><div class="line"><span class="comment"># Global Context</span></div><div class="line">context = zmq.Context()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">()</span>:</span></div><div class="line">    server_socket = context.socket(zmq.REQ)</div><div class="line">    server_socket.bind(<span class="string">"tcp://127.0.0.1:5000"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> request <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">        server_socket.send(<span class="string">"Hello"</span>)</div><div class="line">        print(<span class="string">'Switched to Server for %s'</span> % request)</div><div class="line">        <span class="comment"># Implicit context switch occurs here</span></div><div class="line">        server_socket.recv()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">()</span>:</span></div><div class="line">    client_socket = context.socket(zmq.REP)</div><div class="line">    client_socket.connect(<span class="string">"tcp://127.0.0.1:5000"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> request <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line"></div><div class="line">        client_socket.recv()</div><div class="line">        print(<span class="string">'Switched to Client for %s'</span> % request)</div><div class="line">        <span class="comment"># Implicit context switch occurs here</span></div><div class="line">        client_socket.send(<span class="string">"World"</span>)</div><div class="line"></div><div class="line">publisher = gevent.spawn(server)</div><div class="line">client    = gevent.spawn(client)</div><div class="line"></div><div class="line">gevent.joinall([publisher, client])</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">Switched to Server <span class="keyword">for</span> <span class="number">1</span></div><div class="line">Switched to Client <span class="keyword">for</span> <span class="number">1</span></div><div class="line">Switched to Server <span class="keyword">for</span> <span class="number">2</span></div><div class="line">Switched to Client <span class="keyword">for</span> <span class="number">2</span></div><div class="line">Switched to Server <span class="keyword">for</span> <span class="number">3</span></div><div class="line">Switched to Client <span class="keyword">for</span> <span class="number">3</span></div><div class="line">Switched to Server <span class="keyword">for</span> <span class="number">4</span></div><div class="line">Switched to Client <span class="keyword">for</span> <span class="number">4</span></div><div class="line">Switched to Server <span class="keyword">for</span> <span class="number">5</span></div><div class="line">Switched to Client <span class="keyword">for</span> <span class="number">5</span></div><div class="line">Switched to Server <span class="keyword">for</span> <span class="number">6</span></div><div class="line">Switched to Client <span class="keyword">for</span> <span class="number">6</span></div><div class="line">Switched to Server <span class="keyword">for</span> <span class="number">7</span></div><div class="line">Switched to Client <span class="keyword">for</span> <span class="number">7</span></div><div class="line">Switched to Server <span class="keyword">for</span> <span class="number">8</span></div><div class="line">Switched to Client <span class="keyword">for</span> <span class="number">8</span></div><div class="line">Switched to Server <span class="keyword">for</span> <span class="number">9</span></div><div class="line">Switched to Client <span class="keyword">for</span> <span class="number">9</span></div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://xlambda.com/gevent-tutorial/" target="_blank" rel="external">Gevent指南</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node最佳实践1]]></title>
      <url>http://arvin-he.github.io/2017/06/06/node-practice-2017-06-06/</url>
      <content type="html"><![CDATA[<h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><h3 id="回调惯例"><a href="#回调惯例" class="headerlink" title="回调惯例"></a>回调惯例</h3><p>模块应该公开一个错误优先（error-first）的回调接口。<br>就像下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">dragonName, callback</span>) </span>&#123; </div><div class="line">     <span class="comment">// 这里做一些处理工作  </span></div><div class="line">     <span class="keyword">var</span> dragon = createDragon(dragonName);</div><div class="line">     <span class="comment">// 注意, callback第一个参数是 error</span></div><div class="line">     <span class="comment">// 这里传入null</span></div><div class="line">     <span class="comment">// 如果出错则传入错误信息</span></div><div class="line">     <span class="keyword">return</span> callback(<span class="literal">null</span>, dragon);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>确保在回调中检查错误信息, 要更好地弄明白为什么必须这样做，先想办法创建一个会挂掉的例子，然后修复它。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这个例子是会挂掉的, 我们很快会修复 :)</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">filePath, callback</span>)</span>&#123;</div><div class="line">     fs.readFile(filePath, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">          callback(<span class="built_in">JSON</span>.parse(data));</div><div class="line">     &#125;);</div><div class="line">&#125;</div><div class="line">readJSON(<span class="string">'./package.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, pkg</span>) </span>&#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>首要问题是 readJSON函数，在执行过程中出现了错误，而这个函数却没有做任何错误检查。你务必要先做错误检查。<br>改进方案：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这个例子还是会挂掉 , 很快会修复!</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">filePath, callback</span>) </span>&#123;</div><div class="line">    fs.readFile(filePath, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">     <span class="comment">// 这里我们先判断是否有错误发生    </span></div><div class="line">     <span class="keyword">if</span> (err) &#123;     </div><div class="line">          <span class="comment">// 出现错误，将错误传入回调函数     </span></div><div class="line">          <span class="comment">// 记住: 错误优先（error-first） 回调</span></div><div class="line">          callback(err);    </div><div class="line">     &#125;   </div><div class="line">     <span class="comment">// 如果没有错误则传入null和JSON</span></div><div class="line">     callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="将回调函数返回"><a href="#将回调函数返回" class="headerlink" title="将回调函数返回"></a>将回调函数返回</h3><p>上面的例子还是存在一个错误，就是如果错误发生了，if  中的表达式不会停止运行，而是继续运行下去。这会导致很多未知的错误。长话短说，务必通过回调函数返回。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这个例子仍旧会挂掉, 马上修复!</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">filePath, callback</span>) </span>&#123;</div><div class="line">    fs.readFile(filePath, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="keyword">return</span> callback(err);    </div><div class="line">     &#125;    </div><div class="line"> </div><div class="line">     <span class="keyword">return</span> callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="仅在同步代码中使用try-catch"><a href="#仅在同步代码中使用try-catch" class="headerlink" title="仅在同步代码中使用try-catch"></a>仅在同步代码中使用try-catch</h3><p>几乎完美了！但还有一件事，我们必须要小心 JSON.parse。调用JSON.parse 时，如果传入的字符串无法解析成JSON格式，会抛出异常。<br>由于JSON.parse是同步发生的，我们可以用try-catch包装起来。<strong>请注意:</strong>你只能对同步代码块做此操作，对回调函数是不起作用的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这个例子终于可以正常工作啦 :)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">filePath, callback</span>) </span>&#123;</div><div class="line">fs.readFile(filePath, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> parsedJson;</div><div class="line">     <span class="comment">// 处理错误</span></div><div class="line">     <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="keyword">return</span> callback(err);</div><div class="line">     &#125;</div><div class="line">     <span class="comment">// 解析JSON</span></div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">          parsedJson = <span class="built_in">JSON</span>.parse(data);</div><div class="line">     &#125; <span class="keyword">catch</span> (exception)&#123;</div><div class="line">          <span class="keyword">return</span> callback(exception);</div><div class="line">     &#125;</div><div class="line">     <span class="comment">// 一切工作正常</span></div><div class="line">     <span class="keyword">return</span> callback(<span class="literal">null</span>, parsedJson);</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="尽量避免-this-和-new-关键字"><a href="#尽量避免-this-和-new-关键字" class="headerlink" title="尽量避免 this 和 new 关键字"></a>尽量避免 this 和 new 关键字</h3><p>由于Node涉及了大量的回调操作，并且重度使用高阶函数控制流程，因此在Node中绑定一个具体的上下文并不总是行之有效。使用函数式编程风格能避免不少麻烦。<br>当然，在某些情况下原型（prototype）可能更高效，不过只要可能，还是尽量避免它们。</p>
<h3 id="创建微模块"><a href="#创建微模块" class="headerlink" title="创建微模块"></a>创建微模块</h3><p>用unix的方式：</p>
<blockquote>
<p>开发者构建一个程序时应该将其分成很多简单的模块，各部分由定义良好的接口整合,所以问题是局部的，并且能通过替换程序部件的方式在将来的版中加入新特性。<br>不要创建怪兽般的代码，保持简洁，一个模块就只做一件事，但是要做到极致。</p>
</blockquote>
<h3 id="使用良好的异步模式"><a href="#使用良好的异步模式" class="headerlink" title="使用良好的异步模式"></a>使用良好的异步模式</h3><p>使用async异步处理模块。</p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>错误可以分为两部分，操作错误和编程错误。</p>
<p>操作错误<br>精心编写的应用程序中也一样会出现操作错误。因为这些不是 bug ，而是由于操作系统或远程服务导致的，例如：<br>请求超时, 系统内存不足, 远程连接失败, </p>
<p>处理操作错误<br>根据不同运行错误的类型，你可以采用下面的方式处理：<br>尝试解决错误——如果文件丢失，你可以提前创建一个。<br>当处理网络通信时，可以重试操作。<br>把问题告诉客户，表示有些功能不能正常工作——可以用于处理用户输入。<br>如果错误无法在当前条件下解决，终止进程，例如应用程序无法读取它的配置文件。<br>还有，上述的所有处理方式都应该记录日志。</p>
<p>编程错误<br>编程错误都算是bug。下面所列的几条你应该避免，例如：<br>调用异步函数时没有回调。<br>不能读取未定义（undefined）的属性</p>
<p>处理编程错误<br>如果错误属于bug，立刻终止程序，你并不知道应用当前的运行状态。当错误发生时，进程控制系统应该会重启应用程序，例如：supervisord 或者 monit。</p>
<h2 id="工作流技巧"><a href="#工作流技巧" class="headerlink" title="工作流技巧"></a>工作流技巧</h2><h3 id="使用-npm-init-创建新项目"><a href="#使用-npm-init-创建新项目" class="headerlink" title="使用 npm init 创建新项目"></a>使用 npm init 创建新项目</h3><p>init 命令可以帮助你创建应用程序的 package.json 配置文件。文件设置了一些默认配置，之后可以修改。<br>创建一个优秀的项目应该这样开始：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir my-awesome-new-project </div><div class="line">cd my-awesome-new-project </div><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>指定开始和测试脚本。<br>在你的 package.son 文件中，你可以在 scripts 部分中设置脚本。npm init  默认会创建两个，start 和 test 脚本。可以通过 npm start 和 npm test 命令运行。还有，作为加分项：你可以在这里加入自定义脚本，通过 npm run-script <script_name> 来运行。<br>注意，NPM 会通过设置 $PATH 来扫描 node_modules/.bin 下的所有可执行脚本。这样可以避免安装全局的 NPM 模块。</script_name></p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>生产部署和演示部署都应该由环境变量来实现。最主流的实现方式是同时在生产和演示中设置 NODE_ENV变量。<br>根据你设置的环境变量，你可以使用 nconf 模块来加载配置信息。<br>当然，你也可以在你的Node.js 应用中使用其它环境变量设置 process.env，这是一个包含了用户环境的对象。</p>
<h3 id="不要重新发明轮子"><a href="#不要重新发明轮子" class="headerlink" title="不要重新发明轮子"></a>不要重新发明轮子</h3><p>务必优先寻找现成的解决方案。NPM 的库超级多，涵盖了你平时需要的大部分功能。</p>
<h3 id="使用风格指南"><a href="#使用风格指南" class="headerlink" title="使用风格指南"></a>使用风格指南</h3><p>所有的代码都保持统一风格有助于理解大型代码库。其中应该包含缩进、变量命名、最佳实践以及其他方面。<br>如果想看一个实际的例子，请查看  RisingStack 编写的 <a href="https://github.com/RisingStack/node-style-guide" target="_blank" rel="external">Node.js 风格指南</a>。</p>
<h3 id="保持风格一致"><a href="#保持风格一致" class="headerlink" title="保持风格一致"></a>保持风格一致</h3><p>JSCS 是一个JavaScript 编码风格检查工具。将JSCS加入项目对你来说小菜一碟：<code>npm install jscs --save-dev</code>, 你需要做的下一步关键就是在 package.json 文件中加入下面的代码来开启它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scripts: &#123;  </div><div class="line">    &quot;jscs&quot;: &quot;jscs index.js&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然，你也可以加入多个文件、目录检查。但为什么我们仅仅在 package.json 文件中创建了一个自定义的脚本呢？我们是以本地的方式安装 jscs 的，所以在一个系统中可以有多个不同版本。这样还能正常工作是因为NPM 执行时会将 <code>node_modules/.bin</code>  设置到 PATH上。</p>
<p>你可以在<code>.jscsrc</code> 文件中定义验证规则，或者使用预设规则。从这里可以查看可用的预设，通过 <code>--preset=[PRESET_NAME]</code>来应用。</p>
<p>执行 JSHint、JSCS 规则<br>你的构建过程还应该包含 JSHint 和 JSCS，不过在开发者的电脑上运行 <code>pre-commit checks</code> 或许是个不错的主意。<br>要实现这个很简单，你可以使用 pre-commit NPM 库：<code>npm install --save-dev pre-commit</code>, 然后在 package.json 文件中作如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pre-commit&quot;: [  </div><div class="line">    &quot;jshint&quot;,</div><div class="line">    &quot;jscs&quot;</div><div class="line">],</div></pre></td></tr></table></figure></p>
<p>注意，pre-commit 将会扫描 package.json中script里的所有脚本。开启以后，每次提交时都会自动进行检查。</p>
<h3 id="用JS替换JSON做配置"><a href="#用JS替换JSON做配置" class="headerlink" title="用JS替换JSON做配置"></a>用JS替换JSON做配置</h3><p>我们看到大量的项目都是使用JSON文件做配置的。这是目前最普遍的做法，JS配置文件则能够提供更大的灵活度。所以我们推荐你使用 config.js 文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url =<span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">module</span>.exports = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> redisToGoConfig;</div><div class="line"> </div><div class="line">config.server = &#123;</div><div class="line">  host: <span class="string">'0.0.0.0'</span>,</div><div class="line">  port: process.env.PORT || <span class="number">3000</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="comment">// look, a comment in the config file!</span></div><div class="line"><span class="comment">// would be tricky in a JSON ;)</span></div><div class="line">config.redis = &#123;</div><div class="line">  host: <span class="string">'localhost'</span>,</div><div class="line">  port: <span class="number">6379</span>,</div><div class="line">  options: &#123;</div><div class="line"> </div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (process.env.REDISTOGO_URL) &#123;</div><div class="line">  redisToGoConfig = url.parse(process.env.REDISTOGO_URL);</div><div class="line">  config.redis.port = redisToGoConfig.port;</div><div class="line">  config.redis.host = redisToGoConfig.hostname;</div><div class="line">  config.redis.options.auth_pass = redisToGoConfig.auth.split(<span class="string">':'</span>)[<span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用-NODE-PATH"><a href="#使用-NODE-PATH" class="headerlink" title="使用 NODE_PATH"></a>使用 NODE_PATH</h3><p>你是否曾经碰到过下面这种情况？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">'../../../../lib/myModule'</span>);</div><div class="line"> </div><div class="line">myModule.doSomething(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>当你的项目结构变得错综复杂，模块依赖会非常麻烦。要解决这个问题有两个办法：</p>
<ol>
<li>把你的模块软链接到node_modules目录下。</li>
<li>使用 NODE_PATH。<br>在RisingStack我们使用 <code>NODE_PATH</code> 的方式，因为将所有相关文件软链接到 node_modules目录需要大量额外的工作，并且在很多操作系统下都不适用。</li>
</ol>
<p>设置 NODE_PATH<br>假设你的项目结构是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--lib</div><div class="line">  --model</div><div class="line">    --car.js</div><div class="line">  --index.js</div><div class="line">  --package.json</div></pre></td></tr></table></figure></p>
<p>我们可以使用 指向 lib 目录的<code>NODE_PATH</code>，而不是使用相对路径。在我们的package.json 的 <code>start script</code>部分，我们使用<code>NODE_PATH</code>设置并且用<code>npm start</code>运行项目。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Car = <span class="built_in">require</span>(<span class="string">'model/Car'</span>);</div><div class="line"> </div><div class="line"> <span class="built_in">console</span>.log(<span class="string">'I am a Car!'</span>);</div><div class="line"> </div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"node_path"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"NODE_PATH=lib node index.js"</span></div><div class="line">&#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>依赖注入是一种软件设计模式，是指将一到多个依赖（或服务）注入或通过引用的方式引入到需要依赖的对象。 依赖注入在测试中非常有用。使用这个模式你可以轻松模拟模块间的依赖关系。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">userModel</span> (<span class="params">options</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> db;</div><div class="line"><span class="keyword">if</span> (!options.db) &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Options.db is required'</span>);</div><div class="line">&#125;</div><div class="line">db = options.db;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">  create: <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    db.query(<span class="string">'INSERT ...'</span>, done);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">module</span>.exports = userModel;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> db = <span class="built_in">require</span>(<span class="string">'db'</span>);</div><div class="line"><span class="comment">// do some init here, or connect</span></div><div class="line">db.init();</div><div class="line"> </div><div class="line"><span class="keyword">var</span> userModel = <span class="built_in">require</span>(<span class="string">'User'</span>)(&#123;</div><div class="line">db: db</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">userModel.create(<span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test = <span class="built_in">require</span>(<span class="string">'tape'</span>);</div><div class="line"><span class="keyword">var</span> userModel = <span class="built_in">require</span>(<span class="string">'User'</span>);</div><div class="line"> </div><div class="line">test(<span class="string">'it creates a user with id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> user = &#123;</div><div class="line">id: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> fakeDb = &#123;</div><div class="line">query: <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">done(<span class="literal">null</span>, user);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">userModel(&#123;</div><div class="line">db: fakeDb</div><div class="line">&#125;).create(<span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</div><div class="line">t.equal(user.id, <span class="number">1</span>, <span class="string">'User id should match'</span>);</div><div class="line">t.end();</div><div class="line">&#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的例子中我们有两个不同的 db。在 index.js 文件中是“真实的” db 模块，而第二段代码中我们只是简单地创建了一个模拟的db模块。</p>
<p>这样我们在测试时就可以轻松地将模拟的依赖引入模块。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://web.jobbole.com/84401/" target="_blank" rel="external">NodeJS 最佳实践</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node笔记3]]></title>
      <url>http://arvin-he.github.io/2017/06/03/node-notes3-2017-06-03/</url>
      <content type="html"><![CDATA[<h3 id="更有用的场景"><a href="#更有用的场景" class="headerlink" title="更有用的场景"></a>更有用的场景</h3><p>服务器，请求路由以及请求处理程序都已经完成了，下面让我们按照此前的用例给网站添加交互：用户选择一个文件，上传该文件，然后在浏览器中看到上传的文件。 为了保持简单，我们假设用户只会上传图片，然后我们应用将该图片显示到浏览器中。</p>
<p>要实现该功能，分为如下两步：<br>首先，让我们来看看如何处理POST请求（非文件上传），<br>然后，使用Node.js的一个用于文件上传的外部模块。</p>
<h3 id="处理POST请求"><a href="#处理POST请求" class="headerlink" title="处理POST请求"></a>处理POST请求</h3><p>下面显示一个文本区（textarea）供用户输入内容，然后通过POST请求提交给服务器。最后，服务器接受到请求，通过处理程序将输入的内容展示到浏览器中。</p>
<p>/start请求处理程序用于生成带文本区的表单，因此，我们将requestHandlers.js修改为如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> body = <span class="string">'&lt;html&gt;'</span>+</div><div class="line">    <span class="string">'&lt;head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;meta http-equiv="Content-Type" content="text/html; '</span>+</div><div class="line">    <span class="string">'charset=UTF-8" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;form action="/upload" method="post"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;textarea name="text" rows="20" cols="60"&gt;&lt;/textarea&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="submit" value="Submit text" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/form&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/html&gt;'</span>;</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  response.write(<span class="string">"Hello Upload"</span>);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure></p>
<p>重启服务器,就可以看到效果了.虽然直接将视觉元素放在请求处理程序中的方式太丑陋了。但是，这里不会讲述MVC之类的模式，因为这对于你了解JavaScript或者Node.js环境来说没多大关系。</p>
<p>接下来探讨 当用户提交表单时，触发/upload请求处理程序处理POST请求的问题。<br>这里采用异步回调来实现非阻塞地处理POST请求的数据。因为POST请求一般都比较“重” —— 用户可能会输入大量的内容。用阻塞的方式处理大数据量的请求必然会导致用户操作的阻塞。</p>
<p>为了使整个过程非阻塞，Node.js会将POST数据拆分成很多小的数据块，然后通过触发特定的事件，将这些小数据块传递给回调函数。这里的特定的事件有data事件（表示新的小数据块到达了）以及end事件（表示所有的数据都已经接收完毕）。</p>
<p>我们需要告诉Node.js当这些事件触发的时候，回调哪些函数。怎么告诉呢？ 我们通过在request对象上注册监听器（listener） 来实现。这里的request对象是每次接收到HTTP请求时候，都会把该对象传递给onRequest回调函数。</p>
<p>如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">request.addListener(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</div><div class="line">  <span class="comment">// called when a new chunk of data was received</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">request.addListener(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// called when all chunks of data have been received</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>问题来了，这部分逻辑写在哪里呢？ 我们现在只是在服务器中获取到了request对象 —— 我们并没有像之前response对象那样，把 request 对象传递给请求路由和请求处理程序。</p>
<p>在我看来，获取所有来自请求的数据，然后将这些数据给应用层处理，应该是HTTP服务器要做的事情。因此，我建议，我们直接在服务器中处理POST数据，然后将最终的数据传递给请求路由和请求处理器，让他们来进行进一步的处理。</p>
<p>因此，实现思路就是： 将data和end事件的回调函数直接放在服务器中，在data事件回调中收集所有的POST数据，当接收到所有数据，触发end事件后，其回调函数调用请求路由，并将数据传递给它，然后，请求路由再将该数据传递给请求处理程序。</p>
<p>先从server.js开始：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> postData = <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"></div><div class="line">    request.setEncoding(<span class="string">"utf8"</span>);</div><div class="line">    <span class="comment">// 注册监听器</span></div><div class="line">    request.addListener(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">postDataChunk</span>) </span>&#123;</div><div class="line">      postData += postDataChunk;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Received POST data chunk '"</span>+</div><div class="line">      postDataChunk + <span class="string">"'."</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    request.addListener(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// 将请求路由的调用移到end事件处理程序中, 同时还把POST数据传递给请求路由</span></div><div class="line">      route(handle, pathname, response, postData);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure></p>
<p>上述代码做了三件事情：<br>首先，我们设置了接收数据的编码格式为UTF-8，<br>然后注册了“data”事件的监听器,用于收集每次接收到的新数据块,并将其赋值给postData变量.<br>最后，我们将请求路由的调用移到end事件处理程序中，以确保它只会当所有数据接收完毕后才触发，并且只触发一次。我们同时还把POST数据传递给请求路由，因为这些数据，请求处理程序会用到。</p>
<p>上述代码在每个数据块到达的时候输出了日志，这对于最终生产环境来说，是很不好的（数据量可能会很大，还记得吧？），但是，在开发阶段是很有用的，有助于让我们看到发生了什么。</p>
<p>我建议可以尝试下，尝试着去输入一小段文本，以及大段内容，当大段内容的时候，就会发现data事件会触发多次。</p>
<p>接下来在/upload页面，展示用户输入的内容。要实现该功能，我们需要将postData传递给请求处理程序，修改router.js为如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname, response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[pathname] === <span class="string">'function'</span>) &#123;</div><div class="line">    handle[pathname](response, postData);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"No request handler found for "</span> + pathname);</div><div class="line">    response.writeHead(<span class="number">404</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"404 Not found"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure></p>
<p>然后，在requestHandlers.js中，我们将数据包含在对upload请求的响应中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> body = <span class="string">'&lt;html&gt;'</span>+</div><div class="line">    <span class="string">'&lt;head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;meta http-equiv="Content-Type" content="text/html; '</span>+</div><div class="line">    <span class="string">'charset=UTF-8" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;form action="/upload" method="post"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;textarea name="text" rows="20" cols="60"&gt;&lt;/textarea&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="submit" value="Submit text" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/form&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/html&gt;'</span>;</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  response.write(<span class="string">"You've sent: "</span> + postData);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure></p>
<p>好了，我们现在可以接收POST数据并在请求处理程序中处理该数据了。</p>
<p>我们最后要做的是： 当前我们是把请求的整个消息体传递给了请求路由和请求处理程序。我们应该只把POST数据中，我们感兴趣的部分传递给请求路由和请求处理程序。在我们这个例子中，我们感兴趣的其实只是text字段。</p>
<p>我们可以使用此前介绍过的querystring模块来实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> body = <span class="string">'&lt;html&gt;'</span>+</div><div class="line">    <span class="string">'&lt;head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;meta http-equiv="Content-Type" content="text/html; '</span>+</div><div class="line">    <span class="string">'charset=UTF-8" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;form action="/upload" method="post"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;textarea name="text" rows="20" cols="60"&gt;&lt;/textarea&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="submit" value="Submit text" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/form&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/html&gt;'</span>;</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  response.write(<span class="string">"You've sent the text: "</span>+</div><div class="line">  querystring.parse(postData).text);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure></p>
<p>好了，以上就是关于处理POST数据的全部内容。</p>
<h3 id="处理文件上传"><a href="#处理文件上传" class="headerlink" title="处理文件上传"></a>处理文件上传</h3><p>最终的用例：允许用户上传图片，并将该图片在浏览器中显示出来。</p>
<p>这里要用到的外部模块是Felix Geisendörfer开发的node-formidable模块。它对解析上传的文件数据做了很好的抽象。 其实说白了，处理文件上传“就是”处理POST数据 —— 但是，麻烦的是在具体的处理细节，所以，这里采用现成的方案更合适点。</p>
<p>使用该模块，首先需要安装该模块。Node.js有它自己的包管理器，叫NPM。它可以让安装Node.js的外部模块变得非常方便。通过如下一条命令就可以完成该模块的安装：<code>npm install formidable</code>.<br>现在可以用formidable模块了——使用外部模块与内部模块类似，用require语句将其引入即可：<br><code>var formidable = require(&quot;formidable&quot;);</code>,这里该模块做的就是将通过HTTP POST请求提交的表单，在Node.js中可以被解析。我们要做的就是创建一个新的IncomingForm，它是对提交表单的抽象表示，之后，就可以用它解析request对象，获取表单中需要的数据字段。</p>
<p>node-formidable官方的例子展示了这两部分是如何融合在一起工作的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>),</div><div class="line">    http = <span class="built_in">require</span>(<span class="string">'http'</span>),</div><div class="line">    util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (req.url == <span class="string">'/upload'</span> &amp;&amp; req.method.toLowerCase() == <span class="string">'post'</span>) &#123;</div><div class="line">    <span class="comment">// parse a file upload</span></div><div class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</div><div class="line">    form.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>) </span>&#123;</div><div class="line">      res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">      res.write(<span class="string">'received upload:\n\n'</span>);</div><div class="line">      res.end(util.inspect(&#123;<span class="attr">fields</span>: fields, <span class="attr">files</span>: files&#125;));</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// show a file upload form</span></div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">  res.end(</div><div class="line">    <span class="string">'&lt;form action="/upload" enctype="multipart/form-data" '</span>+</div><div class="line">    <span class="string">'method="post"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="text" name="title"&gt;&lt;br&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="file" name="upload" multiple="multiple"&gt;&lt;br&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="submit" value="Upload"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/form&gt;'</span></div><div class="line">  );</div><div class="line">&#125;).listen(<span class="number">8888</span>);</div></pre></td></tr></table></figure></p>
<p>如果我们将上述代码，保存到一个文件中，并通过node来执行，就可以进行简单的表单提交了，包括文件上传。然后，可以看到通过调用form.parse传递给回调函数的files对象的内容，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">received upload:</div><div class="line"></div><div class="line">&#123; fields: &#123; title: &apos;Hello World&apos; &#125;,</div><div class="line">  files:</div><div class="line">   &#123; upload:</div><div class="line">      &#123; size: 1558,</div><div class="line">        path: &apos;/tmp/1c747974a27a6292743669e91f29350b&apos;,</div><div class="line">        name: &apos;us-flag.png&apos;,</div><div class="line">        type: &apos;image/png&apos;,</div><div class="line">        lastModifiedDate: Tue, 21 Jun 2011 07:02:41 GMT,</div><div class="line">        _writeStream: [Object],</div><div class="line">        length: [Getter],</div><div class="line">        filename: [Getter],</div><div class="line">        mime: [Getter] &#125; &#125; &#125;</div></pre></td></tr></table></figure></p>
<p>为了实现我们的功能，我们需要将上述代码应用到我们的应用中，另外，我们还要考虑如何将上传文件的内容（保存在/tmp目录中）显示到浏览器中。</p>
<p>我们先来解决后面那个问题： 对于保存在本地硬盘中的文件，如何才能在浏览器中看到呢？</p>
<p>显然，我们需要将该文件读取到我们的服务器中，使用一个叫fs的模块。</p>
<p>我们来添加/showURL的请求处理程序，该处理程序直接硬编码将文件/tmp/test.png内容展示到浏览器中。当然了，首先需要将该图片保存到这个位置才行。</p>
<p>将requestHandlers.js修改为如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>),</div><div class="line">    fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> body = <span class="string">'&lt;html&gt;'</span>+</div><div class="line">    <span class="string">'&lt;head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;meta http-equiv="Content-Type" '</span>+</div><div class="line">    <span class="string">'content="text/html; charset=UTF-8" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;form action="/upload" method="post"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;textarea name="text" rows="20" cols="60"&gt;&lt;/textarea&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="submit" value="Submit text" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/form&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/html&gt;'</span>;</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  response.write(<span class="string">"You've sent the text: "</span>+</div><div class="line">  querystring.parse(postData).text);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'show' was called."</span>);</div><div class="line">  fs.readFile(<span class="string">"/tmp/test.png"</span>, <span class="string">"binary"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(error) &#123;</div><div class="line">      response.writeHead(<span class="number">500</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">      response.write(error + <span class="string">"\n"</span>);</div><div class="line">      response.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"image/png"</span>&#125;);</div><div class="line">      response.write(file, <span class="string">"binary"</span>);</div><div class="line">      response.end();</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div><div class="line">exports.show = show;</div></pre></td></tr></table></figure></p>
<p>我们还需要将这新的请求处理程序，添加到index.js中的路由映射表中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</div><div class="line"><span class="keyword">var</span> requestHandlers = <span class="built_in">require</span>(<span class="string">"./requestHandlers"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> handle = &#123;&#125;</div><div class="line">handle[<span class="string">"/"</span>] = requestHandlers.start;</div><div class="line">handle[<span class="string">"/start"</span>] = requestHandlers.start;</div><div class="line">handle[<span class="string">"/upload"</span>] = requestHandlers.upload;</div><div class="line">handle[<span class="string">"/show"</span>] = requestHandlers.show;</div><div class="line"></div><div class="line">server.start(router.route, handle);</div></pre></td></tr></table></figure></p>
<p>重启服务器之后，通过访问<a href="http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。" target="_blank" rel="external">http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。</a></p>
<p>好，最后我们要的就是：</p>
<ul>
<li>在/start表单中添加一个文件上传元素</li>
<li>将node-formidable整合到我们的upload请求处理程序中，用于将上传的图片保存到/tmp/test.png</li>
<li>将上传的图片内嵌到/uploadURL输出的HTML中</li>
</ul>
<p>第一项很简单。只需要在HTML表单中，添加一个multipart/form-data的编码类型，移除此前的文本区，添加一个文件上传组件，并将提交按钮的文案改为“Upload file”即可。 如下requestHandler.js所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>),</div><div class="line">    fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> body = <span class="string">'&lt;html&gt;'</span>+</div><div class="line">    <span class="string">'&lt;head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;meta http-equiv="Content-Type" '</span>+</div><div class="line">    <span class="string">'content="text/html; charset=UTF-8" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;form action="/upload" enctype="multipart/form-data" '</span>+</div><div class="line">    <span class="string">'method="post"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="file" name="upload"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="submit" value="Upload file" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/form&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/html&gt;'</span>;</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  response.write(<span class="string">"You've sent the text: "</span>+</div><div class="line">  querystring.parse(postData).text);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">response, postData</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'show' was called."</span>);</div><div class="line">  fs.readFile(<span class="string">"/tmp/test.png"</span>, <span class="string">"binary"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(error) &#123;</div><div class="line">      response.writeHead(<span class="number">500</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">      response.write(error + <span class="string">"\n"</span>);</div><div class="line">      response.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"image/png"</span>&#125;);</div><div class="line">      response.write(file, <span class="string">"binary"</span>);</div><div class="line">      response.end();</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div><div class="line">exports.show = show;</div></pre></td></tr></table></figure></p>
<p>下一步相对比较复杂。这里有这样一个问题： 我们需要在upload处理程序中对上传的文件进行处理，这样的话，我们就需要将request对象传递给node-formidable的form.parse函数。</p>
<p>但是，我们有的只是response对象和postData数组。看样子，我们只能不得不将request对象从服务器开始一路通过请求路由，再传递给请求处理程序。 或许还有更好的方案，但是，不管怎么说，目前这样做可以满足我们的需求。</p>
<p>到这里，我们可以将postData从服务器以及请求处理程序中移除了 —— 一方面，对于我们处理文件上传来说已经不需要了，另外一方面，它甚至可能会引发这样一个问题： 我们已经“消耗”了request对象中的数据，这意味着，对于form.parse来说，当它想要获取数据的时候就什么也获取不到了。（因为Node.js不会对数据做缓存）</p>
<p>我们从server.js开始 —— 移除对postData的处理以及request.setEncoding （这部分node-formidable自身会处理），转而采用将request对象传递给请求路由的方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line">    route(handle, pathname, response, request);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure></p>
<p>接下来是 router.js —— 我们不再需要传递postData了，这次要传递request对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname, response, request</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[pathname] === <span class="string">'function'</span>) &#123;</div><div class="line">    handle[pathname](response, request);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"No request handler found for "</span> + pathname);</div><div class="line">    response.writeHead(<span class="number">404</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">    response.write(<span class="string">"404 Not found"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure>
<p>现在，request对象就可以在我们的upload请求处理程序中使用了。node-formidable会处理将上传的文件保存到本地/tmp目录中，而我们需要做的是确保该文件保存成/tmp/test.png。 没错，我们保持简单，并假设只允许上传PNG图片。</p>
<p>这里采用fs.renameSync(path1,path2)来实现。要注意的是，正如其名，该方法是同步执行的， 也就是说，如果该重命名的操作很耗时的话会阻塞。 这块我们先不考虑。</p>
<p>接下来，我们把处理文件上传以及重命名的操作放到一起，如下requestHandlers.js所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>),</div><div class="line">    fs = <span class="built_in">require</span>(<span class="string">"fs"</span>),</div><div class="line">    formidable = <span class="built_in">require</span>(<span class="string">"formidable"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> body = <span class="string">'&lt;html&gt;'</span>+</div><div class="line">    <span class="string">'&lt;head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;meta http-equiv="Content-Type" content="text/html; '</span>+</div><div class="line">    <span class="string">'charset=UTF-8" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/head&gt;'</span>+</div><div class="line">    <span class="string">'&lt;body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;form action="/upload" enctype="multipart/form-data" '</span>+</div><div class="line">    <span class="string">'method="post"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="file" name="upload" multiple="multiple"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="submit" value="Upload file" /&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/form&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/body&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/html&gt;'</span>;</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response, request</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"about to parse"</span>);</div><div class="line">  form.parse(request, <span class="function"><span class="keyword">function</span>(<span class="params">error, fields, files</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"parsing done"</span>);</div><div class="line">    fs.renameSync(files.upload.path, <span class="string">"/tmp/test.png"</span>);</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">    response.write(<span class="string">"received image:&lt;br/&gt;"</span>);</div><div class="line">    response.write(<span class="string">"&lt;img src='/show' /&gt;"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'show' was called."</span>);</div><div class="line">  fs.readFile(<span class="string">"/tmp/test.png"</span>, <span class="string">"binary"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(error) &#123;</div><div class="line">      response.writeHead(<span class="number">500</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">      response.write(error + <span class="string">"\n"</span>);</div><div class="line">      response.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"image/png"</span>&#125;);</div><div class="line">      response.write(file, <span class="string">"binary"</span>);</div><div class="line">      response.end();</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div><div class="line">exports.show = show;</div></pre></td></tr></table></figure></p>
<p>好了，重启服务器，我们应用所有的功能就可以用了。选择一张本地图片，将其上传到服务器，然后浏览器就会显示该图片。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之coroutine]]></title>
      <url>http://arvin-he.github.io/2017/06/02/python-coroutine-2017-06-02/</url>
      <content type="html"><![CDATA[<h3 id="Coroutine概念"><a href="#Coroutine概念" class="headerlink" title="Coroutine概念"></a>Coroutine概念</h3><p>Coroutine，又称作协程。即协同运行的例程，它是比是线程（thread）更细量级的用户态线程.特点是允许用户的主动调用和主动退出，挂起当前的例程然后返回值或去执行其他任务，接着返回原来停下的点继续执行。</p>
<p>一般函数都是线性执行的，不可能说执行到一半返回，等会儿又跑到原来的地方继续执行。但python（or其他动态语言）可以做到，答案是用yield语句。</p>
<p>其实是操作系统（OS）为我们做的工作，因为它具有getcontext和swapcontext这些特性，通过系统调用，我们可以把上下文和状态保存起来，切换到其他的上下文，这些特性为coroutine的实现提供了底层的基础。操作系统的Interrupts和Traps机制则为这种实现提供了可能性，因此它看起来可能是下面这样的:</p>
<p><img src="/2017/06/02/python-coroutine-2017-06-02/1.png" alt=""></p>
<h3 id="理解生成器（generator）"><a href="#理解生成器（generator）" class="headerlink" title="理解生成器（generator）"></a>理解生成器（generator）</h3><p>python有yield这个关键字，它能把一个函数变成一个generator，与return不同，yield在函数中返回值时会保存函数的状态，使下一次调用函数时会从上一次的状态继续执行，即从yield的下一条语句开始执行，节省存储空间，提高运行效率。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n  max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>注意: yield 对应的值在函数被调用时不会立刻返回，而是调用next方法时（本质上 for 循环也是调用 next 方法）才返回.</p>
<h3 id="生产者-消费者协程"><a href="#生产者-消费者协程" class="headerlink" title="生产者-消费者协程"></a>生产者-消费者协程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></div><div class="line">    status = <span class="keyword">True</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        n = <span class="keyword">yield</span> status</div><div class="line">        print(<span class="string">"我拿到了&#123;&#125;!"</span>.format(n))</div><div class="line">        <span class="keyword">if</span> n == <span class="number">3</span>:</div><div class="line">            status = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(consumer)</span>:</span></div><div class="line">    n = <span class="number">5</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        <span class="comment"># yield给主程序返回消费者的状态</span></div><div class="line">        <span class="keyword">yield</span> consumer.send(n)</div><div class="line">        n -= <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    c = consumer()</div><div class="line">    c.send(<span class="keyword">None</span>)</div><div class="line">    p = producer(c)</div><div class="line">    <span class="keyword">for</span> status <span class="keyword">in</span> p:</div><div class="line">        <span class="keyword">if</span> status == <span class="keyword">False</span>:</div><div class="line">            print(<span class="string">"我只要3,4,5就行啦"</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">    print(<span class="string">"程序结束"</span>)</div><div class="line"></div><div class="line"></div><div class="line">我拿到了<span class="number">5</span>!</div><div class="line">我拿到了<span class="number">4</span>!</div><div class="line">我拿到了<span class="number">3</span>!</div><div class="line">我只要<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>就行啦</div><div class="line">程序结束</div></pre></td></tr></table></figure>
<p>分析:<br>从主程序中开始看，第一句<code>c = consumer()</code>，因为consumer函数中存在yield语句，python会把它当成一个generator（生成器，注意：生成器和协程的概念区别很大,千万别混淆了两者），因此在运行这条语句后，python并不会像执行函数一样，而是返回了一个generator object。</p>
<p>第二条语句<code>c.send(None)</code>，这条语句的作用是将consumer（即变量c，它是一个generator）中的语句推进到第一个yield语句出现的位置，在例子中，consumer中的<code>status = True</code>和<code>while True:</code>都已经被执行了，程序停留在<code>n = yield status</code>的位置（注意：此时这条语句还没有被执行），上面说的send(None)语句十分重要，如果漏写这一句，那么程序直接报错。</p>
<p>下面第三句<code>p = producer(c)</code>，这里像上面一样定义了producer的生成器，注意:这里我们传入了消费者的生成器，来让producer跟consumer通信。</p>
<p>第四句<code>for status in p:</code>，这条语句会循环地运行producer和获取它yield回来的状态。</p>
<p>现在我们要让生产者发送1,2,3,4,5给消费者，消费者接受数字，返回状态给生产者，而我们的消费者只需要3,4,5就行了，当数字等于3时，会返回一个错误的状态。最终我们需要由主程序来监控生产者－消费者的过程状态，调度结束程序。</p>
<p>现在程序流进入了producer里面，我们直接看yield consumer.send(n)，生产者调用了消费者的send()方法，把n发送给consumer（即c），在consumer中的n = yield status，n拿到的是消费者发送的数字，同时，consumer用yield的方式把状态（status）返回给消费者，注意：这时producer（即消费者）的consumer.send()调用返回的就是consumer中yield的status！消费者马上将status返回给调度它的主程序，主程序获取状态，判断是否错误，若错误，则终止循环，结束程序。上面看起来有点绕，其实这里面generator.send(n)的作用是：把n发送generator(生成器)中yield的赋值语句中，同时返回generator中yield的变量（结果）。</p>
<p>于是程序便一直运作，直至consumer中获取的n的值变为3！此时consumer把status变为False，最后返回到主程序，主程序中断循环，程序结束。（观察输出结果，是否如你所想？）</p>
<h3 id="Coroutine与Generator区别"><a href="#Coroutine与Generator区别" class="headerlink" title="Coroutine与Generator区别"></a>Coroutine与Generator区别</h3><p>最重要的区别：</p>
<ul>
<li>generator总是生成值，一般是迭代的序列</li>
<li>coroutine关注的是消耗值，是数据(data)的消费者</li>
<li>coroutine不会与迭代操作关联，而generator会</li>
<li>coroutine强调协同控制程序流，generator强调保存状态和产生数据</li>
</ul>
<p>相似的是，它们都是不用return来实现重复调用的函数/对象，都用到了yield(中断/恢复)的方式来实现。</p>
<h3 id="asyncio与gevent"><a href="#asyncio与gevent" class="headerlink" title="asyncio与gevent"></a>asyncio与gevent</h3><p>asyncio是python 3.4中新增的模块，它提供了一种机制，使得你可以用协程（coroutines）、IO复用（multiplexing I/O）在单线程环境中编写并发模型。</p>
<p>asyncio模块主要包括了：</p>
<ul>
<li>具有特定系统实现的事件循环（event loop）;</li>
<li>数据通讯和协议抽象（类似Twisted中的部分);</li>
<li>TCP，UDP,SSL，子进程管道，延迟调用和其他;</li>
<li>Future类;</li>
<li>yield from的支持;</li>
<li>同步的支持;</li>
<li>提供向线程池转移作业的接口;</li>
</ul>
<p>下面来看下asyncio的一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(x, y)</span>:</span></div><div class="line">    print(<span class="string">"Compute %s + %s ..."</span> % (x, y))</div><div class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1.0</span>)</div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_sum</span><span class="params">(x, y)</span>:</span></div><div class="line">    result = <span class="keyword">await</span> compute(x, y)</div><div class="line">    print(<span class="string">"%s + %s = %s"</span> % (x, y, result))</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">loop.run_until_complete(print_sum(<span class="number">1</span>, <span class="number">2</span>))</div><div class="line">loop.close()</div></pre></td></tr></table></figure></p>
<p>当事件循环开始运行时，它会在Task中寻找coroutine来执行调度，因为事件循环注册了<code>print_sum()</code>，因此<code>print_sum()</code>被调用，执行<code>result = await compute(x, y)</code>这条语句（等同于<code>result = yield from compute(x, y)</code>），因为<code>compute()</code>自身就是一个coroutine，因此<code>print_sum()</code>这个协程就会暂时被挂起，<code>compute()</code>被加入到事件循环中，程序流执行<code>compute()</code>中的print语句，打印”Compute %s + %s …”，然后执行了<code>await asyncio.sleep(1.0)</code>，因为<code>asyncio.sleep()</code>也是一个coroutine，接着<code>compute()</code>就会被挂起，等待计时器读秒，在这1秒的过程中，事件循环会在队列中查询可以被调度的coroutine，而因为此前<code>print_sum()</code>与<code>compute()</code>都被挂起了，因此事件循环会停下来等待协程的调度，当计时器读秒结束后，程序流便会返回到<code>compute()</code>中执行return语句，结果会返回到<code>print_sum()</code>中的result中，最后打印result，事件队列中没有可以调度的任务了，此时<code>loop.close()</code>把事件队列关闭，程序结束。</p>
<p>Gevent是一个基于libv的封装了greenlet的网络库，主要用于协程以及并发的处理。</p>
<p>gevent的基本原理：</p>
<p>当一个greenlet遇到IO操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.jianshu.com/p/afa86801c038" target="_blank" rel="external">理解python coroutine</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node笔记2]]></title>
      <url>http://arvin-he.github.io/2017/06/01/node-notes2-2017-06-01/</url>
      <content type="html"><![CDATA[<h3 id="关于函数式编程"><a href="#关于函数式编程" class="headerlink" title="关于函数式编程"></a>关于函数式编程</h3><p>将函数作为参数传递并不仅仅出于技术上的考量。对软件设计来说，这其实是个哲学问题。</p>
<p>想想这样的场景：在index文件中，我们可以将router对象传递进去，服务器随后可以调用这个对象的route函数。就像这样，我们传递一个东西，然后服务器利用这个东西来完成一些事。然后,那个叫路由的东西，能帮我把这个路由一下吗？但是服务器其实不需要这样的东西。它只需要把事情做完就行，其实为了把事情做完，你根本不需要东西，你需要的是动作。</p>
<p>也就是说，你不需要名词，你需要动词。理解了这个概念里最核心、最基本的思想转换后，我自然而然地理解了函数编程。也就是说我直接执行动作,不必给动作定一个名称,然后让那个对象根据动作名称再去执行动作,有的时候不觉得这很啰嗦么?哈哈…</p>
<h3 id="路由给真正的请求处理程序"><a href="#路由给真正的请求处理程序" class="headerlink" title="路由给真正的请求处理程序"></a>路由给真正的请求处理程序</h3><p>路由: 是指我们要针对不同的URL有不同的处理方式。<br>我们暂时把作为路由目标的函数称为请求处理程序。现在我们不要急着来开发路由模块，因为如果请求处理程序没有就绪的话，再怎么完善路由模块也没有多大意义。<br>现在给应用程序增加一个新的部件。我们来创建一个叫做requestHandlers的模块，并对于每一个请求处理程序，添加一个占位用函数，随后将这些函数作为模块的方法导出：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// requestHandlers.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure>
<p>这样就可以把请求处理程序和路由模块连接起来，让路由“有路可寻”。</p>
<p>在requestHandlers模块添加一点依赖,使用依赖注入可以让路由和请求处理程序之间的耦合更加松散，也因此能让路由的重用性更高。</p>
<p>那么什么是依赖注入?<br>依赖注入（Dependency Injection）是用于实现控制反转（Inversion of Control）的最常见的方式之一。依赖注入不是目的，它是一系列工具和手段，最终的目的是帮助我们开发出松散耦合(loose coupled)、可维护、可测试的代码和程序。</p>
<p>这意味着我们得将请求处理程序(即handle)从服务器传递到路由中，但感觉上这么做更离谱了，我们得一路把这堆请求处理程序(handle)从我们的主文件(index.js)传递到服务器中(server.start函数)，再将hangle从服务器(server.start函数)传递到路由(route函数)。</p>
<p>那么我们要怎么传递这些请求处理程序呢？我们不想每次有一个新的URL或请求处理程序时，都要为了在路由里完成请求到处理程序的映射而反复折腾。除此之外，在路由里有一大堆<code>if request == x then call handler y</code>也使得系统丑陋不堪。</p>
<p>仔细想想，每个都要映射到一个字符串（就是请求的URL）上？似乎关联数组（associative array）能完美胜任。不过JavaScript没提供关联数组,事实上，在JavaScript中，真正能提供此类功能的是它的对象, 在python中是字典.不过javascript的对象更加强大.</p>
<blockquote>
<p>在C++或C#中，当我们谈到对象，指的是类或者结构体的实例。对象根据他们实例化的模板（就是所谓的类），会拥有不同的属性和方法。但在JavaScript里对象不是这个概念。在JavaScript中，对象就是一个键/值对的集合 – 你可以把JavaScript的对象想象成一个键为字符串类型的字典。</p>
</blockquote>
<p>JavaScript的对象仅仅是键/值对的集合，它又怎么会拥有方法呢？<br>这里的值可以是字符串、数字或者函数.</p>
<p>现在我们已经确定将一系列请求处理程序通过一个对象(即handle)来传递，并且需要使用松耦合的方式将这个对象注入到route()函数中。<br>我们先将这个对象引入到主文件index.js中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</div><div class="line"><span class="keyword">var</span> requestHandlers = <span class="built_in">require</span>(<span class="string">"./requestHandlers"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 请求处理程序对象</span></div><div class="line"><span class="keyword">var</span> handle = &#123;&#125;;</div><div class="line">handle[<span class="string">"/"</span>] = requestHandlers.start;</div><div class="line">handle[<span class="string">"/start"</span>] = requestHandlers.start;</div><div class="line">handle[<span class="string">"/upload"</span>] = requestHandlers.upload;</div><div class="line"></div><div class="line">server.start(router.route, handle);</div></pre></td></tr></table></figure></p>
<p>将不同的URL映射到相同的请求处理程序上是很容易的：只要在对象中添加一个键为”/“的属性，对应requestHandlers.start即可，这样就可以干净简洁地配置/start和/的请求都交由start这一处理程序处理。</p>
<p>在完成了对象的定义后，我们把它作为额外的参数传递给服务器，为此将server.js修改如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"></div><div class="line">    route(handle, pathname);</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure></p>
<p>在start()函数里添加了handle参数,并把handle对象作为第一个参数传递给了route()回调函数。<br>然后我们相应地在route.js文件中修改route()函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// route.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[pathname] === <span class="string">'function'</span>) &#123;</div><div class="line">    handle[pathname]();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"No request handler found for "</span> + pathname);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure></p>
<p>在命令行运行:<code>node index.js</code>, 通过以上代码，首先检查给定的路径对应的请求处理程序是否存在，如果存在直接调用相应的函数。我们可以用从关联数组中获取元素一样的方式从传递的对象中获取请求处理函数，因此就有了简洁流畅的形如<code>handle[pathname]();</code>的表达式，这个感觉就像在前方中提到的那样：“嗨，请帮我处理了这个路径”。</p>
<h3 id="让请求处理程序作出响应"><a href="#让请求处理程序作出响应" class="headerlink" title="让请求处理程序作出响应"></a>让请求处理程序作出响应</h3><p>其实“处理请求”说白了就是“对请求作出响应”，因此，我们需要让请求处理程序能够像onRequest函数那样可以和浏览器进行“对话”。</p>
<p>不好的实现方式<br>不好的实现方式是指:让请求处理程序通过onRequest函数直接返回（return()）他们要展示给用户的信息。</p>
<p>我们先就这样去实现，然后再来看为什么这不是一种很好的实现方式。</p>
<p>让我们从让请求处理程序返回需要在浏览器中显示的信息开始。我们需要将requestHandler.js修改为如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line">  <span class="keyword">return</span> <span class="string">"Hello Start"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  <span class="keyword">return</span> <span class="string">"Hello Upload"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure></p>
<p>同样请求路由需要将请求处理程序返回给它的信息返回给服务器。因此，我们需要将router.js修改为如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[pathname] === <span class="string">'function'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> handle[pathname]();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"No request handler found for "</span> + pathname);</div><div class="line">    <span class="keyword">return</span> <span class="string">"404 Not found"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure></p>
<p>正如上述代码所示，当请求无法路由的时候，我们也返回了一些相关的错误信息。</p>
<p>最后，对server.js进行重构以使得它能够将请求处理程序通过请求路由返回的内容响应给浏览器，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    <span class="keyword">var</span> content = route(handle, pathname);</div><div class="line">    response.write(content);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure></p>
<p>运行重构后的应用，一切都会工作的很好：<br>请求<a href="http://localhost:8888/start,浏览器会输出“Hello" target="_blank" rel="external">http://localhost:8888/start,浏览器会输出“Hello</a> Start”，<br>请求<a href="http://localhost:8888/upload会输出“Hello" target="_blank" rel="external">http://localhost:8888/upload会输出“Hello</a> Upload”,<br>请求<a href="http://localhost:8888/foo" target="_blank" rel="external">http://localhost:8888/foo</a> 会输出“404 Not found”。</p>
<p>那么问题在哪里呢？<br>简单的说就是： 当未来有请求处理程序需要进行非阻塞的操作的时候，我们的应用就“挂”了。<br>为什么呢?</p>
<h3 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h3><p>直接来看，当在请求处理程序中加入阻塞操作时会发生什么?<br>修改下start请求处理程序，让它等待10秒以后再返回“Hello Start”。因为，JavaScript中没有类似sleep()这样的操作，所以这里只能够来点小Hack来模拟实现。<br>将requestHandlers.js修改成如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">milliSeconds</span>) </span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &lt; startTime + milliSeconds);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sleep(<span class="number">10000</span>);</div><div class="line">  <span class="keyword">return</span> <span class="string">"Hello Start"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  <span class="keyword">return</span> <span class="string">"Hello Upload"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure></p>
<p>上述代码中，当函数start()被调用的时候，Node.js会先等待10秒，之后才会返回“Hello Start”。当调用upload()的时候，会和此前一样立即返回。<br>(这里只是模拟休眠10秒，实际场景中，这样的阻塞操作有很多，比如耗时的计算操作等。）</p>
<p>我们重启下服务器。为了看到效果，我们要进行一些相对复杂的操作：<br>首先，打开两个浏览器窗口或者标签页。在第一个浏览器窗口的地址栏中输入<a href="http://localhost:8888/start，" target="_blank" rel="external">http://localhost:8888/start，</a> 但是先不要打开它！在第二个浏览器窗口的地址栏中输入<a href="http://localhost:8888/upload，" target="_blank" rel="external">http://localhost:8888/upload，</a> 同样的，先不要打开它！接下来，做如下操作：在第一个窗口中（“/start”）按下回车，然后快速切换到第二个窗口中（“/upload”）按下回车。</p>
<p>注意，发生了什么： /start URL加载花了10秒，但是，/upload URL居然也花了10秒，而它在对应的请求处理程序中并没有类似于sleep()这样的操作！</p>
<p>这到底是为什么呢？<br>原因就是start()包含了阻塞操作。形象的说就是“它阻塞了所有其他的处理工作”。</p>
<p>这显然是个问题，因为Node一向是这样来标榜自己的：“在node中除了代码，所有一切都是并行执行的”。这句话的意思是说，Node.js可以在不新增额外线程的情况下，依然可以对任务进行并行处理 —— Node.js是单线程的。它通过事件轮询（event loop）来实现并行操作，对此，应该尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。然而，要用非阻塞操作，需要使用回调，通过将函数作为参数传递给其他需要花时间做处理的函数（比方说，休眠10秒，或者查询数据库，又或者是进行大量的计算）。对于Node.js来说，它是这样处理的：“嘿，probablyExpensiveFunction()（译者注：这里指的就是需要花时间处理的函数），你继续处理你的事情，我（Node.js线程）先不等你了，我继续去处理你后面的代码，请你提供一个callbackFunction()，等你处理完之后我会去调用该回调函数的，谢谢！”</p>
<h4 id="一种错误的使用非阻塞操作的方式"><a href="#一种错误的使用非阻塞操作的方式" class="headerlink" title="一种错误的使用非阻塞操作的方式"></a>一种错误的使用非阻塞操作的方式</h4><p>还是从start请求处理程序开始。将其修改成如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">"child_process"</span>).exec;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line">  <span class="keyword">var</span> content = <span class="string">"empty"</span>;</div><div class="line"></div><div class="line">  exec(<span class="string">"ls -lah"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, stdout, stderr</span>) </span>&#123;</div><div class="line">    content = stdout;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> content;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  <span class="keyword">return</span> <span class="string">"Hello Upload"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure></p>
<p>上述代码中，引入了一个新的Node.js内建模块child_process。之所以用它，是为了实现一个既简单又实用的非阻塞操作：exec()。</p>
<p>exec()做了什么呢？它从Node.js来执行一个shell命令。在上述例子中，我们用它来获取当前目录下所有的文件（“ls -lah”）,然后，当/startURL请求的时候将文件信息输出到浏览器中。</p>
<p>上述代码是非常直观的： 创建了一个新的变量content（初始值为“empty”），执行“ls -lah”命令，将结果赋值给content，最后将content返回。</p>
<p>和往常一样，我们启动服务器，然后访问“<a href="http://localhost:8888/start”" target="_blank" rel="external">http://localhost:8888/start”</a> 。之后会载入一个漂亮的web页面，其内容为“empty”, 却不是”hello start”。怎么回事？<br>原因是exec()在非阻塞这块发挥了神奇的功效。它其实是个很好的东西，有了它，我们可以执行非常耗时的shell操作而无需迫使应用停下来等待该操作。然而，针对浏览器显示的结果来看，我们并不满意我们的非阻塞操作，对吧？好，接下来，我们来修正这个问题。在这过程中，让我们先来看看为什么当前的这种方式不起作用。<br>问题就在于:为了进行非阻塞工作，exec()使用了回调函数。<br>在我们的例子中，该回调函数就是作为第二个参数传递给exec()的匿名函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exec(<span class="string">"ls -lah"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, stdout, stderr</span>) </span>&#123;</div><div class="line">   content = stdout;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>现在就到了问题根源所在了：代码是同步执行的，这就意味着在调用exec()之后，Node.js会立即执行<code>return content;</code>, 而此时content仍然是“empty”，因为传递给exec()的回调函数还未执行到, 因为exec()的操作是异步的。这里“ls -lah”的操作其实是非常快的（除非当前目录下有上百万个文件）。这也是为什么回调函数也会很快的执行到, 不过，不管怎么说它还是异步的。为了让效果更加明显，我们使用一个更耗时的命令： “find /”，尽管在请求处理程序中，把“ls -lah”换成“find /”，当打开/start URL的时候，依然能够立即获得HTTP响应 —— 很明显，当exec()在后台执行的时候，Node.js自身会继续执行后面的代码。并且我们这里假设传递给exec()的回调函数，只会在“find /”命令执行完成之后才会被调用。</p>
<p>那究竟我们要如何才能实现将当前目录下的文件列表显示给用户呢？<br>了解了这种不好的实现方式之后，我们接下来来介绍如何以正确的方式让请求处理程序对浏览器请求作出响应。</p>
<h3 id="以非阻塞操作进行请求响应"><a href="#以非阻塞操作进行请求响应" class="headerlink" title="以非阻塞操作进行请求响应"></a>以非阻塞操作进行请求响应</h3><p>正确的方式是Node.js有这样一种实现方案:函数传递。<br>目前,我们的应用已经可以通过应用各层之间传递值的方式（请求处理程序 -&gt; 请求路由 -&gt; 服务器）将请求处理程序返回的内容（请求处理程序最终要显示给用户的内容）传递给HTTP服务器。</p>
<p>现在采用新的实现方式：相对采用将内容传递给服务器的方式，这次采用将服务器“传递”给内容的方式。 从实践角度来说，就是将response对象（从服务器的回调函数onRequest()获取）通过请求路由传递给请求处理程序。 随后，处理程序就可以采用该对象上的函数来对请求作出响应。</p>
<p>原理就是如此，接下来一步步实现这种方案。<br>先从server.js开始：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route, handle</span>) </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line">    <span class="comment">// 注意route函数的第三个参数</span></div><div class="line">    route(handle, pathname, response);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure></p>
<p>相对此前从route()函数获取返回值的做法，这次将response对象作为第三个参数传递给route()函数，并且，将onRequest()处理程序中所有有关response的函数调都移除，因为我们希望这部分工作让route()函数来完成。</p>
<p>下面就来看看我们的router.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">handle, pathname, response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[pathname] === <span class="string">'function'</span>) &#123;</div><div class="line">    handle[pathname](response);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"No request handler found for "</span> + pathname);</div><div class="line">    response.writeHead(<span class="number">404</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"404 Not found"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure></p>
<p>同样的模式：相对此前从请求处理程序中获取返回值，这次取而代之的是直接传递response对象。<br>如果没有对应的请求处理器处理，我们就直接返回“404”错误。<br>最后，我们将requestHandler.js修改为如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">"child_process"</span>).exec;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">  exec(<span class="string">"ls -lah"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, stdout, stderr</span>) </span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(stdout);</div><div class="line">    response.end();</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  response.write(<span class="string">"Hello Upload"</span>);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure></p>
<p>我们的处理程序函数需要接收response参数，为了对请求作出直接的响应。</p>
<p>start处理程序在exec()的匿名回调函数中做请求响应的操作，而upload处理程序仍然是简单的回复“Hello World”，只是这次是使用response对象而已。</p>
<p>这时再次我们启动应用（node index.js），一切都会工作的很好。</p>
<p>如果想要证明/start处理程序中耗时的操作不会阻塞对/upload请求作出立即响应的话，可以将requestHandlers.js修改为如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">"child_process"</span>).exec;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">  exec(<span class="string">"find /"</span>,</div><div class="line">    &#123; <span class="attr">timeout</span>: <span class="number">10000</span>, <span class="attr">maxBuffer</span>: <span class="number">20000</span>*<span class="number">1024</span> &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error, stdout, stderr</span>) </span>&#123;</div><div class="line">      response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">      response.write(stdout);</div><div class="line">      response.end();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">  response.write(<span class="string">"Hello Upload"</span>);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure></p>
<p>这样一来，当请求<a href="http://localhost:8888/start的时候，会花10秒钟的时间才载入，" target="_blank" rel="external">http://localhost:8888/start的时候，会花10秒钟的时间才载入，</a><br>而当请求<a href="http://localhost:8888/upload的时候，会立即响应，纵然这个时候/start响应还在处理中。" target="_blank" rel="external">http://localhost:8888/upload的时候，会立即响应，纵然这个时候/start响应还在处理中。</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html#execution-in-the-kongdom-of-verbs" target="_blank" rel="external">Node入门</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node笔记1]]></title>
      <url>http://arvin-he.github.io/2017/06/01/node-notes-2017-06-01/</url>
      <content type="html"><![CDATA[<h3 id="创建一个http服务器"><a href="#创建一个http服务器" class="headerlink" title="创建一个http服务器"></a>创建一个http服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一行请求（require）Node.js自带的 http 模块，并且把它赋值给 http 变量。</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="comment">// 调用http模块提供的函数:createServer.该函数会返回一个对象</span></div><div class="line"><span class="comment">// 该对象有一个listen的方法,该方法有一个数值参数,指定这个HTTP服务器监听的端口号。</span></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>:<span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">&#125;).listen(<span class="number">8888</span>);</div></pre></td></tr></table></figure>
<p>在命令行输入:<code>node server.js</code>,打开浏览器访问<a href="http://localhost:8888/，你会看到一个写着“Hello" target="_blank" rel="external">http://localhost:8888/，你会看到一个写着“Hello</a> World”的网页。<br>注意:createServer 函数的参数是一个匿名函数。即<code>function(request, response){...}</code>.</p>
<h3 id="基于事件驱动的回调"><a href="#基于事件驱动的回调" class="headerlink" title="基于事件驱动的回调"></a>基于事件驱动的回调</h3><p>当使用 http.createServer 方法的时候，不只想要侦听某个端口，还想要它在服务器收到一个HTTP请求的时候做点什么。但问题是，这是异步的：请求任何时候都可能到达，但是服务器却跑在一个单进程中。那么Node.js程序中，当一个新的请求到达8888端口的时候，我们怎么控制流程呢？<br>嗯，这就需要Node.js/JavaScript的事件驱动,现在看看这些概念是怎么应用在我们的服务器代码里的。<br>我们创建了服务器，并且向创建它的方法传递了一个函数。无论何时服务器收到一个请求，这个函数就会被调用。我们不知道这件事情什么时候会发生，但是我们现在有了一个处理请求的地方：它就是我们传递过去的那个匿名函数。至于它是被预先定义的函数还是匿名函数，就无关紧要了。这个就是传说中的 回调 。我们给某个方法传递了一个函数，这个方法在有相应事件发生时调用这个函数来进行回调 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="comment">// http.createServer(function(request, response)</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">//     response.writeHead(200, &#123;"Content-Type":"text/plain"&#125;);</span></div><div class="line"><span class="comment">//     response.write("Hello World");</span></div><div class="line"><span class="comment">//     response.end();</span></div><div class="line"><span class="comment">// &#125;).listen(8888);</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request receives."</span>);</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>:<span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line">http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div></pre></td></tr></table></figure>
<p>当运行<code>node server.js</code>时，它会马上在命令行上输出“Server has started.”。当我们向服务器发出请求（在浏览器访问<a href="http://localhost:8888/" target="_blank" rel="external">http://localhost:8888/</a> ）或者强制刷新页面时，“Request received.”这条消息就会在命令行中出现。这就是事件驱动的异步服务器端JavaScript和它的回调！<br><strong>注意:</strong>当我们在服务器访问网页时，服务器可能会输出两次“Request received.”。那是因为大部分浏览器都会在你访问 <a href="http://localhost:8888/" target="_blank" rel="external">http://localhost:8888/</a> 时尝试读取<a href="http://localhost:8888/favicon.ico" target="_blank" rel="external">http://localhost:8888/favicon.ico</a> )</p>
<h3 id="服务器是如何处理请求的"><a href="#服务器是如何处理请求的" class="headerlink" title="服务器是如何处理请求的"></a>服务器是如何处理请求的</h3><p>当回调启动，即onRequest()函数被触发的时候,有两个参数被传入:request 和 response.<br>它们是对象，你可以使用它们的方法来处理HTTP请求的细节，并且响应请求（比如向发出请求的浏览器发回一些东西）。所以当收到请求时，使用 response.writeHead() 函数发送一个HTTP状态200和HTTP头的内容类型（content-type），使用 response.write() 函数在HTTP相应主体中发送文本“Hello World”。最后，调用 response.end() 完成响应。目前来说，我们对请求的细节并不在意，所以我们没有使用 request 对象。</p>
<h3 id="关于变量命名"><a href="#关于变量命名" class="headerlink" title="关于变量命名"></a>关于变量命名</h3><p>Node.js中自带了一个叫做“http”的模块，在代码中请求它并把返回值赋给一个本地变量http。这样本地变量http就变成了一个拥有所有 http 模块所提供的公共方法的对象。给这种本地变量起一个和模块名称一样的名字是一种惯例，但你也可以按照自己的喜好来.</p>
<h3 id="创建自己的模块"><a href="#创建自己的模块" class="headerlink" title="创建自己的模块"></a>创建自己的模块</h3><p>我们把 server.js 变成一个真正的模块，你就能搞明白了。<br>事实上，我们不用做太多的修改。把某段代码变成模块意味着需要把我们希望提供其功能的部分 导出到请求这个模块的脚本。目前，HTTP服务器需要导出的功能非常简单，因为请求服务器模块的脚本仅仅是需要启动服务器而已。我们把服务器脚本放到一个叫做 start 的函数里，然后我们导出这个函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request received."</span>);</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 导出start函数</span></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure></p>
<p>这样，现在就可以创建我们的主文件 index.js 并在其中启动我们的HTTP了，虽然服务器的代码还在 server.js 中。创建 index.js 文件并写入以下内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</div><div class="line">server.start();</div></pre></td></tr></table></figure></p>
<p>正如上面所示代码，我们可以像使用任何其他的内置模块一样使用server模块：请求这个server.js文件并把它指向一个server变量，导出的start函数就可以被我们使用了。<br>好了。现在可以从我们的主要脚本启动我们的的应用了，在命令行输入：<code>node index.js</code></p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>处理不同的HTTP请求在代码中是一个不同的部分，叫做“路由选择”，接下来就创造一个叫做”路由”的模块。</p>
<p>我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码（这里“代码”对应整个应用的第三部分：一系列在接收到请求时真正工作的处理程序）。</p>
<p>因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。</p>
<p>我们需要的所有数据都会包含在request对象中，该对象作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，需要额外的Node.JS模块，它们分别是url和querystring模块。当然我们也可以用querystring模块来解析POST请求体中的参数.现在我们来给onRequest()函数加上一些逻辑，用来找出浏览器请求的URL路径：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>
<p>现在可以根据请求的URL路径来区别不同请求了,然后使用路由将请求以URL路径为基准映射到处理程序上。现在以来编写路由了，建立一个名为router.js的文件，添加以下内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">pathname</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure></p>
<p>如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑之前，我们需要先来看看如何把路由和服务器整合起来。使用硬编码的方式将这一依赖项绑定到服务器上是一件非常痛苦的事，因此我们采用依赖注入的方式来添加路由模块,这种方式较为松散.</p>
<p>首先，来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 注意:start函数传进一个route参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 这个route函数就是router模块里的route函数</span></div><div class="line">    route(pathname);</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure></p>
<p>同时，相应扩展index.js，使得路由函数可以被注入到服务器中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 这里将router模块的route函数传进start函数中去</span></div><div class="line">server.start(router.route);</div></pre></td></tr></table></figure></p>
<p>在这里，传递的route函数依旧什么也没做。如果现在启动应用随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由.输出结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C:\Users\aron\AppData\Roaming\aronWorkSpace\arvinGithub\node&gt;node index.js</div><div class="line">Server has started.</div><div class="line">Request for / received.</div><div class="line">About to route a request for /</div><div class="line">Request for /favicon.ico received.</div><div class="line">About to route a request for /favicon.ico</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html#execution-in-the-kongdom-of-verbs" target="_blank" rel="external">Node入门</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之高阶函数]]></title>
      <url>http://arvin-he.github.io/2017/06/01/python-advancefunc-2016-06-01/</url>
      <content type="html"><![CDATA[<h3 id="高阶函数定义"><a href="#高阶函数定义" class="headerlink" title="高阶函数定义"></a>高阶函数定义</h3><p>高阶函数英文叫 Higher-order function, 一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>
<h3 id="变量可以指向函数"><a href="#变量可以指向函数" class="headerlink" title="变量可以指向函数"></a>变量可以指向函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">18</span>]: abs(<span class="number">-5</span>)         </div><div class="line">Out[<span class="number">18</span>]: <span class="number">5</span>               </div><div class="line">                         </div><div class="line">In [<span class="number">19</span>]: abs             </div><div class="line">Out[<span class="number">19</span>]: &lt;function abs&gt;  </div><div class="line">                         </div><div class="line">In [<span class="number">20</span>]: x = abs(<span class="number">-10</span>)    </div><div class="line">                         </div><div class="line">In [<span class="number">21</span>]: x               </div><div class="line">Out[<span class="number">21</span>]: <span class="number">10</span>              </div><div class="line">                         </div><div class="line">In [<span class="number">22</span>]: f = abs         </div><div class="line">                         </div><div class="line">In [<span class="number">23</span>]: f               </div><div class="line">Out[<span class="number">23</span>]: &lt;function abs&gt;  </div><div class="line"></div><div class="line">In [<span class="number">24</span>]: f(<span class="number">-6</span>)</div><div class="line">Out[<span class="number">24</span>]: <span class="number">6</span></div></pre></td></tr></table></figure>
<p>由上面的示例得出：函数本身也可以赋值给变量，即：变量可以指向函数。且该变量可以来调用这个函数.</p>
<h3 id="函数名也是变量"><a href="#函数名也是变量" class="headerlink" title="函数名也是变量"></a>函数名也是变量</h3><p>函数名其实就是指向函数的变量. 对于abs()这个函数，完全可以把函数名abs看成变量，它指向一个可以计算绝对值的函数.<br>如果把abs指向其他对象，会有什么情况发生？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">25</span>]: abs = <span class="number">10</span>                                                          </div><div class="line">                                                                           </div><div class="line">In [<span class="number">26</span>]: abs(<span class="number">-10</span>)                                                          </div><div class="line">---------------------------------------------------------------------------</div><div class="line">TypeError                                 Traceback (most recent call last)</div><div class="line">&lt;ipython-input<span class="number">-26</span>-c432e3f1fd6c&gt; <span class="keyword">in</span> &lt;module&gt;()                              </div><div class="line">----&gt; 1 abs(-10)                                                           </div><div class="line">                                                                           </div><div class="line">TypeError: <span class="string">'int'</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</div></pre></td></tr></table></figure></p>
<p>把abs指向10后，就无法通过abs(-10)调用该函数了, 因为abs这个变量已经不指向求绝对值函数而是指向一个整数10！<br>当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复abs函数，请重启Python交互环境。<br>注：由于abs函数实际上是定义在import builtins模块中的，所以要让修改abs变量的指向在其它模块也生效，要用import builtins; builtins.abs = 10。</p>
<h3 id="将函数作为参数传入"><a href="#将函数作为参数传入" class="headerlink" title="将函数作为参数传入"></a>将函数作为参数传入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></div><div class="line">   ...:     <span class="keyword">return</span> f(x) + f(y)</div><div class="line">   ...:</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: add(<span class="number">2</span>, <span class="number">-3</span>, abs)</div><div class="line">Out[<span class="number">2</span>]: <span class="number">5</span></div></pre></td></tr></table></figure>
<p>编写高阶函数，目的就是让函数的参数能够接收别的函数。</p>
<h3 id="常用的高阶函数"><a href="#常用的高阶函数" class="headerlink" title="常用的高阶函数"></a>常用的高阶函数</h3><ol>
<li>map()高阶函数<br>map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回.<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">3</span>]: <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">   ...:     <span class="keyword">return</span> x*x</div><div class="line">   ...:</div><div class="line"></div><div class="line">In [<span class="number">4</span>]: r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line"></div><div class="line">In [<span class="number">5</span>]: list(r)</div><div class="line">Out[<span class="number">5</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</div><div class="line"></div><div class="line">In [<span class="number">6</span>]: list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</div><div class="line">Out[<span class="number">6</span>]: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]</div></pre></td></tr></table></figure>
</li>
</ol>
<p>map()传入的第一个参数是f，即函数对象本身。由于结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list.</p>
<ol>
<li><p>reduce()高阶函数<br>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，一个是函数，一个是Iterable，reduce的作用就是把结果继续和序列的下一个元素做累积计算.即对于序列内所有元素进行累计操作.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">12</span>]: <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"></div><div class="line">In [<span class="number">13</span>]: <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    ...:     <span class="keyword">return</span> x+y</div><div class="line">    ...:</div><div class="line"></div><div class="line">In [<span class="number">14</span>]: reduce(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">Out[<span class="number">14</span>]: <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment"># 配合map()，我们就可以写出把str转换为int的函数：</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, map(char2num, <span class="string">'13579'</span>))</div><div class="line"><span class="number">13579</span></div><div class="line"><span class="comment"># 更简洁的写法,采用lambda函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, map(char2num, s))</div></pre></td></tr></table></figure>
</li>
<li><p>fiter()高阶函数<br>Python内建的filter()函数用于过滤序列。filter()也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</div><div class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></div></pre></td></tr></table></figure>
</li>
<li><p>sorted()高阶函数<br>排序也是在程序中经常用到的算法。排序的核心是比较两个元素的大小。sorted()函数也是一个高阶函数，它接受3个参数, 其中接收一个key函数来实现自定义的排序，key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序, 例如按绝对值大小排序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># sorted函数原型</span></div><div class="line">sorted(...)</div><div class="line">    sorted(iterable, key=None, reverse=False) --&gt; new sorted list</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</div><div class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</div></pre></td></tr></table></figure>
</li>
</ol>
<p>对字符串排序，是按照ASCII的大小比较的,现在，我们提出排序应该忽略大小写，按照字母序排序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower)</div><div class="line">[<span class="string">'about'</span>, <span class="string">'bob'</span>, <span class="string">'Credit'</span>, <span class="string">'Zoo'</span>]</div></pre></td></tr></table></figure></p>
<p>要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</div><div class="line">[<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317849054170d563b13f0fa4ce6ba1cd86e18103f28000" target="_blank" rel="external">廖雪峰python教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之Lambda使用]]></title>
      <url>http://arvin-he.github.io/2017/06/01/python-lambda-2017-06-01/</url>
      <content type="html"><![CDATA[<h3 id="Lambda-函数"><a href="#Lambda-函数" class="headerlink" title="Lambda 函数"></a>Lambda 函数</h3><p>Python 中定义函数有两种方法，一种是用常规方式 def 定义，函数要指定名字，第二种是用 lambda 定义，不需要指定名字，称为 Lambda 函数。<br>Lambda 函数又称匿名函数，匿名函数就是没有名字的函数。有些函数如果只是临时一用，而且它的业务逻辑也很简单时，就没必要非给它取个名字不可。</p>
<h3 id="lamdba-函数使用场景"><a href="#lamdba-函数使用场景" class="headerlink" title="lamdba 函数使用场景"></a>lamdba 函数使用场景</h3><ol>
<li>函数式编程<br>Python提供了函数式编程的特性，如 map、reduce、filter、sorted 这些函数都支持函数作为参数.<br>lambda 函数就可以应用在函数式编程中。下面看一个例子: 将一个整数列表，要求按照列表中元素的绝对值大小升序排列<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 方法1</span></div><div class="line">In [<span class="number">12</span>]: my_list = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">-1</span>, <span class="number">8</span>]           </div><div class="line">                                                  </div><div class="line">In [<span class="number">13</span>]: sorted(my_list, key=<span class="keyword">lambda</span> x : abs(x))   </div><div class="line">Out[<span class="number">13</span>]: [<span class="number">-1</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]                     </div><div class="line"></div><div class="line"><span class="comment"># 方法2                                              </span></div><div class="line">In [<span class="number">14</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span>                              </div><div class="line">    ...:     <span class="keyword">return</span> abs(x)                        </div><div class="line">    ...:                                          </div><div class="line">                                                  </div><div class="line">In [<span class="number">15</span>]: sorted(my_list, key=foo)                 </div><div class="line">Out[<span class="number">15</span>]: [<span class="number">-1</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
</li>
</ol>
<p>方法1和方法2都能达到同样的效果,只不过方法2看起来不够 Pythonic 而已。方法1更加简洁</p>
<ol>
<li>闭包<br>看一个用 lambda 函数作为闭包的例子<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_add</span><span class="params">(n)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">lambda</span> x:x+n</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_3 = my_add(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_3(<span class="number">7</span>)</div><div class="line"><span class="number">10</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_add</span><span class="params">(n)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> x+n</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_5 = my_add(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_5(<span class="number">2</span>)</div><div class="line"><span class="number">7</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里的 lambda 函数就是一个闭包，在全局作用域范围中，<code>add_3(7)</code> 可以正常执行且返回值为10，之所以返回10是因为在<code>my_add</code> 局部作用域中，变量 n 的值在闭包的作用使得它在全局作用域也可以被访问到。换成常规函数也可以实现闭包，只不过是这种方式稍显啰嗦。</p>
<h3 id="使用lambda局限与注意点"><a href="#使用lambda局限与注意点" class="headerlink" title="使用lambda局限与注意点"></a>使用lambda局限与注意点</h3><ol>
<li>python中的lambda中不可以赋值</li>
<li>python中的lambda只能写一句表达式,不可以写多个语句</li>
<li>如果用 lambda 函数不能使你的代码变得更清晰时，这时就要考虑使用常规的方式来定义函数, zen of python 中有这样一句话是 Explicit is better than implicit(明了胜于晦涩)</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之闭包]]></title>
      <url>http://arvin-he.github.io/2017/06/01/python-closure-2017-06-01/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>谈到闭包,先要了解两个概念:作用域和嵌套函数<br>Python 里面有四种作用域：function, module, global和 class 作用域。由于 Python 不区分变量的声明，所以在第一次初始化变量时（必须为赋值操作）将变量加入当前环境中。如果在没对变量进行初始化的情况下使用该变量就会报运行时异常，但如果仅仅是访问（并不赋值）的情况下，查找变量的顺序会按照 LEGB 规则 (Local, Enclosing, Global, Built-in)。</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域是程序运行时变量可被访问的范围，定义在函数内的变量是局部变量，局部变量的作用范围只能是函数内部范围内，它不能在函数外引用。<br>定义在模块最外层的变量是全局变量，它是全局范围内可见的，当然在函数里面也可以读取到全局变量的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"hello"</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    s += <span class="string">"world"</span></div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line">foo()  <span class="comment"># UnboundLocalError: local variable 's' referenced before assignment</span></div></pre></td></tr></table></figure>
<p>由于在函数 foo 中在没有对 s 初始化的情况下使用了该值，所以这里会报异常，解决的办法就是使用 global 关键字：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"hello"</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> s</div><div class="line">    s += <span class="string">" world"</span></div><div class="line">    <span class="keyword">return</span> s</div><div class="line">foo()  <span class="comment"># return "hello world"</span></div></pre></td></tr></table></figure></p>
<p>但由于 global 关键字只能限定在global作用域内查找变量，在有嵌套定义的时候就有问题了，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    s = <span class="string">"hello"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">global</span> s     <span class="comment"># NameError: global name 's' is not defined</span></div><div class="line">        s += <span class="string">" world"</span></div><div class="line">        <span class="keyword">return</span> s</div><div class="line">    <span class="keyword">return</span> bar</div><div class="line">foo()()</div></pre></td></tr></table></figure></p>
<p>Python 3 中引入了 nonlocal 关键字来解决这个问题，：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    s = <span class="string">"hello"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> s</div><div class="line">        s += <span class="string">" world"</span></div><div class="line">        <span class="keyword">return</span> s</div><div class="line">    <span class="keyword">return</span> bar</div><div class="line">foo()()   <span class="comment"># return "hello world"</span></div></pre></td></tr></table></figure></p>
<h3 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h3><p>函数不仅可以定义在模块的最外层，还可以定义在另外一个函数的内部，像这种定义在函数里面的函数称之为嵌套函数（nested function）例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># print_msg 是外围函数</span></div><div class="line">    msg = <span class="string">"zen of python"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printer</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># printer是嵌套函数</span></div><div class="line">        print(msg)</div><div class="line">    printer()</div><div class="line"><span class="comment"># 输出 zen of python</span></div><div class="line">print_msg()</div></pre></td></tr></table></figure></p>
<p>对于嵌套函数，它可以访问到其外层作用域中声明的非局部（non-local）变量，比如代码示例中的变量 msg 可以被嵌套函数 printer 正常访问。<br>那么有没有一种可能即使脱离了函数本身的作用范围，局部变量还可以被访问得到呢？答案是闭包</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>简单的说:闭包是一个函数内部嵌套着另一个函数，而被嵌套的那个函数有权利访问嵌套它的那个函数的作用域中变量。</p>
<p>当符合下面几个条件时就形成了闭包：</p>
<ul>
<li>有一个Nested function</li>
<li>这个Nested function访问了父函数作用域中的变量</li>
<li>父函数返回了这个Nested function</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># print_msg 是外围函数</span></div><div class="line">    msg = <span class="string">"zen of python"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printer</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># printer 是嵌套函数</span></div><div class="line">        print(msg)</div><div class="line">    <span class="keyword">return</span> printer</div><div class="line"></div><div class="line">another = print_msg()</div><div class="line"><span class="comment"># 输出 zen of python</span></div><div class="line">another()</div></pre></td></tr></table></figure>
<p>这段代码和上面的嵌套函数的效果一样，都输出 “zen of python”。不同的地方在于内部函数 printer 直接作为返回值返回了。<br>一般情况下，函数中的局部变量仅在函数的执行期间可用，一旦 <code>print_msg()</code> 执行过后，我们会认为 msg变量将不再可用。<br>然而，在这里我们发现 print_msg 执行完之后，在调用 another 的时候 msg 变量的值正常输出了，这就是闭包的作用，闭包使得局部变量在函数外被访问成为可能。这里的 another 就是一个闭包，闭包本质上是一个函数，它有两部分组成，printer 函数和变量 msg。闭包使得这些变量的值始终保存在内存中。<br>闭包，顾名思义，就是一个封闭的包裹，里面包裹着自由变量，就像在类里面定义的属性值一样，自由变量的可见范围随同包裹，哪里可以访问到这个包裹，哪里就可以访问到这个自由变量.</p>
<h3 id="为什么要使用闭包"><a href="#为什么要使用闭包" class="headerlink" title="为什么要使用闭包"></a>为什么要使用闭包</h3><p>运用闭包可以避免对全局变量的使用。对于一个只有需要实现少数方法的类我们也可以用闭包来替代，这样做可以减少资源的使用。<br>此外，闭包允许将函数与其所操作的某些数据（环境）关连起来。这一点与面向对象编程是非常类似的，在面对象编程中，对象允许我们将某些数据（对象的属性）与一个或者多个方法相关联。一般来说，当对象中只有一个方法时，这时使用闭包是更好的选择。来看一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">5</span>]: <span class="function"><span class="keyword">def</span> <span class="title">adder</span><span class="params">(x)</span>:</span>                        </div><div class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(y)</span>:</span>                  </div><div class="line">   ...:         print(<span class="string">"x = &#123;&#125;"</span>.format(x))    </div><div class="line">   ...:         print(<span class="string">"y = &#123;&#125;"</span>.format(y))    </div><div class="line">   ...:         <span class="keyword">return</span> x+y                   </div><div class="line">   ...:     <span class="keyword">return</span> wrapper                   </div><div class="line">   ...:                                      </div><div class="line">   ...:                                      </div><div class="line">                                             </div><div class="line">In [<span class="number">6</span>]: adder5 = adder(<span class="number">5</span>)                    </div><div class="line">                                             </div><div class="line">In [<span class="number">7</span>]: adder5(<span class="number">10</span>)                           </div><div class="line">x = <span class="number">5</span>                                        </div><div class="line">y = <span class="number">10</span>                                       </div><div class="line">Out[<span class="number">7</span>]: <span class="number">15</span>                                   </div><div class="line">                                             </div><div class="line">In [<span class="number">8</span>]: adder5(<span class="number">6</span>)                            </div><div class="line">x = <span class="number">5</span>                                        </div><div class="line">y = <span class="number">6</span>                                        </div><div class="line">Out[<span class="number">8</span>]: <span class="number">11</span></div></pre></td></tr></table></figure></p>
<p>这比用类来实现更优雅，此外装饰器也是基于闭包的一中应用场景。<br>所有函数都有一个 <code>__closure__</code>属性，如果这个函数是一个闭包的话，那么它返回的是一个由 cell 对象 组成的元组对象。cell 对象的<code>cell_contents</code> 属性就是闭包中的自由变量。这解释了为什么局部变量脱离函数之后，还可以在函数之外被访问的原因的，因为它存储在了闭包的 <code>cell_contents</code>中了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">9</span>]: adder.__closure__</div><div class="line"></div><div class="line">In [<span class="number">10</span>]: adder5.__closure__</div><div class="line">Out[<span class="number">10</span>]: (&lt;cell at <span class="number">0x03F8FB30</span>: int object at <span class="number">0x1DFAD210</span>&gt;,)</div><div class="line"></div><div class="line">In [<span class="number">11</span>]: adder5.__closure__[<span class="number">0</span>].cell_contents</div><div class="line">Out[<span class="number">11</span>]: <span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="闭包与装饰器"><a href="#闭包与装饰器" class="headerlink" title="闭包与装饰器"></a>闭包与装饰器</h3><p>闭包通常用来实现一个通用的功能，Python中的装饰器就是对闭包的一种应用，只不过装饰器中父函数的参数是一个函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_wrap</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></div><div class="line">        print(<span class="string">"before function"</span>)</div><div class="line">        func(*args)</div><div class="line">        print(<span class="string">"after function"</span>)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line">    </div><div class="line"><span class="meta">@make_wrap</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span><span class="params">(msg)</span>:</span></div><div class="line">    print(msg)</div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print_msg(<span class="string">"Hello"</span>)</div><div class="line">before function</div><div class="line">Hello</div><div class="line">after function</div></pre></td></tr></table></figure></p>
<p>装饰器也可以进行叠加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_another</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></div><div class="line">        print(<span class="string">"another begin"</span>)</div><div class="line">        func(*args)</div><div class="line">        print(<span class="string">"another end"</span>)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@make_another</span></div><div class="line"><span class="meta">@make_wrap</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span><span class="params">(msg)</span>:</span></div><div class="line">    print(msg)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print_msg(<span class="string">"Hello"</span>)</div><div class="line">another begin</div><div class="line">before function</div><div class="line">Hello</div><div class="line">after function</div><div class="line">another end</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://liujiacai.net/blog/2016/05/28/scope-closure/" target="_blank" rel="external">http://liujiacai.net/blog/2016/05/28/scope-closure/</a></li>
<li><a href="https://juejin.im/post/59191552128fe1005ccd015f" target="_blank" rel="external">https://juejin.im/post/59191552128fe1005ccd015f</a></li>
<li><a href="https://juejin.im/post/59022e730ce463006156fdf3" target="_blank" rel="external">https://juejin.im/post/59022e730ce463006156fdf3</a></li>
<li><a href="https://kasheemlew.github.io/2017/04/05/python-closure/" target="_blank" rel="external">https://kasheemlew.github.io/2017/04/05/python-closure/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之functools]]></title>
      <url>http://arvin-he.github.io/2017/05/31/python-partial-2017-05-31/</url>
      <content type="html"><![CDATA[<h3 id="functools-partial"><a href="#functools-partial" class="headerlink" title="functools.partial"></a>functools.partial</h3><p>functools.partial 通过包装手法，允许我们 “重新定义” 函数签名, 用一些默认参数包装一个可调用对象, 返回结果是可调用对象，并且可以像原始对象一样对待冻结部分函数位置函数或关键字参数，简化函数, 更少更灵活的函数参数调用. 总之,通过设定参数的默认值，可以降低函数调用的难度.<br>简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line"></div><div class="line">add(<span class="number">4</span>, <span class="number">2</span>)</div><div class="line"><span class="number">6</span></div><div class="line"></div><div class="line">plus3 = functools.partial(add, <span class="number">3</span>)</div><div class="line">plus3(<span class="number">4</span>)</div><div class="line"><span class="number">7</span></div></pre></td></tr></table></figure></p>
<h3 id="functool-update-wrapper"><a href="#functool-update-wrapper" class="headerlink" title="functool.update_wrapper"></a>functool.update_wrapper</h3><p>默认partial对象没有<code>__name__</code>和<code>__doc__</code>, 这种情况下，对于装饰器函数非常难以debug.<br>使用<code>update_wrapper()</code>,从原始对象拷贝或加入现有partial对象,它可以把被封装函数的<code>__name__</code>、 <code>__module__</code> 、<code>__doc__</code>和<code>__dict__</code>都复制到封装函数去(模块级别常量<code>WRAPPER_ASSIGNMENTS</code>, <code>WRAPPER_UPDATES</code>)<br>这个函数主要用在装饰器函数中，装饰器返回函数反射得到的是包装函数的函数定义而不是原始函数定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> update_wrapper</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap2</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_it</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="string">"""wrap func: call_it2"""</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'before call'</span></div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> update_wrapper(call_it, func)</div><div class="line"></div><div class="line"><span class="meta">@wrap2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""test hello"""</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world2'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    hello2()</div><div class="line">    <span class="keyword">print</span> hello2.__name__</div><div class="line">    <span class="keyword">print</span> hello2.__doc__</div><div class="line"></div><div class="line">before call</div><div class="line">hello world2</div><div class="line">hello2</div><div class="line">test hello</div></pre></td></tr></table></figure></p>
<h3 id="functool-wraps"><a href="#functool-wraps" class="headerlink" title="functool.wraps"></a>functool.wraps</h3><p>调用函数装饰器partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)的简写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap3</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_it</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="string">"""wrap func: call_it2"""</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'before call'</span></div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> call_it</div><div class="line"></div><div class="line"><span class="meta">@wrap3</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello3</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""test hello 3"""</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world3'</span></div><div class="line"></div><div class="line"></div><div class="line">before call</div><div class="line">hello world3</div><div class="line">hello3</div><div class="line">test hello <span class="number">3</span></div></pre></td></tr></table></figure></p>
<h3 id="functools-reduce"><a href="#functools-reduce" class="headerlink" title="functools.reduce"></a>functools.reduce</h3><p>等同于内置函数reduce(),用这个的原因是使代码更兼容(python3)</p>
<h3 id="functools-cmp-to-key"><a href="#functools-cmp-to-key" class="headerlink" title="functools.cmp_to_key"></a>functools.cmp_to_key</h3><p><code>functools.cmp_to_key(func)</code><br>将老式的比较函数（comparison function）转换为关键字函数（key function），与接受key function的工具一同使用（例如sorted，min，max，heapq.nlargest，itertools.groupby），该函数主要用于将程序转换成Python 3格式的，因为Python 3中不支持比较函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(ele1,ele2)</span>:</span></div><div class="line">    <span class="keyword">return</span> ele2 - ele1</div><div class="line"></div><div class="line">a = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</div><div class="line"><span class="keyword">print</span> sorted(a, key = cmp_to_key(compare))</div><div class="line"></div><div class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure></p>
<h3 id="functools-total-ordering"><a href="#functools-total-ordering" class="headerlink" title="functools.total_ordering"></a>functools.total_ordering</h3><p><code>functools.total_ordering(cls)</code>这是一个类装饰器，给定一个类，这个类定义了一个或者多个比较排序方法，这个类装饰器将会补充其余的比较方法，减少了自己定义所有比较方法时的工作量；<br>这个装饰器是在python2.7的时候加上的，它是针对某个类如果定义了<code>__lt__</code>、 le 、 gt 、<code>__ge__</code>这些方法中的至少一个，同时，被修饰的类还应该提供 <code>__eq__()</code>方法。使用该装饰器，则会自动的把其他几个比较函数也实现在该类中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@total_ordering</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> ((self.lastname.lower(), self.firstname.lower()) ==</div><div class="line">                (other.lastname.lower(), other.firstname.lower()))</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> ((self.lastname.lower(), self.firstname.lower()) &lt;</div><div class="line">                (other.lastname.lower(), other.firstname.lower()))</div><div class="line"><span class="keyword">print</span> dir(Student)</div><div class="line"></div><div class="line">[<span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>]</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.tuicool.com/articles/qEjEBzy" target="_blank" rel="external">http://www.tuicool.com/articles/qEjEBzy</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask笔记]]></title>
      <url>http://arvin-he.github.io/2017/05/28/python-flasknotes-2017-05-28/</url>
      <content type="html"><![CDATA[<h3 id="Flask路由中使用正则表达式"><a href="#Flask路由中使用正则表达式" class="headerlink" title="Flask路由中使用正则表达式"></a>Flask路由中使用正则表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexConverter</span><span class="params">(BaseConverter)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url_map, *item)</span>:</span></div><div class="line">        super(RegexConverter, self).__init__(url_map)</div><div class="line">        self.regex = item[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment"># 把转换器在初始化时设定到url_map,转换器名称为'regex'</span></div><div class="line">app.url_map.converters[<span class="string">'regex'</span>] = RegexConverter</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/user/&lt;regex("[a-z]&#123;3&#125;"):user_name&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(user_name)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'User %s'</span> % user_name</div></pre></td></tr></table></figure>
<h3 id="多个url指向同一个视图"><a href="#多个url指向同一个视图" class="headerlink" title="多个url指向同一个视图"></a>多个url指向同一个视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/projects/')</span></div><div class="line"><span class="meta">@app.route('/projects2/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">projects</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'The project page'</span></div></pre></td></tr></table></figure>
<p><strong>注意:</strong>多个路由指向同一视图时,顺序是先从最外层的装饰器路由开始,一旦匹配到路由,就马上执行视图函数,下面的装饰器就不再执行了.</p>
<h3 id="使用Manager运行flask应用程序"><a href="#使用Manager运行flask应用程序" class="headerlink" title="使用Manager运行flask应用程序"></a>使用Manager运行flask应用程序</h3><h3 id="自定义模板过滤器"><a href="#自定义模板过滤器" class="headerlink" title="自定义模板过滤器"></a>自定义模板过滤器</h3><p>自定义markdown过滤器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.template_fiter('md')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">markdown_to_html</span><span class="params">(txt)</span>:</span></div><div class="line">    <span class="keyword">from</span> markdown <span class="keyword">import</span> markdown</div><div class="line">    <span class="keyword">return</span> markdown(txt)</div></pre></td></tr></table></figure></p>
<h3 id="在模版中调用python函数"><a href="#在模版中调用python函数" class="headerlink" title="在模版中调用python函数"></a>在模版中调用python函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.context_processor</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_methods</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> dict(read_md=read_md)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_md</span><span class="params">(file_name)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> md_file:</div><div class="line">        content = reduce(<span class="keyword">lambda</span> x,y: x+y, md_file.readlines())</div><div class="line">    <span class="keyword">return</span> content.decode(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<p>过滤器和全局方法配合使得页面更加灵活</p>
<h3 id="模版继承-包含与宏"><a href="#模版继承-包含与宏" class="headerlink" title="模版继承/包含与宏"></a>模版继承/包含与宏</h3><p><hr>  画直线</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之Monkeypatch]]></title>
      <url>http://arvin-he.github.io/2017/05/27/python-monkeypatch-2017-05-27/</url>
      <content type="html"><![CDATA[<h3 id="猴子补丁的由来"><a href="#猴子补丁的由来" class="headerlink" title="猴子补丁的由来"></a>猴子补丁的由来</h3><p>所谓的猴子补丁的含义是指在动态语言中，不去改变源码而对功能进行追加和变更。<br>猴子补丁的这个叫法起源于Zope框架，大家在修正Zope的Bug的时候经常在程序后面追加更新部分，这些被称作是“杂牌军补丁(guerilla patch)”，后来guerilla就渐渐的写成了gorllia(猩猩)，再后来就写了monkey(猴子)，所以猴子补丁的叫法是这么莫名其妙的得来的。</p>
<h3 id="从Gevent学习猴子补丁的设计"><a href="#从Gevent学习猴子补丁的设计" class="headerlink" title="从Gevent学习猴子补丁的设计"></a>从Gevent学习猴子补丁的设计</h3><p>猴子补丁这种东西充分利用了动态语言的灵活性，可以对现有的语言Api进行追加，替换，修改Bug，甚至性能优化等等。比如gevent的猴子补丁就可以对ssl、socket、os、time、select、thread、subprocess、sys等模块的功能进行了增强和替换。</p>
<h3 id="gevent中的猴子补丁模块gevent-monkey的设计和实现"><a href="#gevent中的猴子补丁模块gevent-monkey的设计和实现" class="headerlink" title="gevent中的猴子补丁模块gevent.monkey的设计和实现"></a>gevent中的猴子补丁模块gevent.monkey的设计和实现</h3><p>如果自己要设计实现猴子补丁，可以按照这么个模式去做，可以用ipython来阅读python模块的代码，执行import gevent.monkey之后，只需要输入??gevent.monkey就可以查看源码了。</p>
<p>这个模块核心的函数其实就几个，分别是<code>get_original、patch_item、remove_item、patch_module</code>,还有一个全局变量叫做saved，默认指向一个空的字典对象。</p>
<p>首先来看patch_item函数：<br>这个函数的功能就是从指定模块中查找旧的项，并把旧的项保存到saved字典中，然后将旧项替换成新项。这里没有使用None，而是构建了一个空的object()作为默认属性.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_item</span><span class="params">(module, attr, newitem)</span>:</span></div><div class="line">    NONE = object()</div><div class="line">    olditem = getattr(module, attr, NONE)</div><div class="line">    <span class="keyword">if</span> olditem <span class="keyword">is</span> <span class="keyword">not</span> NONE:</div><div class="line">        saved.setdefault(module.__name__, &#123;&#125;).setdefault(attr, olditem)</div><div class="line">    setattr(module, attr, newitem)</div></pre></td></tr></table></figure></p>
<p>patch_module的实现:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">patch_module</span><span class="params">(name, items=None)</span>:</span></div><div class="line">	gevent_module = getattr(__import__(<span class="string">'gevent.'</span> + name), name)</div><div class="line">	module_name = getattr(gevent_module, <span class="string">'__target__'</span>, name)</div><div class="line">	module = __import__(module_name)</div><div class="line">	<span class="keyword">if</span> items <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">		items = getattr(gevent_module, <span class="string">'__implements__'</span>, <span class="keyword">None</span>)</div><div class="line">		<span class="keyword">if</span> items <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">			<span class="keyword">raise</span> AttributeError(<span class="string">'%r does not have __implements__'</span> % gevent_module)</div><div class="line">	<span class="keyword">for</span> attr <span class="keyword">in</span> items:</div><div class="line">		patch_item(module, attr, getattr(gevent_module, attr))</div></pre></td></tr></table></figure></p>
<p>gevent有个约定，作为补丁的gevent模块要包含这两个属性，<code>__target__和__implements__</code>，<code>__target__</code>是被补丁的默认模块名称，可以不指定，默认为gevent子模块的名称，比如gevent.socket是socket模块的补丁，<br><code>__implements__</code>是要进行补丁的属性，这是gevent.socket模块中<code>__implements__</code>的定义：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># standard functions and classes that this module re-implements in a gevent-aware way:</span></div><div class="line">__implements__ = [<span class="string">'create_connection'</span>,</div><div class="line">                  <span class="string">'socket'</span>,</div><div class="line">                  <span class="string">'SocketType'</span>,</div><div class="line">                  <span class="string">'fromfd'</span>,</div><div class="line">                  <span class="string">'socketpair'</span>]</div></pre></td></tr></table></figure></p>
<p><code>patch_module</code>的工作就是从gevent模块里面读取这两个属性，然后遍历调用<code>patch_item</code>进行替换。</p>
<p>如果不希望用补丁的东西，而是使用原先的模块去进行处理，该怎么办？<br>前面提到过进行<code>patch_item</code>的时候会把旧的属性保存到名为saved的全局字典里面，如果要获得旧的模块属性，那么就要调用<code>get_original</code>函数从saved字典里面取出来。</p>
<h3 id="猴子补丁使用建议"><a href="#猴子补丁使用建议" class="headerlink" title="猴子补丁使用建议"></a>猴子补丁使用建议</h3><p>猴子补丁的功能很强大，但是也带来了很多的风险，尤其是像gevent这种直接进行API替换的补丁，整个Python进程所使用的模块都会被替换，可能自己的代码能hold住，但是其它第三方库，有时候问题并不好排查，即使排查出来也是很棘手，所以，就像松本建议的那样，如果要使用猴子补丁，那么<strong>只是做功能追加，尽量避免大规模的API覆盖</strong>。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.tuicool.com/articles/ema22iM" target="_blank" rel="external">http://www.tuicool.com/articles/ema22iM</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask之上下文机制]]></title>
      <url>http://arvin-he.github.io/2017/05/27/python-flask-context-2017-05-27/</url>
      <content type="html"><![CDATA[<h3 id="上下文（application-context-和-request-context）"><a href="#上下文（application-context-和-request-context）" class="headerlink" title="上下文（application context 和 request context）"></a>上下文（application context 和 request context）</h3><p>上下文是一个难理解的概念，在知乎的一个问题下面有个很通俗易懂的回答：</p>
<blockquote>
<p>每一段程序都有很多外部变量。只有像Add这种简单的函数才是没有外部变量的。一旦你的一段程序有了外部变量，这段程序就不完整，不能独立运行。你为了使他们运行，就要给所有的外部变量一个一个写一些值进去。这些值的集合就叫上下文。 – vzch</p>
</blockquote>
<p>flask中的上下文分两种，application context和request context，即应用上下文和请求上下文。这两者并不是全局与局部的关系，它们都处于一个请求的局部中。每个请求的g都是独立的，并且在整个请求内都是可访问修改的。</p>
<p>从一个 Flask App 读入配置并启动开始，就进入了 App Context，在其中我们可以访问配置文件、打开资源文件、通过路由规则反向构造 URL。<br>当一个请求进入开始被处理时，就进入了 Request Context，在其中我们可以访问请求携带的信息，比如 HTTP Method、表单域等。</p>
<h3 id="上下文对象的作用域"><a href="#上下文对象的作用域" class="headerlink" title="上下文对象的作用域"></a>上下文对象的作用域</h3><p>每个传给flask对象的请求，都是在不同的线程中处理，而且同一时刻每个线程只处理一个请求。所以对于每个请求来说，它们完全不用担心自己上下文中的数据被别的请求所修改。</p>
<p>然后就可以解释这个特性：从flask模块中引入的g、session、request、current_app是怎么做到同一个对象能在所有请求中使用并且不会冲突。</p>
<p>这两个上下文，一个保存请求本身的信息，一个保存处理过程中所用到的全局变量，从逻辑上也更为清晰。</p>
<p> Web 应用中每个线程（或 Greenlet）同时只处理一个请求，所以 App Context 对象和 Request Context 对象也是请求间隔离的。</p>
<h3 id="请求上下文"><a href="#请求上下文" class="headerlink" title="请求上下文"></a>请求上下文</h3><p>Flask中所有的请求处理都在“请求上下文”中进行，在它设计之初便就有这个概念。</p>
<ul>
<li>“请求上下文”是一个上下文对象，实现了<code>__enter__</code>和<code>__exit__</code>方法。可以使用with语句构造一个上下文环境。</li>
<li>进入上下文环境时，<code>_request_ctx_stack</code>这个栈中会推入一个<code>_RequestContext</code>对象。这个栈结构就是LocalStack栈。</li>
<li>推入栈中的<code>_RequestContext</code>对象有一些属性，包含了请求的的所有相关信息。例如app、request、session、g、flashes。还有一个url_adapter，这个对象可以进行URL匹配。</li>
<li>在with语句构造的上下文环境中可以进行请求处理。当退出上下文环境时，<code>_request_ctx_stack</code>这个栈会销毁刚才存储的上下文对象<br>以上的运行逻辑使得请求的处理始终在一个上下文环境中，这保证了请求处理过程不被干扰，而且请求上下文对象保存在LocalStack栈中，也很好地实现了线程/协程的隔离。</li>
</ul>
<p>以下是一个简单的例子：</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/9.png" alt=""></p>
<p>上面的结果显示：<code>_request_ctx_stack</code>中为每一个线程创建了一个“键-值”对，每一“键-值”对中包含一个请求上下文对象。如果使用with语句，在离开上下文环境时栈中销毁存储的上下文对象信息。</p>
<p>请求上下文——0.9版本<br>在0.9版本中，Flask引入了“应用上下文”的概念，且对“请求上下文”的实现有一定的改变。主要有一下改变:</p>
<ul>
<li>请求上下文实现了push、pop方法，这使得对于请求上下文的操作更加的灵活；</li>
<li>伴随着请求上下文对象的生成并存储在栈结构中，Flask还会生成一个“应用上下文”对象，而且“应用上下文”对象也会存储在另一个栈结构中去。这是两个版本最大的不同。</li>
</ul>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/10.png" alt=""></p>
<p>我们注意到，0.9版本的“请求上下文”的pop方法中，当要将一个“请求上下文”推入<code>_request_ctx_stack</code>栈中的时候，会先检查另一个栈<code>_app_ctx_stack</code>的栈顶是否存在“应用上下文”对象或者栈顶的“应用上下文”对象的应用是否是当前应用。如果不存在或者不是当前对象，Flask会自动先生成一个“应用上下文”对象，并将其推入<code>_app_ctx_stack</code>中。</p>
<p>注意到当要离开以上“请求上下文”环境的时候，Flask会先将“请求上下文”对象从<code>_request_ctx_stack</code>栈中销毁，之后会根据实际的情况确定销毁“应用上下文”对象。看下面代码:</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/11.png" alt=""></p>
<h3 id="应用上下文"><a href="#应用上下文" class="headerlink" title="应用上下文"></a>应用上下文</h3><p>“应用上下文”存在的一个主要功能就是确定请求所在的应用。</p>
<p>疑问：既然“请求上下文”中也包含app等和当前应用相关的信息，那么只要调用<code>_request_ctx_stack.top.app</code>或者魔法<code>current_app</code>就可以确定请求所在的应用了，那为什么还需要“应用上下文”对象呢？<br>答案: 对于单应用单请求来说，使用“请求上下文”确实就可以了。<br>然而，Flask的设计理念之一就是多应用的支持。当在一个应用的请求上下文环境中，需要嵌套处理另一个应用的相关操作时，“请求上下文”显然就不能很好地解决问题了。</p>
<p>如何让请求找到“正确”的应用呢？<br>我们可能会想到，可以再增加一个请求上下文环境，并将其推入<code>_request_ctx_stack</code>栈中。由于两个上下文环境的运行是独立的，不会相互干扰，所以通过调用<code>_request_ctx_stack.top.app</code>或者魔法<code>current_app</code>也可以获得当前上下文环境正在处理那个应用。这种办法在一定程度上可行，但是如果对于第二个应用的处理不涉及到相关请求，那也就无从谈起“请求上下文”。</p>
<p>为了应对这个问题，Flask中将应用相关的信息单独拿出来，形成一个“应用上下文”对象。这个对象可以和“请求上下文”一起使用，也可以单独拿出来使用。<br>不过有一点需要<strong>注意的是</strong>：在创建“请求上下文”时<strong>一定要创建</strong>一个“应用上下文”对象。有了“应用上下文”对象，便可以很容易地确定当前处理哪个应用，这就是魔法<code>current_app</code>。在0.1版本中，<code>current_app</code>是对<code>_request_ctx_stack.top.app</code>的引用，而在0.9版本中<code>current_app</code>是对<code>_app_ctx_stack.top.app</code>的引用。<br>下面以一个多应用的例子进行说明：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># example - Flask v0.9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, _request_ctx_stack, _app_ctx_stack</div><div class="line"><span class="comment"># 创建两个Flask应用</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>app = Flask(__name__)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>app2 = Flask(__name__)</div><div class="line"><span class="comment"># 先查看两个栈中的内容</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>_request_ctx_stack._local.__storage__</div><div class="line">&#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>_app_ctx_stack._local.__storage__</div><div class="line">&#123;&#125;</div><div class="line"><span class="comment"># 构建一个app的请求上下文环境，在这个环境中运行app2的相关操作</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> app.test_request_context():</div><div class="line">        <span class="keyword">print</span> <span class="string">"Enter app's Request Context:"</span></div><div class="line">        <span class="keyword">print</span> _request_ctx_stack._local.__storage__</div><div class="line">        <span class="keyword">print</span> _app_ctx_stack._local.__storage__</div><div class="line">        <span class="keyword">print</span></div><div class="line">        <span class="keyword">with</span> app2.app_context():</div><div class="line">            <span class="keyword">print</span> <span class="string">"Enter app2's App Context:"</span></div><div class="line">            <span class="keyword">print</span> _request_ctx_stack._local.__storage__</div><div class="line">            <span class="keyword">print</span> _app_ctx_stack._local.__storage__</div><div class="line">            <span class="keyword">print</span></div><div class="line">            <span class="comment"># do something</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"Exit app2's App Context:"</span></div><div class="line">        <span class="keyword">print</span> _request_ctx_stack._local.__storage__</div><div class="line">        <span class="keyword">print</span> _app_ctx_stack._local.__storage__</div><div class="line">        <span class="keyword">print</span></div><div class="line"><span class="comment"># Result</span></div><div class="line">Enter app<span class="string">'s Request Context:</span></div><div class="line"><span class="string">&#123;&lt;greenlet.greenlet object at 0x000000000727A178&gt;: &#123;'</span>stack<span class="string">': [&lt;RequestContext '</span>http://localhost/<span class="string">' [GET] of __main__&gt;]&#125;&#125;</span></div><div class="line"><span class="string">&#123;&lt;greenlet.greenlet object at 0x000000000727A178&gt;: &#123;'</span>stack<span class="string">': [&lt;flask.ctx.AppContext object at 0x0000000005DD0DD8&gt;]&#125;&#125;</span></div><div class="line"><span class="string">Enter app2'</span>s App Context:</div><div class="line">&#123;&lt;greenlet.greenlet object at <span class="number">0x000000000727A178</span>&gt;: &#123;<span class="string">'stack'</span>: [&lt;RequestContext <span class="string">'http://localhost/'</span> [GET] of __main__&gt;]&#125;&#125;</div><div class="line">&#123;&lt;greenlet.greenlet object at <span class="number">0x000000000727A178</span>&gt;: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x0000000005DD0DD8</span>&gt;, &lt;flask.ctx.AppContext object at <span class="number">0x0000000007313198</span>&gt;]&#125;&#125;</div><div class="line">Exit app2<span class="string">'s App Context</span></div><div class="line"><span class="string">&#123;&lt;greenlet.greenlet object at 0x000000000727A178&gt;: &#123;'</span>stack<span class="string">': [&lt;RequestContext '</span>http://localhost/<span class="string">' [GET] of __main__&gt;]&#125;&#125;</span></div><div class="line"><span class="string">&#123;&lt;greenlet.greenlet object at 0x000000000727A178&gt;: &#123;'</span>stack<span class="string">': [&lt;flask.ctx.AppContext object at 0x0000000005DD0DD8&gt;]&#125;&#125;</span></div></pre></td></tr></table></figure>
<p>在以上的例子中：</p>
<p>我们首先创建了两个Flask应用app和app2；</p>
<p>接着我们构建了一个app的请求上下文环境。当进入这个环境中时，这时查看两个栈的内容，发现两个栈中已经有了当前请求的请求上下文对象和应用上下文对象。并且栈顶的元素都是app的请求上下文和应用上下文；</p>
<p>之后，我们再在这个环境中嵌套app2的应用上下文。当进入app2的应用上下文环境时，两个上下文环境便隔离开来，此时再查看两个栈的内容，发现<code>_app_ctx_stack</code>中推入了app2的应用上下文对象，并且栈顶指向它。这时在app2的应用上下文环境中，<code>current_app</code>便会一直指向app2；</p>
<p>当离开app2的应用上下文环境，<code>_app_ctx_stack</code>栈便会销毁app2的应用上下文对象。这时查看两个栈的内容，发现两个栈中只有app的请求的请求上下文对象和应用上下文对象。</p>
<p>最后，离开app的请求上下文环境后，两个栈便会销毁app的请求的请求上下文对象和应用上下文对象，栈为空。</p>
<h3 id="与上下文对象有关的“全局变量”"><a href="#与上下文对象有关的“全局变量”" class="headerlink" title="与上下文对象有关的“全局变量”"></a>与上下文对象有关的“全局变量”</h3><p>Flask中使用的一些“全局变量”，包括<code>current_app</code>、<code>request</code>、<code>session</code>、<code>g</code>等都来自于上下文对象。<br>其中<code>current_app</code>一直指向<code>_app_ctx_stack</code>栈顶的“应用上下文”对象，是对当前应用的引用。<br>而request、session、g等一直指向<code>_request_ctx_stack</code>栈顶的“请求上下文”对象，分别引用请求上下文的request、session和g。不过，从 Flask 0.10 起，对象 g 存储在应用上下文中而不再是请求上下文中。</p>
<h3 id="两种上下文分析"><a href="#两种上下文分析" class="headerlink" title="两种上下文分析"></a>两种上下文分析</h3><p>当 <code>app = Flask(__name__)</code> 构造出一个 Flask App 时，App Context 并不会被自动推入 Stack 中。所以此时 Local Stack 的栈顶是空的，current_app 也是 unbound 状态。</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/1.png" alt=""></p>
<p>这也是一些 Flask 用户可能被坑的地方, 比如编写一个离线脚本时，如果直接在一个 Flask-SQLAlchemy 写成的 Model 上调用 <code>User.query.get(user_id)</code>，就会遇到 RuntimeError。因为此时 App Context 还没被推入栈中，而 Flask-SQLAlchemy 需要数据库连接信息时就会去取 <code>current_app.config</code>，current_app 指向的却是 <code>_app_ctx_stack</code> 为空的栈顶。</p>
<p>解决的办法是运行脚本正文之前，先将 App 的 App Context 推入栈中，栈顶不为空后 current_app 这个 Local Proxy 对象就自然能将“取 config 属性” 的动作转发到当前 App 上了：</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/2.png" alt=""></p>
<p>那么为什么在应用运行时不需要手动 <code>app_context().push()</code> 呢？<br>因为 Flask App 在作为 WSGI Application 运行时，会在每个请求进入的时候将请求上下文推入 <code>_request_ctx_stack</code> 中，而请求上下文一定是 App 上下文之中，所以推入部分的逻辑有这样一条：如果发现 <code>_app_ctx_stack</code> 为空，则隐式地推入一个 App 上下文。</p>
<p>所以，请求中是不需要手动推上下文入栈的，但是离线脚本需要手动推入 App Context。如果没有什么特殊困难，我更建议用 Flask-Script 来写离线任务。</p>
<h3 id="两个疑问"><a href="#两个疑问" class="headerlink" title="两个疑问"></a>两个疑问</h3><ol>
<li><p>为什么 App Context 要独立出来：既然在 Web 应用运行时里，App Context 和 Request Context 都是 Thread Local 的，那么为什么还要独立二者？</p>
</li>
<li><p>为什么要放在“栈”里：在 Web 应用运行时中，一个线程同时只处理一个请求，那么 <code>_req_ctx_stack</code> 和 <code>_app_ctx_stack</code> 肯定都是只有一个栈顶元素的。那么为什么还要用“栈”这种结构？</p>
</li>
</ol>
<p>答案:这两个做法给予我们多个 Flask App 共存和非 Web Runtime 中灵活控制 Context 的可能性。</p>
<p>我们知道对一个 Flask App 调用 app.run() 之后，进程就进入阻塞模式并开始监听请求。此时是不可能再让另一个 Flask App 在主线程运行起来的。<br>那么还有哪些场景需要多个 Flask App 共存呢？<br>前面提到了，一个 Flask App 实例就是一个 WSGI Application，那么 WSGI Middleware 是允许使用组合模式的.比如:</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/3.png" alt=""></p>
<p>这个例子就利用 Werkzeug 内置的 Middleware 将两个 Flask App 组合成一个一个 WSGI Application。这种情况下两个 App 都同时在运行，只是根据 URL 的不同而将请求分发到不同的 App 上处理。</p>
<p>需要注意的是，这种用法和 Flask 的 Blueprint 是有区别的。Blueprint 虽然和这种用法很类似，但前者自己没有 App Context，只是同一个 Flask App 内部整理资源的一种方式，所以多个 Blueprint 可能共享了同一个 Flask App；后者面向的是所有 WSGI Application，而不仅仅是 Flask App，即使是把一个 Django App 和一个 Flask App 用这种用法整合起来也是可行的。</p>
<p>如果仅仅在 Web Runtime 中，多个 Flask App 同时工作倒不是问题。毕竟每个请求被处理的时候是身处不同的 Thread Local 中的。但是 Flask App 不一定仅仅在 Web Runtime 中被使用 —— 有两个典型的场景是在非 Web 环境需要访问上下文代码的，一个是离线脚本（前面提到过），另一个是测试。这两个场景即所谓的“Running code outside of a request”。</p>
<h3 id="在非-Web-环境运行-Flask-关联的代码"><a href="#在非-Web-环境运行-Flask-关联的代码" class="headerlink" title="在非 Web 环境运行 Flask 关联的代码"></a>在非 Web 环境运行 Flask 关联的代码</h3><p>离线脚本或者测试这类非 Web 环境和和 Web 环境不同 —— 前者一般只在主线程运行。</p>
<p>设想，一个离线脚本需要操作两个 Flask App 关联的上下文，应该怎么办呢？这时候栈结构的 App Context 优势就发挥出来了。</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/4.png" alt=""></p>
<p>无论有多少个 App，只要主动去 Push 它的 App Context，Context Stack 中就会累积起来。这样，栈顶永远是当前操作的 App Context。当一个 App Context 结束的时候，相应的栈顶元素也随之出栈。如果在执行过程中抛出了异常，对应的 App Context 中注册的 teardown 函数被传入带有异常信息的参数。</p>
<p>这么一来就解释了两个疑问, 在这种单线程运行环境中，只有栈结构才能保存多个 Context 并在其中定位出哪个才是“当前”。而离线脚本只需要 App 关联的上下文，<strong>不需要构造出请求</strong>，所以 App Context 也应该和 Request Context 分离。这也就解释了为什么需要两个上下文了.</p>
<p>另一个手动推入 Context 的场景是测试。测试中我们可能会需要构造一个请求，并验证相关的状态是否符合预期。例如：</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/5.png" alt=""></p>
<p>这里调用 client.get 时，Request Context 就被推入了。其特点和 App Context 非常类似，这里不再赘述。</p>
<h3 id="为何建议使用-App-Factory-模式"><a href="#为何建议使用-App-Factory-模式" class="headerlink" title="为何建议使用 App Factory 模式"></a>为何建议使用 App Factory 模式</h3><p>从官方文档来看，Flask 有 Singleton(单例) 和 App Factory 两种用法。<br>前一种用法和其他的一些 Web 框架（如 Bottle、Sinatra）的门面广告很相似，因为代码精简，所以显得非常的“帅”：</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/6.png" alt=""></p>
<p>但是这种“帅”是有代价的。一个最麻烦的问题就是编写测试的时候：</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/7.png" alt=""></p>
<p>在上面的例子中，我为了测试给 App 新挂载了一个 View 函数。这是很常见的一个测试需求。但是如果 Flask App 实例是单例的，这种做法就会“弄脏”下一个测试的运行。更加麻烦的是，上述例子中如果 test_home 在 test_app 之前运行了，Flask 的开发者防御机制会认为这是一个“已经开始处理 Web 请求了，又挂载了视图”的失误，从而抛出 RuntimeError。</p>
<p>所以除非是应用简单到不需要 Web 层测试，否则还是尽量使用 App Factory 模式比较好。况且配合 Blueprint 的情况下，App Factory 还能帮助我们良好地组织应用结构：</p>
<p><img src="/2017/05/27/python-flask-context-2017-05-27/8.png" alt=""></p>
<p>这样就能彻底摆脱 app.py 和 View 模块“互相 Import”的纠结了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://blog.csdn.net/barrysj/article/details/51519254" target="_blank" rel="external">http://blog.csdn.net/barrysj/article/details/51519254</a></li>
<li><a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/" target="_blank" rel="external">https://blog.tonyseek.com/post/the-context-mechanism-of-flask/</a></li>
<li><a href="http://fanchunke.me/Flask/Flask%E4%B8%AD%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/" target="_blank" rel="external">http://fanchunke.me/Flask/Flask%E4%B8%AD%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之WSGI]]></title>
      <url>http://arvin-he.github.io/2017/05/25/python-wsgi-2017-05-25/</url>
      <content type="html"><![CDATA[<h3 id="WSGI概念"><a href="#WSGI概念" class="headerlink" title="WSGI概念"></a>WSGI概念</h3><p>我们先看一下面向 http 的 python 程序需要关心哪些内容：</p>
<ul>
<li>请求<ul>
<li>请求的方法 method</li>
<li>请求的地址 url</li>
<li>请求的内容</li>
<li>请求的头部 header</li>
<li>请求的环境信息</li>
</ul>
</li>
<li>响应<ul>
<li>状态码 status_code</li>
<li>响应的数据</li>
<li>响应的头部</li>
</ul>
</li>
</ul>
<p>WSGI（Web Server Gateway Interface） 的任务就是把上面的数据在 http server 和 python 应用程序之间简单友好地传递。<br>它是一个标准，被定义在PEP 333。需要 http server 和 python 应用程序都要遵守一定的规范，实现这个标准的约定内容，才能正常工作。</p>
<h3 id="应用程序端"><a href="#应用程序端" class="headerlink" title="应用程序端"></a>应用程序端</h3><p>WSGI 规定每个 python 程序（Application）必须是一个可调用的对象（实现了__call__ 函数的方法或者类），<br>接受两个参数 environ（WSGI 的环境信息） 和 start_response（开始响应请求的函数），并且返回 iterable。</p>
<p>几点说明：</p>
<ul>
<li>environ 和 start_response 由 http server 提供并实现</li>
<li>environ 变量是包含了环境信息的字典</li>
<li>Application 内部在返回前调用 start_response</li>
<li>start_response也是一个 callable，接受两个必须的参数，status（HTTP状态）和 response_headers（响应消息的头）</li>
<li>可调用对象要返回一个值，这个值是可迭代的。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># 1. 可调用对象是一个函数,函数都是可调用的</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">   response_body = <span class="string">'The request method was %s'</span> % environ[<span class="string">'REQUEST_METHOD'</span>]</div><div class="line">   <span class="comment"># HTTP response code and message</span></div><div class="line">   status = <span class="string">'200 OK'</span></div><div class="line">   <span class="comment"># 应答的头部是一个列表，每对键值都必须是一个 tuple。</span></div><div class="line">   response_headers = [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>),</div><div class="line">                       (<span class="string">'Content-Length'</span>, str(len(response_body)))]</div><div class="line">   <span class="comment"># 调用服务器程序提供的 start_response，填入两个参数</span></div><div class="line">   start_response(status, response_headers)</div><div class="line">   <span class="comment"># 返回必须是 iterable</span></div><div class="line">   <span class="keyword">return</span> [response_body]	</div><div class="line">   </div><div class="line"><span class="comment"># 2. 可调用对象是一个类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppClass</span>:</span></div><div class="line">	<span class="string">"""这里的可调用对象就是 AppClass 这个类，调用它就能生成可以迭代的结果。</span></div><div class="line"><span class="string">		使用方法类似于： </span></div><div class="line"><span class="string">		for result in AppClass(env, start_response):</span></div><div class="line"><span class="string">		     do_somthing(result)</span></div><div class="line"><span class="string">	"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        self.environ = environ</div><div class="line">        self.start = start_response</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        status = <span class="string">'200 OK'</span></div><div class="line">        response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)]</div><div class="line">        self.start(status, response_headers)</div><div class="line">        <span class="keyword">yield</span> <span class="string">"Hello world!\n"</span></div><div class="line"></div><div class="line"><span class="comment"># 3. 可调用对象是一个实例 </span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppClass</span>:</span></div><div class="line">	<span class="string">"""这里的可调用对象就是 AppClass 的实例，使用方法类似于： </span></div><div class="line"><span class="string">		app = AppClass()</span></div><div class="line"><span class="string">		for result in app(environ, start_response):</span></div><div class="line"><span class="string">		     do_somthing(result)</span></div><div class="line"><span class="string">	"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        status = <span class="string">'200 OK'</span></div><div class="line">        response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)]</div><div class="line">        self.start(status, response_headers)</div><div class="line">        <span class="keyword">yield</span> <span class="string">"Hello world!\n"</span></div></pre></td></tr></table></figure>
<h3 id="服务器程序端"><a href="#服务器程序端" class="headerlink" title="服务器程序端"></a>服务器程序端</h3><p>标准要能够确切地实行，必须要求程序端和服务器端共同遵守。<br>上面提到， envrion 和 start_response 都是服务器端提供的。</p>
<p>下面就看看，服务器端要履行的义务:<br>准备 environ 参数<br>定义 start_response 函数<br>调用程序端的可调用对象</p>
<p>PEP 333 里给出了一个 wsgi server 的简单实现，我又简化了一下——去除一些异常处理和判断，添加了一点注释：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os, sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_with_cgi</span><span class="params">(application)</span>:</span>    <span class="comment"># application 是程序端的可调用对象</span></div><div class="line">	<span class="comment"># 准备 environ 参数，这是一个字典，里面的内容是一次 HTTP 请求的环境变量</span></div><div class="line">    environ = dict(os.environ.items())</div><div class="line">    environ[<span class="string">'wsgi.input'</span>]        = sys.stdin</div><div class="line">    environ[<span class="string">'wsgi.errors'</span>]       = sys.stderr</div><div class="line">    environ[<span class="string">'wsgi.version'</span>]      = (<span class="number">1</span>, <span class="number">0</span>)</div><div class="line">    environ[<span class="string">'wsgi.multithread'</span>]  = <span class="keyword">False</span></div><div class="line">    environ[<span class="string">'wsgi.multiprocess'</span>] = <span class="keyword">True</span></div><div class="line">    environ[<span class="string">'wsgi.run_once'</span>]     = <span class="keyword">True</span>	        </div><div class="line">    environ[<span class="string">'wsgi.url_scheme'</span>] = <span class="string">'http'</span></div><div class="line"></div><div class="line">    headers_set = []</div><div class="line">    headers_sent = []</div><div class="line"></div><div class="line">	<span class="comment"># 把应答的结果输出到终端</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(data)</span>:</span></div><div class="line">        sys.stdout.write(data)</div><div class="line">        sys.stdout.flush()</div><div class="line"></div><div class="line">	<span class="comment"># 实现 start_response 函数，根据程序端传过来的 status 和 response_headers 参数，</span></div><div class="line">	<span class="comment"># 设置状态和头部</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, response_headers, exc_info=None)</span>:</span></div><div class="line">        headers_set[:] = [status, response_headers]</div><div class="line">      	<span class="keyword">return</span> write</div><div class="line"></div><div class="line">	<span class="comment"># 调用客户端的可调用对象，把准备好的参数传递过去</span></div><div class="line">    result = application(environ, start_response)</div><div class="line">    </div><div class="line">    <span class="comment"># 处理得到的结果，这里简单地把结果输出到标准输出。</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> result:</div><div class="line">            <span class="keyword">if</span> data:    <span class="comment"># don't send headers until body appears</span></div><div class="line">                write(data)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">if</span> hasattr(result, <span class="string">'close'</span>):</div><div class="line">            result.close()</div></pre></td></tr></table></figure></p>
<h3 id="中间层-middleware"><a href="#中间层-middleware" class="headerlink" title="中间层 middleware"></a>中间层 middleware</h3><p>有些程序可能处于服务器端和程序端两者之间：对于服务器程序，它就是应用程序；而对于应用程序，它就是服务器程序。这就是中间层 middleware。middleware 对服务器程序和应用是透明的，它像一个代理/管道一样，把接收到的请求进行一些处理，然后往后传递，一直传递到客户端程序，最后把程序的客户端处理的结果再返回。</p>
<p>middleware 做了两件事情：</p>
<ul>
<li>被服务器程序（有可能是其他 middleware）调用，返回结果回去</li>
<li>调用应用程序（有可能是其他 middleware），把参数传递过去</li>
</ul>
<p>PEP 333 上面给出了 middleware 的可能使用场景：</p>
<ul>
<li>根据 url 把请求给到不同的客户端程序（url routing）</li>
<li>允许多个客户端程序/web 框架同时运行，就是把接到的同一个请求传递给多个程序。</li>
<li>负载均衡和远程处理：把请求在网络上传输</li>
<li>应答的过滤处理</li>
</ul>
<p>那么简单地 middleware 实现是怎么样的呢？下面的代码实现的是一个简单地 url routing 的 middleware：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.path_info = &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, environ, start_response)</span>:</span></div><div class="line">        application = self.path_info[environ[<span class="string">'PATH_INFO'</span>]]</div><div class="line">        <span class="keyword">return</span> application(environ, start_response)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, path)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(application)</span>:</span></div><div class="line">            self.path_info[path] = application</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line">router = Router()</div></pre></td></tr></table></figure></p>
<p>怎么在程序里面使用呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#here is the application</span></div><div class="line"><span class="meta">@router('/hello')	#调用 route 实例，把函数注册到 paht_info 字典</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    status = <span class="string">'200 OK'</span></div><div class="line">    output = <span class="string">'Hello'</span></div><div class="line">    response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>),</div><div class="line">                        (<span class="string">'Content-Length'</span>, str(len(output)))]</div><div class="line">    write = start_response(status, response_headers)</div><div class="line">    <span class="keyword">return</span> [output]</div><div class="line"></div><div class="line"><span class="meta">@router('/world')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">world</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    status = <span class="string">'200 OK'</span></div><div class="line">    output = <span class="string">'World!'</span></div><div class="line">    response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>),</div><div class="line">                        (<span class="string">'Content-Length'</span>, str(len(output)))]</div><div class="line">    write = start_response(status, response_headers)</div><div class="line">    <span class="keyword">return</span> [output]</div><div class="line"></div><div class="line"><span class="comment">#here run the application</span></div><div class="line">result = router.route(environ, start_response)</div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> result: </div><div class="line">    write(value)</div></pre></td></tr></table></figure></p>
<h3 id="想要更多的话，就去看-PEP333，文档里还有下面更多的知识："><a href="#想要更多的话，就去看-PEP333，文档里还有下面更多的知识：" class="headerlink" title="想要更多的话，就去看 PEP333，文档里还有下面更多的知识："></a>想要更多的话，就去看 PEP333，文档里还有下面更多的知识：</h3><ul>
<li>错误处理</li>
<li>environ 变量包含哪些值，都是什么意思。</li>
<li>输入和输出的细节</li>
<li>start_response 的更多规范</li>
<li>content-length 等头部规范</li>
<li>缓存和文本流</li>
<li>unicode 和多语言处理</li>
<li>……</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://legacy.python.org/dev/peps/pep-0333/#rationale-and-goals" target="_blank" rel="external">官方文档 PEP333</a></li>
<li><a href="http://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/" target="_blank" rel="external">Getting Started with WSGI</a></li>
<li><a href="http://cizixs.com/2014/11/08/understand-wsgi" target="_blank" rel="external">http://cizixs.com/2014/11/08/understand-wsgi</a></li>
<li><a href="http://blog.csdn.net/yangz_xx/article/details/37508909" target="_blank" rel="external">http://blog.csdn.net/yangz_xx/article/details/37508909</a></li>
<li><a href="https://docs.python.org/2/library/wsgiref.html" target="_blank" rel="external">wsgiref：官方的 wsgi 实现，包括客户端和服务器端</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vscode插件和配置]]></title>
      <url>http://arvin-he.github.io/2017/05/25/vscode-config-plugins-2017-05-25/</url>
      <content type="html"><![CDATA[<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>Align<br>Beautify<br>C/C++<br>Emoji Code<br>HTML Snippets<br>JavaScript(ES6) code snippets<br>jsx<br>One Dark Theme<br>Path Intellisense<br>Python<br>Reactjs code snippets<br>Runner<br>vscode-icons</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>{<br>    “[cpp]”: {<br>        “editor.quickSuggestions”: false<br>    },<br>    “[c]”: {<br>        “editor.quickSuggestions”: false<br>    },<br>    // “editor.wordWrap”: “bounded”,<br>    // “editor.wordWrapColumn”: 80,<br>    // 控制字体系列<br>    “editor.fontFamily”: “Consolas, ‘Courier New’, monospace, ‘宋体’”,<br>    // 以像素为单位控制字号。<br>    “editor.fontSize”: 16,<br>    // 控制选取范围是否有圆角<br>    “editor.roundedSelection”: false,<br>    // 建议小组件的字号<br>    “editor.suggestFontSize”: 14,<br>    // 在“打开的编辑器”窗格中显示的编辑器数量。将其设置为 0 可隐藏窗格。<br>    “explorer.openEditors.visible”: 0,<br>    // 是否已启用自动刷新<br>    “git.autorefresh”: false,<br>    // 是否启用了自动提取。<br>    “git.autofetch”: false,<br>    // 以像素为单位控制终端的字号，这是 editor.fontSize 的默认值。<br>    “terminal.integrated.fontSize”: 16,<br>    // 控制终端游标是否闪烁。<br>    “terminal.integrated.cursorBlinking”: true,<br>    // 一个制表符等于的空格数。该设置在 <code>editor.detectIndentation</code> 启用时根据文件内容进行重写。<br>    “editor.tabSize”: 4,<br>    “editor.minimap.enabled”: false,<br>    // Tab Size<br>    “beautify.tabSize”: 4,</p>
<pre><code>&quot;python.linting.pylintEnabled&quot;: false,
&quot;python.linting.pep8Enabled&quot;: true,
&quot;files.autoSave&quot;: &quot;afterDelay&quot;,
&quot;files.autoSaveDelay&quot;: 1000,
&quot;workbench.iconTheme&quot;: &quot;vscode-icons&quot;,
&quot;window.zoomLevel&quot;: 1,
&quot;workbench.colorTheme&quot;: &quot;Monokai&quot;
</code></pre><p>}</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NodeJS/Vue安装]]></title>
      <url>http://arvin-he.github.io/2017/05/25/node-vue-setup-2017-05-25/</url>
      <content type="html"><![CDATA[<h3 id="node简介"><a href="#node简介" class="headerlink" title="node简介"></a>node简介</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>
<h3 id="node安装"><a href="#node安装" class="headerlink" title="node安装"></a>node安装</h3><p>windows下的NodeJS安装是比较方便的（v0.6.0版本之后，支持windows native），<br>只需要登陆官网 <a href="http://nodejs.org/" target="_blank" rel="external">node官网</a>，便可以看到首页的“INSTALL”按钮，直接点击就会自动下载安装了。</p>
<p>安装完成后可以使用cmd（win+r然后输入cmd进入）测试下是否安装成功。<br>方法：在cmd下输入node -v，出现版本提示就是完成了NodeJS的安装。</p>
<p>npm的安装。由于新版的NodeJS已经集成了npm，所以之前npm也一并安装好了。<br>同样可以使用cmd命令行输入”npm -v”来测试是否成功安装。出现版本提示便是已经安装好了。</p>
<h3 id="vue简介"><a href="#vue简介" class="headerlink" title="vue简介"></a>vue简介</h3><p>Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。<br>Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。<br>另一方面，Vue 完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。<br>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>Vue.js是一个MVVM模式的框架.</p>
<h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>由于有些npm有些资源被屏蔽或者是国外资源的原因，经常会导致用npm安装依赖包的时候失败或者速度非常慢，所有需要npm的国内镜像-cnpm.<br>在命令行中输入:<code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code>,回车然后等待安装,<br>完成之后，就可以用cnpm代替npm来安装依赖包了。如果想进一步了解cnpm的，查看淘宝npm镜像官网。</p>
<h3 id="vue安装"><a href="#vue安装" class="headerlink" title="vue安装"></a>vue安装</h3><p>在命令行输入:<code>cnpm install -g vue-cli</code>,回车,等待安装</p>
<h3 id="用vue-cli构建项目"><a href="#用vue-cli构建项目" class="headerlink" title="用vue-cli构建项目"></a>用vue-cli构建项目</h3><p>要创建项目，首先我们要选定目录，然后再命令行中把目录转到选定的目录.<br>下面创建一个vueflask项目,在命令行输入命令:<code>vue init webpack vueflask</code>,回车.<br>这个命令是初始化一个项目，其中webpack是构建工具，也就是整个项目是基于webpack的。其中vueflask是整个项目文件夹的名称，这个文件夹会自动生成在你指定的目录中.<br>运行初始化命令的时候回让用户输入几个基本的选项，如项目名称，描述，作者等信息，如果不想填直接回车默认就好.<br>整个项目的目录结构，我们主要在src目录中做修改。这个项目现在还只是一个结构框架，整个项目需要的依赖资源都还没有安装</p>
<h3 id="安装项目所需的依赖"><a href="#安装项目所需的依赖" class="headerlink" title="安装项目所需的依赖"></a>安装项目所需的依赖</h3><p>要安装依赖包，首先cd到项目文件夹(vueflask文件夹)，然后运行命令<code>cnpm install</code> ，等待安装。<br>安装完成之后，会在我们的项目目录vueflask文件夹中多出一个node_modules文件夹，这里边就是我们项目需要的依赖包资源。<br>安装完依赖包之后，就可以运行整个项目了。</p>
<h3 id="运行vue项目"><a href="#运行vue项目" class="headerlink" title="运行vue项目"></a>运行vue项目</h3><p>在项目目录中，运行命令<code>npm run dev</code>或<code>cnpm run dev</code> ，会用热加载的方式运行我们的应用，热加载可以在修改完代码后不用手动刷新浏览器就能实时看到修改后的效果。<br>关于<code>npm run dev</code>命令，其中的“run”对应的是package.json文件中，scripts字段中的dev，也就是<code>node build/dev-server.js</code>命令的一个快捷方式。<br> 项目运行成功后，浏览器会自动打开localhost:8080（如果浏览器没有自动打开，可以手动输入）。运行成功后，会看到如下所示的界面。</p>
<p> <img src="/2017/05/25/node-vue-setup-2017-05-25/1.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cnblogs.com/qdrw/articles/6380091.html" target="_blank" rel="external">http://www.cnblogs.com/qdrw/articles/6380091.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之生成器]]></title>
      <url>http://arvin-he.github.io/2017/05/24/python-generator-2017-05-24/</url>
      <content type="html"><![CDATA[<h3 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container)"></a>容器(container)</h3><p>容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用 in, not in关键字判断元素是否包含在容器中。<br>在Python中，常见的容器对象有：<br>list, deque, ….<br>set, frozensets, ….<br>dict, defaultdict, OrderedDict, Counter, ….<br>tuple, namedtuple, …<br>str</p>
<p>尽管绝大多数容器都提供了某种方式来获取其中的每一个元素，但这并不是容器本身提供的能力，而是可迭代对象赋予了容器这种能力，<br>当然并不是所有的容器都是可迭代的，比如：Bloom filter，虽然Bloom filter可以用来检测某个元素是否包含在容器中，<br>但是并不能从容器中获取其中的每一个值，因为Bloom filter压根就没把元素存储在容器中，而是通过一个散列函数映射成一个值保存在数组中。</p>
<h3 id="可迭代对象-iterable"><a href="#可迭代对象-iterable" class="headerlink" title="可迭代对象(iterable)"></a>可迭代对象(iterable)</h3><p>很多容器都是可迭代对象，此外还有更多的对象同样也是可迭代对象，比如处于打开状态的files，sockets等等。但凡是可以返回一个迭代器的对象都可称之为可迭代对象.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = iter(x)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z = iter(x)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(y)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(y)</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(z)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(x)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(y)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list_iterator</span>'&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里 x 是一个可迭代对象，可迭代对象和容器一样是一种通俗的叫法，并不是指某种具体的数据类型，list是可迭代对象，dict是可迭代对象，set也是可迭代对象。<br>y 和 z 是两个独立的迭代器，迭代器内部持有一个状态，该状态用于记录当前迭代所在的位置，以方便下次迭代的时候获取正确的元素。<br>迭代器有一种具体的迭代器类型，比如 list_iterator， set_iterator。<br>可迭代对象实现了 __iter__和 __next__方法（python2中是 next方法，python3是 <strong>next</strong>方法），这两个方法对应内置函数 iter()和 next()。<br>__iter__方法返回可迭代对象本身，这使得他既是一个可迭代对象同时也是一个迭代器。<br>当运行下面代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> x:</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>实际执行情况是:</p>
<p><img src="/2017/05/24/python-generator-2017-05-24/1.png" alt=""></p>
<h3 id="迭代器-iterator"><a href="#迭代器-iterator" class="headerlink" title="迭代器(iterator)"></a>迭代器(iterator)</h3><p>迭代器就是用于迭代操作（for 循环）的对象，它像列表一样可以迭代获取其中的每一个元素，<br>它是一个带状态的对象，它能在你调用 next()方法的时候返回容器中的下一个值，<br>任何实现了 __next__ 方法（python2 是 next）方法的对象都是迭代器<br>以斐波那契数列为例来实现一个迭代器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></div><div class="line">        self.prev = <span class="number">0</span></div><div class="line">        self.cur = <span class="number">1</span></div><div class="line">        self.n = n</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.n &gt; <span class="number">0</span>:</div><div class="line">            value = self.cur</div><div class="line">            self.cur = self.cur + self.prev</div><div class="line">            self.prev = value</div><div class="line">            self.n -= <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> value</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> StopIteration()</div><div class="line">        <span class="comment"># 兼容python2</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">            <span class="keyword">return</span> self.next()</div><div class="line"></div><div class="line">f = Fib(<span class="number">10</span>)</div><div class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> f])</div><div class="line"><span class="comment">#[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span></div></pre></td></tr></table></figure></p>
<p>Fib既是一个可迭代对象（因为它实现了 __iter__方法），又是一个迭代器（因为实现了 __next__方法）。<br>实例变量 prev和 cur维护迭代器内部的状态。每次调用 next()方法的时候做两件事：</p>
<ol>
<li>为下一次调用 next()方法修改状态</li>
<li>为当前这次调用生成返回结果<br>迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。</li>
</ol>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>普通函数用 return 返回一个值，然而在 Python 中还有一种函数，用关键字 yield 来返回值，这种函数叫生成器函数，<br>函数被调用时会返回一个生成器对象，生成器本质上还是一个迭代器，也是用在迭代操作中，因此它有和迭代器一样的特性，唯一的区别在于实现方式上不一样.<br>生成器其实是一种特殊的迭代器，不过这种迭代器更加优雅。它不需要再像上面的类一样写 __iter__()和 __next__()方法了，只需要一个 yiled关键字。<br>生成器一定是迭代器（反之不成立），因此任何生成器也是以一种懒加载的模式生成值。<br>最简单的生成器函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(n)</span>:</span></div><div class="line">	<span class="keyword">yield</span> n*<span class="number">2</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>func</div><div class="line">&lt;function func at <span class="number">0x02397B70</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = func(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g</div><div class="line">&lt;generator object func at <span class="number">0x023961E8</span>&gt;</div></pre></td></tr></table></figure></p>
<p>func 就是一个生成器函数，调用该函数时返回对象就是生成器 g ，这个生成器对象的行为和迭代器是非常相似的，可以用在 for 循环等场景中。<br>注意 yield 对应的值在函数被调用时不会立刻返回，而是调用next方法时（本质上 for 循环也是调用 next 方法）才返回.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = func(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</div><div class="line"><span class="number">10</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = func(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> g:</div><div class="line"><span class="meta">... </span>    print(i)</div><div class="line">...</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>用生成器实现斐波那契数列:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    prev, curr = <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n -= <span class="number">1</span></div><div class="line">        <span class="keyword">yield</span> curr</div><div class="line">        prev, curr = curr, curr + prev</div><div class="line"></div><div class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">10</span>)])</div><div class="line"><span class="comment">#[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span></div></pre></td></tr></table></figure></p>
<p>fib就是一个普通的python函数，它特殊的地方在于函数体中没有return关键字，函数的返回值是一个生成器对象。<br>当执行 f=fib()返回的是一个生成器对象，此时函数体中的代码并不会执行，只有显示或隐示地调用next的时候才会真正执行里面的代码。</p>
<p>生成器在Python中是一个非常强大的编程结构，可以用更少地中间变量写流式代码，<br>此外，相比其它容器对象它更能节省内存和CPU，当然它可以用更少的代码来实现相似的功能。现在就可以动手重构你的代码了，但凡看到类似：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">something</span><span class="params">()</span>:</span></div><div class="line">    result = []</div><div class="line">    <span class="keyword">for</span> ... <span class="keyword">in</span> ...:</div><div class="line">        result.append(x)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">iter_something</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> ... <span class="keyword">in</span> ...:</div><div class="line">        <span class="keyword">yield</span> x</div></pre></td></tr></table></figure></p>
<h3 id="生成器表达式-generator-expression"><a href="#生成器表达式-generator-expression" class="headerlink" title="生成器表达式(generator expression)"></a>生成器表达式(generator expression)</h3><p>生成器表达式是列表推倒式的生成器版本，看起来像列表推导式，但是它返回的是一个生成器对象而不是列表对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x401f08</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sum(a)</div><div class="line"><span class="number">285</span></div></pre></td></tr></table></figure></p>
<h3 id="生成器的执行顺序"><a href="#生成器的执行顺序" class="headerlink" title="生成器的执行顺序"></a>生成器的执行顺序</h3><p>在调用__next__()或者进入for循环之后，函数执行到yield就返回一个值，然后函数暂停。在下次调用__next__()之后，生成器开始执行yield之后的语句。</p>
<h3 id="生成器对象的成员函数"><a href="#生成器对象的成员函数" class="headerlink" title="生成器对象的成员函数"></a>生成器对象的成员函数</h3><p>生成器对象有几个比较重要的成员函数：<br>__next__()和__iter__()：有这两个函数，生成器就具有了可迭代性<br>send()：这个函数很有用，可以用来给生成器函数传递一个新的值<br>close()：关闭这个生成器，关闭之后生成器就不可再调用<br>throw（）：给生成器传入一个异常</p>
<h3 id="send函数的用法"><a href="#send函数的用法" class="headerlink" title="send函数的用法"></a>send函数的用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#send函数的用法</span></div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Gen</span><span class="params">(n)</span>:</span></div><div class="line">    i=<span class="number">0</span> </div><div class="line">    <span class="keyword">while</span> (i&lt;n):</div><div class="line">        i=i+<span class="number">1</span></div><div class="line">        <span class="comment">#yeild语句，在重新开始执行的时候可以获得一个值，这个值就是由send函数输入的</span></div><div class="line">        res = <span class="keyword">yield</span> randint(<span class="number">0</span>, <span class="number">100</span>)</div><div class="line">        <span class="keyword">if</span> res==<span class="string">'stop'</span>:</div><div class="line">            <span class="keyword">print</span> (<span class="string">'forced stop'</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#初始化一个生成器对象</span></div><div class="line">    c=Gen(<span class="number">10</span>)</div><div class="line">    <span class="keyword">print</span> (c.__next__())</div><div class="line">    <span class="keyword">print</span> (c.__next__())</div><div class="line">    <span class="comment">#传入‘start’字符串，</span></div><div class="line">    <span class="keyword">print</span> (c.send(<span class="string">'start'</span>))</div><div class="line">    <span class="comment">#传入‘stop’字符串，生成器跳出while循环</span></div><div class="line">    <span class="keyword">print</span> (c.send(<span class="string">'stop'</span>))</div><div class="line">    <span class="comment">#继续迭代生成器将报错</span></div><div class="line">    <span class="keyword">print</span> (c.__next__())</div><div class="line"></div><div class="line">执行结果：</div><div class="line"><span class="number">95</span></div><div class="line"><span class="number">77</span></div><div class="line"><span class="number">49</span></div><div class="line">forced stop</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"sample3.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">print</span> (c.send(<span class="string">'stop'</span>))</div><div class="line">StopIteration</div></pre></td></tr></table></figure>
<p>从执行结果来看，<br>调用前两个next和第三个send函数，生成器都会yield出结果。<br>第四次调用send函数之后，也开始了迭代，不过由于退出了while循环，没有再一次回到yield，所以最终的结果里面只有三个数字<br>最后一次调用next函数，出现报错，因为生成器已经关闭。</p>
<h3 id="close函数的用法"><a href="#close函数的用法" class="headerlink" title="close函数的用法"></a>close函数的用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#close函数的用法</span></div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Gen</span><span class="params">(n)</span>:</span></div><div class="line">    i=<span class="number">0</span> </div><div class="line">    <span class="keyword">while</span> (i&lt;n):</div><div class="line">        i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">yield</span> randint(<span class="number">0</span>,<span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    c=Gen(<span class="number">10</span>)</div><div class="line">    <span class="keyword">print</span> (c.__next__())</div><div class="line">    <span class="keyword">print</span> (c.__next__())</div><div class="line">    <span class="comment">#close生成器之后，再调用next将报错</span></div><div class="line">    c.close()</div><div class="line">    <span class="keyword">print</span> (c.__next__())</div><div class="line"></div><div class="line">执行结果：</div><div class="line"><span class="number">81</span></div><div class="line"><span class="number">65</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"sample4.py"</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">print</span> (c.__next__())</div><div class="line">StopIteration</div></pre></td></tr></table></figure>
<p>close函数的用法就是关闭生成器对象，其实调用send或者next函数都会‘open’这个生成器，期间生成器都会记录执行的中间结果，直到生成器被关闭为止</p>
<h3 id="throw函数的用法"><a href="#throw函数的用法" class="headerlink" title="throw函数的用法"></a>throw函数的用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Gen</span><span class="params">(n)</span>:</span></div><div class="line">    i=<span class="number">0</span> </div><div class="line">    <span class="keyword">while</span> (i&lt;n):</div><div class="line">        i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            res = <span class="keyword">yield</span> randint(<span class="number">0</span>,<span class="number">100</span>)</div><div class="line">        <span class="keyword">except</span> IOError:</div><div class="line">            <span class="keyword">print</span> (<span class="string">'get the IO Error'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    c=Gen(<span class="number">10</span>)</div><div class="line">    <span class="keyword">print</span> (c.__next__())</div><div class="line">    <span class="comment">#给生成器扔进去一个异常    </span></div><div class="line">    c.throw(IOError)</div><div class="line">    <span class="keyword">print</span> (c.__next__())</div></pre></td></tr></table></figure>
<p>执行结果：<br>39<br>get the IO Error<br>19</p>
<p>可以看到生成器内部成功的捕获并处理了这个异常，并且没有阻断生成器后面的执行流程</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://mp.weixin.qq.com/s/baavCsOtKH0uuUGI-GPecw" target="_blank" rel="external">https://mp.weixin.qq.com/s/baavCsOtKH0uuUGI-GPecw</a></li>
<li><a href="http://www.jianshu.com/p/1c7c6ee38392" target="_blank" rel="external">http://www.jianshu.com/p/1c7c6ee38392</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之装饰器]]></title>
      <url>http://arvin-he.github.io/2017/05/24/python-decorator-2017-05-24/</url>
      <content type="html"><![CDATA[<h3 id="装饰器概念"><a href="#装饰器概念" class="headerlink" title="装饰器概念"></a>装饰器概念</h3><p>谈装饰器前，还要先要明白一件事，Python 中的函数和 Java、C++不太一样，Python 中的函数可以像普通变量一样当做参数传递给另外一个函数.<br>装饰器本质上是一个 Python 函数或类，其返回值也是一个函数或类对象, 作用是让其他函数或类在不需要做任何代码修改的前提下增加额外功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env</span></div><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line">__author__ = <span class="string">'arvin'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">    print(<span class="string">"%s was called"</span> % func.__name__)</div><div class="line">    func()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">"arvin"</span>)</span>:</span></div><div class="line">    print(<span class="string">"Hello %s!"</span> % name)</div><div class="line">decorator(hello)</div></pre></td></tr></table></figure></p>
<h3 id="装饰器应用场景"><a href="#装饰器应用场景" class="headerlink" title="装饰器应用场景"></a>装饰器应用场景</h3><p>装饰器经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景，装饰器是解决这类问题的绝佳设计。<br>有了装饰器，就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</p>
<h3 id="语法糖"><a href="#语法糖" class="headerlink" title="@ 语法糖"></a>@ 语法糖</h3><p>@ 符号其实就是装饰器的语法糖，它放在函数开始定义的地方，这样就可以省略最后一步再次赋值的操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        logging.warn(<span class="string">"%s is running"</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"this is foo function"</span>)</div><div class="line"></div><div class="line">foo()</div></pre></td></tr></table></figure></p>
<p>有了 @ ，就可以省去foo = log(foo)这一句了，直接调用 foo() 即可得到想要的结果。foo() 函数不需要做任何修改，只需在定义的地方加上装饰器，调用的时候还是和以前一样，如果有其他的类似函数，可以继续调用装饰器来修饰函数，而不用重复修改函数或者增加新的封装。这样，就提高了程序的可重复利用性，并增加了程序的可读性。</p>
<p>装饰器在 Python 使用如此方便都要归因于 Python 的函数能像普通的对象一样能作为参数传递给其他函数，可以被赋值给其他变量，可以作为返回值，可以被定义在另外一个函数内。</p>
<h3 id="不带参数的装饰器"><a href="#不带参数的装饰器" class="headerlink" title="不带参数的装饰器"></a>不带参数的装饰器</h3><p>在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）,本质上，decorator就是一个返回函数的高阶函数.</p>
<p>定义装饰器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure></p>
<p>其中,wrapper名字是自定义的,上面的log是一个decorator,接受一个函数作为参数，并返回一个函数。</p>
<p>使用装饰器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-4-25'</span>)</div></pre></td></tr></table></figure></p>
<p>调用now()函数，不仅会运行now()函数本身，还会在运行now()函数前打印一行日志.</p>
<h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><p>装饰器的语法允许我们在调用时，提供其它参数，比如@decorator(a)。这样，就为装饰器的编写和使用提供了更大的灵活性。<br>比如，我们可以在装饰器中指定日志的等级.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span><span class="params">(level)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">if</span> level == <span class="string">"warn"</span>:</div><div class="line">                logging.warn(<span class="string">"%s is running"</span> % func.__name__)</div><div class="line">            <span class="keyword">elif</span> level == <span class="string">"info"</span>:</div><div class="line">                logging.info(<span class="string">"%s is running"</span> % func.__name__)</div><div class="line">            <span class="keyword">return</span> func(*args)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@use_logging(level="warn")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name=<span class="string">'foo'</span>)</span>:</span></div><div class="line">    print(<span class="string">"this is %s"</span> % name)</div></pre></td></tr></table></figure></p>
<p>上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我<br>们使用@use_logging(level=”warn”)调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。<br>@use_logging(level=”warn”)等价于@decorator</p>
<h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></div><div class="line">        self._func = func</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">'class decorator runing'</span>)</div><div class="line">        self._func()</div><div class="line">        <span class="keyword">print</span> (<span class="string">'class decorator ending'</span>)</div><div class="line"></div><div class="line"><span class="meta">@Foo</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> (<span class="string">'bar'</span>)</div><div class="line"></div><div class="line">bar()</div></pre></td></tr></table></figure></p>
<h3 id="使用functools-wraps"><a href="#使用functools-wraps" class="headerlink" title="使用functools.wraps"></a>使用functools.wraps</h3><p>使用装饰器极大地复用了代码，但有一个缺点就是原函数的元信息不见了，比如函数的docstring、__name__、参数列表，先看例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 装饰器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">with_logging</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> func.__name__      <span class="comment"># 输出 'with_logging'</span></div><div class="line">        <span class="keyword">print</span> func.__doc__       <span class="comment"># 输出 None</span></div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> with_logging</div><div class="line"></div><div class="line"><span class="comment"># 函数</span></div><div class="line"><span class="meta">@logged</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">   <span class="string">"""does some math"""</span></div><div class="line">   <span class="keyword">return</span> x + x * x</div><div class="line"></div><div class="line">logged(f)</div></pre></td></tr></table></figure></p>
<p>不难发现，函数 f 被with_logging取代了，当然它的docstring，__name__就是变成了with_logging函数的信息了。<br>好在有functools.wraps，wraps本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，<br>这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">with_logging</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> func.__name__      <span class="comment"># 输出 'f'</span></div><div class="line">        <span class="keyword">print</span> func.__doc__       <span class="comment"># 输出 'does some math'</span></div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> with_logging</div><div class="line"></div><div class="line"><span class="meta">@logged</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">   <span class="string">"""does some math"""</span></div><div class="line">   <span class="keyword">return</span> x + x * x</div></pre></td></tr></table></figure></p>
<h3 id="装饰器顺序"><a href="#装饰器顺序" class="headerlink" title="装饰器顺序"></a>装饰器顺序</h3><p>一个函数还可以同时定义多个装饰器，比如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@a</span></div><div class="line"><span class="meta">@b</span></div><div class="line"><span class="meta">@c</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span> <span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于<code>f = a(b(c(f)))</code></p>
<h3 id="在函数执行之后进行装饰"><a href="#在函数执行之后进行装饰" class="headerlink" title="在函数执行之后进行装饰"></a>在函数执行之后进行装饰</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env</span></div><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line">__author__ = <span class="string">'arvin'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">      print(<span class="string">"%s was called"</span> % func.__name__)</div><div class="line">      func()</div><div class="line">      print(<span class="string">"bye~"</span>)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">"arvin"</span>)</span>:</span></div><div class="line">    print(<span class="string">"Hello %s!"</span> % name)</div><div class="line"></div><div class="line">hello()</div><div class="line"></div><div class="line"><span class="comment"># 执行</span></div><div class="line">outputs:</div><div class="line">hello was called</div><div class="line">Hello arvin!</div><div class="line">bye~</div></pre></td></tr></table></figure>
<p>可以这样理解hello()==decorator(hello)()==wrapper()，最后其实就是执行wrapper()函数而已</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env</span></div><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line">__author__ = <span class="string">'arvin'</span></div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">"%s was called"</span> % func.__name__)</div><div class="line">        func(*args, **kwargs)</div><div class="line">        print(<span class="string">"bye~"</span>)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">"arvin"</span>)</span>:</span></div><div class="line">    print(<span class="string">"Hello %s!"</span> % name)</div><div class="line">hello(<span class="string">'world'</span>)</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://juejin.im/post/587c565f128fe1006b00c973" target="_blank" rel="external">https://juejin.im/post/587c565f128fe1006b00c973</a></li>
<li><a href="http://www.jianshu.com/p/ada1ceecd079" target="_blank" rel="external">http://www.jianshu.com/p/ada1ceecd079</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python之Sip使用]]></title>
      <url>http://arvin-he.github.io/2017/05/13/python-sip-2017-05-13/</url>
      <content type="html"><![CDATA[<h3 id="Sip使用步骤"><a href="#Sip使用步骤" class="headerlink" title="Sip使用步骤"></a>Sip使用步骤</h3><p>第一步: 编写个C文件，功能是将两个数字相加并输出，命名为add.c，这个将成为在Python中的模块名，如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* File : add.c */</span>  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>   </span></div><div class="line"><span class="function"></span>&#123;    </div><div class="line">    <span class="keyword">int</span> g;    </div><div class="line">    g = x + y;  </div><div class="line">    <span class="keyword">return</span> g;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二步: <strong>手工编写</strong>SIP文件，在使用SIP的过程中，一个C/C++的源码文件尽量对应一个同名的sip文件,这里命名为add.sip，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/* Define the SIP wrapper to the add library. */  </div><div class="line">%Module(name=add, language=&quot;C&quot;)  </div><div class="line">int add(int x, int y);</div></pre></td></tr></table></figure></p>
<p>如果是源程序是用C++写的，那么这里的（name=add, language=”C”）就可以省去。<br>这里的C源码文件没有头文件，所以对应的sip文件很简单。<br>如果C/C++的源码是实现部分，在实现部分还包括接口部分，即头文件。那么在相应的sip文件中需要用下面的代码来包含相应的头文件.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%TypeHeaderCode  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;word.h&gt;  </span></span></div><div class="line">%End</div></pre></td></tr></table></figure></p>
<p>sip文件与正式的C/C++头文件相似，但与之不同的是：sip文件不包含相应的头文件的私有成员变量（private或protected）。<br>更详细的sip文件编写规范，请参考riverbank官方网站上的说明文档SIP Reference Guide。</p>
<p>第三步:编译C文件。按照官网的说法，是编写configure.py，但先做一些必不可少的工作。<br>在命令行将add.c编译成add.o文件：输入<code>gcc -c add.c</code>, 将这一步生成的add.o文件<br>生产库文件：<code>ar -r libadd.a add.o</code>,这两步在这里是为一个单独的C模块测试的，<br>如果是大量的C模块，可以用一个makefile一并批量完成。<br>记住，需要将libadd.a文件复制到Python文件夹下的libs文件夹中。也可以将源代码直接编译成dll</p>
<p>第四步:手工编写configure.py文件，同样，这个configure文件的编写也不难，看下规范就会了。这里，我们模仿官网的模版写一个自己的configure.py。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os  </div><div class="line"><span class="keyword">import</span> sipconfig  </div><div class="line"><span class="comment"># The name of the SIP build file generated by SIP and used by the build system.  </span></div><div class="line">build_file = <span class="string">"add.sbf"</span>  </div><div class="line">  </div><div class="line"><span class="comment"># Get the SIP configuration information.  </span></div><div class="line">config = sipconfig.Configuration()  </div><div class="line">  </div><div class="line"><span class="comment"># Run SIP to generate the code.  </span></div><div class="line">os.system(<span class="string">" "</span>.join([config.sip_bin, <span class="string">"-c"</span>, <span class="string">"."</span>, <span class="string">"-b"</span>, build_file, <span class="string">"add.sip"</span>]))  </div><div class="line">  </div><div class="line"><span class="comment"># Create the Makefile.  </span></div><div class="line">makefile = sipconfig.SIPModuleMakefile(config, build_file)  </div><div class="line">  </div><div class="line"><span class="comment"># Add the library we are wrapping.  The name doesn't include any platform  </span></div><div class="line"><span class="comment"># specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the  </span></div><div class="line"><span class="comment"># ".dll" extension on Windows).  </span></div><div class="line">makefile.extra_libs = [<span class="string">"add"</span>]  </div><div class="line">  </div><div class="line"><span class="comment"># Generate the Makefile itself.  </span></div><div class="line">makefile.generate()</div></pre></td></tr></table></figure></p>
<p>第五步:运行configure.py，会生成一个makefile文件（直接用IDLE打开configure.py，按F5运行；或者命令行用python configure.py运行都可以）。<br>这里有个诡异的地方，有的人会在这一步会报错，说找不到add.sbf文件，而add.sbf文件应该是configure.py运行时调用相关函数自动产生的。<br>若出现这个问题，请重新编译SIP。如果是Windows下，最好是在另一台机器上拷贝一个完整的包含能正常的SIP的Python文件夹，到有问题的机器上，将问题Python文件夹覆盖掉。</p>
<p>第六步: 在命令行输入make（这里会生成一个关于函数的警告，不用管它，若有问题请检查前面的步骤），生成add.pyd文件。<br>然后再输入make install（将add.pyd文件装入到Python的Lib文件夹下的sit-packages文件夹中）。</p>
<p>第七步: 打开Python 的命令行，进行测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">import</span> add  </div><div class="line">&gt;&gt;&gt;add.add(<span class="number">4</span>, <span class="number">7</span>)  </div><div class="line"><span class="number">11</span>  </div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>提示：<br>（1）这些文件可以放到Python的文件夹下新建的文件夹中（所有的操作在这个目录下的命令行窗口中使用）。<br>注意，Python的父文件夹名不能有空格，否则会无法读取库文件。<br>（2）使用MinGW，需要把~\MinGW\bin添加的环境变量中（Linux下则不必），这样才能使用gcc、make和ar等工具。</p>
<h3 id="C-中的sip写法"><a href="#C-中的sip写法" class="headerlink" title="C++中的sip写法"></a>C++中的sip写法</h3><p>具体的实现办法和上面介绍的相似，所不同的就是根据相应的C++头文件来写对应的sip文件。详细过程如下。</p>
<p>首先，写好C++类的实现和接口部分（以Geometry类中的方法，输入半径，显示周长或面积为例）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Geometry.h</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Geometry</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        Geometry(<span class="keyword">double</span> r); <span class="comment">//构造函数</span></div><div class="line">        <span class="function"><span class="keyword">double</span> <span class="title">calPerimeter</span><span class="params">(<span class="keyword">double</span> radius)</span></span>;  <span class="comment">//参数半径，返回圆周长</span></div><div class="line">        <span class="function"><span class="keyword">double</span> <span class="title">calArea</span><span class="params">(<span class="keyword">double</span> radius)</span></span>;  <span class="comment">//参数半径，返回原面积</span></div><div class="line"> </div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">double</span>     perimeter;</div><div class="line">        <span class="keyword">double</span>     radius;</div><div class="line">        <span class="keyword">double</span>     area;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>接着，是C++的实现部分：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Geometry.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Geometry.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.141592 </span></div><div class="line"> </div><div class="line">Geometry::Geometry(<span class="keyword">double</span> r) <span class="comment">//构造函数</span></div><div class="line">&#123;</div><div class="line">    radius = r;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">double</span> Geometry::calPerimeter(<span class="keyword">double</span> radius)  <span class="comment">//参数半径，返回圆周长</span></div><div class="line">&#123;</div><div class="line">    perimeter = radius * <span class="number">2</span>* PI;</div><div class="line">    <span class="keyword">return</span> perimeter;</div><div class="line">&#125;</div><div class="line"><span class="keyword">double</span> Geometry::calArea(<span class="keyword">double</span> radius)  <span class="comment">//参数半径，返回原面积</span></div><div class="line">&#123;</div><div class="line">    area = radius * radius * PI;</div><div class="line">    <span class="keyword">return</span> perimeter;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第三步：如同上文中介绍的，在命令行中用g++ -c Geometry.cpp和ar -r libGeometry.a Geometry.o来编译出库文件，并把库文件添加到Python文件夹下的libs文件夹中。</p>
<p>第四步：编写C++文件对应的sip文件，再次提示，sip文件是基于C++的头文件的。本例中的sip文件内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//Geometry.sip</div><div class="line">%Module Geometry</div><div class="line"> </div><div class="line">class Geometry &#123;</div><div class="line">%TypeHeaderCode</div><div class="line">#include &lt;Geometry.h&gt;</div><div class="line">%End</div><div class="line"> </div><div class="line">public:</div><div class="line">    Geometry(double r);   </div><div class="line">    double calPerimeter(double radius);</div><div class="line">    double calArea(double radius);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>第五步：在命令行中使用Python configure.py命令，注意，configure.py文件是自己写的，configure的模板在上文中有，只需将上文中的模板中的add改为对应的Geometry，也就是类名就可以了。</p>
<p>第六步：在命令行中依次使用mingw32-make和ming32-make install将编译出的Geometry.pyd复制到Python文件夹下的Libs/site-packages文件夹中。</p>
<p>若不出意外，上述步骤可以执行成功。注：这里所有的命令都是在Geometry类的文件所在目录下完成的。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://blog.csdn.net/sunny2038/article/details/7237630" target="_blank" rel="external">http://blog.csdn.net/sunny2038/article/details/7237630</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NSIS打包发布Windows可执行文件]]></title>
      <url>http://arvin-he.github.io/2017/05/13/nsis-2017-05-13/</url>
      <content type="html"><![CDATA[<h3 id="NSIS简介"><a href="#NSIS简介" class="headerlink" title="NSIS简介"></a>NSIS简介</h3><p>NSIS(Nullsoft Scriptable Install System)是一种为Windows创建安装程序的工具,开源免费。<br>NSIS创建能够安装，卸载，设置系统设置，提取文件等的安装程序。可完全控制安装程序的每个部分, 使用默认选项，开销只有34 KB。</p>
<h3 id="NSIS特性"><a href="#NSIS特性" class="headerlink" title="NSIS特性"></a>NSIS特性</h3><p>NSIS将所有文件和安装脚本打包压缩成一个可执行文件，有三种集成压缩方法(ZLib，BZip2，LZMA), 其中LZMA压缩方法效果更好。<br>可以轻松添加自定义逻辑并处理不同的升级，版本检查和更多。<br>脚本语言提供可以在目标系统上使用的命令, 支持变量，函数和字符串操作,从文件夹创建和注册表编辑到文本/二进制文件修改，修改环境变量和系统重新引导等.<br>甚至可以直接调用Windows API。可以创建自定义向导页面以获取用户输入或集成配置选项。<br>NSIS包括一个经典和现代的向导界面，甚至可以创建自己的自定义界面（对话框，字体，背景，图标，文本，复选标记，图像等）<br>NSIS编译器具有强大的预处理器。允许将多个项目集成到单个安装程序中或自动生成安装程序构建。还可生成不同的版本，如精简版和完整版本。<br>完全多语言，在一个安装程序中支持多种语言。有60多个翻译可用，也可以创建自己的翻译。 Unicode支持允许更多的语言。<br>Installer 使用CRC32校验和进行自检,能够从注册表检测目标目录.<br>易于使用的插件系统（包括用于创建自定义对话框，互联网连接，HTTP下载，文件修补，Win32 API调用等的插件）.<br>Installer 可以大到2GB .自动安装的可选静音模式 一个预处理器，支持定义的符号，宏，条件编译，标准预定义.</p>
<h3 id="NSIS版本选择"><a href="#NSIS版本选择" class="headerlink" title="NSIS版本选择"></a>NSIS版本选择</h3><p>NSIS有unicode版本和GBK版本,选择NSIS时需要注意,如果你想以utf-8打开nsi文件,那么请选择NSIS的unicode版本的.否则选择GBK版本的.否则在编译nsi文件时会报错.</p>
<h3 id="模板结构"><a href="#模板结构" class="headerlink" title="模板结构"></a>模板结构</h3><p>预设参数（包括外部压缩器选择、编译选项、宏定义以及文件包含等）<br>普通安装设置<br>自定义函数<br>安装程序区域内容<br>安装程序回调函数及其相关函数定义<br>卸载程序区域内容<br>卸载程序回调函数及其相关函数定义 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line">;定义一些参数</div><div class="line">!define PRODUCT_NAME &quot;valueReader&quot;</div><div class="line">!define PRODUCT_VERSION &quot;1.0.0.0&quot;</div><div class="line">!define PRODUCT_PUBLISHER &quot;Arvin&quot;</div><div class="line">!define PRODUCT_FULL_NAME &quot;$&#123;PRODUCT_NAME&#125; $&#123;PRODUCT_VERSION&#125;&quot;</div><div class="line">!define OUT_DIR &quot;.&quot;</div><div class="line">!define OUT_FILE_NAME &quot;$&#123;PRODUCT_NAME&#125;.exe&quot;</div><div class="line"></div><div class="line">RequestExecutionLevel user</div><div class="line"></div><div class="line">!define UNINST_KEY &quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot;</div><div class="line"></div><div class="line">!define SHORTCUT_NAME &quot;$&#123;PRODUCT_NAME&#125;&quot;</div><div class="line"></div><div class="line">!define PRODUCT_UNINST_KEY  &quot;$&#123;UNINST_KEY&#125;\$&#123;PRODUCT_NAME&#125;&quot;</div><div class="line"></div><div class="line"></div><div class="line">; MUI 设置</div><div class="line">!define MUI_WELCOMEPAGE_TITLE &quot;  $&#123;PRODUCT_NAME&#125; $&#123;PRODUCT_VERSION&#125;安装向导&quot;</div><div class="line">!define MUI_WELCOMEFINISHPAGE_BITMAP &quot;$&#123;NSISDIR&#125;\Contrib\Graphics\Wizard\orange.bmp&quot;</div><div class="line">!define MUI_HEADERIMAGE</div><div class="line">!define MUI_HEADERIMAGE_BITMAP &quot;$&#123;NSISDIR&#125;\Contrib\Graphics\Header\orange.bmp&quot;</div><div class="line">!define MUI_HEADERIMAGE_UNBITMAP &quot;$&#123;NSISDIR&#125;\Contrib\Graphics\Header\orange-uninstall.bmp&quot;</div><div class="line"></div><div class="line">!include MUI2.nsh</div><div class="line">!include FileFunc.nsh</div><div class="line"></div><div class="line">Name &quot;$&#123;PRODUCT_NAME&#125;&quot;</div><div class="line">BrandingText &quot;http://www.microbit.com/&quot;</div><div class="line">; 输出文件</div><div class="line">OutFile &quot;$&#123;OUT_DIR&#125;\$&#123;OUT_FILE_NAME&#125;&quot;</div><div class="line">; 安装路径</div><div class="line">InstallDir &quot;C:\$&#123;PRODUCT_NAME&#125;&quot;</div><div class="line">;安装显示图标及图片</div><div class="line">;!define MUI_ICON &quot;favor.ico&quot;</div><div class="line">;卸载图标</div><div class="line">;!define MUI_UNICON &quot;uninst.ico&quot;</div><div class="line"></div><div class="line">;Icon &quot;favor.ico&quot;</div><div class="line">;UninstallIcon &quot;uninst.ico&quot;</div><div class="line"></div><div class="line">Page custom nsDialogsPage nsDialogsPageLeave</div><div class="line">; 安装页面</div><div class="line">!insertmacro MUI_PAGE_WELCOME</div><div class="line">!insertmacro MUI_PAGE_DIRECTORY</div><div class="line">!insertmacro MUI_PAGE_INSTFILES</div><div class="line">; 卸载页面</div><div class="line">!insertmacro MUI_UNPAGE_CONFIRM</div><div class="line">!insertmacro MUI_UNPAGE_INSTFILES</div><div class="line">; 语言支持</div><div class="line">!insertmacro MUI_LANGUAGE SimpChinese</div><div class="line"></div><div class="line">Section &quot;Installer Section&quot;    </div><div class="line">	Delete &quot;$DESKTOP\$&#123;PRODUCT_NAME&#125;*.lnk&quot;</div><div class="line">	Delete &quot;$SMSTARTUP\$&#123;PRODUCT_NAME&#125;*.lnk&quot;</div><div class="line">	RMDir /r &quot;$SMPROGRAMS\$&#123;PRODUCT_NAME&#125;&quot;</div><div class="line">	</div><div class="line">	SetOutPath $INSTDIR</div><div class="line">  ; 拷贝文件和文件夹, 过滤不需要拷贝文件</div><div class="line">	File /r /x &quot;*.nsi&quot; /x &quot;*.bat&quot; /x &quot;*.pyc&quot; /x &quot;make/*&quot; &quot;.\dist\*&quot;</div><div class="line">	File /r &quot;log&quot;</div><div class="line">	File /r &quot;make\platforms&quot;</div><div class="line">	File &quot;config.ini&quot;</div><div class="line">	File &quot;favor.ico&quot;</div><div class="line">	File &quot;uninst.ico&quot;</div><div class="line"></div><div class="line">	WriteUninstaller &quot;uninstall.exe&quot;</div><div class="line">  </div><div class="line">  ; 开机自动启动</div><div class="line">  ;CreateShortCut &quot;$SMSTARTUP\$&#123;PRODUCT_NAME&#125;.lnk&quot; &quot;$INSTDIR\$&#123;PRODUCT_NAME&#125;.exe&quot; </div><div class="line"></div><div class="line">	CreateDirectory &quot;$SMPROGRAMS\$&#123;PRODUCT_NAME&#125;&quot;</div><div class="line">  ; 创建卸载快捷方式到[开始]菜单</div><div class="line">	CreateShortCut &quot;$SMPROGRAMS\$&#123;PRODUCT_NAME&#125;\卸载 $&#123;PRODUCT_NAME&#125;.lnk&quot; &quot;$INSTDIR\Uninstall.exe&quot;</div><div class="line">	; 创建快捷方式到[开始]菜单</div><div class="line">	CreateShortCut &quot;$SMPROGRAMS\$&#123;PRODUCT_NAME&#125;\$&#123;PRODUCT_NAME&#125;.lnk&quot; &quot;$INSTDIR\$&#123;PRODUCT_NAME&#125;.exe&quot; &quot;&quot; &quot;$INSTDIR\favor.ico&quot;</div><div class="line">  ; 创建快捷方式到桌面</div><div class="line">	CreateShortCut &quot;$DESKTOP\$&#123;PRODUCT_NAME&#125;.lnk&quot; &quot;$INSTDIR\$&#123;PRODUCT_NAME&#125;.exe&quot; &quot;&quot; &quot;$INSTDIR\favor.ico&quot;</div><div class="line">	</div><div class="line">	WriteRegStr HKLM &quot;$&#123;PRODUCT_UNINST_KEY&#125;&quot; &quot;DisplayName&quot; &quot;$&#123;PRODUCT_NAME&#125;&quot;</div><div class="line">	WriteRegStr HKLM &quot;$&#123;PRODUCT_UNINST_KEY&#125;&quot; &quot;DisplayIcon&quot; &quot;$INSTDIR\$&#123;PRODUCT_NAME&#125;.exe&quot;</div><div class="line">	WriteRegStr HKLM &quot;$&#123;PRODUCT_UNINST_KEY&#125;&quot; &quot;UninstallString&quot; &quot;$INSTDIR\uninstall.exe&quot;</div><div class="line">	WriteRegStr HKLM &quot;$&#123;PRODUCT_UNINST_KEY&#125;&quot; &quot;Publisher&quot; &quot;Arvin&quot;</div><div class="line"></div><div class="line">SectionEnd</div><div class="line"></div><div class="line">Section &quot;un.Uninstaller Section&quot;</div><div class="line">	Delete &quot;$DESKTOP\$&#123;PRODUCT_NAME&#125;*.lnk&quot;</div><div class="line">	Delete &quot;$DESKTOP\$&#123;SHORTCUT_NAME&#125;*.lnk&quot;</div><div class="line">	Delete &quot;$SMSTARTUP\$&#123;PRODUCT_NAME&#125;*.lnk&quot;</div><div class="line">	RMDir /r &quot;$SMPROGRAMS\$&#123;PRODUCT_NAME&#125;&quot;</div><div class="line">	</div><div class="line">	RMDir /r &quot;$INSTDIR&quot;</div><div class="line"></div><div class="line">	DeleteRegKey HKLM &quot;$&#123;PRODUCT_UNINST_KEY&#125;&quot;</div><div class="line">SectionEnd</div><div class="line"></div><div class="line"></div><div class="line">VIProductVersion &quot;$&#123;PRODUCT_VERSION&#125;&quot;</div><div class="line">VIAddVersionKey /LANG=$&#123;LANG_SIMPCHINESE&#125; &quot;CompanyName&quot;      &quot;MicroBit Auto&quot;</div><div class="line">VIAddVersionKey /LANG=$&#123;LANG_SIMPCHINESE&#125; &quot;FileDescription&quot;  &quot;$&#123;PRODUCT_NAME&#125; 安装程序&quot;</div><div class="line">VIAddVersionKey /LANG=$&#123;LANG_SIMPCHINESE&#125; &quot;FileVersion&quot;      &quot;$&#123;PRODUCT_VERSION&#125;&quot;</div><div class="line">VIAddVersionKey /LANG=$&#123;LANG_SIMPCHINESE&#125; &quot;InternalName&quot;     &quot;$&#123;OUT_FILE_NAME&#125;&quot;</div><div class="line">VIAddVersionKey /LANG=$&#123;LANG_SIMPCHINESE&#125; &quot;LegalCopyright&quot;   &quot;Copyright (C) 2017 Arvin&quot;</div><div class="line">VIAddVersionKey /LANG=$&#123;LANG_SIMPCHINESE&#125; &quot;OriginalFilename&quot; &quot;$&#123;OUT_FILE_NAME&#125;&quot;</div><div class="line">VIAddVersionKey /LANG=$&#123;LANG_SIMPCHINESE&#125; &quot;ProductName&quot;      &quot;$&#123;PRODUCT_NAME&#125;&quot;</div><div class="line">VIAddVersionKey /LANG=$&#123;LANG_SIMPCHINESE&#125; &quot;ProductVersion&quot;   &quot;$&#123;PRODUCT_VERSION&#125;&quot;</div><div class="line"></div><div class="line">Var UninstallFileName</div><div class="line"></div><div class="line">Function .onInit</div><div class="line">	Call CreateMutex</div><div class="line">	ReadRegStr $UninstallFileName HKLM &quot;$&#123;PRODUCT_UNINST_KEY&#125;&quot; &quot;UninstallString&quot;</div><div class="line">FunctionEnd</div><div class="line"></div><div class="line">Function CreateMutex</div><div class="line">	Retry:</div><div class="line">	System::Call &quot;kernel32::CreateMutexW(i 0, i 0, w &apos;MicroBitauto.com/valReader/1.0&apos; ) i .R1 ?e&quot;</div><div class="line">	Pop $R0</div><div class="line">	System::Call &quot;kernel32::CloseHandle(i R1) i.s&quot;</div><div class="line">	$&#123;If&#125; $R0 != 0</div><div class="line">		MessageBox MB_RetryCancel|MB_ICONEXCLAMATION &quot;$&#123;PRODUCT_NAME&#125; 正在运行. 请关闭 $&#123;PRODUCT_NAME&#125; 后重试&quot; IdRetry Retry</div><div class="line">		Quit</div><div class="line">	$&#123;EndIf&#125;</div><div class="line">FunctionEnd</div><div class="line"></div><div class="line">Var RADIO_REPAIR</div><div class="line">Var RADIO_REMOVE</div><div class="line">Var Checkbox_State_REPAIR</div><div class="line">Var Checkbox_State_REMOVE</div><div class="line">Var Checkbox_State</div><div class="line"></div><div class="line">Function nsDialogsPage</div><div class="line">	$&#123;if&#125; $UninstallFileName == &quot;&quot;</div><div class="line">		Abort</div><div class="line">	$&#123;EndIf&#125;</div><div class="line">	</div><div class="line">	!insertmacro MUI_HEADER_TEXT &quot;$&#123;PRODUCT_NAME&#125; 维护模式&quot; &quot;重新安装或卸载“$&#123;PRODUCT_NAME&#125;”&quot;</div><div class="line">	nsDialogs::Create /NOUNLOAD 1018</div><div class="line">	$&#123;NSD_CreateLabel&#125; 0u 0u 300u 30u &quot;请选择您要执行的操作，然后单击 [下一步(N)] 继续&quot;</div><div class="line"></div><div class="line">	$&#123;NSD_CreateRadioButton&#125; 30u 30u 120u 30u &quot;重新安装&quot;</div><div class="line">	Pop $RADIO_REPAIR</div><div class="line">		$&#123;If&#125; $Checkbox_State_REPAIR == $&#123;BST_CHECKED&#125;</div><div class="line">			$&#123;NSD_Check&#125; $RADIO_REPAIR</div><div class="line">			$&#123;NSD_GetState&#125; $RADIO_REPAIR $Checkbox_State</div><div class="line">		$&#123;EndIf&#125;</div><div class="line"></div><div class="line">	$&#123;NSD_CreateRadioButton&#125; 30u 60u 120u 30u &quot;卸载&quot;</div><div class="line">	Pop $RADIO_REMOVE</div><div class="line">		$&#123;If&#125; $Checkbox_State_REMOVE == $&#123;BST_CHECKED&#125;</div><div class="line">			$&#123;NSD_Check&#125; $RADIO_REMOVE</div><div class="line">			$&#123;NSD_GetState&#125; $RADIO_REMOVE $Checkbox_State</div><div class="line">		$&#123;EndIf&#125;</div><div class="line">		$&#123;If&#125; $Checkbox_State &lt;&gt; $&#123;BST_CHECKED&#125;</div><div class="line">			$&#123;NSD_Check&#125; $RADIO_REPAIR</div><div class="line">		$&#123;EndIf&#125;</div><div class="line"></div><div class="line">	nsDialogs::Show</div><div class="line">FunctionEnd</div><div class="line"></div><div class="line">Function nsDialogsPageLeave</div><div class="line">	$&#123;NSD_GetState&#125; $RADIO_REPAIR $Checkbox_State_REPAIR</div><div class="line">	$&#123;NSD_GetState&#125; $RADIO_REMOVE $Checkbox_State_REMOVE</div><div class="line">	$&#123;If&#125; $Checkbox_State_REMOVE == $&#123;BST_CHECKED&#125;</div><div class="line">		Exec $UninstallFileName</div><div class="line">		Quit</div><div class="line">	$&#123;EndIf&#125;</div><div class="line">FunctionEnd</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://nsis.sourceforge.net/Docs/Chapter1.html#intro-about" target="_blank" rel="external">http://nsis.sourceforge.net/Docs/Chapter1.html#intro-about</a></li>
<li><a href="http://www.cnblogs.com/myall/p/3637759.html" target="_blank" rel="external">http://www.cnblogs.com/myall/p/3637759.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NSIS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之pyenv与virtualenv使用]]></title>
      <url>http://arvin-he.github.io/2017/05/09/python-pyenv-2017-05-09/</url>
      <content type="html"><![CDATA[<h3 id="pyenv-与-virtualenv"><a href="#pyenv-与-virtualenv" class="headerlink" title="pyenv 与 virtualenv"></a>pyenv 与 virtualenv</h3><p>多个python版本共存有2种方式:<br>python版本切换的工具—pyenv, pyenv目前还不支持windows,只支持Linux.<br>另外一个工具virtualenv则提供了一种功能,就是将一个目录建立为一个虚拟的python环境,<br>用户可以建立多个虚拟环境,每个环境里面的python版本可以是不同的,也可以是相同的,而且环境之间相互独立。</p>
<h3 id="pyenv-与-virtualenv区别"><a href="#pyenv-与-virtualenv区别" class="headerlink" title="pyenv 与 virtualenv区别"></a>pyenv 与 virtualenv区别</h3><p>pyenv 是针对 python 版本的管理，通过修改环境变量的方式实现；<br>virtualenv 是针对python的包的多版本管理，通过将python包安装到一个模块来作为python的包虚拟环境，通过切换目录来实现不同包环境间的切换。</p>
<h3 id="pyenv安装与使用"><a href="#pyenv安装与使用" class="headerlink" title="pyenv安装与使用"></a>pyenv安装与使用</h3><p>自动安装: pyenv 提供了自动安装的工具，执行命令安装即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</div></pre></td></tr></table></figure></p>
<p>手动安装:将 pyenv 检出到你想安装的目录。建议路径为：$HOME/.pyenv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd</div><div class="line">$ git clone git://github.com/yyuu/pyenv.git .pyenv</div></pre></td></tr></table></figure></p>
<p>添加环境变量。PYENV_ROOT 指向 pyenv 检出的根目录，并向 $PATH 添加 $PYENV_ROOT/bin 以提供访问 pyenv 这条命令的路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line">$ echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line"># 向 shell 添加 pyenv init 以启用 shims 和命令补完功能</div><div class="line">$ echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p>这里的 shell 配置文件（~/.bash_profile）依不同 Linux作修改——Zsh：~/.zshenv；Ubuntu：~/.bashrc<br>重启 shell（因为修改了 $PATH）,<code>$ exec $SHELL</code></p>
<h3 id="pyenv常用命令"><a href="#pyenv常用命令" class="headerlink" title="pyenv常用命令"></a>pyenv常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ pyenv install --list # 该命令会列出可以用 pyenv 安装的 Python 版本。列表很长，仅列举其中几个:</div><div class="line">$ pyenv versions # 查看系统当前安装的python列表</div><div class="line">$ pyenv install -v 3.5.1 # 安装python</div><div class="line">$ pyenv uninstall 2.7.3 # 卸载python</div><div class="line">$ pyenv update          # 更新 pyenv 及其插件</div><div class="line">$ pyenv rehash # 创建垫片路径</div><div class="line">为所有已安装的可执行文件 （如：~/.pyenv/versions//bin/） 创建 shims，</div><div class="line">因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）</div></pre></td></tr></table></figure>
<h3 id="python切换"><a href="#python切换" class="headerlink" title="python切换"></a>python切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pyenv global 3.4.0 – 设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。</div><div class="line">$ pyenv local 2.7.3 – 设置面向程序的本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。</div><div class="line">pyenv 会从当前目录开始向上逐级查找 .python-version 文件，直到根目录为止。若找不到，就用 global 版本。</div><div class="line">$ pyenv shell pypy-2.2.1 – 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。这个版本的优先级比 local 和 global 都要高。–unset 参数可以用于取消当前 shell 设定的版本。</div><div class="line">$ pyenv shell --unset</div></pre></td></tr></table></figure>
<p>python优先级<br>shell &gt; local &gt; global</p>
<h3 id="virtualenv安装与使用"><a href="#virtualenv安装与使用" class="headerlink" title="virtualenv安装与使用"></a>virtualenv安装与使用</h3><p><strong>注意:</strong>创建的虚拟环境是和你当前安装的python版本是一致的,它不能用作不同python版本的切换, 如果你要在windows下安装不同的python版本,就只能再安装一个python版本.<br>virtualenv主要用来管理包不同版本来设定独立的python环境,与不同版本包做区分.<br>在命令行窗口输入:<code>pip install virtualenv</code>,回车</p>
<h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>如果你已经安装好virtualenv, 则进入到工程目录中,接着使用如下的命令创建一个虚拟环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python -m venv flask</div></pre></td></tr></table></figure></p>
<p>如果你的python版本低于3.4,则需要安装 virtualenv.py,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># windows</div><div class="line">pip install virtualenv</div><div class="line">virtualenv flask</div><div class="line"># linux</div><div class="line">sudo apt-get install python-virtualenv</div><div class="line">virtualenv flask</div></pre></td></tr></table></figure></p>
<p>这样就创建了一个完整的 Python 环境.<br>虚拟环境是能够激活以及停用的，如果需要的话，一个激活的环境可以把它的 bin 文件夹加入到系统路径。<br>我个人是不喜欢这种特色，所以我从来不激活任何环境,相反我会直接输入我想要调用的解释器的路径。如下:<br>调用虚拟环境的pip安装python的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># windows</div><div class="line">flask\Scripts\pip install flask</div><div class="line"># linux</div><div class="line">flask/bin/pip install flask</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.pylixm.cc/posts/2016-06-19-Virtualenv-install.html" target="_blank" rel="external">http://www.pylixm.cc/posts/2016-06-19-Virtualenv-install.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之应用程序打包发布]]></title>
      <url>http://arvin-he.github.io/2017/05/08/python-packprograms-2017-05-08/</url>
      <content type="html"><![CDATA[<h3 id="Windows上Python程序打包发布方式"><a href="#Windows上Python程序打包发布方式" class="headerlink" title="Windows上Python程序打包发布方式"></a>Windows上Python程序打包发布方式</h3><ul>
<li>.py文件：直接提供源码，使用者自行安装Python并且安装依赖的各种库。(Python官方的各种安装包就是这样做的)</li>
<li>.pyc文件：不愿意公开源码,可使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。</li>
<li>可执行文件：包含了Python和依赖库,用户只要点击快捷方式即可. 比较麻烦的是需要针对不同平台需要打包不同的可执行文件.</li>
</ul>
<h3 id="各种打包工具的对比如下："><a href="#各种打包工具的对比如下：" class="headerlink" title="各种打包工具的对比如下："></a>各种打包工具的对比如下：</h3><table>
<thead>
<tr>
<th style="text-align:left">Solution</th>
<th>Windows</th>
<th>Linux</th>
<th>OS X</th>
<th>Python 3</th>
<th>License</th>
<th>One-file mode</th>
<th>Zipfile import</th>
<th>Eggs</th>
<th>pkg_resources support</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">bbFreeze</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>MIT</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td style="text-align:left">py2exe</td>
<td>yes</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>MIT</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td style="text-align:left">pyInstaller</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>GPL</td>
<td>yes</td>
<td>no</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td style="text-align:left">cx_Freeze</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>PSF</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td style="text-align:left">py2app</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>MIT</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
</tbody>
</table>
<p>PS.其中pyInstaller和cx_Freeze都是不错的，stackoverflow上也有人建议用cx_Freeze，说是更便捷些。pkg_resources新版的pyInstaller貌似是支持的。</p>
<h3 id="使用py2exe打包发布程序"><a href="#使用py2exe打包发布程序" class="headerlink" title="使用py2exe打包发布程序"></a>使用py2exe打包发布程序</h3><h4 id="py2exe打包发布"><a href="#py2exe打包发布" class="headerlink" title="py2exe打包发布"></a>py2exe打包发布</h4><p><strong>注意:</strong> 目前py2exe只支持到3.4版本,3.6版本不支持,主要是语法上不支持.</p>
<ol>
<li>安装py2exe: <code>pip install py2exe</code></li>
<li><p>准备好你要打包的程序,如hello.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hello.py</span></div><div class="line">print(<span class="string">"hello"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>创建安装脚本程序（setup.py）<br>使用py2exe工具里需要一个setup.py的脚本，在你需要打包的应用程序目录下创建一个setup.py脚本文件,具体内容如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#python 3.4</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</div><div class="line"><span class="keyword">import</span> py2exe</div><div class="line"></div><div class="line">setup(console=[<span class="string">'hello.py'</span>])</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在这个脚本里调用setup函数，创建控制台应用程序，它的入口主文件是hello.py文件。</p>
<ol>
<li><p>运行脚本（setup.py）文件<br>在控制台窗口中进入到需要打包的应用程序目录下,在控制台窗口里输入命令：<code>python setup.py py2exe</code>,回车,然后就开始自动打包.<br>运行这个命令成功之后，会在当前的目录下面创建一个发布的目录dist，所有需要发布的文件就会拷贝到此目录下面。</p>
</li>
<li><p>执行生成的exe程序<br>经过上面的步骤，就可以进入目录dist下面进行运行exe程序了,双击就可运行.运行成功之后，与前面使用python hello.py是一样的结果，不过这个目录内容就可以发布到不同的电脑上进行运行，且不需要安装python。</p>
</li>
</ol>
<h4 id="py2exe使用出现的问题"><a href="#py2exe使用出现的问题" class="headerlink" title="py2exe使用出现的问题"></a>py2exe使用出现的问题</h4><ol>
<li>py2exe 在打包简单的文件时能够正常工作,但打包稍微复杂的应用程序时会出现递归溢出的问题,打包失败,不知原因,且网上没有好的解决方法.</li>
<li>如果是PyQt的GUI应用程序,py2exe则不会将平台相关的东西(即PyQt下的platform文件夹)打包进来.</li>
</ol>
<h3 id="使用Pyinstaller打包发布程序"><a href="#使用Pyinstaller打包发布程序" class="headerlink" title="使用Pyinstaller打包发布程序"></a>使用Pyinstaller打包发布程序</h3><h4 id="Pyinstaller安装"><a href="#Pyinstaller安装" class="headerlink" title="Pyinstaller安装"></a>Pyinstaller安装</h4><p>控制台窗口输入:<code>pip install pyinstaller</code>,回车,然后开始自动安装pyinstaller</p>
<h4 id="Pyinstaller使用"><a href="#Pyinstaller使用" class="headerlink" title="Pyinstaller使用"></a>Pyinstaller使用</h4><p>目录切换到你要打包程序的目录下, 在控制台窗口输入:<code>pyinstaller yourprogram.py</code>,回车,<br>然后在你的程序目录下创建一个dist文件夹,里面包含你要打包的所有相关的东西.<br>注意:配置文件不会被打包加进去</p>
<h4 id="一些选项"><a href="#一些选项" class="headerlink" title="一些选项"></a>一些选项</h4><p><code>python pyinstaller.py [opts] yourprogram.py</code><br>主要选项<br>-F, -onefile 打包成一个exe文件<br>-D, -onedir 创建一个目录，包含exe文件，但会依赖很多文件（默认选项）<br>-c, -console, -nowindowed 使用控制台，无界面（默认）<br>-w, -windowed, -noconsole 使用窗口，无控制台</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>打包了很多东西,比较大</p>
<h3 id="使用cx-Freeze打包发布程序"><a href="#使用cx-Freeze打包发布程序" class="headerlink" title="使用cx_Freeze打包发布程序"></a>使用cx_Freeze打包发布程序</h3><h4 id="安装cx-Freeze"><a href="#安装cx-Freeze" class="headerlink" title="安装cx_Freeze"></a>安装cx_Freeze</h4><p>在控制台窗口输入:<code>pip install cx_Freeze</code>,回车,然后就自动安装cx_Freeze了.</p>
<h4 id="cx-Freeze使用"><a href="#cx-Freeze使用" class="headerlink" title="cx_Freeze使用"></a>cx_Freeze使用</h4><p>与py2exe一样,需要在要打包的程序目录下创建一个setup.py, 当然也可以是其他名字<br>然后在命令行窗口输入:<code>python setup.py build</code>,回车,然后就会在程序目录下<br>创建一个build文件夹,里面打包了所有需要用到的依赖<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setup.py</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> cx_Freeze <span class="keyword">import</span> setup, Executable</div><div class="line"><span class="comment"># 依赖关系被自动检测，但可能需要微调</span></div><div class="line">build_exe_options = &#123;<span class="string">"packages"</span>: [<span class="string">"os"</span>], <span class="string">"excludes"</span>: [<span class="string">"tkinter"</span>]&#125;</div><div class="line"><span class="comment"># GUI应用程序在Windows上需要不同的基础（默认值为控制台应用程序)</span></div><div class="line">base = <span class="keyword">None</span></div><div class="line"><span class="keyword">if</span> sys.platform == <span class="string">"win32"</span>:</div><div class="line">    base = <span class="string">"Win32GUI"</span></div><div class="line"></div><div class="line">setup(  name = <span class="string">"guifoo"</span>,</div><div class="line">        version = <span class="string">"0.1"</span>,</div><div class="line">        description = <span class="string">"My GUI application!"</span>,</div><div class="line">        options = &#123;<span class="string">"build_exe"</span>: build_exe_options&#125;,</div><div class="line">        executables = [Executable(<span class="string">"guifoo.py"</span>, base=base)])</div></pre></td></tr></table></figure></p>
<h4 id="打包成-msi格式"><a href="#打包成-msi格式" class="headerlink" title="打包成*.msi格式"></a>打包成*.msi格式</h4><p>在命令行窗口输入:<code>python setup.py bdist_msi</code>,回车,就会在build目录下生成一个*.msi格式的软件安装包</p>
<h3 id="将Python程序打包成-zip文件并发布"><a href="#将Python程序打包成-zip文件并发布" class="headerlink" title="将Python程序打包成.zip文件并发布"></a>将Python程序打包成.zip文件并发布</h3><p>在部署Python程序的时候。一般是把所有的源代码复制到目标机器上。我发现一个更好的办法是把源代码打包成.zip文件，然后直接运行这个.zip文件。比如：<code>python besteam.zip</code><br>它的秘密是在.zip文件中包含一个__main__.py，当python运行这个zip时，会自动找到它并运行。__main__.py的内容一般是调用主脚本。一行即可，比如:<code>import besteam</code>,<br>如果不想让源代码发布出去，这更是一个好办法。不需要手动地找出编译后的python字节码文件。python提供了一个zipfile. PyZipFile的类自动地将源代码编译成字节码并打包在一起。下面是一个简单的示例脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*- </span></div><div class="line"><span class="keyword">import</span> zipfile, os </div><div class="line">besteamzip = zipfile.PyZipFile(<span class="string">"besteam.zip"</span> ,<span class="string">"w"</span>, zipfile.ZIP_DEFLATED) </div><div class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> (<span class="string">"__main__.py"</span>, <span class="string">"besteam.py"</span>): </div><div class="line">    besteamzip.writepy(filename)</div><div class="line"><span class="keyword">for</span> dirname <span class="keyword">in</span> os.listdir(<span class="string">"."</span>):</div><div class="line">    initfile=os.path.join(dirname, <span class="string">"__init__.py"</span>)</div><div class="line">    <span class="keyword">if</span> os.path.isdir(dirname) <span class="keyword">and</span> os.path.exists(initfile):</div><div class="line">        besteamzip.writepy(dirname)</div><div class="line">besteamzip.close()</div></pre></td></tr></table></figure></p>
<p>需要注意的是,Python各个版本的字节码是不兼容的。所以，如果运行环境中有多个版本的Python就不能这么搞了，要么制作多个包，要么发布源代码。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cnblogs.com/turtle920/p/5370132.html" target="_blank" rel="external">Python依赖打包发布详细</a></li>
<li><a href="http://docs.python-guide.org/en/latest/shipping/freezing/" target="_blank" rel="external">Freezing Your Code</a></li>
<li><a href="http://www.tuicool.com/articles/Ivuaaq" target="_blank" rel="external">http://www.tuicool.com/articles/Ivuaaq</a></li>
<li><a href="http://cx-freeze.readthedocs.io/en/latest/distutils.html" target="_blank" rel="external">http://cx-freeze.readthedocs.io/en/latest/distutils.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之logging模块]]></title>
      <url>http://arvin-he.github.io/2017/05/07/python-logging-2017-05-07/</url>
      <content type="html"><![CDATA[<h3 id="日志设定"><a href="#日志设定" class="headerlink" title="日志设定"></a>日志设定</h3><p>在软件开发过程中,需要将日志信息输出到控制台,写入到日志文件中.但是如何做呢?<br>在你的应用程序创建一个模块,如logger.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># logger.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> logging  </div><div class="line"><span class="comment"># 创建一个logger  </span></div><div class="line">logger = logging.getLogger(__file__)  </div><div class="line">logger.setLevel(logging.DEBUG)  </div><div class="line"><span class="comment"># 创建一个handler，用于写入日志文件  </span></div><div class="line">fh = logging.FileHandler(<span class="string">'mylog.log'</span>)  </div><div class="line">fh.setLevel(logging.DEBUG)  </div><div class="line"><span class="comment"># 再创建一个handler，用于输出到控制台  </span></div><div class="line">ch = logging.StreamHandler()  </div><div class="line">ch.setLevel(logging.DEBUG)  </div><div class="line"><span class="comment"># 定义handler的输出格式  </span></div><div class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)  </div><div class="line">fh.setFormatter(formatter)  </div><div class="line">ch.setFormatter(formatter)  </div><div class="line"><span class="comment"># 给logger添加handler  </span></div><div class="line">logger.addHandler(fh)  </div><div class="line">logger.addHandler(ch)  </div><div class="line"><span class="comment"># 记录一条日志  </span></div><div class="line">logger.info(<span class="string">'this is first log.'</span>)</div></pre></td></tr></table></figure>
<h3 id="logging模块的API"><a href="#logging模块的API" class="headerlink" title="logging模块的API"></a>logging模块的API</h3><p><code>logging.getLogger([name])</code><br>返回一个logger实例，如果没有指定name，返回root logger。只要name相同，返回的logger实例都是同一个而且只有一个，即name和logger实例是一一对应的。这意味着，无需把logger实例在各个模块中传递。只要知道name，就能得到同一个logger实例.</p>
<p><code>Logger.setLevel(lvl)</code><br>设置logger的level， level有以下几个级别：NOTSET &lt; DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL</p>
<p><code>Logger.addHandler(hdlr)</code><br>logger可以雇佣handler来帮它处理日志， handler主要有以下几种：StreamHandler: 输出到控制台FileHandler:   输出到文件handler还可以设置自己的level以及输出格式。</p>
<p><code>logging.basicConfig([**kwargs])</code><br>这个函数用来配置root logger， 为root logger创建一个StreamHandler，设置默认的格式。<br>这些函数： logging.debug()、logging.info()、logging.warning()、   logging.error()、logging.critical() 如果调用的时候发现root logger没有任何   handler， 会自动调用basicConfig添加一个handler* 如果root logger已有handler， 这个函数不做任何事情<br>使用basicConfig来配置root logger的输出格式和level：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging  </div><div class="line">logging.basicConfig(format=<span class="string">'%(levelname)s:%(message)s'</span>, level=logging.DEBUG)  </div><div class="line">logging.debug(<span class="string">'This message should appear on the console'</span>)</div></pre></td></tr></table></figure>
<h3 id="关于root-logger以及logger的父子关系"><a href="#关于root-logger以及logger的父子关系" class="headerlink" title="关于root logger以及logger的父子关系"></a>关于root logger以及logger的父子关系</h3><p>关于root logger， 实际上logger实例之间还有父子关系， root logger就是处于最顶层的logger， 它是所有logger的祖先。如下图:</p>
<p><img src="/2017/05/07/python-logging-2017-05-07/1.png" alt="logger实例之间关系"></p>
<p>root logger是默认的logger<br>如果不创建logger实例， 直接调用logging.debug()、logging.info()logging.warning()、logging.error()、logging.critical()这些函数，那么使用的logger就是 root logger， 它可以自动创建，也是单实例的。</p>
<p>如何得到root logger<br>通过logging.getLogger()或者logging.getLogger(“”)得到root logger实例。</p>
<p>默认的levelroot<br>logger默认的level是logging.WARNING</p>
<p>如何表示父子关系<br>logger的name的命名方式可以表示logger之间的父子关系. 比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">parent_logger = logging.getLogger(<span class="string">'foo'</span>)</div><div class="line">child_logger = logging.getLogger(<span class="string">'foo.bar'</span>)</div></pre></td></tr></table></figure></p>
<p>什么是effective level<br>logger有一个概念，叫effective level。 如果一个logger没有显示地设置level，那么它就用父亲的level。如果父亲也没有显示地设置level， 就用父亲的父亲的level，以此推….最后到达root logger，一定设置过level。默认为logging.WARNING<br>child loggers得到消息后，既把消息分发给它的handler处理，也会传递给所有祖先logger处理，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> logging  </div><div class="line">   </div><div class="line"><span class="comment"># 设置root logger  </span></div><div class="line">r = logging.getLogger()  </div><div class="line">ch = logging.StreamHandler()  </div><div class="line">ch.setLevel(logging.DEBUG)  </div><div class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(levelname)s - %(message)s'</span>)  </div><div class="line">ch.setFormatter(formatter)  </div><div class="line">r.addHandler(ch)  </div><div class="line">   </div><div class="line"><span class="comment"># 创建一个logger作为父亲  </span></div><div class="line">p = logging.getLogger(<span class="string">'foo'</span>)  </div><div class="line">p.setLevel(logging.DEBUG)  </div><div class="line">ch = logging.StreamHandler()  </div><div class="line">ch.setLevel(logging.DEBUG)  </div><div class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(message)s'</span>)  </div><div class="line">ch.setFormatter(formatter)  </div><div class="line">p.addHandler(ch)  </div><div class="line">   </div><div class="line"><span class="comment"># 创建一个孩子logger  </span></div><div class="line">c = logging.getLogger(<span class="string">'foo.bar'</span>)  </div><div class="line">c.debug(<span class="string">'foo'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-05-07 16:04:29,893 - foo  </div><div class="line">2011-05-07 16:04:29,893 - DEBUG - foo</div></pre></td></tr></table></figure>
<p>可见， 子logger没有任何handler，所以对消息不做处理。但是它把消息转发给了它的父亲以及root logger。最后输出两条日志。</p>
<h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>当你的应用程序用到了日志模块,并同时输出日志到控制台和文件中,打包发布并安装你的应用程序后,运行你的程序后有日志输出,当关闭应用程序会弹出一个弹框,让你去日志文件检查错误信息,并且会自动生成一个和应用程序同名的日志文件.这个弹框及和应用程序同名日志文件是怎么产生的呢?<br>原因是:控制台窗口的句柄导致的,不要将日志文件输出到控制台窗口即可.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://kenby.iteye.com/blog/1162698" target="_blank" rel="external">使用python的logging模块</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之指针初识]]></title>
      <url>http://arvin-he.github.io/2017/05/05/cpp-pointer1-2017-05-05/</url>
      <content type="html"><![CDATA[<h3 id="指针基本知识和定义"><a href="#指针基本知识和定义" class="headerlink" title="指针基本知识和定义"></a>指针基本知识和定义</h3><p>硬盘保存数据是基于物理的磁性，访问靠机械运动，所以速度比较慢.内存保存数据是基于电信号，速度比较快，但是所有数据不能长久保存，掉电即失.<br>指针的介绍都是以内存和地址开始的,内存的基本单位是字节（byte），每一个字节都有一个独一无二的地址.<br>为了保存内存中的一个地址值，C 语言需要一种特殊的变量类型，这种变量类型就是指针变量类型。整型变量保存一个整数，字符变量保存一个字符，指针变量保存一个地址.</p>
<h3 id="指针声明"><a href="#指针声明" class="headerlink" title="指针声明"></a>指针声明</h3><p>指针的定义通常有两种风格,建议采用风格1,char是一个基本类型,*p说明是一个指针, char*连在一起就显得比较怪异.当连续定义两个指针,容易出错,如下面的第三行代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *p;  <span class="comment">// 风格 1</span></div><div class="line"><span class="keyword">char</span>* p;  <span class="comment">// 风格 2</span></div><div class="line"><span class="keyword">char</span>* p1, p2; <span class="comment">// 错误</span></div><div class="line"><span class="keyword">char</span> *p1, *p2; <span class="comment">// 正确</span></div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*p = ＆a; <span class="comment">/* p = ＆a is right */</span></div><div class="line">i**p; <span class="comment">/*- what is this?*/</span></div><div class="line">*p**p; <span class="comment">/*- and then? */</span></div><div class="line">*p<span class="comment">/*p; /*-My God!*/</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之类型转换(Type Casting)]]></title>
      <url>http://arvin-he.github.io/2017/05/05/cpp-typecasting-2017-05-05/</url>
      <content type="html"><![CDATA[<h3 id="类型转换分类"><a href="#类型转换分类" class="headerlink" title="类型转换分类"></a>类型转换分类</h3><p>类型转换是将给定类型的表达式转换为另一种类型。C++中的转型可分为两种：隐式类型转换和显式类型转换。下面将详细介绍这两种转型操作，以及各自的适用场景，潜在问题，最终将总结使用类型转换操作应牢记的原则。</p>
<p>C风格的强制类型转换(Type Cast)很简单，不管什么类型的转换统统是：<code>TYPE b = (TYPE)a</code><br>C++风格的类型转换提供了4种类型转换操作符来应对不同场合的应用。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const_cast</span>，字面上理解就是去<span class="keyword">const</span>属性。</div><div class="line"><span class="keyword">static_cast</span>，命名上理解是静态类型转换。如<span class="keyword">int</span>转换成<span class="keyword">char</span>。</div><div class="line"><span class="keyword">dynamic_cast</span>，命名上理解是动态类型转换。如子类和父类之间的多态类型转换。</div><div class="line"><span class="keyword">reinterpret_cast</span>，仅仅重新解释类型，但没有进行二进制的转换。</div></pre></td></tr></table></figure></p>
<p>4种类型转换的格式，如：TYPE B = static_cast(TYPE)(a)。</p>
<h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>隐式类型转换是C中的遗留物，在C++中并不推荐使用（C++有专门的转型操作符，见下文的显式转型）。将某种类型的对象拷贝到另一种不同类型的对象中时就会发生隐式转型。比如异型赋值，返回值（函数声明的返回值与代码块实际返回值不同的情况下），按值传递异型参数等情况均会发生隐式类型转换。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">short</span> a = <span class="number">128</span>;</div><div class="line"><span class="keyword">int</span> b;</div><div class="line">b = a;</div></pre></td></tr></table></figure></p>
<p>如上所示，short 类型的对象被赋值给 int 型的对象，这是C++语言内建支持的标准转换。<br>情形一：标准转换支持<strong>数值类型</strong>，<strong>bool</strong>以及<strong>某些指针</strong>之间相互转换。注意：某些转换可能会导致精度丢失，比如从 long 转换到 int。<br>情形二：可被单参调用（只有一个参数或多个参数但至少从第二个参数起均带有缺省值）的构造函数或隐式类型转换操作符也会引起隐式类型转换。比如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;; </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">public</span>: B (A a) &#123;&#125;</div><div class="line">    <span class="keyword">public</span>: B (<span class="keyword">int</span> c, <span class="keyword">int</span> d = <span class="number">0</span>);</div><div class="line">    <span class="keyword">public</span>: <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="keyword">const</span></span>; </div><div class="line">&#125;;</div><div class="line"></div><div class="line">A a;</div><div class="line">B b1 = a;</div><div class="line">B b2 = <span class="number">10</span>;</div><div class="line">B b3;</div><div class="line"><span class="keyword">double</span> d;</div><div class="line">d = <span class="number">10</span> + b3;</div></pre></td></tr></table></figure></p>
<p>上面的代码里就存在只带有一个参数的构造函数，多个参数但至少从第二个参数起均带有缺省值以及用户自定义类型转换操作符这三种情况。<br>隐式类型转换是件麻烦事，它们很可能导致错误或非预期的函数被调用；此外 C++ 也不能在一个转换过程中连续进行多于一次的用户自定义转换操作（即情形二中的转换），如下所示：接上面的代码，A （类型的对象，后略）可被隐式转换为 B，B 可被隐式转换为 C，但 A 却非常不合逻辑地不可被隐式转换为 C。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">public</span>: C(B b) &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A a;</div><div class="line">C c;</div><div class="line">c = a; <span class="comment">// 错误！</span></div></pre></td></tr></table></figure></p>
<p>因此应该尽量避免隐式类型转换，为此 C++ 提供了关键字 explicit 来规避可被单参调用的构造函数引起的隐式类型转换。但<strong>标准转换</strong>以及<strong>隐式类型转换操作符</strong>引起的转换只能由程序员来小心处理了。当然 C++ 语言还是提供了必要的工具，这些工具就是下面要讲的显式类型转换关键字：static_cast, const_cast, dynamic_cast 以及 reinterpret_cast。</p>
<h3 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h3><p>C++ 是一门强类型转换，因此不同自定义类型之间的转换必须进行显式转换，基础数据类型也可以进行显式转换。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">short</span> a = <span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> b;</div><div class="line">b = (<span class="keyword">int</span>) a;    <span class="comment">// c-like cast notation</span></div><div class="line">b = <span class="keyword">int</span> (a);    <span class="comment">// functional notation</span></div></pre></td></tr></table></figure></p>
<p>以上是基础数据类型之间进行传统的强制类型转换。这种强制类型转换可以在两种指向不同类型对象的指针之间进行，这很可能是相当危险的事情。所以 C++ 提供四种转换操作符来细分显式类型转换：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static_cast</span> &lt;new_type&gt; (expression)</div><div class="line"><span class="keyword">const_cast</span> &lt;new_type&gt; (expression)</div><div class="line"><span class="keyword">dynamic_cast</span> &lt;new_type&gt; (expression)</div><div class="line"><span class="keyword">reinterpret_cast</span> &lt;new_type&gt; (expression)</div></pre></td></tr></table></figure></p>
<h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><p>static_cast 很像 C 语言中的旧式类型转换。它能进行基础类型之间的转换，也能将带有可被单参调用的构造函数或用户自定义类型转换操作符的类型转换，还能在存有继承关系的类之间进行转换（即可将基类转换为子类，也可将子类转换为基类），还能将 non-const对象转换为 const对象（注意：反之则不行，那是const_cast的职责）</p>
<ol>
<li>基类和子类之间转换：其中子类指针转换成父类指针是安全的；但父类指针转换成子类指针是不安全的。(基类和子类之间的动态类型转换建议用dynamic_cast)</li>
<li>基本数据类型转换。enum, struct, int, char, float等。static_cast不能进行无关类型（如非基类和子类）指针之间的转换。</li>
<li>把空指针转换成目标类型的空指针。</li>
<li>把任何类型的表达式转换成void类型。</li>
<li>static_cast不能去掉类型的const、volitale属性(用const_cast)。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> d = <span class="number">3.14159265</span>;</div><div class="line"><span class="keyword">int</span> i = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(d);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    B (A a) &#123;&#125;;</div><div class="line">&#125;; </div><div class="line">A a;</div><div class="line">B b = <span class="keyword">static_cast</span>&lt;B&gt;(a);</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBase</span> &#123;</span>&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDerived</span>:</span> <span class="keyword">public</span> CBase &#123;&#125;;</div><div class="line">CBase * a = <span class="keyword">new</span> CBase;</div><div class="line">CDerived * b = <span class="keyword">static_cast</span>&lt;CDerived *&gt;(a);</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意：</strong>static_cast 转换时并不进行运行时安全检查，所以是非安全的，很容易出问题。因此 C++ 引入 dynamic_cast 来处理安全转型。</p>
<h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><p>dynamic_cast 主要用来在<strong>继承体系</strong>中的<strong>安全向下</strong>转型。它能安全地将指向基类的指针转型为指向子类的指针或引用，并获知转型动作成功是否。如果转型失败会返回null（转型对象为指针时）或抛出异常（转型对象为引用时）。<br>dynamic_cast 会动用运行时信息（RTTI）来进行类型安全检查，因此 dynamic_cast 存在一定的效率损失。（曾见过属于优化代码80/20法则中的20那一部分的一段游戏代码，起初使用的是 dynamic_cast，后来被换成 static_cast 以提升效率，当然这仅是权宜之策，并非好的设计。）<br>有条件转换，动态类型转换，运行时类型安全检查(转换失败返回NULL)：</p>
<ol>
<li>安全的基类和子类之间转换。</li>
<li>必须要有虚函数。</li>
<li>相同基类不同子类之间的交叉转换。但结果是NULL。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">int</span> m_iNum;</div><div class="line">  <span class="function">virtualvoid <span class="title">foo</span><span class="params">()</span></span>&#123;&#125;; <span class="comment">//基类必须有虚函数。保持多台特性才能使用dynamic_cast</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClass</span>:</span> <span class="keyword">public</span> BaseClass </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">char</span>*m_szName[<span class="number">100</span>];</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">BaseClass* pb =<span class="keyword">new</span> DerivedClass();</div><div class="line">DerivedClass *pd1 = <span class="keyword">static_cast</span>&lt;DerivedClass *&gt;(pb); <span class="comment">//子类-&gt;父类，静态类型转换，正确但不推荐</span></div><div class="line">DerivedClass *pd2 = <span class="keyword">dynamic_cast</span>&lt;DerivedClass *&gt;(pb); <span class="comment">//子类-&gt;父类，动态类型转换，正确</span></div><div class="line"> </div><div class="line">BaseClass* pb2 =<span class="keyword">new</span> BaseClass();</div><div class="line">DerivedClass *pd21 = <span class="keyword">static_cast</span>&lt;DerivedClass *&gt;(pb2); <span class="comment">//父类-&gt;子类，静态类型转换，危险！访问子类m_szName成员越界</span></div><div class="line">DerivedClass *pd22 = <span class="keyword">dynamic_cast</span>&lt;DerivedClass *&gt;(pb2); <span class="comment">//父类-&gt;子类，动态类型转换，安全的。结果是NULL</span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBase</span> &#123;</span> &#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDerived</span>:</span> <span class="keyword">public</span> CBase &#123; &#125;;</div><div class="line">CBase b;</div><div class="line">CBase* pb;</div><div class="line">CDerived d;</div><div class="line">CDerived* pd;</div><div class="line">pb = <span class="keyword">dynamic_cast</span>&lt;CBase*&gt;(&amp;d);     <span class="comment">// ok: derived-to-base</span></div><div class="line">pd = <span class="keyword">dynamic_cast</span>&lt;CDerived*&gt;(&amp;b);  <span class="comment">// error: base-to-derived</span></div></pre></td></tr></table></figure>
<p>上面的代码中最后一行 VS2010 会报如下错误：error C2683: ‘dynamic_cast’ : ‘CBase’ is not a polymorphic type IntelliSense: the operand of a runtime dynamic_cast must have a polymorphic class type.<br>这是因为 dynamic_cast 只有在基类带有虚函数的情况下才允许将基类转换为子类。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBase</span></span></div><div class="line"><span class="class"> &#123;</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dummy</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"> &#125;;</div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">CDerived</span>:</span> <span class="keyword">public</span> CBase</div><div class="line"> &#123;</div><div class="line">     <span class="keyword">int</span> a;</div><div class="line"> &#125;;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line"><span class="function"> </span>&#123;</div><div class="line">    CBase * pba = <span class="keyword">new</span> CDerived;</div><div class="line">    CBase * pbb = <span class="keyword">new</span> CBase;</div><div class="line">    CDerived * pd1, * pd2;</div><div class="line">    pd1 = <span class="keyword">dynamic_cast</span>&lt;CDerived*&gt;(pba);</div><div class="line">    pd2 = <span class="keyword">dynamic_cast</span>&lt;CDerived*&gt;(pbb);</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>结果是：上面代码中的 pd1 不为 null,而 pd2 为 null。<br>dynamic_cast 也可在 null 指针和指向其他类型的指针之间进行转换，也可以将指向类型的指针转换为 void 指针（基于此，我们可以获取一个对象的内存起始地址 const void <em> rawAddress = dynamic_cast&lt;const void </em>&gt; (this);）。</p>
<h3 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h3><p>const_cast 可去除对象的常量性（const），它还可以去除对象的易变性（volatile）。<br>const_cast 的唯一职责就在于此，若将 const_cast 用于其他转型将会报错。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">char</span> * str)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> * c = <span class="string">"hello, world"</span>;</div><div class="line">  print ( <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt; (c) );</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><p>reinterpret_cast 用来执行低级转型，如将一个 int 指针强转为 int。其转换结果与编译平台息息相关，不具有可移植性，因此在一般的代码中不常见到它。reinterpret_cast 常用的一个用途是转换函数指针类型，即可以将一种类型的函数指针转换为另一种类型的函数指针，但这种转换可能会导致不正确的结果。<br>总之，reinterpret_cast 只用于底层代码，一般我们都用不到它，如果你的代码中使用到这种转型，务必明白自己在干什么。</p>
<ol>
<li>转换的类型必须是一个指针、引用、算术类型、函数指针或者成员指针。</li>
<li>在比特位级别上进行转换。它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针（先把一个指针转换成一个整数，在把该整数转换成原类型的指针，还可以得到原先的指针值）。但不能将非32bit的实例转成指针。</li>
<li>最普通的用途就是在函数指针类型之间进行转换。</li>
<li>很难保证移植性。</li>
</ol>
<h3 id="typeid：获取表达式的类型"><a href="#typeid：获取表达式的类型" class="headerlink" title="typeid：获取表达式的类型"></a>typeid：获取表达式的类型</h3><p>typeid 定义在标准头文件<code>&lt;typeinfo&gt;</code>中，用于获取表达式的类型，它返回一个数据类型或类名字的字符串。当 typeid 用于自定义类型时，它使用 RTTI 信息来获取对象的动态类型。基于 typeid，我们可以构建出比较对象（动态）类型的操作。</p>
<h3 id="使用原则：尽量避免类型转换操作；优先使用-C-风格的转型"><a href="#使用原则：尽量避免类型转换操作；优先使用-C-风格的转型" class="headerlink" title="使用原则：尽量避免类型转换操作；优先使用 C++ 风格的转型"></a>使用原则：尽量避免类型转换操作；优先使用 C++ 风格的转型</h3><ol>
<li>鉴于类型转换的隐蔽，不安全，易引起非预期的函数调用，对象切割等诸多问题，应该尽量避免类型转换操作。如使用 explicit 声明可被单参调用的构造函数，按引用传递参数或返回值，使用虚函数机制等等可避免类型转换；</li>
<li>若类型转换不可避免，优先使用 C++ 风格的新式类型转换。C++ 风格的类型转换一则易于辨识，二则有着其特有惯用手法，遵循这些惯用手法好处多多。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>去const属性用const_cast;<br>基本类型转换用static_cast;<br>多态类之间的类型转换用daynamic_cast;<br>不同类型的指针类型转换用reinterpret_cast;</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cppblog.com/kesalin/archive/2012/10/28/type_cast.html" target="_blank" rel="external">参考文章</a></li>
<li><a href="http://www.cnblogs.com/goodhacker/archive/2011/07/20/2111996.html" target="_blank" rel="external">参考文章</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之overload,override,hide]]></title>
      <url>http://arvin-he.github.io/2017/05/04/cpp-oov-2017-05-04/</url>
      <content type="html"><![CDATA[<h3 id="重载-overload-、覆盖-override-、隐藏-hide-的区别"><a href="#重载-overload-、覆盖-override-、隐藏-hide-的区别" class="headerlink" title="重载(overload)、覆盖(override)、隐藏(hide)的区别"></a>重载(overload)、覆盖(override)、隐藏(hide)的区别</h3><p> 这三个概念都是与OO中的多态有关系的。如果单是区别重载与覆盖这两个概念是比较容易的，但是隐藏这一概念却使问题变得有点复杂了，下面说说它们的区别吧。<br><strong>重载:</strong>是指不同的函数使用相同的函数名，但是函数的参数个数或类型不同。调用的时候根据函数的参数来区别不同的函数。<br><strong>覆盖:</strong>(也叫重写)是指在派生类中重新对基类中的虚函数（<strong>注意是虚函数</strong>）重新实现。即函数名和参数都一样，只是函数的实现体不一样。<br><strong>隐藏:</strong>是指派生类中的函数把基类中相同名字的函数屏蔽掉了。隐藏与另外两个概念表面上看来很像，很难区分，其实他们的关键区别就是在多态的实现上。什么叫多态？简单地说就是一个接口，多种实现吧。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;  </span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>  </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> x)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::f(float) "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; &#125;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">float</span> x)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::g(float) "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; &#125; </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">(<span class="keyword">float</span> x)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::h(float) "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; &#125;  </div><div class="line">&#125;;  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base </div><div class="line">&#123;  </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> x)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived::f(float) "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; &#125;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived::g(int) "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; &#125; </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">(<span class="keyword">float</span> x)</span></span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derived::h(float) "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; &#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>下面说明一下：<br>（1）函数Derived::f(float)覆盖(重写)了Base::f(float)。<br>（2）函数Derived::g(int)隐藏了Base::g(float)，而不是重载。<br>（3）函数Derived::h(float)隐藏了Base::h(float)，而不是覆盖。</p>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>在实际的编程中，我们会因此遇到什么问题呢？再看下面的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">  Derived  d;  </div><div class="line">  Base *pb = &amp;d;  </div><div class="line">  Derived *pd = &amp;d; </div><div class="line">  </div><div class="line">  <span class="comment">// Good : behavior depends solely on type of the object  </span></div><div class="line">  pb-&gt;f(<span class="number">3.14f</span>); <span class="comment">// Derived::f(float) 3.14  </span></div><div class="line">  pd-&gt;f(<span class="number">3.14f</span>); <span class="comment">// Derived::f(float) 3.14  </span></div><div class="line"></div><div class="line">  <span class="comment">// Bad : behavior depends on type of the pointer  </span></div><div class="line">  pb-&gt;g(<span class="number">3.14f</span>); <span class="comment">// Base::g(float) 3.14  </span></div><div class="line">  pd-&gt;g(<span class="number">3.14f</span>); <span class="comment">// Derived::g(int) 3        (surprise!)  </span></div><div class="line"></div><div class="line">  <span class="comment">// Bad : behavior depends on type of the pointer  </span></div><div class="line">  pb-&gt;h(<span class="number">3.14f</span>); <span class="comment">// Base::h(float) 3.14      (surprise!)  </span></div><div class="line">  pd-&gt;h(<span class="number">3.14f</span>); <span class="comment">// Derived::h(float) 3.14  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在第一种调用中，函数的行为取决于<strong>指针所指向的对象</strong>。<br>在第二第三种调用中，函数的行为取决于<strong>指针的类型</strong>。<br>所以说，隐藏破坏了面向对象编程中多态这一特性，会使得OOP人员产生混乱。<br>不过隐藏也并不是一无是处，它可以帮助编程人员在编译时期找出一些错误的调用。但我觉得还是应该尽量使用隐藏这一些特性，该加virtual时就加吧。</p>
<h3 id="C-重载-覆盖-隐藏的区别和执行方式"><a href="#C-重载-覆盖-隐藏的区别和执行方式" class="headerlink" title="C++ 重载 覆盖 隐藏的区别和执行方式"></a>C++ 重载 覆盖 隐藏的区别和执行方式</h3><p>成员函数被重载的特征<br>（1）相同的范围（在同一个类中）；<br>（2）函数名字相同；<br>（3）参数不同；<br>（4）virtual 关键字可有可无。<br>覆盖是指派生类函数覆盖基类函数，特征是<br>（1）不同的范围（分别位于派生类与基类）；<br>（2）函数名字相同；<br>（3）参数相同；<br>（4）基类函数必须有virtual 关键字。<br>“隐藏”是指派生类的函数屏蔽了与其同名的基类函数，规则如下<br>（1）如果派生类的函数与基类的函数同名,但是参数不同。此时,不论有无virtual关键字,基类的函数将被隐藏(注意别与重载混淆).<br>（2）如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual 关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）<br>3种情况怎么执行：</p>
<ol>
<li>重载：看参数</li>
<li>隐藏：用什么就调用什么</li>
<li>覆盖：调用派生类</li>
</ol>
<p>###<br>实例一:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CB</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　<span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CB::f(int)"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CD</span> :</span> <span class="keyword">public</span> CB</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">　 <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CD::f(int,int)"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">　 <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; f(<span class="number">1</span>); &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">　 <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译了一下<code>error C2660: &#39;f&#39; : function does not take 1 parameters</code><br>结论：在类CD这个域中，没有f(int)这样的函数，基类中的void f(int)被隐藏</p>
<p>如果把派生CD中成员函数void f(int,int)的声明改成和基类中一样，即f(int)，基类中的void f(int)还是一样被覆盖，此时编译不会出错，在函数中test调用的是CD中的f(int)　</p>
<p>所以，在基类中的某些函数，如果没有virtral关键字，函数名是f(参数是什么我们不管)，那么如果在派生类CD中也声明了某个f成员函数，那么在类CD域中，基类中所有的那些f都被隐藏。</p>
<p>刚才说的是没有virtual的情况，如果有virtual的情况呢？？<br>实例二：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CB</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"> 　　<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CB::f(int)"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CD</span> :</span> <span class="keyword">public</span> CB</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　 <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CD::f(int)"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"> 　<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种情况我们叫覆盖(override)！覆盖指的是派生类的虚拟函数覆盖了基类的同名且参数相同的函数！<br>在这里，要强调的是，这种覆盖，要满足两个条件:<br>(a)有virtual关键字，在基类中函数声明的时候加上就可以了<br>(b)基类CB中的函数和派生类CD中的函数要<strong>一模一样</strong>，什么叫一模一样，函数名，参数，返回类型三个条件。<br>有人可能会对(b)中的说法质疑，说返回类型也要一样？？<br>是，覆盖的话必须一样，我试了试，如果在基类中,把f的声明改成virtual int f(int)，编译出错了:error C2555: ‘CD::f’ : overriding virtual function differs from ‘CB::f’ only by return type or calling convention<br>所以，覆盖的话，必须要满足上述的(a)(b)条件.</p>
<p>那么如果基类CB中的函数f有关键字virtual，但是参数和派生类CD中的函数f参数不一样呢，<br>实例三:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CB</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">　<span class="keyword">public</span>:</div><div class="line"> 　　 <span class="function"><span class="keyword">virtual</span>  <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CB::f(int)"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CD</span> :</span> <span class="keyword">public</span> CB</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"> 　　 <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>，<span class="keyword">int</span>)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"CD::f(int，int)"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</div><div class="line"> 　　<span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; f(<span class="number">1</span>); &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译出错了，error C2660: ‘f’ : function does not take 1 parameters<br>和实例一中的情况一样哦，结论也是基类中的函数被隐藏了。</p>
<p>通过上面三个例子，得出一个简单的结论<br>如果基类中的函数和派生类中的两个名字一样的函数f<br>满足下面的两个条件<br>(a)在基类中函数声明的时候有virtual关键字<br>(b)基类CB中的函数和派生类CD中的函数一模一样，函数名，参数，返回类型都一样。<br>那么这就是叫做覆盖(override)，这也就是虚函数，多态的性质</p>
<p>那么其他的情况呢？？只要名字一样，不满足上面覆盖的条件，就是隐藏了。</p>
<p>下面我要讲最关键的地方了，好多人认为，基类CB中的f(int)会继承下来和CD中的f(int,int)在派生类CD中构成重载，就像实例一中想像的那样。<br>对吗？我们先看重载的定义<br>重载(overload):<br>必须在一个域中,函数名称相同但是函数参数不同,重载的作用就是同一个函数有不同的行为,因此不是在一个域中的函数是无法构成重载的,这个是重载的重要特征<br>必须在一个域中，而继承明显是在两个类中了，所以上面的想法是不成立的，派生类中的f(int,int)把基类中的f(int)隐藏了<br>所以，<strong>相同的函数名的函数，在基类和派生类中的关系只能是覆盖或者隐藏</strong>。</p>
<p>关于隐藏可以简单的理解成，在派生类域中，看不到基类中的那个同名函数了，或者说，是并没有继承下来给你用，如实例一那样。<br>　　<br>隐藏(hide):指的是派生类的成员函数隐藏了基类函数的成员函数.<br>隐藏一词可以这么理解:在调用一个类的成员函数的时候,编译器会沿着类的继承链逐级的向上查找函数的定义,如果找到了那么就停止查找了,所以如果一个派生类和一个基类都有同一个同名(暂且不论参数是否相同)的函数,而编译器最终选择了在派生类中的函数,那么我们就说这个派生类的成员函数”隐藏”了基类的成员函数,也就是说它阻止了编译器继续向上查找函数的定义.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cnblogs.com/txwsh1/archive/2008/06/28/1231751.html" target="_blank" rel="external">参考文章</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之using关键字]]></title>
      <url>http://arvin-he.github.io/2017/05/04/cpp-using-2017-05-04/</url>
      <content type="html"><![CDATA[<p>有两种基本用法：using声明和using指示（using namespace …）。<br>前者是声明，引入命名空间或基类作用域内已经被声明的名称。后者引入命名空间内所有的名称。<br>C++11新增了一类用法，可以代替typename，同时可以配合template使用（typedef基于语法考虑未被允许加入这种用法）。</p>
<h3 id="在当前文件中引入命名空间"><a href="#在当前文件中引入命名空间" class="headerlink" title="在当前文件中引入命名空间"></a>在当前文件中引入命名空间</h3><p>最熟悉的用法，例如：<code>using namespace std;</code></p>
<h3 id="在子类中使用-using-声明引入基类成员名称（参见C-primer）"><a href="#在子类中使用-using-声明引入基类成员名称（参见C-primer）" class="headerlink" title="在子类中使用 using 声明引入基类成员名称（参见C++ primer）"></a>在子类中使用 using 声明引入基类成员名称（参见C++ primer）</h3><p>在private或者protected继承时，基类成员的访问级别在派生类中更受限：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="built_in">std</span>::<span class="keyword">size_t</span> size() <span class="keyword">const</span> &#123; <span class="keyword">return</span> n; &#125;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">  <span class="built_in">std</span>::<span class="keyword">size_t</span> n;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">private</span> Base &#123; . . . &#125;;</div></pre></td></tr></table></figure></p>
<p>在这一继承层次中，成员函数 size 在 Base 中为 public，但在 Derived 中为 private。为了使 size 在 Derived 中成为 public，可以在 Derived 的 public 部分增加一个 using 声明。如下这样改变 Derived 的定义，可以使 size 成员能够被用户访问，并使 n 能够被 Derived的派生类访问：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">private</span> Base </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">using</span> Base::size;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">  <span class="keyword">using</span> Base::n;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>另外，当子类中的成员函数和基类同名时，子类中重定义的成员函数将隐藏基类中的版本，即使函数原型不同也是如此（隐藏条件见下面）。</p>
<p>如果基类中成员函数有多个重载版本，派生类可以重定义所继承的 0 个或多个版本，但是通过派生类型只能访问派生类中重定义的那些版本，所以如果派生类想通过自身类型使用所有的重载版本，则派生类必须要么重定义所有重载版本，要么一个也不重定义。<br>有时类需要仅仅重定义一个重载集中某些版本的行为，并且想要继承其他版本的含义，在这种情况下，为了重定义需要特化的某个版本而不得不重定义每一个基类版本，可能会令人厌烦。<br>可以在派生类中为重载成员名称提供 using 声明（为基类成员函数名称而作的 using 声明将该函数的所有重载实例加到派生类的作用域），使派生类不用重定义所继承的每一个基类版本。一个 using 声明只能指定一个名字，不能指定形参表，使用using声明将名字加入作用域之后，派生类只需要重定义本类型确实必须定义的那些函数，对其他版本可以使用继承的定义。</p>
<p>“隐藏”是指派生类的函数屏蔽了与其同名的基类函数，规则如下：<br>1、如果派生类的函数与基类的函数同名，但是参数不同。此时，不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）<br>2、如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StdAfx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">menfcn</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base function"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">menfcn</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base function with int"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> Base</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:    </div><div class="line">  <span class="keyword">using</span> Base::menfcn;   <span class="comment">//using声明只能指定一个名字，不能带形参表</span></div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">menfcn</span><span class="params">(<span class="keyword">int</span>)</span></span>&#123; <span class="built_in">cout</span>&lt;&lt; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derived function with int"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;    </div><div class="line">  Base b; </div><div class="line">  Derived d;   </div><div class="line">  b.menfcn();  </div><div class="line">  <span class="comment">//若去掉Derived类中的using声明,会出现错误:error C2660:'Derived::menfcn':function does not take 0 arguments </span></div><div class="line">  d.menfcn();    </div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span>.ignore(<span class="built_in">std</span>::<span class="built_in">cin</span>.gcount()+<span class="number">1</span>); <span class="comment">//清空缓冲区    </span></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span>.get();<span class="comment">//暂停程序执行  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之volatile关键字]]></title>
      <url>http://arvin-he.github.io/2017/05/03/cpp-volatile-2017-05-03/</url>
      <content type="html"><![CDATA[<p>volatile的本意是“易变的”,volatile关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。</p>
<p>当要求使用volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被寄存。例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> i=<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> a = i;</div><div class="line">......    <span class="comment">//其他代码，并未明确告诉编译器，对i进行过操作</span></div><div class="line"><span class="keyword">int</span> b = i;</div></pre></td></tr></table></figure></p>
<p>volatile 指出 i是随时可能发生变化的，每次使用它的时候必须从i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在b中。而优化做法是，由于编译器发现两次从i读数据的代码之间的代码没有对i进行过操作，它会自动把上次读的数据放在b中。而不是重新从i里面读。这样以来，如果i是一个寄存器变量或者表示一个端口数据就容易出错，所以说volatile可以保证对特殊地址的稳定访问。</p>
<h3 id="volatile的易变性"><a href="#volatile的易变性" class="headerlink" title="volatile的易变性"></a>volatile的易变性</h3><p>所谓的易变性，在<strong>汇编层面</strong>反映出来，就是两条语句，下一条语句不会直接使用上一条语句对应的volatile变量的寄存器内容，而是重新从内存中读取。</p>
<h3 id="volatile的不可优化性"><a href="#volatile的不可优化性" class="headerlink" title="volatile的不可优化性"></a>volatile的不可优化性</h3><p>“不可优化”特性。volatile告诉编译器，不要对我这个变量进行各种激进的优化，甚至将变量直接消除，保证程序员写在代码中的指令，一定会被执行。</p>
<h3 id="volatile的顺序性"><a href="#volatile的顺序性" class="headerlink" title="volatile的顺序性"></a>volatile的顺序性</h3><p>C/C++ Volatile关键词前面提到的易变性和不可优化性，让Volatile经常被解读为一个为多线程而生的关键词：一个全局变量，会被多线程同时访问/修改，那么线程内部，就不能假设此变量的不变性，并且基于此假设，来做一些程序设计。当然，这样的假设，本身并没有什么问题，多线程编程，并发访问/修改的全局变量，通常都会建议加上Volatile关键词修饰，来防止C/C++编译器进行不必要的优化。但是，很多时候，C/C++ Volatile关键词，在多线程环境下，会被赋予更多的功能，从而导致问题的出现。</p>
<p>”顺序性”，能够保证Volatile变量间的顺序性，编译器不会进行乱序优化。Volatile变量与非Volatile变量的顺序，编译器不保证顺序，可能会进行乱序优化。同时，C/C++ Volatile关键词，并不能用于构建happens-before语义，因此在进行多线程程序设计时，要小心使用volatile，不要掉入volatile变量的使用陷阱之中。</p>
<h3 id="关于volatile的补充："><a href="#关于volatile的补充：" class="headerlink" title="关于volatile的补充："></a>关于volatile的补充：</h3><p>一个定义为volatile的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。精确地说就是，优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。<br>下面是volatile变量的几个例子：</p>
<ul>
<li>并行设备的硬件寄存器（如：状态寄存器）</li>
<li>一个中断服务子程序中会访问到的非自动变量(Non-automatic variables)</li>
<li>多线程应用中被几个任务共享的变量</li>
</ul>
<p>关于volatile的一些问题：<br>1). 一个参数既可以是const还可以是volatile吗？解释为什么。<br>2). 一个指针可以是volatile 吗？解释为什么。<br>3). 下面的函数有什么错误：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">int</span> *ptr)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> *ptr * *ptr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面是答案：<br>1). 是的。一个例子是只读的状态寄存器。它是volatile因为它可能被意想不到地改变。它是const因为程序不应该试图去修改它。<br>2). 是的。尽管这并不很常见。一个例子是当一个中服务子程序修改一个指向一个buffer的指针时。<br>3). 这段代码的有个恶作剧。这段代码的目的是用来返指针*ptr指向值的平方，但是，由于*ptr指向一个volatile型参数，编译器将产生类似下面的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">int</span> *ptr)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    a = *ptr;</div><div class="line">    b = *ptr;</div><div class="line">    <span class="keyword">return</span> a * b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于*ptr的值可能被意想不到地该变，因此a和b可能是不同的。结果，这段代码可能返不是你所期望的平方值！正确的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">square</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">int</span> *ptr)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">    a = *ptr;</div><div class="line">    <span class="keyword">return</span> a * a;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://hedengcheng.com/?p=725" target="_blank" rel="external">参考文章</a></li>
<li><a href="http://blog.csdn.net/wuliming_sc/article/details/3717017" target="_blank" rel="external">参考文章</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之explicit关键字]]></title>
      <url>http://arvin-he.github.io/2017/05/03/cpp-explicit-2017-05-03/</url>
      <content type="html"><![CDATA[<h3 id="explicit关键字"><a href="#explicit关键字" class="headerlink" title="explicit关键字"></a>explicit关键字</h3><p>C++中，explicit关键字用来修饰类的构造函数，被修饰的构造函数的类，不能发生相应的隐式类型转换，只能以显示的方式进行类型转换。</p>
<p>在C++中，如果一个类只有一个参数的构造函数，C++允许一种特殊的声明类变量的方式。即可以直接将一个对应于构造函数参数类型的数据直接赋值给类变量，编译器在编译时会自动进行类型转换，将对应于构造函数参数类型的数据转换为类的对象。如果在构造函数前加上explicit修饰词，则会禁止这种自动转换，此时，即使将对应于构造函数参数类型的数据直接赋值给类变量，编译器也会报错。</p>
<h3 id="explicit使用注意事项"><a href="#explicit使用注意事项" class="headerlink" title="explicit使用注意事项"></a>explicit使用注意事项</h3><p>explicit 关键字只能用于类内部的构造函数声明上，且作用于<strong>单个参数</strong>的构造函数。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="keyword">int</span> age;</div><div class="line">Student (<span class="keyword">int</span> a) &#123;age=a;&#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span> <span class="params">( <span class="keyword">void</span> )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">　<span class="function">Student <span class="title">s1</span><span class="params">(<span class="number">10</span>)</span></span>;　 <span class="comment">//方式一</span></div><div class="line">　Student* p_s2=<span class="keyword">new</span> Student(<span class="number">10</span>); <span class="comment">//方式二</span></div><div class="line">　Student s3=<span class="number">10</span>; <span class="comment">//方式三</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三种方式比较特殊,因为C++是一种强类型语言，不同的数据类型是不能随意转换的，必须进行显式或隐式的类型转换，这里，没有进行任何显式转换，直接将一个整型数据赋值给了类变量s3.这里是进行了一次隐式类型转换，<strong>编译器</strong>自动将对应于构造函数参数类型的数据转换为了该类的对象，最终方式三经编译器自动转换后和方式一的实现方式是相同的。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C/C++之extern关键字]]></title>
      <url>http://arvin-he.github.io/2017/04/27/cpp-extern-2017-04-27/</url>
      <content type="html"><![CDATA[<h3 id="extern作用"><a href="#extern作用" class="headerlink" title="extern作用"></a>extern作用</h3><p>extern可以置于变量或者函数前，表示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。此外extern也可用来进行链接指定。</p>
<p>extern有两个作用:<br>第一个,当它与”C”一起连用时，如: <code>extern &quot;C&quot; void fun(int a, int b);</code><br>则告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名而不是C++的，C++的规则在翻译这个函数名时会把fun这个名字变得面目全非，可能是<code>fun@aBc_int_int#%$</code>也可能是别的，不同的编译器采用的方法不一样，为什么这么做呢，因为C++支持函数的重载.<br>第二，当extern不与”C”在一起修饰变量或函数时，它的作用就是<strong>声明函数或全局变量</strong>的作用范围的关键字,如在头文件中: <code>extern int g_Int;</code> ，其声明的函数和变量可以在本模块和其他模块中使用.记住它是一个<strong>声明</strong>不是定义!也就是说B模块(编译单元)要是引用模块(编译单元)A中定义的全局变量或函数时，它只要包含A模块的头文件即可,在编译阶段，模块B虽然找不到该函数或变量，但它不会报错，它会在链接时从模块A生成的目标代码中找到此函数。</p>
<h3 id="extern一些使用实例"><a href="#extern一些使用实例" class="headerlink" title="extern一些使用实例"></a>extern一些使用实例</h3><ol>
<li><p>问题:在一个源文件里定义了一个数组:<code>char a[6];</code>,在另外一个文件里用下列语句进行了声明：<code>extern char \*a</code>, 请问这样可以吗？<br>答案:不可以，程序运行时会告诉你非法访问。<br>原因:指向类型T的指针并不等价于类型T的数组。extern char <em>a声明的是一个指针变量而不是字符数组，因此与实际的定义不同，从而造成运行时非法访问。应该将声明改为extern char a[]。<br>分析:例子分析如下，如果a[] = “abcd”,则外部变量a=0x61626364 (abcd的ASCII码值)，</em>a显然没有意义,显然a指向的空间（0x61626364）没有意义，易出现非法内存访问。这提示我们，在使用extern时候要严格对应声明时的格式，在实际编程中，这样的错误屡见不鲜。<br>extern用在变量声明中常常有这样一个作用，你在*.c文件中声明了一个全局的变量，这个全局的变量如果要被引用，就放在*.h中并用extern来声明。</p>
</li>
<li><p>问题：单方面修改extern 函数原型<br>当函数提供方单方面修改函数原型时，如果使用方不知情继续沿用原来的extern声明，这样编译时编译器不会报错。但是在运行过程中，因为少了或者多了输入参数，往往会照成系统错误，这种情况应该如何解决？<br>答案与分析：目前业界针对这种情况的处理没有一个很完美的方案，通常的做法是提供方在自己的xxx_pub.h中提供对外部接口的声明，然后调用方include该头文件，从而省去extern这一步。以避免这种错误。宝剑有双锋，对extern的应用，不同的场合应该选择不同的做法。</p>
</li>
<li><p>extern “C”, 在C++环境下使用C函数的时候，常常会出现编译器无法找到obj模块中的C函数定义，从而导致链接失败的情况，应该如何解决这种情况呢？<br>答案与分析：C++语言在编译的时候为了解决函数的多态问题，会将函数名和参数联合起来生成一个中间的函数名称，而C语言则不会，因此会造成链接时找不到对应函数的情况，此时C函数就需要用extern “C”进行链接指定，这告诉编译器，请保持我的名称，不要给我生成用于链接的中间函数名。下面是一个标准的写法：</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在.h文件的头上</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span>&#123;</div><div class="line">　<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">　<span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __cplusplus */</span> </span></div><div class="line">　…</div><div class="line">　…</div><div class="line">　<span class="comment">//.h文件结束的地方</span></div><div class="line">　<span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">　<span class="meta">#<span class="meta-keyword">if</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></div></pre></td></tr></table></figure>
<ol>
<li>常见extern放在函数的前面成为函数声明的一部分，那么，C语言的关键字extern在函数的声明中起什么作用？<br>答案与分析：如果函数的声明中带有关键字extern，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。<br>即下述两个函数声明没有明显的区别：<code>extern int f();</code>和<code>int f();</code><br>当然，这样的用处还是有的，就是在程序中取代include “*.h”来声明函数，在一些复杂的项目中，我比较习惯在所有的函数声明前添加extern修饰。关于这样做的原因和利弊可见下面的这个例子：用extern修饰的全局变量<br>(1) 在test1.h中有下列声明:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEST1H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST1H</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">char</span> g_str[]; <span class="comment">// 声明全局变量g_str</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>(2) 在test1.cpp中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test1.h"</span></span></div><div class="line"><span class="keyword">char</span> g_str[] = <span class="string">"123456"</span>; <span class="comment">// 定义全局变量g_str</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; g_str &lt;&lt; <span class="built_in">endl</span>; &#125;</div></pre></td></tr></table></figure></p>
<p>(3) 以上是test1模块， 它的编译和连接都可以通过,如果我们还有test2模块也想使用g_str,只需要在原文件中引用就可以了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test1.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span>    </span>&#123; <span class="built_in">cout</span> &lt;&lt; g_str &lt;&lt; <span class="built_in">endl</span>;    &#125;</div></pre></td></tr></table></figure></p>
<p>以上test1和test2可以同时编译连接通过，如果你感兴趣的话可以用ultraEdit打开test1.obj,你可以在里面找到”123456”这个字符串,但是你却不能在test2.obj里面找到，这是因为g_str是整个工程的全局变量，在内存中只存在一份,test2.obj这个编译单元不需要再有一份了，不然会在连接时报告重复定义这个错误!</p>
<ol>
<li>有些人喜欢把全局变量的声明和定义放在一起，这样可以防止忘记了定义.<br>如把上面test1.h改为:<code>extern char g_str[] = &quot;123456&quot;; // 这个时候相当于没有extern</code>,然后把test1.cpp中的g_str的定义去掉,这个时候再编译连接test1和test2两个模块时，会报链接错误，这是因为你把全局变量g_str的定义放在了头文件之后，test1.cpp这个模块包含了test1.h所以定义了一次g_str,而test2.cpp也包含了test1.h,所以再一次定义了g_str,这个时候链接器在链接test1和test2时发现两个g_str。如果你非要把g_str的定义放在test1.h中的话，那么就把test2的代码中#include “test1.h”去掉 换成:<code>extern char g_str[];</code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在test2先声明下,再使用</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">char</span> g_str[];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span>   </span>&#123;  <span class="built_in">cout</span> &lt;&lt; g_str &lt;&lt; <span class="built_in">endl</span>;   &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这个时候编译器就知道g_str是引自于外部的一个编译模块了，不会在本模块中再重复定义一个出来，但是我想说这样做非常糟糕，因为你由于无法在test2.cpp中使用<code>#include &quot;test1.h&quot;</code>,那么test1.h中声明的<strong>其他函数</strong>你<strong>也无法使用</strong>了，除非也用都用extern修饰，这样的话你光声明的函数就要一大串，而且头文件的作用就是要给外部提供接口使用的，所以 请记住， <strong>只在头文件中做声明</strong>，真理总是这么简单。</p>
<ol>
<li>extern 和 static<br>(1) extern 表明该变量在别的地方已经定义过了,在这里要使用那个变量.<br>(2) static 表示静态的变量，分配内存的时候, 存储在静态区,不存储在栈上面.</li>
</ol>
<p>static 作用范围是内部连接的关系, 和extern有点相反.它和对象本身是分开存储的,extern也是分开存储的,但是extern可以被其他的对象用extern引用,而static 不可以,只允许对象本身用它.<br>具体差别:<br>首先，static与extern是一对“水火不容”的家伙，也就是说extern和static不能同时修饰一个变量；<br>其次，static修饰的全局变量声明与定义同时进行，也就是说当你在头文件中使用static声明了全局变量后，它也同时被定义了；<br>最后，static修饰全局变量的作用域只能是本身的编译单元，也就是说它的“全局”只对本编译单元有效，其他编译单元则看不到它,如:<br>(1) test1.h:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEST1H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST1H</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> g_str[] = <span class="string">"123456"</span>; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>(2) test1.cpp:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test1.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span>  </span>&#123;   <span class="built_in">cout</span> &lt;&lt; g_str &lt;&lt; <span class="built_in">endl</span>;  &#125;</div></pre></td></tr></table></figure></p>
<p>(3) test2.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test1.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span>  </span>&#123;   <span class="built_in">cout</span> &lt;&lt; g_str &lt;&lt; <span class="built_in">endl</span>;  &#125;</div></pre></td></tr></table></figure></p>
<p>以上两个编译单元可以连接成功, 当你打开test1.obj时，你可以在它里面找到字符串”123456”,同时你也可以在test2.obj中找到它们，它们之所以可以连接成功而没有报重复定义的错误是因为虽然它们有相同的内容，但是存储的物理地址并不一样，就像是两个不同变量赋了相同的值一样，而这两个变量分别作用于它们各自的编译单元。 也许你比较较真，自己偷偷的跟踪调试上面的代码,结果你发现两个编译单元（test1,test2）的g_str的内存地址相同，于是你下结论static修饰的变量也可以作用于其他模块，但是我要告诉你，那是你的编译器在欺骗你，大多数编译器都对代码都有优化功能，以达到生成的目标程序更节省内存，执行效率更高，当编译器在连接各个编译单元的时候，它会把相同内容的内存只拷贝一份，比如上面的”123456”, 位于两个编译单元中的变量都是同样的内容，那么在连接的时候它在内存中就只会存在一份了，如果你把上面的代码改成下面的样子，你马上就可以拆穿编译器的谎言:<br>(1) test1.cpp:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test1.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    g_str[<span class="number">0</span>] = <span class="string">"a"</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; g_str &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(2) test2.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test1.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span>  </span>&#123;  <span class="built_in">cout</span> &lt;&lt; g_str &lt;&lt; <span class="built_in">endl</span>;  &#125;</div></pre></td></tr></table></figure></p>
<p>(3)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    fun1(); <span class="comment">// a23456</span></div><div class="line">    fun2(); <span class="comment">// 123456</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个时候你在跟踪代码时，就会发现两个编译单元中的g_str地址并不相同，因为你在一处修改了它，所以编译器被强行的恢复内存的原貌，在内存中存在了两份拷贝给两个模块中的变量使用。正是因为static有以上的特性，所以<strong>一般定义static全局变量时，都把它放在源文件中而不是头文件</strong>，这样就不会给其他模块造成不必要的信息污染，同样记住这个原则吧！</p>
<ol>
<li>extern 和const</li>
</ol>
<p>C++中const修饰的全局常量具有跟static相同的特性，即它们只能作用于本编译模块中，但是const可以与extern连用来声明该常量可以作用于其他编译模块中, 如<code>extern const char g_str[];</code>,然后在原文件中别忘了定义:<code>const char g_str[] = &quot;123456&quot;;</code>.</p>
<p>所以当const单独使用时它就与static相同，而当与extern一起合作的时候，它的特性就跟extern的一样了！我只是想提醒你，<code>const char* g_str = &quot;123456&quot;</code> 与 <code>const char g_str[] =&quot;123465&quot;</code>是不同的， 前面那个const 修饰的是<code>char *</code>而不是g_str,它的g_str并不是常量，它被看做是一个定义了的全局变量（可以被其他编译单元使用）， 所以如果你像让<code>char* g_str</code>遵守const的全局常量的规则，最好这么定义const char* const g_str=”123456”.</p>
<p>假如a.h中有 int a=10; t1.cpp和t2.cpp同时include “a.h”则编译不成功，因为a重复定义；<br>如果 a.h中是 static int a=10;则可以，因为t1和t2中的a只是名字相同，地址空间不同；<br>如果a.h中是 extern int a; 并且在a.cpp中 int a=10; 则t1和t2中的a指向同一个地址空间。</p>
<p>在头文件中定义全局变量，如果该头文件不被任何.c或者.cpp中包含的话，该变量的定义是没有意义的，即使加了extern 关键字。因为在变量定义中，extern关键字是不起作用的，extern只用作声明。<br>编译器在编译时，是不管头文件的，只有在预处理时会include头文件中的内容，也就是把头文件中的内容全盘粘贴过来。因此，如果你只是在头文件中定义变量，而不include头文件，这时，编译器无论是在预处理阶段，还是在链接阶段，直接无视头文件的存在(链接器只会在.c/.cpp生成的目标文件(.o)中查找变量名）。这样一来，头文件中定义的变量也就形同虚设，完全没有意义可言。因此虽然在头文件定义,但不include该头文件时,VS链接时也就会在.c/.cpp生成的目标文件(.o)中查找变量名出现无法解析的外部命令了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cnblogs.com/yc_sunniwell/archive/2010/07/14/1777431.html" target="_blank" rel="external">C/C++中extern关键字详解</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C/C++之inline关键字]]></title>
      <url>http://arvin-he.github.io/2017/04/26/cpp-inline-2017-04-26/</url>
      <content type="html"><![CDATA[<h3 id="内联函数-——-C-中关键字-inline-用法解析"><a href="#内联函数-——-C-中关键字-inline-用法解析" class="headerlink" title="内联函数 —— C 中关键字 inline 用法解析"></a>内联函数 —— C 中关键字 inline 用法解析</h3><p>内联函数:在C语言中，如果一些函数被频繁调用，不断地有函数入栈，即函数栈，会造成栈空间或栈内存的大量消耗。<br>为了解决这个问题，特别的引入了inline修饰符，表示为内联函数。<br>栈空间就是指放置程式的局部数据也就是函数内数据的内存空间，在系统下，栈空间是有限的，假如频繁大量的使用就会造成因栈空间不足所造成的程式出错的问题，函数的死循环递归调用的最终结果就是导致栈内存空间耗尽。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">//函数定义为inline即:内联函数</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span>* <span class="title">dbtest</span><span class="params">(<span class="keyword">int</span> a)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> (i % <span class="number">2</span> &gt; <span class="number">0</span>) ? <span class="string">"奇"</span> : <span class="string">"偶"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i &lt; <span class="number">100</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"i:%d    奇偶性:%s /n"</span>, i, dbtest(i));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子就是标准的内联函数的用法，使用inline修饰带来的好处我们表面看不出来，其实在内部的工作就是在每个for循环的内部任何调用dbtest(i)的地方都换成了(i%2&gt;0)?”奇”:”偶”这样就避免了频繁调用函数对栈内存重复开辟所带来的消耗。<br>其实这种有点类似动态库和静态库的问题，将dbtest函数中的代码直接被放到main函数中，执行for循环时，会不断调用这段代码，而不是不断地开辟一个函数栈。</p>
<p>内联函数的注意事项:<br>关键字inline 必须与函数<strong>定义体</strong>放在一起才能使函数成为内联，仅将inline 放在函数声明前面不起任何作用。<br>所以说，inline 是一种“用于实现的关键字”，而不是一种“用于声明的关键字”。一般地，用户可以阅读函数的声明，但是看不到函数的定义。尽管在大多数教科书中内联函数的声明、定义体前面都加了inline 关键字，但我认为inline 不应该出现在函数的声明中。这个细节虽然不会影响函数的功能，但是体现了高质量C++/C 程序设计风格的一个基本原则：声明与定义不可混为一谈，用户没有必要、也不应该知道函数是否需要内联。</p>
<p>inline的使用是有所限制的<br>inline只适合函数体内代码简单的函数使用，不能包含复杂的结构控制语句例如while、switch，并且内联函数本身不能是直接递归函数(自己内部还调用自己的函数).</p>
<p>慎用内联<br>内联能提高函数的执行效率，为什么不把所有的函数都定义成内联函数？如果所有的函数都是内联函数，还用得着“内联”这个关键字吗？<br>内联是以代码膨胀（复制）为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收<br>获会很少。<br>另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。<br>以下情况不宜使用内联：<br>（1）如果函数体内的代码比较长，使用内联将导致内存消耗代价较高。<br>（2）如果函数体内出现循环，那么执行函数体内代码的时间要比函数调用的开销大。<br>一个好的编译器将会根据函数的定义体，自动地取消不值得的内联（这进一步说明了inline 不应该出现在函数的声明中）。</p>
<p>总结：<br>因此,将内联函数放在头文件里实现是合适的,省却你为每个文件实现一次的麻烦.而声明跟定义要一致,其实是指,如果在每个文件里都实现一次该内联函数的话,那么,最好保证每个定义都是一样的,否则,将会引起未定义的行为,即是说,如果不是每个文件里的定义都一样,那么,编译器展开的是哪一个,那要看具体的编译器而定.所以,最好将内联函数定义放在头文件中.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://blog.csdn.net/zqixiao_09/article/details/50877383" target="_blank" rel="external">参考文章</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之线程与进程]]></title>
      <url>http://arvin-he.github.io/2017/04/26/cpp-thread-process-2017-04-26/</url>
      <content type="html"><![CDATA[<h3 id="进程与线程的概念"><a href="#进程与线程的概念" class="headerlink" title="进程与线程的概念"></a>进程与线程的概念</h3><ol>
<li><p>任务调度<br>大部分操作系统(如Windows、Linux)的任务调度是采用时间片轮转的抢占式调度方式，即一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态等待下一个属于它的时间片的到来,这样每个任务都能得到执行.</p>
</li>
<li><p>进程<br>操作系统是计算机的管理者，它负责任务的调度、资源的分配和管理，统领整个计算机硬件；应用程序则是具有某种功能的程序，程序是运行于操作系统之上的.<br>在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。</p>
</li>
</ol>
<p>进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。</p>
<p>进程是一种抽象的概念，从来没有统一的标准定义。进程一般由程序、数据集合和进程控制块三部分组成。<br>程序用于描述进程要完成的功能，是控制进程执行的指令集；<br>数据集合是程序在执行时所需要的数据和工作区；<br>程序控制块(Program Control Block，简称PCB)，包含进程的描述信息和控制信息，是进程存在的唯一标志。</p>
<p>进程具有的特征：<br>动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；<br>并发性：任何进程都可以同其他进程一起并发执行；<br>独立性：进程是系统进行资源分配和调度的一个独立单位；<br>结构性：进程由程序、数据和进程控制块三部分组成。</p>
<ol>
<li>线程<br>线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。<br>一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。<br>一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成,<br>而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成。</li>
</ol>
<h3 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h3><ol>
<li>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；</li>
<li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li>
<li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某进程内的线程在其它进程不可见；</li>
<li>调度和切换：线程上下文切换比进程上下文切换要快得多。<br>总之，线程和进程都是一种抽象的概念，线程是一种比进程更小的抽象，线程和进程都可用于实现并发。<br>在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。它相当于一个进程里只有一个线程，进程本身就是线程。所以线程有时被称为轻量级进程(Lightweight Process，LWP）。<br>后来，随着计算机的发展，对多个任务之间上下文切换的效率要求越来越高，就抽象出一个更小的概念——线程，一般一个进程会有多个(也可是一个)线程。</li>
</ol>
<h3 id="多线程与多核"><a href="#多线程与多核" class="headerlink" title="多线程与多核"></a>多线程与多核</h3><p>很多操作系统的书都说“同一时间点只有一个任务在执行”,其实“同一时间点只有一个任务在执行”这句话是不准确的，至少它是不全面的。那多核处理器的情况下，线程是怎样执行呢？这就需要了解内核线程。<br>多核(心)处理器是指在一个处理器上集成多个运算核心从而提高计算能力，也就是有多个真正并行计算的处理核心，每一个处理核心对应一个内核线程。<br>内核线程（Kernel Thread， KLT）就是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操作调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。一般一个处理核心对应一个内核线程，比如单核处理器对应一个内核线程，双核处理器对应两个内核线程，四核处理器对应四个内核线程。</p>
<p>现在的电脑一般是双核四线程、四核八线程，是采用超线程技术将一个物理处理核心模拟成两个逻辑处理核心，对应两个内核线程，所以在操作系统中看到的CPU数量是实际物理CPU数量的两倍，如你的电脑是双核四线程，打开“任务管理器\性能”可以看到4个CPU的监视器，四核八线程可以看到8个CPU的监视器。</p>
<p>超线程技术就是利用特殊的硬件指令，把一个物理芯片模拟成两个逻辑处理核心，让单个处理器都能使用线程级并行计算，进而兼容多线程操作系统和软件，减少了CPU的闲置时间，提高的CPU的运行效率。这种超线程技术(如双核四线程)由处理器硬件的决定，同时也需要操作系统的支持才能在计算机中表现出来。</p>
<p>程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口——轻量级进程（Light Weight Process，LWP），轻量级进程就是我们通常意义上所讲的线程(我们在这称它为用户线程)，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。用户线程与内核线程的对应关系有三种模型：一对一模型、多对一模型、多对多模型.</p>
<ul>
<li>一对一模型<br>一个用户线程就唯一地对应一个内核线程(反过来不一定成立，一个内核线程不一定有对应的用户线程)。这样，如果CPU没有采用超线程技术(如四核四线程的计算机)，一个用户线程就唯一地映射到一个物理CPU的线程，线程之间的并发是真正的并发。一对一模型使用户线程具有与内核线程一样的优点，一个线程因某种原因阻塞时其他线程的执行不受影响；此处，一对一模型也可以让多线程程序在多处理器的系统上有更好的表现。<br>但一对一模型也有两个缺点：<br>1.许多操作系统限制了内核线程的数量，因此一对一模型会使用户线程的数量受到限制；<br>2.许多操作系统内核线程调度时，上下文切换的开销较大，导致用户线程的执行效率下降。</li>
<li>多对一模型<br>多对一模型将多个用户线程映射到一个内核线程上，线程之间的切换由用户态的代码来进行，因此相对一对一模型，多对一模型的线程切换速度要快许多；此外，多对一模型对用户线程的数量几乎无限制。<br>但多对一模型也有两个缺点：<br>1.如果其中一个用户线程阻塞，那么其它所有线程都将无法执行，因为此时内核线程也随之阻塞了；<br>2.在多处理器系统上，处理器数量的增加对多对一模型的线程性能不会有明显的增加，因为所有的用户线程都映射到一个处理器上了。</li>
<li>多对多模型<br>多对多模型结合了一对一模型和多对一模型的优点，将多个用户线程映射到多个内核线程上。<br>多对多模型的优点有：<br>1.一个用户线程的阻塞不会导致所有线程的阻塞，因为此时还有别的内核线程被调度来执行；<br>2.多对多模型对用户线程的数量没有限制；<br>3.在多处理器的操作系统中，多对多模型的线程也能得到一定的性能提升，但提升的幅度不如一对一模型的高。<br>在现在流行的操作系统中，大都采用多对多的模型。</li>
</ul>
<h3 id="进程和线程的状态"><a href="#进程和线程的状态" class="headerlink" title="进程和线程的状态"></a>进程和线程的状态</h3><p>当线程的数量小于处理器的数量时，线程的并发是真正的并发，不同的线程运行在不同的处理器上。但当线程的数量大于处理器的数量时，线程的并发会受到一些阻碍，此时并不是真正的并发，因为此时至少有一个处理器会运行多个线程。<br>在单个处理器运行多个线程时，并发是一种模拟出来的状态。操作系统采用时间片轮转的方式轮流执行每一个线程。现在，几乎所有的现代操作系统采用的都是时间片轮转的抢占式调度方式，如我们熟悉的Unix、Linux、Windows及Mac OS X等流行的操作系统。<br>线程是程序执行的最小单位，也是任务执行的最小单位。在早期只有进程的操作系统中，进程有五种状态，创建、就绪、运行、阻塞(等待)、退出。早期的进程相当于现在的只有单个线程的进程，那么现在的多线程也有五种状态，现在的多线程的生命周期与早期进程的生命周期类似。</p>
<ul>
<li>进程的状态<br>进程在运行过程有三种状态：就绪、运行、阻塞，创建和退出状态描述的是进程的创建过程和退出过程。<br>创建：进程正在创建，还不能运行。操作系统在创建进程时要进行的工作包括分配和建立进程控制块表项、建立资源表格并分配资源、加载程序并建立地址空间；<br>就绪：时间片已用完，此线程被强制暂停，等待下一个属于他的时间片到来；<br>运行：此线程正在执行，正在占用时间片；<br>阻塞：也叫等待状态，等待某一事件(如IO或另一个线程)执行完；<br>退出：进程已结束，所以也称结束状态，释放操作系统分配的资源。</li>
<li>线程的状态<br>创建：一个新的线程被创建，等待该线程被调用执行；<br>就绪：时间片已用完，此线程被强制暂停，等待下一个属于他的时间片到来；<br>运行：此线程正在执行，正在占用时间片；<br>阻塞：也叫等待状态，等待某一事件(如IO或另一个线程)执行完；<br>退出：一个线程完成任务或者其他终止条件发生，该线程终止进入退出状态，退出状态释放该线程所分配的资源。</li>
</ul>
<h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>优先级调度(Priority Schedule)决定了线程按照什么顺序轮流执行.线程拥有各自的线程优先级(Thread Priority),线程的优先级可以由用户手动设置，此外系统也会根据不同情形调整优先级。频繁等待的线程称之为IO密集型线程(IO Bound Thread)，而把很少等待的线程称之为CPU密集型线程(CPU Bound Thread)。IO密集型线程总是比CPU密集型线程更容易得到优先级的提升。</p>
<p>线程饿死:优先级较低的线程，在它执行之前总是有比它优先级更高的线程等待执行，因此这个低优先级的线程始终得不到执行。</p>
<p>在优先级调度环境下，线程优先级的改变有三种方式： </p>
<ol>
<li>用户指定优先级； </li>
<li>根据进入等待状态的频繁程度提升或降低优先级(由操作系统完成)； </li>
<li>长时间得不到执行而被提升优先级。</li>
</ol>
<h3 id="线程安全与锁"><a href="#线程安全与锁" class="headerlink" title="线程安全与锁"></a>线程安全与锁</h3><p>多个线程对同一数据的进行访问时需要同步，以确保线程安全。<br>同步(synchronization)就是指一个线程访问数据时，其它线程不得对同一个数据进行访问，即同一时刻只能有一个线程访问该数据，当这一线程访问结束时其它线程才能对这它进行访问。<br>同步最常见的方式就是使用锁(Lock)，也称为线程锁。锁是一种非强制机制，每一个线程在访问数据或资源之前，首先试图获取(Acquire)锁，并在访问结束之后释放(Release)锁。在锁被占用时试图获取锁，线程会进入等待状态，直到锁被释放再次变为可用。</p>
<ol>
<li><p>二元信号量<br>二元信号量(Binary Semaphore)是一种最简单的锁，它有两种状态：占用和非占用。它适合只能被唯一一个线程独占访问的资源。当二元信号量处于非占用状态时，第一个试图获取该二元信号量锁的线程会获得该锁，并将二元信号量锁置为占用状态，之后其它试图获取该二元信号量的线程会进入等待状态，直到该锁被释放。</p>
</li>
<li><p>信号量<br>多元信号量允许多个线程访问同一个资源，多元信号量简称信号量(Semaphore)，对于允许多个线程并发访问的资源，这是一个很好的选择。一个初始值为N的信号量允许N个线程并发访问。线程访问资源时首先获取信号量锁，进行如下操作：<br>1). 将信号量的值减1；<br>2). 如果信号量的值小于0，则进入等待状态，否则继续执行；<br>访问资源结束之后，线程释放信号量锁，进行如下操作：<br>1). 将信号量的值加1；<br>2). 如果信号量的值小于1(等于0)，唤醒一个等待中的线程；</p>
</li>
<li><p>互斥量<br>互斥量(Mutex)和二元信号量类似，资源仅允许一个线程访问。与二元信号量不同的是，信号量在整个系统中可以被任意线程获取和释放，也就是说，同一个信号量可以由一个线程获取而由另一线程释放。而互斥量则要求哪个线程获取了该互斥量锁就由哪个线程释放，其它线程越俎代庖释放互斥量是无效的。</p>
</li>
<li><p>临界区<br>临界区(Critical Section)是一种比互斥量更加严格的同步手段。互斥量和信号量在系统的任何进程都是可见的，也就是说一个进程创建了一个互斥量或信号量，另一进程试图获取该锁是合法的。而临界区的作用范围仅限于本进程，其它的进程无法获取该锁。除此之处，临界区与互斥量的性质相同。</p>
</li>
<li><p>读写锁<br>读写锁(Read-Write Lock)允许多个线程同时对同一个数据进行读操作，而只允许一个线程进行写操作。这是因为读操作不会改变数据的内容，是安全的；而写操作会改变数据的内容，是不安全的。对同一个读写锁，有两种获取方式：共享的(Shared)和独占的(Exclusive)。当锁处于自由状态时，试图以任何一种方式获取锁都能成功，并将锁置为对应的状态；如果锁处于共享状态，其它线程以共享方式获取该锁，仍然能成功，此时该锁分配给了多个线程；如果其它线程试图如独占的方式获取处于共享状态的锁，它必须等待所有线程释放该锁；处于独占状态的锁阻止任何线程获取该锁，不论它们以何种方式。获取读写锁的方式总结如下：<br>|读写锁的状态    |以共享方式获取    |以独占方式获取|<br>|————|—————|————-|<br>|自由    |成功    |成功|<br>|共享    |成功    |等待|<br>|独占    |等待    |等待|</p>
</li>
</ol>
<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>任何程序至少有一个线程，即使你没有主动地创建线程，程序从一开始执行就有一个默认的线程，被称为主线程(main thread)，只有一个线程的程序称为单线程程序。</p>
<h3 id="线程使用"><a href="#线程使用" class="headerlink" title="线程使用"></a>线程使用</h3><ol>
<li>创建线程<br>在Windows平台，Windows API提供了对多线程的支持。Windows中线程相关的操作和方法：<code>CreateThread与CloseHandle</code>.<br>CreateThread用于创建一个线程，其函数原型如下：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE WINAPI <span class="title">CreateThread</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">    LPSECURITY_ATTRIBUTES   lpThreadAttributes, <span class="comment">//线程安全相关的属性，常置为NULL</span></span></span></div><div class="line"><span class="function"><span class="params">    SIZE_T                  dwStackSize,        <span class="comment">//新线程的初始化栈在大小，可设置为0</span></span></span></div><div class="line"><span class="function"><span class="params">    LPTHREAD_START_ROUTINE  lpStartAddress,     <span class="comment">//被线程执行的回调函数，也称为线程函数</span></span></span></div><div class="line"><span class="function"><span class="params">    LPVOID                  lpParameter,        <span class="comment">//传入线程函数的参数，不需传递参数时为NULL</span></span></span></div><div class="line"><span class="function"><span class="params">    DWORD                   dwCreationFlags,    <span class="comment">//控制线程创建的标志</span></span></span></div><div class="line"><span class="function"><span class="params">    LPDWORD                 lpThreadId          <span class="comment">//传出参数，用于获得线程ID，如果为NULL则不返回线程ID</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure>
<p><strong>说明：</strong><br>lpThreadAttributes：指向SECURITY_ATTRIBUTES结构的指针，决定返回的句柄是否可被子进程继承，如果为NULL则表示返回的句柄不能被子进程继承。<br>dwStackSize ：线程栈的初始化大小，字节单位。系统分配这个值对<br>lpStartAddress：指向一个函数指针，该函数将被线程调用执行。因此该函数也被称为线程函数(ThreadProc)，是线程执行的起始地址，线程函数是一个回调函数，由操作系统在线程中调用。</p>
<p>线程函数的原型如下：<br>DWORD WINAPI ThreadProc(LPVOID lpParameter);    //lpParameter是传入的参数，是一个空指针<br>lpParameter：传入线程函数(ThreadProc)的参数，不需传递参数时为NULL<br>dwCreationFlags：控制线程创建的标志，有三个类型，0：线程创建后立即执行线程；CREATE_SUSPENDED：线程创建后进入就绪状态，直到线程被唤醒时才调用；STACK_SIZE_PARAM_IS_A_RESERVATION：dwStackSize 参数指定线程初始化栈的大小，如果STACK_SIZE_PARAM_IS_A_RESERVATION标志未指定，dwStackSize将会设为系统预留的值。<br>返回值：如果线程创建成功，则返回这个新线程的句柄，否则返回NULL。如果线程创建失败，可通过GetLastError函数获得错误信息。<br>BOOL WINAPI CloseHandle(HANDLE hObject);        //关闭一个被打开的对象句柄<br>可用这个函数关闭创建的线程句柄，如果函数执行成功则返回true(非0),如果失败则返回false(0)，如果执行失败可调用GetLastError.函数获得错误信息。</p>
<p>创建一个简单的线程:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">//线程函数</span></div><div class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++ i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"子线程:i = "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        Sleep(<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0L</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//创建一个线程</span></div><div class="line">    HANDLE thread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//关闭线程</span></div><div class="line">    CloseHandle(thread);</div><div class="line">    <span class="comment">//主线程的执行路径</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++ i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"主线程:i = "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        Sleep(<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在线程函数中传入参数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME_LINE   40</span></div><div class="line"><span class="comment">//定义线程函数传入参数的结构体</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">THREAD_DATA</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> nMaxNum;</div><div class="line">    <span class="keyword">char</span> strThreadName[NAME_LINE];</div><div class="line">    __THREAD_DATA() : nMaxNum(<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(strThreadName, <span class="number">0</span>, NAME_LINE * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    &#125;</div><div class="line">&#125;THREAD_DATA;</div><div class="line"></div><div class="line"><span class="comment">//线程函数</span></div><div class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    THREAD_DATA* pThreadData = (THREAD_DATA*)lpParameter;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pThreadData-&gt;nMaxNum; ++ i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; pThreadData-&gt;strThreadName &lt;&lt; <span class="string">" --- "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        Sleep(<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0L</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//初始化线程数据</span></div><div class="line">    THREAD_DATA threadData1, threadData2;</div><div class="line">    threadData1.nMaxNum = <span class="number">5</span>;</div><div class="line">    <span class="built_in">strcpy</span>(threadData1.strThreadName, <span class="string">"线程1"</span>);</div><div class="line">    threadData2.nMaxNum = <span class="number">10</span>;</div><div class="line">    <span class="built_in">strcpy</span>(threadData2.strThreadName, <span class="string">"线程2"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//创建第一个子线程</span></div><div class="line">    HANDLE hThread1 = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, &amp;threadData1, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//创建第二个子线程</span></div><div class="line">    HANDLE hThread2 = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, &amp;threadData2, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//关闭线程</span></div><div class="line">    CloseHandle(hThread1);</div><div class="line">    CloseHandle(hThread2);</div><div class="line"></div><div class="line">    <span class="comment">//主线程的执行路径</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++ i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"主线程 === "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        Sleep(<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>线程同步</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME_LINE   40</span></div><div class="line"><span class="comment">//定义线程函数传入参数的结构体</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">THREAD_DATA</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> nMaxNum;</div><div class="line">    <span class="keyword">char</span> strThreadName[NAME_LINE];</div><div class="line"></div><div class="line">    __THREAD_DATA() : nMaxNum(<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(strThreadName, <span class="number">0</span>, NAME_LINE * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    &#125;</div><div class="line">&#125;THREAD_DATA;</div><div class="line"></div><div class="line">HANDLE g_hMutex = <span class="literal">NULL</span>;     <span class="comment">//互斥量</span></div><div class="line"></div><div class="line"><span class="comment">//线程函数</span></div><div class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    THREAD_DATA* pThreadData = (THREAD_DATA*)lpParameter;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pThreadData-&gt;nMaxNum; ++ i)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//请求获得一个互斥量锁</span></div><div class="line">        WaitForSingleObject(g_hMutex, INFINITE);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; pThreadData-&gt;strThreadName &lt;&lt; <span class="string">" --- "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        Sleep(<span class="number">100</span>);</div><div class="line">        <span class="comment">//释放互斥量锁</span></div><div class="line">        ReleaseMutex(g_hMutex);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0L</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//创建一个互斥量</span></div><div class="line">    g_hMutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="comment">//初始化线程数据</span></div><div class="line">    THREAD_DATA threadData1, threadData2;</div><div class="line">    threadData1.nMaxNum = <span class="number">5</span>;</div><div class="line">    <span class="built_in">strcpy</span>(threadData1.strThreadName, <span class="string">"线程1"</span>);</div><div class="line">    threadData2.nMaxNum = <span class="number">10</span>;</div><div class="line">    <span class="built_in">strcpy</span>(threadData2.strThreadName, <span class="string">"线程2"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//创建第一个子线程</span></div><div class="line">    HANDLE hThread1 = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, &amp;threadData1, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//创建第二个子线程</span></div><div class="line">    HANDLE hThread2 = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, &amp;threadData2, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//关闭线程</span></div><div class="line">    CloseHandle(hThread1);</div><div class="line">    CloseHandle(hThread2);</div><div class="line"></div><div class="line">    <span class="comment">//主线程的执行路径</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++ i)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//请求获得一个互斥量锁</span></div><div class="line">        WaitForSingleObject(g_hMutex, INFINITE);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"主线程 === "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        Sleep(<span class="number">100</span>);</div><div class="line">        <span class="comment">//释放互斥量锁</span></div><div class="line">        ReleaseMutex(g_hMutex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模拟火车售票系统<br>SaleTickets.h :</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strstream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME_LINE   40</span></div><div class="line"></div><div class="line"><span class="comment">//定义线程函数传入参数的结构体</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">TICKET</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> nCount;</div><div class="line">    <span class="keyword">char</span> strTicketName[NAME_LINE];</div><div class="line"></div><div class="line">    __TICKET() : nCount(<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(strTicketName, <span class="number">0</span>, NAME_LINE * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    &#125;</div><div class="line">&#125;TICKET;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">THD_DATA</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    TICKET* pTicket;</div><div class="line">    <span class="keyword">char</span> strThreadName[NAME_LINE];</div><div class="line"></div><div class="line">    __THD_DATA() : pTicket(<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(strThreadName, <span class="number">0</span>, NAME_LINE * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    &#125;</div><div class="line">&#125;THD_DATA;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">//基本类型数据转换成字符串</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="class"><span class="title">string</span> <span class="title">convertToString</span>(<span class="title">const</span> <span class="title">T</span> <span class="title">val</span>)</span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="built_in">string</span> s;</div><div class="line">    <span class="built_in">std</span>::strstream ss;</div><div class="line">    ss &lt;&lt; val;</div><div class="line">    ss &gt;&gt; s;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//售票程序</span></div><div class="line"><span class="function">DWORD WINAPI <span class="title">SaleTicket</span><span class="params">(LPVOID lpParameter)</span></span>;</div></pre></td></tr></table></figure>
<p>SaleTickets.cpp ：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SaleTickets.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> HANDLE g_hMutex;</div><div class="line"></div><div class="line"><span class="comment">//售票程序</span></div><div class="line"><span class="function">DWORD WINAPI <span class="title">SaleTicket</span><span class="params">(LPVOID lpParameter)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line">    THD_DATA* pThreadData = (THD_DATA*)lpParameter;</div><div class="line">    TICKET* pSaleData = pThreadData-&gt;pTicket;</div><div class="line">    <span class="keyword">while</span>(pSaleData-&gt;nCount &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//请求获得一个互斥量锁</span></div><div class="line">        WaitForSingleObject(g_hMutex, INFINITE);</div><div class="line">        <span class="keyword">if</span> (pSaleData-&gt;nCount &gt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; pThreadData-&gt;strThreadName &lt;&lt; <span class="string">"出售第"</span> &lt;&lt; pSaleData-&gt;nCount -- &lt;&lt; <span class="string">"的票,"</span>;</div><div class="line">            <span class="keyword">if</span> (pSaleData-&gt;nCount &gt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"出票成功!剩余"</span> &lt;&lt; pSaleData-&gt;nCount &lt;&lt; <span class="string">"张票."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"出票失败！该票已售完。"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Sleep(<span class="number">10</span>);</div><div class="line">        <span class="comment">//释放互斥量锁</span></div><div class="line">        ReleaseMutex(g_hMutex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0L</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试程序：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//售票系统</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//创建一个互斥量</span></div><div class="line">    g_hMutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="comment">//初始化火车票</span></div><div class="line">    TICKET ticket;</div><div class="line">    ticket.nCount = <span class="number">100</span>;</div><div class="line">    <span class="built_in">strcpy</span>(ticket.strTicketName, <span class="string">"北京--&gt;赣州"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> THREAD_NUMM = <span class="number">8</span>;</div><div class="line">    THD_DATA threadSale[THREAD_NUMM];</div><div class="line">    HANDLE hThread[THREAD_NUMM];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUMM; ++ i)</div><div class="line">    &#123;</div><div class="line">        threadSale[i].pTicket = &amp;ticket;</div><div class="line">        <span class="built_in">string</span> strThreadName = convertToString(i);</div><div class="line"></div><div class="line">        strThreadName = <span class="string">"窗口"</span> + strThreadName;</div><div class="line"></div><div class="line">        <span class="built_in">strcpy</span>(threadSale[i].strThreadName, strThreadName.c_str());</div><div class="line"></div><div class="line">        <span class="comment">//创建线程</span></div><div class="line">        hThread[i] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, SaleTicket, &amp;threadSale[i], <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">        <span class="comment">//请求获得一个互斥量锁</span></div><div class="line">        WaitForSingleObject(g_hMutex, INFINITE);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; threadSale[i].strThreadName &lt;&lt; <span class="string">"开始出售 "</span> &lt;&lt; threadSale[i].pTicket-&gt;strTicketName &lt;&lt; <span class="string">" 的票..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="comment">//释放互斥量锁</span></div><div class="line">        ReleaseMutex(g_hMutex);</div><div class="line"></div><div class="line">        <span class="comment">//关闭线程</span></div><div class="line">        CloseHandle(hThread[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><h3 id="进程间同步方式"><a href="#进程间同步方式" class="headerlink" title="进程间同步方式"></a>进程间同步方式</h3><ol>
<li>Mutex（互斥）可以跨进城使用</li>
<li>Semphore（信号量）可以跨进城使用等</li>
</ol>
<h3 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h3><p>进程间通信又称IPC(Inter-Process Communication),指多个进程之间相互通信，交换信息的方法。<br>进程间通讯(IPC)方法主要有以下几种: 管道/FIFO/共享内存/消息队列/信号<br>根据进程通信时信息量大小的不同,可以将进程通信划分为两大类型:<br>1、低级通信,控制信息的通信(主要用于进程之间的同步,互斥,终止和挂起等等控制信息的传递)<br>2、高级通信,大批数据信息的通信(主要用于进程间数据块数据的交换和共享,常见的高级通信有管道,消息队列,共享内存等). </p>
<p>1.管道有命名管道和非命名管道(即匿名管道)之分，非命名管道(即匿名管道)只能用于父子进程通讯，命名管道可用于非父子进程，命名管道就是FIFO，管道是先进先出的通讯方式.<br>管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。<br>命名管道 (named pipe) ： 命名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p>
<p>2.消息队列是用于两个进程之间的通讯，首先在一个进程中创建一个消息队列，然后再往消息队列中写数据，而另一个进程则从那个消息队列中取数据。<br>需要注意的是，消息队列是用创建文件的方式建立的，如果一个进程向某个消息队列中写入了数据之后，另一个进程并没有取出数据，即使向消息队列中写数据的进程已经结束，保存在消息队列中的数据并没有消失，也就是说下次再从这个消息队列读数据的时候，就是上次的数据！!<br>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。<br>消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。  </p>
<p>3.信号量，它与WINDOWS下的信号量是一样的.<br>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。不是用于交换大批数据,而用于多线程之间的同步.常作为一种锁机制,防止某进程在访问资源时其它进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>
<p>4.共享内存，类似于WINDOWS下的DLL中的共享变量，但LINUX下的共享内存区不需要像DLL这样的东西，只要首先创建一个共享内存区，其它进程按照一定的步骤就能访问到这个共享内存区中的数据，当然可读可写.<br>共享内存( shared memory )：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。<br>共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。<br>信号 ( signal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>
<p>套接字( socket ) ：套接字也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://blog.csdn.net/luoweifu/article/details/46595285" target="_blank" rel="external">编程思想之多线程与多进程</a></li>
<li><a href="https://www.zhihu.com/question/36529093/answer/67959045" target="_blank" rel="external">知乎</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OOP基本特征和基本原则]]></title>
      <url>http://arvin-he.github.io/2017/04/24/cpp-oop-2017-04-24/</url>
      <content type="html"><![CDATA[<p><img src="/2017/04/24/cpp-oop-2017-04-24/1.png" alt=""></p>
<h3 id="面向对象三个基本特征"><a href="#面向对象三个基本特征" class="headerlink" title="面向对象三个基本特征"></a>面向对象三个基本特征</h3><p>面向对象的三个基本特征是：封装、继承、多态</p>
<ul>
<li>封装</li>
</ul>
<p>封装是面向对象的特征之一，是对象和类概念的主要特性。封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p>
<ul>
<li>继承</li>
</ul>
<p>继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。</p>
<p>要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。</p>
<ul>
<li>多态性</li>
</ul>
<p>多态性（polymorphisn）是允许将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说：允许将子类类型的指针赋值给父类类型的指针。</p>
<p>实现多态，有两种方式，覆盖和重载。覆盖和重载的区别在于，覆盖在运行时决定，即运行时多态,重载是在编译时决定,即编译时多态。<br>并且覆盖和重载的机制不同，例如在 Java 中，重载方法的签名必须不同于原先方法的，但对于覆盖签名必须相同。</p>
<h3 id="面向对象类关系"><a href="#面向对象类关系" class="headerlink" title="面向对象类关系"></a>面向对象类关系</h3><p>类与类之间主要有6种关系模式，这六种模板写法导致了平时书写代码的不同耦合度。具体如下所列（耦合度依次增强排列）：</p>
<ol>
<li>依赖关系<br>一般而言，依赖关系在Java语言中体现为局域变量、方法的形参，或者对静态方法的调用。</li>
<li>关联关系<br>使一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。在Java语言中，关联关系一般使用成员变量来实现。</li>
<li>聚合关系<br>聚合是关联关系的一种，是强的关联关系，聚合是整体和个体之间的关系。与关联关系一样，聚合关系也是通过实例变量实现的，但是关联关系所涉及的两个类是处在同一层次上的，而在聚合关系中，两个类是处在不平等层次上的，一个代表整体，另一个代表部分。</li>
<li>组合关系<br>组合是关联关系的一种，是比聚合关系强的关系。它要求普通的聚合关系中代表整体的对象负责代表部分对象的生命周期，组合关系是不能共享的。代表整体的对象需要负责保持部分对象和存活，在一些情况下将负责代表部分的对象湮灭掉。代表整体的对象可以将代表部分的对象传递给另一个对象，由后者负责此对象的生命周期。换言之，代表部分的对象在每一个时刻只能与一个对象发生组合关系，由后者排他地负责生命周期。部分和整体的生命周期一样。</li>
<li>继承关系<br>继承表示类与类（或者接口与接口）之间的父子关系。</li>
<li>实现关系<br>接口定义好操作的集合，由实现类去完成接口的具体操作。</li>
</ol>
<h3 id="面向对象的基本原则"><a href="#面向对象的基本原则" class="headerlink" title="面向对象的基本原则"></a>面向对象的基本原则</h3><h4 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h4><p>单一职责原则的英文名称是 Single Responsibility Principle，简称是 SPR，简单地说就是一个类只做一件事，这个设计原则备受争议却又极其重要。<br>很多时候都是需要个人经验来界定。当然，最大的问题就是对职责的定义，什么是类的职责，以及怎么划分类的职责。</p>
<p>单一职责原则是实现高内聚、低耦合的指导方针，它是最简单但又最难运用的原则。<br>每一个职责都是变化的一个轴线，如果一个类有一个以上的职责，这些职责就耦合在了一起。这会导致脆弱的设计。当一个职责发生变化时，可能会影响其它的职责。另外，多个职责耦合在一起，会影响复用性。</p>
<p>单一职责所表达出的用意就是“单一”二字.如何划分一个类、一个函数的职责，每个人都有自己的看法，这需要根据个人经验、具体的业务逻辑而定。但是，它也有一些基本的指导原则，例如，两个完全不一样的功能就不应该放在一个类中。一个类中应该是一组相关性很高的函数、数据的封装。工程师可以不断地审视自己的代码，根据具体的业务、功能对类进行相应的拆分，我想这会是你优化代码迈出的第一步。</p>
<h4 id="2-开闭原则"><a href="#2-开闭原则" class="headerlink" title="2. 开闭原则"></a>2. 开闭原则</h4><p>开闭原则的英文全称是Open Close Principle，简称OCP.一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。当软件需要变化时，我们应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。</p>
<p>为了满足开闭原则，需要对系统进行抽象化设计，抽象化是开闭原则的关键。在Java、C#等编程语言中，可以为系统定义一个相对稳定的抽象层，而将不同的实现行为移至具体的实现层中完成。在很多面向对象编程语言中都提供了接口、抽象类等机制，可以通过它们定义系统的抽象层，再通过具体类来进行扩展。如果需要修改系统的行为，无须对抽象层进行任何改动，只需要增加新的具体类来实现新的业务功能即可，实现在不修改已有代码的基础上扩展系统的功能，达到开闭原则的要求。</p>
<p>开闭原则指导我们，当软件需要变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。这里的“应该尽量”4个字说明OCP原则并不是说绝对不可以修改原始类的，当我们嗅到原来的代码“腐化气味”时，应该尽早地重构，以使得代码恢复到正常的“进化”轨道，而不是通过继承等方式添加新的实现，这会导致类型的膨胀以及历史遗留代码的冗余。我们的开发过程中也没有那么理想化的状况，完全地不用修改原来的代码，因此，在开发过程中需要自己结合具体情况进行考量，是通过修改旧代码还是通过继承使得软件系统更稳定、更灵活，在保证去除“代码腐化”的同时，也保证原有模块的正确性。</p>
<h4 id="3-里氏代换原则"><a href="#3-里氏代换原则" class="headerlink" title="3. 里氏代换原则"></a>3. 里氏代换原则</h4><p>里氏替换原则英文全称是Liskov Substitution Principle，简称LSP.面向对象的语言的三大特点是继承、封装、多态，里氏替换原则就是依赖于继承、多态这两大特性。里氏替换原则简单来说就是所有引用基类、接口的地方必须能透明地使用其子类的对象。通俗点讲，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何报错或者异常，使用者可能根本就不需要知道是子类还是父类。但是，反过来就不行了，有子类出现的地方，父类未必就能使用。</p>
<p>在使用里氏代换原则时需要注意如下几个问题：</p>
<ol>
<li>子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。</li>
<li>我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。</li>
<li>Java语言中，在编译阶段，Java编译器会检查一个程序是否符合里氏代换原则，这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查是有局限的。</li>
</ol>
<p>里氏替换原则的核心原理是抽象，抽象又依赖于继承这个特性，在OOP当中，继承的优缺点都相当明显。 </p>
<ul>
<li><p>继承的优点如下：<br>（1）代码重用，减少创建类的成本，每个子类都拥有父类的方法和属性；<br>（2）子类与父类基本相似，但又与父类有所区别；<br>（3）提高代码的可扩展性。</p>
</li>
<li><p>继承的缺点如下：<br>（1）继承是侵入性的，只要继承就必须拥有父类的所有属性和方法；<br>（2）可能造成子类代码冗余、灵活性降低，因为子类必须拥有父类的属性和方法。</p>
</li>
</ul>
<h4 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4. 接口隔离原则"></a>4. 接口隔离原则</h4><p>接口隔离原则英文全称是InterfaceSegregation Principles，简称ISP.使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。另一种定义是：类间的依赖关系应该建立在最小的接口上。接口隔离原则将非常庞大、臃肿的接口拆分成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。接口隔离原则的目的是系统解开耦合，从而容易重构、更改和重新部署。</p>
<p>这里的“接口”往往有两种不同的含义：<br>一种是指一个类型所具有的方法特征的集合，仅仅是一种逻辑上的抽象；<br>另外一种是指某种语言具体的“接口”定义，有严格的定义和结构，比如Java语言中的interface。<br>对于这两种不同的含义，ISP的表达方式以及含义都有所不同：</p>
<p>当把“接口”理解成一个类型所提供的所有方法特征的集合的时候，这就是一种逻辑上的概念，接口的划分将直接带来类型的划分。可以把接口理解成角色，一个接口只能代表一个角色，每个角色都有它特定的一个接口，此时，这个原则可以叫做“角色隔离原则”。</p>
<p>如果把“接口”理解成狭义的特定语言的接口，那么ISP表达的意思是指接口仅仅提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的单独的接口，而不要提供大的总接口。在面向对象编程语言中，实现一个接口就需要实现该接口中定义的所有方法，因此大的总接口使用起来不一定很方便，为了使接口的职责单一，需要将大接口中的方法根据其职责不同分别放在不同的小接口中，以确保每个接口使用起来都较为方便，并都承担某一单一角色。接口应该尽量细化，同时接口中的方法应该尽量少，每个接口中只包含一个客户端（如子模块或业务逻辑类）所需的方法即可，这种机制也称为“定制服务”，即为不同的客户端提供宽窄不同的接口。</p>
<h4 id="5-迪米特法则"><a href="#5-迪米特法则" class="headerlink" title="5. 迪米特法则"></a>5. 迪米特法则</h4><p>迪米特原则英文全称为Law of Demeter，简称LOD，也称为最少知识原则（Least Knowledge Principle）.一个软件实体应当尽可能少地与其他实体发生相互作用.通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现、如何复杂都与调用者或者依赖者没关系，调用者或者依赖者只需要知道他需要的方法即可，其他的我一概不关心。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。</p>
<p>迪米特原则还有一个英文解释是：Only talk to your immedate friends（只与直接的朋友通信）。什么叫做直接的朋友呢？每个对象都必然会与其他对象有耦合关系，两个对象之间的耦合就成为朋友关系，这种关系的类型有很多例如组合、聚合、依赖等。</p>
<p>如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。<br>迪米特法则还有几种定义形式，包括：不要和“陌生人”说话、只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：<br>(1) 当前对象本身(this)；<br>(2) 以参数形式传入到当前对象方法中的对象；<br>(3) 当前对象的成员对象；<br>(4) 如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；<br>(5) 当前对象所创建的对象。<br>任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。在应用迪米特法则时，一个对象只能与直接朋友发生交互，不要与“陌生人”发生直接交互，这样做可以降低系统的耦合度，一个对象的改变不会给太多其他对象带来影响。</p>
<p>迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。</p>
<p>在将迪米特法则运用到系统设计中时，要注意下面的几点：在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；在类的设计上，只要有可能，一个类型应当设计成不变类；在对其他类的引用上，一个对象对其他对象的引用应当降到最低。</p>
<h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p>具体依赖抽象，上层依赖下层。假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类；而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口；这样就达到了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。</p>
<p>赖倒置原则的几个关键点如下。</p>
<ul>
<li>高层模块不应该依赖底层模块，两者都应该依赖其抽象。</li>
<li>抽象不应该依赖细节。</li>
<li>细节应该依赖抽象。</li>
</ul>
<p>采用依赖倒置原则可以减少类之间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性。</p>
<h4 id="7-合成复用原则"><a href="#7-合成复用原则" class="headerlink" title="7. 合成复用原则"></a>7. 合成复用原则</h4><p>尽量使用对象组合，而不是继承来达到复用的目的。</p>
<p>合成复用原则就是在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用功能的目的。简言之：复用时要尽量使用组合/聚合关系（关联关系），少用继承。</p>
<p>在面向对象设计中，可以通过两种方法在不同的环境中复用已有的设计和实现，即通过组合/聚合关系或通过继承，但首先应该考虑使用组合/聚合，组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p>
<p>通过继承来进行复用的主要问题在于继承复用会破坏系统的封装性，因为继承会将基类的实现细节暴露给子类，由于基类的内部细节通常对子类来说是可见的，所以这种复用又称“白箱”复用，如果基类发生改变，那么子类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；而且继承只能在有限的环境中使用（如类没有声明为不能被继承）</p>
<p>由于组合或聚合关系可以将已有的对象（也可称为成员对象）纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做可以使得成员对象的内部实现细节对于新对象不可见，所以这种复用又称为“黑箱”复用，相对继承关系而言，其耦合度相对较低，成员对象的变化对新对象的影响不大，可以在新对象中根据实际需要有选择性地调用成员对象的操作；合成复用可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。</p>
<p>一般而言，如果两个类之间是“Has-A”的关系应使用组合或聚合，如果是“Is-A”关系可使用继承。”Is-A”是严格的分类学意义上的定义，意思是一个类是另一个类的”一种”；而”Has-A”则不同，它表示某一个角色具有某一项责任。</p>
<h4 id="写在最后的话"><a href="#写在最后的话" class="headerlink" title="写在最后的话"></a>写在最后的话</h4><p>设计模式的四大要素中就明确指出，模式的运用应该根据软件系统所面临的问题来决定是否需要使用现有的设计。也就是说，再出现问题或者你预计会出现那样的问题时，才推荐使用特定的设计模式，而不是将各种设计模式套进你的软件中。</p>
<p>不管在设计、实现、测试之间有多少时间都应该避免过度设计，它会打破你的反馈回路，使你的设计得不到反馈，从而慢慢陷入危险中。所以你只需要保持简单的设计，这样就有时间来测试该设计是否真的可行，然后作出最后的决策。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://wubaoguo.com/2015/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/" target="_blank" rel="external">面向对象设计的基本原则</a></li>
<li><a href="https://itsmelo.github.io/2016/11/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">面向对象六大原则和设计模式</a></li>
<li><a href="http://blog.csdn.net/yanbober/article/details/45312243" target="_blank" rel="external"> 设计模式之面向对象七大基本原则</a></li>
<li><a href="http://blog.csdn.net/yanbober/article/details/45312127" target="_blank" rel="external">设计模式之面向对象与类基础特征概念</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第六章]]></title>
      <url>http://arvin-he.github.io/2017/04/23/http-note6-2017-04-23/</url>
      <content type="html"><![CDATA[<h3 id="http首部"><a href="#http首部" class="headerlink" title="http首部"></a>http首部</h3><p>http首部内容为客户端和服务器分别处理请求和响应提供所需要的信息</p>
<p><img src="http-note6-2017-04-23/1.jpg" alt=""></p>
<h3 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h3><p>在请求中，HTTP 报文由方法、URI、HTTP 版本、HTTP 首部字段等部分构成。</p>
<h3 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h3><p>在响应中，HTTP 报文由 HTTP 版本、状态码（数字和原因短语）、HTTP 首部字段 3 部分构成.</p>
<h3 id="HTTP-首部字段"><a href="#HTTP-首部字段" class="headerlink" title="HTTP 首部字段"></a>HTTP 首部字段</h3><p>HTTP 首部字段是由首部字段名和字段值构成的，中间用冒号“:” 分隔。</p>
<p>HTTP 首部字段根据实际用途被分为以下 4 种类型。<br>通用首部字段（General Header Fields）<br>请求报文和响应报文两方都会使用的首部。</p>
<p>请求首部字段（Request Header Fields）<br>从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</p>
<p>响应首部字段（Response Header Fields）<br>从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</p>
<p>实体首部字段（Entity Header Fields）<br>针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。</p>
<h3 id="HTTP-1-1-首部字段一览"><a href="#HTTP-1-1-首部字段一览" class="headerlink" title="HTTP/1.1 首部字段一览"></a>HTTP/1.1 首部字段一览</h3><h4 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h4><p>首部字段名 说明<br>Cache-Control 控制缓存的行为<br>指令的参数是可选的，多个指令之间通过“,”分隔</p>
<p>Connection 逐跳首部、连接的管理<br>Date 创建报文的日期时间<br>Pragma 报文指令<br>Trailer 报文末端的首部一览<br>Transfer-Encoding 指定报文主体的传输编码方式<br>Upgrade 升级为其他协议<br>Via 代理服务器的相关信息<br>Warning 错误通知</p>
<h4 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h4><p>首部字段名 说明<br>Accept 用户代理可处理的媒体类型<br>Accept-Charset 优先的字符集<br>Accept-Encoding 优先的内容编码<br>Accept-Language 优先的语言（自然语言）<br>Authorization Web认证信息<br>Expect 期待服务器的特定行为<br>From 用户的电子邮箱地址<br>Host 请求资源所在服务器<br>If-Match 比较实体标记（ETag）<br>If-Modified-Since 比较资源的更新时间<br>If-None-Match 比较实体标记（与 If-Match 相反）<br>If-Range 资源未更新时发送实体 Byte 的范围请求<br>If-Unmodified-Since 比较资源的更新时间（与If-Modified-Since相反）<br>Max-Forwards 最大传输逐跳数<br>Proxy-Authorization 代理服务器要求客户端的认证信息<br>Range 实体的字节范围请求<br>Referer 对请求中 URI 的原始获取方<br>TE 传输编码的优先级<br>User-Agent HTTP 客户端程序的信息</p>
<h4 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h4><p>首部字段名 说明<br>Accept-Ranges 是否接受字节范围请求<br>Age 推算资源创建经过时间<br>ETag 资源的匹配信息<br>Location 令客户端重定向至指定URI<br>Proxy-Authenticate 代理服务器对客户端的认证信息<br>Retry-After 对再次发起请求的时机要求<br>Server HTTP服务器的安装信息<br>Vary 代理服务器缓存的管理信息<br>WWW-Authenticate 服务器对客户端的认证信息</p>
<h4 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h4><p>首部字段名 说明<br>Allow 资源可支持的HTTP方法<br>Content-Encoding 实体主体适用的编码方式<br>Content-Language 实体主体的自然语言<br>Content-Length 实体主体的大小（单位：字节）<br>Content-Location 替代对应资源的URI<br>Content-MD5 实体主体的报文摘要<br>Content-Range 实体主体的位置范围<br>Content-Type 实体主体的媒体类型<br>Expires 实体主体过期的日期时间<br>Last-Modified 资源的最后修改日期时间</p>
<h4 id="End-to-end-首部和-Hop-by-hop-首部"><a href="#End-to-end-首部和-Hop-by-hop-首部" class="headerlink" title="End-to-end 首部和 Hop-by-hop 首部"></a>End-to-end 首部和 Hop-by-hop 首部</h4><p>HTTP 首部字段将定义成缓存代理和非缓存代理的行为，分成 2 种类型。<br>端到端首部（End-to-end Header）<br>分在此类别中的首部会转发给请求 / 响应对应的最终接收目标，且必<br>须保存在由缓存生成的响应中，另外规定它必须被转发。</p>
<p>逐跳首部（Hop-by-hop Header）<br>分在此类别中的首部只对单次转发有效，会因通过缓存或代理而不再转发。HTTP/1.1 和之后版本中，如果要使用 hop-by-hop 首部，需提供 Connection 首部字段。</p>
<h4 id="其他所有字段都属于端到端首部。"><a href="#其他所有字段都属于端到端首部。" class="headerlink" title="其他所有字段都属于端到端首部。"></a>其他所有字段都属于端到端首部。</h4><p>Connection<br>Keep-Alive<br>Proxy-Authenticate<br>Proxy-Authorization<br>Trailer<br>TE<br>Transfer-Encoding<br>Upgrade</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之subprocess模块]]></title>
      <url>http://arvin-he.github.io/2017/04/22/python-subprocess-2017-04-22/</url>
      <content type="html"><![CDATA[<h3 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h3><p>subprocess模块,即子进程模块,允许您生成新进程，并连接到输入/输出/错误管道，并获取其返回代码。<br>subprocess包主要功能是执行外部的命令和程序。</p>
<h3 id="subprocess模块使用"><a href="#subprocess模块使用" class="headerlink" title="subprocess模块使用"></a>subprocess模块使用</h3><p>subprocess包中定义有数个创建子进程的函数，这些函数分别以不同的方式创建子进程，可以根据需要来从中选取一个使用。另外subprocess还提供了一些管理标准流(standard stream)和管道(pipe)的工具，从而在进程间使用文本通信。</p>
<p>使用subprocess包中的函数创建子进程的时候，要注意:</p>
<ul>
<li>在创建子进程之后，父进程是否暂停，并等待子进程运行</li>
<li>函数返回什么</li>
<li>当returncode不为0时，父进程如何处理</li>
</ul>
<p>subprocess.call()<br>父进程等待子进程完成<br>返回退出信息(returncode，相当于exit code，见Linux进程基础)</p>
<p>subprocess.check_call()<br>父进程等待子进程完成<br>返回0<br>检查退出信息，如果returncode不为0，则举出错误subprocess.CalledProcessError，该对象包含有returncode属性，可用try…except…来检查(见Python错误处理)。</p>
<p>subprocess.check_output()<br>父进程等待子进程完成<br>返回子进程向标准输出的输出结果<br>检查退出信息，如果returncode不为0，则举出错误subprocess.CalledProcessError，该对象包含有returncode属性和output属性，output属性为标准输出的输出结果，可用try…except…来检查。</p>
<p>这三个函数的使用方法相类似，以subprocess.call()来说明:<br>我们将程序名(ls)和所带的参数(-l)一起放在一个表中传递给subprocess.call()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">rc = subprocess.call([<span class="string">"ls"</span>,<span class="string">"-l"</span>])</div><div class="line">subprocess.check_call(</div><div class="line">            [<span class="string">"svn"</span>, <span class="string">"export"</span>, <span class="string">"--force"</span>, <span class="string">"--revision"</span>, revision, src, dst],</div><div class="line">            stdout=subprocess.DEVNULL)</div><div class="line">output = subprocess.check_output(</div><div class="line">        [<span class="string">"svn"</span>, <span class="string">"log"</span>, svn_path, <span class="string">"-v"</span>, <span class="string">"--limit"</span>, <span class="string">"1"</span>]).decode(<span class="string">"gbk"</span>).strip()</div></pre></td></tr></table></figure></p>
<p>也可以通过一个shell来解释一整个字符串:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">out = subprocess.call(<span class="string">"ls -l"</span>, shell=<span class="keyword">True</span>)</div><div class="line">out = subprocess.call(<span class="string">"cd .."</span>, shell=<span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>上面使用了shell=True这个参数。这个时候，我们使用一整个字符串，而不是一个列表来运行子进程。<br>Python将先运行一个shell，再用这个shell来解释这整个字符串。</p>
<p>关于Popen()<br>实际上，上面的三个函数都是基于Popen()的封装(wrapper)。这些封装的目的在于让我们容易使用子进程。<br>当我们想要更个性化的需求的时候，就要转向Popen类，该类生成的对象用来代表子进程。<br>与上面的封装不同，Popen对象创建后，主程序不会自动等待子进程完成。我们必须调用对象的wait()方法，父进程才会等待 (也就是阻塞block)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">child = subprocess.Popen([<span class="string">"ping"</span>,<span class="string">"-c"</span>,<span class="string">"5"</span>,<span class="string">"www.google.com"</span>])</div><div class="line">print(<span class="string">"parent process"</span>)</div></pre></td></tr></table></figure></p>
<p>从运行结果中看到，父进程在开启子进程之后并没有等待child的完成，而是直接运行print。<br>对比等待的情况:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">child = subprocess.Popen([<span class="string">"ping"</span>,<span class="string">"-c"</span>,<span class="string">"5"</span>,<span class="string">"www.google.com"</span>])</div><div class="line">child.wait()</div><div class="line">print(<span class="string">"parent process"</span>)</div></pre></td></tr></table></figure></p>
<p>此外，你还可以在父进程中对子进程进行其它操作，比如我们上面例子中的child对象:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">child.poll()           # 检查子进程状态</div><div class="line">child.kill()           # 终止子进程</div><div class="line">child.send_signal()    # 向子进程发送信号</div><div class="line">child.terminate()      # 终止子进程</div></pre></td></tr></table></figure></p>
<p>子进程的PID存储在child.pid</p>
<p>子进程的文本流控制<br>沿用child子进程) 子进程的标准输入，标准输出和标准错误也可以通过如下属性表示:</p>
<ul>
<li>child.stdin</li>
<li>child.stdout</li>
<li>child.stderr</li>
</ul>
<p>我们可以在Popen()建立子进程的时候改变标准输入、标准输出和标准错误，并可以利用subprocess.PIPE将多个子进程的输入和输出连接在一起，构成管道(pipe):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">child1 = subprocess.Popen([<span class="string">"ls"</span>,<span class="string">"-l"</span>], stdout=subprocess.PIPE)</div><div class="line">child2 = subprocess.Popen([<span class="string">"wc"</span>], stdin=child1.stdout,stdout=subprocess.PIPE)</div><div class="line">out = child2.communicate()</div><div class="line">print(out)</div></pre></td></tr></table></figure></p>
<p>subprocess.PIPE实际上为文本流提供一个缓存区。child1的stdout将文本输出到缓存区，随后child2的stdin从该PIPE中将文本读取走。child2的输出文本也被存放在PIPE中，直到communicate()方法从PIPE中读取出PIPE中的文本。<br>要注意的是，communicate()是Popen对象的一个方法，该方法会阻塞父进程，直到子进程完成。</p>
<p>我们还可以利用communicate()方法来使用PIPE给子进程输入:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">child = subprocess.Popen([<span class="string">"cat"</span>], stdin=subprocess.PIPE)</div><div class="line">child.communicate(<span class="string">"vamei"</span>.encode())</div></pre></td></tr></table></figure></p>
<p>我们启动子进程之后，cat会等待输入，直到我们用communicate()输入”vamei”。</p>
<p>调用subprocess模块的推荐方法是:推荐使用run()函数来处理几乎所有用例或情景。对于更高级的用例，可以直接使用基础的Popen接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, shell=False, timeout=None, check=False, encoding=None, errors=None)</div></pre></td></tr></table></figure></p>
<p>运行由args描述的命令。等待命令完成，然后返回一个CompletedProcess实例。<br>完整的run函数签名与Popen构造函数大致相同(除了超时，输入和检查外)，该函数的所有参数都传递给该接口。<br>默认情况下，这不捕获stdout或stderr。要做到这一点，通过PIPE的stdout和/或stderr参数。<br>超时参数传递给Popen.communicate（）。如果超时过期，则子进程将被杀死并等待。在子进程终止后，将重新提出TimeoutExpired异常。<br>输入的参数传递给Popen.communicate（），从而传递给子进程的stdin。如果使用，它必须是一个字节序列，如果指定了编码或错误，或者是universal_newlines为真，则为字符串。使用时，内部Popen对象将自动使用stdin = PIPE创建，并且stdin参数也可能不被使用。<br>如果检查为真，并且进程以非零退出代码退出，则将引发CalledProcessError异常。该异常的属性保存参数，退出代码以及stdout和stderr（如果被捕获）。<br>如果指定了编码或错误，或者universal_newlines为true，则使用指定的编码和错误或io.TextIOWrapper默认文件在文本模式下打开stdin，stdout和stderr的文件对象。否则，文件对象将以二进制模式打开。</p>
<p>args是所有调用所必需的，应该是一个字符串或一系列程序参数。通常优选提供参数序列，因为它允许模块处理任何所需的转义和引用参数（例如，允许文件名中的空格）。如果传递单个字符串，则shell必须为True（见下文），否则字符串必须简单地命名要执行的程序，而不指定任何参数。</p>
<h3 id="Popen构造函数"><a href="#Popen构造函数" class="headerlink" title="Popen构造函数"></a>Popen构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, encoding=None, errors=None)</div></pre></td></tr></table></figure>
<p>在新进程中执行子程序。在POSIX上，该类使用os.execvp（）类似的行为来执行子程序。在Windows上，该类使用Windows CreateProcess（）函数.<br>args应该是程序参数的序列，或者是一个单个的字符串。默认情况下，如果args是序列，则要执行的程序是args中的第一个项目。如果args是字符串，则解释是平台依赖的，并在下面描述。请参阅shell和可执行参数，以获得与默认行为的更多差异。除非另有说明，否则建议将args作为序列。</p>
<p>在Windows上，如果args是一个序列，它将以转换参数序列到Windows上的字符串中所述的方式转换为字符串。这是因为底层的CreateProcess（）对字符串运行.<br>shell参数（默认为False）指定是否使用shell作为程序执行。如果shell为True，则建议将args作为字符串而不是序列传递。</p>
<h3 id="Popen-Objects-Popen对象"><a href="#Popen-Objects-Popen对象" class="headerlink" title="Popen Objects(Popen对象)"></a>Popen Objects(Popen对象)</h3><p>Popen类的实例有以下几种方法：<br>Popen.poll():检查子进程是否终止。设置并返回returncode属性。<br>Popen.wait(timeout=None):等待子进程终止。设置并返回returncode属性.如果进程在超时秒后没有终止，请引发超时突发异常。捕获这个异常是安全的，并重试等待。<br>当使用stdout = PIPE或stderr = PIPE时，这将会死锁，并且子进程向管道生成足够的输出，从而阻止等待OS管道缓冲区接受更多数据。使用Popen.communicate（）使用管道避免这种情况。<br>Popen.communicate(input=None, timeout=None):与进程交互：将数据发送到stdin。从stdout和stderr读取数据，直到文件到达。等待进程终止。可选的输入参数应该是要发送到子进程的数据，否则，如果没有数据发送给子进程，则为None。如果流以文本模式打开，则输入必须是字符串。否则，它必须是字节。<br>communication（）返回一个元组（stdout_data，stderr_data）。如果流以文本模式打开，数据将为字符串;否则，字节。<br>请注意，如果要将数据发送到进程的stdin，则需要使用stdin = PIPE创建Popen对象。类似地，要在结果元组中获得除None之外的任何内容，您还需要给出stdout = PIPE和/或stderr = PIPE.<br>如果进程在超时秒后没有终止，则会引发一个TimeoutExpired异常。捕捉此异常并重试通信不会丢失任何输出。<br>如果超时过期，子进程不会被终止，所以为了正确清理，运行良好的应用程序应该杀死子进程并完成通信：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">proc = subprocess.Popen(...)</div><div class="line">try:</div><div class="line">    outs, errs = proc.communicate(timeout=15)</div><div class="line">except TimeoutExpired:</div><div class="line">    proc.kill()</div><div class="line">    outs, errs = proc.communicate()</div></pre></td></tr></table></figure></p>
<p>读取的数据被缓冲在内存中，因此如果数据很大或无限制，则不要使用此方法。</p>
<p>Popen.terminate():</p>
<h3 id="旧的高级API"><a href="#旧的高级API" class="headerlink" title="旧的高级API"></a>旧的高级API</h3><p>在Python 3.5之前，这subprocess中函数中的check_output, check_call, call这三个函数包含了高级API到子进程。现在可以在很多情况下使用run（），但很多现有的代码调用这些函数。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之一些杂记]]></title>
      <url>http://arvin-he.github.io/2017/04/22/python-reviewcode1-2017-04-22/</url>
      <content type="html"><![CDATA[<h3 id="1-取指定文件所在目录的父目录"><a href="#1-取指定文件所在目录的父目录" class="headerlink" title="1. 取指定文件所在目录的父目录"></a>1. 取指定文件所在目录的父目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">方式1: os.path.dirname(os.path.dirname(__file__))</div><div class="line">方式2: os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</div></pre></td></tr></table></figure>
<p>dirname是获取输入路径的目录.<br>尽量用方式2,方式1有风险,当你将目录切到当前的脚本所在的目录时并运行该脚本,输出的目录是空.方式2就不会存在这种问题.看下面的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">print(&quot;file1 = &#123;&#125;&quot;.format(__file__))</div><div class="line">print(&quot;file2 = &#123;&#125;&quot;.format(os.path.abspath(__file__)))</div><div class="line">print(&quot;dir1 = &#123;&#125;&quot;.format(os.path.dirname(__file__)))</div><div class="line">print(&quot;dir2 = &#123;&#125;&quot;.format(os.path.dirname(os.path.dirname(__file__))))</div><div class="line">print(&quot;dir3 = &#123;&#125;&quot;.format(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))</div><div class="line"></div><div class="line">输出结果:</div><div class="line">F:\2.2&gt;python _build/translate.py</div><div class="line">file1 = _build/translate.py</div><div class="line">file2 = F:\2.2\_build\translate.py</div><div class="line">dir1 = _build</div><div class="line">dir2 =</div><div class="line">dir3 = F:\2.2</div></pre></td></tr></table></figure></p>
<h3 id="2-pwd-pwd与cwd"><a href="#2-pwd-pwd与cwd" class="headerlink" title="2. pwd,$pwd与cwd"></a>2. pwd,$pwd与cwd</h3><p>都指某个进程运行时所在的目录.<br>pwd 是linux 自带的命令.全称:pathname of the current working directory.<br>$PWD 是个系统变量<br>cwd: 不是系统自带的命令, 但是属于系统的属性.全称: current working directory . 不但在 /proc/{id} 这个目录下可以看到cwd, 在很多其他的编程语言中也可以看到( 例如grunt ).<br>有时候 pwd 与 $PWD  给出的结果不同.</p>
<h3 id="3-decode与encode"><a href="#3-decode与encode" class="headerlink" title="3. decode与encode"></a>3. decode与encode</h3>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第五章]]></title>
      <url>http://arvin-he.github.io/2017/04/18/http-note5-2017-04-18/</url>
      <content type="html"><![CDATA[<h3 id="与-HTTP-协作的-Web-服务器"><a href="#与-HTTP-协作的-Web-服务器" class="headerlink" title="与 HTTP 协作的 Web 服务器"></a>与 HTTP 协作的 Web 服务器</h3><p>一台 Web 服务器可搭建多个独立域名的 Web 网站，也可作为通信路径上的中转服务器提升传输效率。</p>
<h3 id="用单台虚拟主机实现多个域名"><a href="#用单台虚拟主机实现多个域名" class="headerlink" title="用单台虚拟主机实现多个域名"></a>用单台虚拟主机实现多个域名</h3><p>HTTP/1.1 规范允许一台 HTTP 服务器搭建多个 Web 站点<br>提供 Web 托管服务（Web Hosting Service）的供应商，可以用一台服务器为多位客户服务，也可以以每位客户持有的域名运行各自不同的网站。这是因为利用了虚拟主机（Virtual Host，又称虚拟服务器）的功能。<br>即使物理层面只有一台服务器，但只要使用虚拟主机的功能，则可以假想已具有多台服务器。</p>
<p>如果一台服务器内托管了 www.tricorder.jp 和 www.hackr.jp 这两个域名，当收到请求时就需要弄清楚究竟要访问哪个域名。<br>在相同的 IP 地址下，由于虚拟主机可以寄存多个不同主机名和域名的 Web 网站，因此在发送 HTTP 请求时，必须在 Host 首部内完整指定主机名或域名的 URI。</p>
<h3 id="通信数据转发程序-：代理、网关、隧道"><a href="#通信数据转发程序-：代理、网关、隧道" class="headerlink" title="通信数据转发程序 ：代理、网关、隧道"></a>通信数据转发程序 ：代理、网关、隧道</h3><p>HTTP 通信时，除客户端和服务器以外，还有一些用于通信数据转发的应用程序，例如代理、网关和隧道。它们可以配合服务器工作.<br>这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接收从那台服务器发送的响应再转发给客户端。</p>
<ol>
<li>代理<br>代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变请求 URI，会直接发送给前方持有资源的目标服务器。<br>持有资源实体的服务器被称为源服务器。从源服务器返回的响应经过代理服务器后再传给客户端。<br>在 HTTP 通信过程中，可级联多台代理服务器。请求和响应的转发会经过数台类似锁链一样连接起来的代理服务器。转发时，需要附加Via 首部字段以标记出经过的主机信息。<br>使用代理服务器的理由有：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的，等等。<br>代理有多种使用方法，按两种基准分类。一种是是否使用缓存，另一种是是否会修改报文。</li>
</ol>
<ul>
<li>缓存代理<br>代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获<br>取资源，而是将之前缓存的资源作为响应返回。</li>
<li>透明代理<br>转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。</li>
</ul>
<ol>
<li>网关<br>网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。<br>网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供非 HTTP 协议服务。利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信线路上加密以确保连接的安全。比如，网关可以连接数据库，使用SQL 语句查询数据。另外，在 Web 购物网站上进行信用卡结算时，网关可以和信用卡结算系统联动。</li>
<li>隧道<br>隧道是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。<br>隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。<br>隧道本身不会去解析 HTTP 请求。也就是说，请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。<br>隧道本身是透明的，客户端不用在意隧道的存在.</li>
</ol>
<h3 id="保存资源的缓存"><a href="#保存资源的缓存" class="headerlink" title="保存资源的缓存"></a>保存资源的缓存</h3><p>缓存是指代理服务器或客户端本地磁盘内保存的资源副本。利用缓存可减少对源服务器的访问，因此也就节省了通信流量和通信时间。<br>缓存服务器是代理服务器的一种，并归类在缓存代理类型中。换句话说，当代理转发从服务器返回的响应时，代理服务器将会保存一份资源的副本。<br>缓存服务器的优势在于利用缓存可避免多次从源服务器转发资源。因此客户端可就近从缓存服务器上获取资源，而源服务器也不必多次处理相同的请求了。</p>
<h4 id="缓存的有效期限"><a href="#缓存的有效期限" class="headerlink" title="缓存的有效期限"></a>缓存的有效期限</h4><p>当遇上源服务器上的资源更新时，如果还是使用不变的缓存，那就会演变成返回更新前的“旧”资源了。<br>即使存在缓存，也会因为客户端的要求、缓存的有效期等因素，向源服务器确认资源的有效性。若判断缓存失效，缓存服务器将会再次从源服务器上获取“新”资源。</p>
<h4 id="客户端的缓存"><a href="#客户端的缓存" class="headerlink" title="客户端的缓存"></a>客户端的缓存</h4><p>缓存不仅可以存在于缓存服务器内，还可以存在客户端浏览器中。以Internet Explorer 程序为例，把客户端缓存称为临时网络文件（Temporary Internet File）。<br>浏览器缓存如果有效，就不必再向服务器请求相同的资源了，可以直接从本地磁盘内读取。<br>另外，和缓存服务器相同的一点是，当判定缓存过期后，会向源服务器确认资源的有效性。若判断浏览器缓存失效，浏览器会再次请求新资源。</p>
<h3 id="在-HTTP-出现之前的协议"><a href="#在-HTTP-出现之前的协议" class="headerlink" title="在 HTTP 出现之前的协议"></a>在 HTTP 出现之前的协议</h3><ul>
<li>FTP（File Transfer Protocol）<br>传输文件时使用的协议。该协议历史久远，可追溯到 1973 年前后，比 TCP/IP 协议族的出现还要早。虽然它在 1995 年被 HTTP 的流量（Traffic）超越，但时至今日，仍被广泛沿用。</li>
<li>NNTP（Network News Transfer Protocol）<br>用于 NetNews 电子会议室内传送消息的协议。在 1986 年前后出现，属于比较古老的一类协议。现在，利用 Web 交换信息已成主流，所以该协议已经不怎么使用了。</li>
<li>Archie<br>搜索 anonymous FTP 公开的文件信息的协议。1990 年前后出现，现在已经不常使用。</li>
<li>WAIS（Wide Area Information Servers）<br>以关键词检索多个数据库使用的协议。1991 年前后出现。由于现在已经被 HTTP 协议替代，也已经不怎么使用了。</li>
<li>Gopher<br>查找与互联网连接的计算机内信息的协议。1991 年前后出现，由于现在已经被 HTTP 协议替代，也已经不怎么使用了。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第四章]]></title>
      <url>http://arvin-he.github.io/2017/04/17/http-note4-2017-04-17/</url>
      <content type="html"><![CDATA[<h3 id="返回结果的-HTTP-状态码"><a href="#返回结果的-HTTP-状态码" class="headerlink" title="返回结果的 HTTP 状态码"></a>返回结果的 HTTP 状态码</h3><p>HTTP 状态码负责表示客户端 HTTP 请求的返回结果、标记服务器端的处理是否正常、通知出现的错误等工作。</p>
<p>状态码的类别</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">类别</th>
<th style="text-align:left">原因短语</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1XX</td>
<td style="text-align:left">Informational（信息性状态码）</td>
<td style="text-align:left">接收的请求正在处理</td>
</tr>
<tr>
<td style="text-align:left">2XX</td>
<td style="text-align:left">Success（成功状态码）</td>
<td style="text-align:left">请求正常处理完毕</td>
</tr>
<tr>
<td style="text-align:left">3XX</td>
<td style="text-align:left">Redirection（重定向状态码）</td>
<td style="text-align:left">需要进行附加操作以完成请求</td>
</tr>
<tr>
<td style="text-align:left">4XX</td>
<td style="text-align:left">Client Error（客户端错误状态码）</td>
<td style="text-align:left">服务器无法处理请求</td>
</tr>
<tr>
<td style="text-align:left">5XX</td>
<td style="text-align:left">Server Error（服务器错误状态码）</td>
<td style="text-align:left">服务器处理请求出错</td>
</tr>
</tbody>
</table>
<p>仅记录在 RFC2616 上的 HTTP 状态码就达 40 种，若再加上<br>WebDAV（Web-based Distributed Authoring and Versioning，基于万维网的分布式创作和版本控制）（RFC4918、5842） 和附加 HTTP 状态码<br>(RFC6585)等扩展，数量就达 60 余种,实际上经常使用的大概只有 14 种.</p>
<h3 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h3><p>2XX 的响应结果表明请求被正常处理了。</p>
<h4 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h4><p>该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。另外，也不允许返回任何实体的主体。比如，当从浏览器发出请求处理后，返回 204 响应，那么浏览器显示的页面不发生更新。<br>一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。</p>
<h4 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h4><p>该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</p>
<h3 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h3><p>3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p>
<h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><p>永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。也就是说，如果已经把资源对应的 URI保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。</p>
<h4 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h4><p>临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。<br>302 状态码代表的资源不是被永久移动，只是临时性质的。换句话说，已移动的资源对应的URI 将来还有可能发生改变。比如，用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。</p>
<h4 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h4><p>该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET方法定向获取请求的资源。<br>303 状态码和 302 Found 状态码有着相同的功能，但 303 状态码明确表示客户端应当采用 GET 方法获取资源，这点与 302 状态码有区别。</p>
<h4 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h4><p>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。<br>附带条件的请求是指采用 GET 方法的请求报文中包含 If-Match，If-Modified-Since，If-None-Match，If-Range,If-Unmodified-Since 中任一首部。</p>
<h4 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h4><p>临时重定向。该状态码与 302 Found 有着相同的含义。尽管 302 标准禁止 POST 变换成 GET，但实际使用时大家并不遵守。307 会遵照浏览器标准，不会从 POST 变成 GET。但是，对于处理响应时的行为，每种浏览器有可能出现不同的情况。</p>
<h3 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h3><p>4XX 的响应结果表明<strong>客户端</strong>是发生错误的原因所在。</p>
<h4 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h4><p>该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。</p>
<h4 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h4><p>该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。另外若之前已进行过 1 次请求，则表示用户认证失败。<br>返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询（challenge）用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。</p>
<h4 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h4><p>该状态码表明对请求资源的访问被服务器拒绝了。服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样就能让用户看到了.<br>未获得文件系统的访问授权，访问权限出现某些问题（从未授权的发送源 IP 地址试图访问）等列举的情况都可能是发生 403 的原因。</p>
<h4 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h4><p>该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p>
<h3 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h3><p>5XX 的响应结果表明<strong>服务器</strong>本身发生错误。</p>
<h4 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h4><p>该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web应用存在的 bug 或某些临时的故障。</p>
<h4 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h4><p>该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入RetryAfter 首部字段再返回给客户端。</p>
<p>状态码和状况的不一致<br>不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。<br>比如 Web 应用程序内部发生错误，状态码依然返回 200 OK，这种<br>情况也经常遇到。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第三章]]></title>
      <url>http://arvin-he.github.io/2017/04/16/http-note3-2017-04-16/</url>
      <content type="html"><![CDATA[<p>术语:<br>MIME:（Multipurpose Internet Mail Extensions，多用途因特网邮件扩展）</p>
<h3 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h3><p>用于 HTTP 协议交互的信息被称为 HTTP 报文.<br>请求端（客户端）的HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。HTTP 报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。<br>HTTP 报文大致可分为报文首部和报文主体两块。两者由最初出现的空行（CR+LF）来划分,通常，并不一定要有报文主体。</p>
<p><img src="http-note3-2017-04-16/1.jpg" alt=""></p>
<h3 id="请求报文及响应报文的结构"><a href="#请求报文及响应报文的结构" class="headerlink" title="请求报文及响应报文的结构"></a>请求报文及响应报文的结构</h3><p><img src="http-note3-2017-04-16/2.jpg" alt=""></p>
<p>请求行:包含用于请求的方法，请求 URI 和 HTTP 版本。<br>状态行:包含表明响应结果的状态码，原因短语和 HTTP 版本。<br>首部字段:包含表示请求和响应的各种条件和属性的各类首部。<br>一般有 4 种首部，分别是：通用首部、请求首部、响应首部和实体首部。<br>其他:可能包含 HTTP 的 RFC 里未定义的首部（Cookie 等）</p>
<h3 id="编码提升传输速率"><a href="#编码提升传输速率" class="headerlink" title="编码提升传输速率"></a>编码提升传输速率</h3><p>HTTP 在传输数据时可以按照数据原貌直接传输，但也可以在传输过程中通过编码提升传输速率。通过在传输时编码，能有效地处理大量的访问请求。但是，编码的操作需要计算机来完成，因此会消耗更多的 CPU 等资源</p>
<p>报文主体和实体主体的差异<br>报文（message）<br>是 HTTP 通信中的基本单位，由 8 位组字节流（octet sequence，其中 octet 为 8 个比特）组成，通过 HTTP 通信传输。<br>实体（entity）<br>作为请求或响应的有效载荷数据（补充项）被传输，其内容由实体首部和实体主体组成。</p>
<p>HTTP 报文的主体用于传输请求或响应的实体主体。通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。</p>
<p>压缩传输的内容编码<br>内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。</p>
<p>常用的内容编码有以下几种。</p>
<ul>
<li>gzip（GNU zip）</li>
<li>compress（UNIX 系统的标准压缩）</li>
<li>deflate（zlib）</li>
<li>identity（不进行编码）</li>
</ul>
<p>分割发送的分块传输编码<br>在 HTTP 通信过程中，请求的编码实体资源尚未全部传输完成之前，浏览器无法显示请求页面。在传输大容量数据时，通过把数据分割成多块，能够让浏览器逐步显示页面。这种把实体主体分块的功能称为分块传输编码（Chunked Transfer Coding）。<br>分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六进制来标记块的大小，而实体主体的最后一块会使用“0(CR+LF)”来标记。<br>使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编码前的实体主体。<br>HTTP/1.1 中存在一种称为传输编码（Transfer Coding）的机制，它可以在通信时按某种编码方式传输，但只定义作用于分块传输编码中。</p>
<p>在 HTTP 报文中使用多部分对象集合时，需要在首部字段里加上Content-type.<br>使用 boundary 字符串来划分多部分对象集合指明的各类实体.boundary 字符串指定的各个实体的起始行之前插入“–”标记.</p>
<p>多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可<br>以在某个部分中嵌套使用多部分对象集合。</p>
<h3 id="获取部分内容的范围请求"><a href="#获取部分内容的范围请求" class="headerlink" title="获取部分内容的范围请求"></a>获取部分内容的范围请求</h3><p>可恢复的机制:所谓恢复是指能从之前下载中断处恢复下载.<br>要实现可恢复功能需要指定下载的实体范围。<br>执行范围请求时，会用到首部字段 Range 来指定资源的 byte 范围。响应会返回状态码为 206 Partial Content 的响应报文.<br>对于多重范围的范围请求，响应会在首部字段 Content-Type 标明 multipart/byteranges 后返回响应报文.如果服务器端无法响应范围请求，则会返回状态码 200 OK 和完整的实体内容。</p>
<h3 id="内容协商返回最合适的内容"><a href="#内容协商返回最合适的内容" class="headerlink" title="内容协商返回最合适的内容"></a>内容协商返回最合适的内容</h3><p>当浏览器的默认语言为英语或中文，访问相同 URI 的 Web 页面时，则会显示对应的英语版或中文版的 Web 页面。这样的机制称为内容协商（Content Negotiation）。<br>内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。</p>
<p>包含在请求报文中的某些首部字段（如下）就是判断的基准:</p>
<ul>
<li>Accept</li>
<li>Accept-Charset</li>
<li>Accept-Encoding</li>
<li>Accept-Language</li>
<li>Content-Language</li>
</ul>
<p>内容协商技术有以下 3 种类型:</p>
<ol>
<li>服务器驱动协商（Server-driven Negotiation）<br>由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自动处理。但对用户来说，以浏览器发送的信息作为判定的依据，并不一定能筛选出最优内容。</li>
<li>客户端驱动协商（Agent-driven Negotiation）<br>由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手动选择。还可以利用 JavaScript 脚本在 Web 页面上自动进行上述选择。比如按 OS 的类型或浏览器类型，自行切换成 PC 版页面或手机版页面。</li>
<li>透明协商（Transparent Negotiation）<br>是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask用户登录]]></title>
      <url>http://arvin-he.github.io/2017/04/16/flask-userlogin-2017-16/</url>
      <content type="html"><![CDATA[<p>Flask用户登录是建立 web 表单和数据库的联系，并且编写登录系统。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>对于登录系统，会使用到两个扩展，Flask-Login 和 Flask-OpenID,<br>Flask-OpenID 扩展需要一个存储文件的临时文件夹的路径。对此，我们提供了一个 tmp 文件夹的路径。</p>
<h3 id="重构用户模型"><a href="#重构用户模型" class="headerlink" title="重构用户模型"></a>重构用户模型</h3><p>Flask-Login 扩展需要在我们的 User 类中实现一些特定的方法。但是类如何去实现这些方法却没有什么要求。</p>
<h3 id="user-loader回调"><a href="#user-loader回调" class="headerlink" title="user_loader回调"></a>user_loader回调</h3><p>必须编写一个函数用于从数据库加载用户。这个函数将会被 Flask-Login 使用</p>
<h3 id="登录视图函数"><a href="#登录视图函数" class="headerlink" title="登录视图函数"></a>登录视图函数</h3><p>oid.loginhandle 告诉 Flask-OpenID 这是登录视图函数。<br>在函数开始的时候，用检查 g.user 是否被设置成一个认证用户，如果是的话将会被重定向到首页。这里的想法是如果是一个已经登录的用户的话，就不需要二次登录了。<br>Flask 中的 g 全局变量是一个在请求生命周期中用来存储和共享数据。将登录的用户存储在这里(g)。<br>在 redirect 调用中使用的 url_for 函数是定义在 Flask 中，以一种干净的方式为一个给定的视图函数获取 URL。 让 Flask 为你构建 URLs是一个很好的选择。<br>OpenID 认证异步发生。如果认证成功的话，Flask-OpenID 将会调用一个注册了 oid.after_login 装饰器的函数。如果失败的话，用户将会回到登陆页面。</p>
<h3 id="Flask-OpenID-登录回调"><a href="#Flask-OpenID-登录回调" class="headerlink" title="Flask-OpenID 登录回调"></a>Flask-OpenID 登录回调</h3><p>这里是 after_login 函数</p>
<h3 id="全局变量g-user"><a href="#全局变量g-user" class="headerlink" title="全局变量g.user"></a>全局变量g.user</h3><p>在登录视图函数中我们检查 g.user 为了决定用户是否已经登录.<br>为了实现这个我们用 Flask 的 before_request 装饰器。任何使用了 before_request 装饰器的函数在接收请求之前都会运行</p>
<h3 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h3><p>只需要检查有效的用户是否被设置到 g.user 以及是否我们已经添加了登出链接。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyQt5的翻译机制分析]]></title>
      <url>http://arvin-he.github.io/2017/04/14/pyqt-translate-2017-04-14/</url>
      <content type="html"><![CDATA[<h3 id="1-PyQt中的翻译流程"><a href="#1-PyQt中的翻译流程" class="headerlink" title="1. PyQt中的翻译流程"></a>1. PyQt中的翻译流程</h3><ol>
<li><p>遍历要翻译的文件,如*.py和*.ui,以及其他需要翻译的文件等,并创建*.pro文件,(如translations.pro),将扫描到的要翻译的文件按照指定格式写入到*.pro文件中,其格式如下所示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 如translations.pro中的内容格式</div><div class="line">// SOURCES指定要翻译的文本文件的路径,最好用相对路径</div><div class="line">// FORMS指定要翻译的ui文件的路径</div><div class="line">// TRANSLATIONS指定翻译文件的路径 </div><div class="line">SOURCES += \</div><div class="line">    E:/working/srd/plugins/tool/tool1.py \</div><div class="line">    E:/working/srd/plugins/tool/tooldialog1.py \</div><div class="line">    E:/working/srd/tool/tooldialog2.py</div><div class="line"></div><div class="line">FORMS += \</div><div class="line">    E:/working/srd/plugins/tool/res/tool.ui \</div><div class="line">    E:/working/srd/plugins/tool/res/tooldialog1.ui \</div><div class="line">    E:/working/srd/plugins/tool/res/tooldialog2.ui</div><div class="line"></div><div class="line">TRANSLATIONS += \</div><div class="line">    E:/working/srd/plugins/tool/res/translations/zh_CN.ts</div></pre></td></tr></table></figure>
</li>
<li><p>在<em>.py或者其他文本文件中创建翻译对象,并标记要翻译的文本源,这是用来提取要翻译的文本源,也是标明哪些文件需要被翻译,对于\</em>ui文件一般都是默认可翻译的.<br>同时在应用程序运行时,根据翻译对象去查找翻译后的文本,<br><strong>注意:</strong>创建的翻译对象要统一,不要不同的文件创建不同的翻译对象,这样很容易错乱掉,且不要和系统函数或者内建函数或变量重名.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_translate = QtCore.QCoreApplication.translate</div><div class="line">pushButton = QtWidgets.QPushButton(_translate(&quot;centering&quot;, &quot;Record &#123;&#125;&quot;).format(item))</div><div class="line">_logger.error(_translate(&quot;centering&quot;, &quot;y2 is equal to y1, please pick fit coordination&quot;))</div></pre></td></tr></table></figure>
</li>
<li><p>使用Linguist翻译工具中的lupdate工具运行加载translations.pro文件,lupdate工具就会扫描SOURCES和FORMS中的文件(如*.py和*.ui文件),并创建ts文件,并将扫描到的要翻译的源文本提取出来按照指定的格式写入到ts文件中去,然后在Linguist中打开ts文件并开始翻译.ts的格式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;TS version=&quot;2.0&quot; language=&quot;zh_CN&quot;&gt;</div><div class="line">    &lt;context&gt;</div><div class="line">        &lt;name&gt;MACRO&lt;/name&gt;</div><div class="line">        &lt;message&gt;</div><div class="line">            &lt;location filename=&quot;../user/PROBE_SUB/9336&quot; line=&quot;231&quot;&gt;&lt;/location&gt;</div><div class="line">            &lt;source&gt;74&lt;/source&gt;</div><div class="line">            &lt;translation type=&quot;unfinished&quot;&gt;&lt;/translation&gt;</div><div class="line">        &lt;/message&gt;</div><div class="line">        &lt;message&gt;</div><div class="line">            &lt;location filename=&quot;../user/ARRAYRECT_PATH_CYCLE&quot; line=&quot;34&quot;&gt;&lt;/location&gt;</div><div class="line">            &lt;source&gt;Please select 2 plane in 2 plane machining&lt;/source&gt;</div><div class="line">            &lt;translation&gt;两板加工时请选择两板&lt;/translation&gt;</div><div class="line">        &lt;/message&gt;</div><div class="line">        &lt;message&gt;</div><div class="line">            &lt;location filename=&quot;../../centering.py&quot; line=&quot;180&quot;/&gt;</div><div class="line">            &lt;source&gt;Y1 and Y2 centering has done??&lt;/source&gt;</div><div class="line">            &lt;translation type=&quot;obsolete&quot;&gt;Y1与Y2分中完成!&lt;/translation&gt;</div><div class="line">        &lt;/message&gt;</div><div class="line">    &lt;/context&gt;</div><div class="line">&lt;/TS&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>翻译好并保存ts文件后,使用lrelease工具生成qm文件,lrelease工具会加载ts文件,并做一些去重的工作,以节省qm文件的大小.</p>
</li>
<li>最后在应用程序中加载qm翻译文件,qm文件也是一种资源文件,在应用程序中需要注意加载的时机,比如应当在界面显示前或者日志打印前加载好.<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">translator = QtCore.QTranslator()</div><div class="line">translator.load(QtCore.QLocale(), &quot;&quot;, &quot;&quot;, &quot;:/&#123;&#125;/translations&quot;.format(__name__.replace(&quot;.&quot;, &quot;/&quot;)))</div><div class="line">QtWidgets.qApp.installTranslator(translator)</div><div class="line"></div><div class="line"># 指定名称的翻译文件 </div><div class="line">if os.path.exists(os.path.join(basic.sysDir, &apos;macro/translations/common_zh_CN.qm&apos;)):</div><div class="line">    _common_macro_translator = QtCore.QTranslator()</div><div class="line">    _common_macro_translator.load(QtCore.QLocale(), &quot;common&quot;, &quot;_&quot;, os.path.join(</div><div class="line">        basic.sysDir, &quot;macro/translations&quot;))</div><div class="line">    QtWidgets.qApp.installTranslator(_common_macro_translator)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="2-关于PyQt的Linguist"><a href="#2-关于PyQt的Linguist" class="headerlink" title="2. 关于PyQt的Linguist"></a>2. 关于PyQt的Linguist</h3><p>在PyQt5的安装包有一个Linguist翻译工具,为应用程序的国际化提供很好的支持.<br>Linguist提供了两款工具lupdate和lrelease.它们可以处理qmake项目文件(*.pro)，可直接在文件系统上运行.</p>
<ol>
<li>lupdate会逐个扫描应用程序中的.ui和.py文件,然后产生翻译源文件(*.ts),里面包含所有用户可见的文本,但未经过翻译(unfinished).<br>生成的.ts文件通过Linguist翻译工具打开即可看到所扫描到的要被翻译的源文本.<br>当*.py或*.ui的源文本被修改了,再次运行lupdate,就可以从应用程序中同步可见的文本,且不会破坏已经翻译好的文本.<br>lupdate工具从应用程序中提取的用户界面字符串。它读取应用程序的.pro文件，以确定哪些源文件包含的文本需要被翻译。这意味着源文件都必须被列在.pro中。如果文件没有列出，其中的文本则不会被发现。</li>
<li>运行lrelease会读取对应的.ts文件,并生成用于应用程序运行是用的.qm文件.<br>运行lrelese时生成.qm文件时会删除相同的源文本,只保留一个,这样.qm文件会比较小,且生成的.qm文件是二进制的.</li>
</ol>
<h3 id="3-使用lupdate和lrelease"><a href="#3-使用lupdate和lrelease" class="headerlink" title="3. 使用lupdate和lrelease"></a>3. 使用lupdate和lrelease</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Qt</div><div class="line">lupdate myproject.pro </div><div class="line"># PyQt</div><div class="line">pylupdate translations.pro </div><div class="line">lrelease myproject.pro</div></pre></td></tr></table></figure>
<h3 id="4-ts文件规格分析"><a href="#4-ts文件规格分析" class="headerlink" title="4. ts文件规格分析"></a>4. ts文件规格分析</h3><p>ts文件是可读的XML文件,包含源短语及其翻译，ts文件通常由lupdate创建与更新.</p>
<ol>
<li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code>ts文件的开头说明,其实是xml文件的开头说明.指明xml版本和编码</li>
<li><code>&lt;!DOCTYPE TS&gt;</code>指明文档类型是一个ts文件,可有可无</li>
<li><p>TS标签<br>TS标签格式如下,指定Linguist版本和翻译后的语言,TS标签里的内容是由context标签组成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;TS version=&quot;2.1&quot; language=&quot;zh_CN&quot;&gt;</div><div class="line">    &lt;context&gt;</div><div class="line">        ...</div><div class="line">    &lt;/context&gt;</div><div class="line">    &lt;context&gt;</div><div class="line">        ...</div><div class="line">    &lt;/context&gt;</div><div class="line">    &lt;context&gt;</div><div class="line">        ...</div><div class="line">    &lt;/context&gt;</div><div class="line">    ...</div><div class="line">&lt;/TS&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>context标签<br>context标签是一个上下文标签,不同的context是根据子标签的<name>来区分,指明这个context的对象名.<br>通常一个文件就是一个context,如果是以ui文件,那么name就是这个ui的对象名,注意不是ui文件名,如果是一个py文件,那么name就是py文件名.<br>如果想把多个文件合并到一个context中去,那么需要指定一个name,那么这多个文件的翻译都会放在这一个context中.这个name最终传给翻译对象的第一个参数.</name></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;context&gt;</div><div class="line">    &lt;name&gt;...&lt;/name&gt;</div><div class="line">    &lt;message&gt;</div><div class="line">        &lt;location filename=&quot;...&quot; line=&quot;...&quot;/&gt;</div><div class="line">        &lt;source&gt;...&lt;/source&gt;</div><div class="line">        &lt;translation&gt;...&lt;/translation&gt;</div><div class="line">    &lt;/message&gt;</div><div class="line">    &lt;message&gt;</div><div class="line">        &lt;location filename=&quot;...&quot; line=&quot;...&quot;/&gt;</div><div class="line">        &lt;source&gt;...&lt;/source&gt;</div><div class="line">        &lt;translation&gt;...&lt;/translation&gt;</div><div class="line">    &lt;/message&gt;</div><div class="line">    ...</div><div class="line">&lt;/context&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意:</strong>这里的name其实是对应这翻译对象里的name的参数.如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">macro_text = \_translate(&quot;MACRO&quot;, dst\_text)</div><div class="line">pushButton = QPushButton(_translate(&quot;centering&quot;, &quot;Record &#123;&#125;&quot;).format(item))</div></pre></td></tr></table></figure></p>
<ol>
<li>message标签<br>message标签由location,source和translation标签组成,其中:<br>location:指定被翻译文件的路径和行号,注意:被翻译文件路径是相对与这个ts文件的相对路径<br>source:翻译的源文本<br>translation:翻译文本<br>translation的翻译状态有type指定,type有三种情况:unfinished(未翻译),空(已翻译),obsolete(废弃的)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;message&gt;</div><div class="line">        &lt;location filename=&quot;...&quot; line=&quot;...&quot;/&gt;</div><div class="line">        &lt;source&gt;...&lt;/source&gt;</div><div class="line">        &lt;translation&gt;...&lt;/translation&gt;</div><div class="line">&lt;/message&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="5-qm文件"><a href="#5-qm文件" class="headerlink" title="5. qm文件"></a>5. qm文件</h3><p>qm(Qt message)文件和ts文件的文件名称一样,一一对应,qm文件由lrelease创建.</p>
<h3 id="6-创建ts文件"><a href="#6-创建ts文件" class="headerlink" title="6. 创建ts文件"></a>6. 创建ts文件</h3><p>ts文件其实就是xml文件,创建ts文件可以应用python的第三方包:xmltodict,可将字典数据结构直接转化成xml了.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">TS_XML = OrderedDict()</div><div class="line">TS = OrderedDict()</div><div class="line">context = OrderedDict()</div><div class="line">TS[<span class="string">"@version"</span>] = <span class="string">"2.1"</span></div><div class="line">TS[<span class="string">"@language"</span>] = <span class="string">"zh_CN"</span></div><div class="line">context[<span class="string">"name"</span>] = <span class="string">"MACRO"</span></div><div class="line">message = OrderedDict()</div><div class="line">location = OrderedDict()</div><div class="line">translation = OrderedDict()</div><div class="line"><span class="comment"># message/location 标签</span></div><div class="line">location[<span class="string">"@filename"</span>] = os.path.relpath(file_path, trans_path).replace(<span class="string">"\\"</span>, <span class="string">"/"</span>)</div><div class="line">location[<span class="string">"@line"</span>] = line_index + <span class="number">1</span></div><div class="line">message[<span class="string">"location"</span>] = location</div><div class="line"><span class="keyword">if</span> line_content.strip()[<span class="number">0</span>:<span class="number">3</span>] == <span class="string">'ASK'</span>:</div><div class="line">    source = ((match.group()[<span class="number">4</span>:<span class="number">-1</span>]).split(<span class="string">','</span>))[<span class="number">2</span>]</div><div class="line"><span class="comment"># message/source 标签</span></div><div class="line">message[<span class="string">"source"</span>] = source</div><div class="line"><span class="comment"># message/translation 标签</span></div><div class="line">translation[<span class="string">"@type"</span>] = <span class="string">"unfinished"</span></div><div class="line">message[<span class="string">"translation"</span>] = translation</div><div class="line">TS[<span class="string">"context"</span>] = context</div><div class="line">TS_XML[<span class="string">"TS"</span>] = TS</div><div class="line"><span class="comment"># 创建ts文件</span></div><div class="line"><span class="keyword">with</span> open(os.path.join(ts_path, trans_file_name), <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</div><div class="line">    xmltodict.unparse(TS_XML, f, pretty=<span class="keyword">True</span>, newl=new_line, indent=indent)</div></pre></td></tr></table></figure></p>
<p>有了ts文件,就可以应用lupdate和lrelease工具生成qm文件<br>当翻译源文本有了修改,就需要重新生成ts文件了,这里需要注意一个问题,没有修改的翻译会被丢失.<br>这就需要先解析修改前的ts文件,然后对比修改后的ts文件的源文本,只更新修改了的.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseTS</span><span class="params">(ts_path)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'base'</span> <span class="keyword">in</span> ts_path <span class="keyword">and</span> <span class="string">'macro'</span> <span class="keyword">in</span> ts_path:</div><div class="line">        trans_file_name = <span class="string">"common_zh_CN.ts"</span></div><div class="line">    <span class="keyword">elif</span> <span class="string">'sys'</span> <span class="keyword">in</span> ts_path <span class="keyword">and</span> <span class="string">'macro'</span> <span class="keyword">in</span> ts_path:</div><div class="line">        trans_file_name = <span class="string">"user_zh_CN.ts"</span></div><div class="line">    ts_file = os.path.join(ts_path, trans_file_name)</div><div class="line">    <span class="keyword">with</span> open(ts_file, <span class="string">"r"</span>, <span class="number">-1</span>, <span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</div><div class="line">        document = f.read()</div><div class="line">    ts_xml = xmltodict.parse(document)</div><div class="line">    macro_context_list = ts_xml[<span class="string">'TS'</span>][<span class="string">'context'</span>][<span class="string">'message'</span>]</div><div class="line">    <span class="keyword">return</span> macro_context_list</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateTS</span><span class="params">(ts_path, new_message_list)</span>:</span></div><div class="line">    old_message_list = parseTS(ts_path)</div><div class="line">    <span class="keyword">for</span> new_message <span class="keyword">in</span> new_message_list:</div><div class="line">        <span class="keyword">for</span> old_message <span class="keyword">in</span> old_message_list:</div><div class="line">            <span class="keyword">if</span> new_message[<span class="string">"source"</span>] == old_message[<span class="string">"source"</span>]:</div><div class="line">                new_message[<span class="string">"translation"</span>] = old_message[<span class="string">"translation"</span>]</div><div class="line">    <span class="keyword">return</span> new_message_list</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第二章]]></title>
      <url>http://arvin-he.github.io/2017/04/13/http-note2-2017-04-13/</url>
      <content type="html"><![CDATA[<h3 id="客户端与服务端"><a href="#客户端与服务端" class="headerlink" title="客户端与服务端"></a>客户端与服务端</h3><p>客户端:请求访问文本或图像等资源的一端,<br>服务器端:提供资源响应的一端.<br>两台计算机之间使用 HTTP 协议通信时，在一条通信线路上必定有一端是客户端，另一端则是服务器端.实际情况，两台计算机作为客户端和服务器端的角色有可能会互换。但就仅从一条通信路线来说，服务器端和客户端的角色是确定的，而用 HTTP 协议能够明确区分哪端是客户端，哪端是服务器端。</p>
<h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><p>HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收到请求之前不会发送响应。</p>
<p>请求报文组成:<br>是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。</p>
<p>响应报文组成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Tue, 10 Jul 2012 06:50:15 GMT</div><div class="line">Content-Length: 362</div><div class="line">Content-Type: text/html</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>在起始行开头的 HTTP/1.1 表示服务器对应的 HTTP 版本。紧挨着的 200 OK 表示请求的处理结果的状态码（status code）和原因短语（reason-phrase）。下一行显示了创建响应的日期时间，是首部字段（header field）内的一个属性。接着以一空行分隔，之后的内容称为资源实体的主体（entitybody）。</p>
<p>响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p>
<h3 id="HTTP-是不保存状态的协议"><a href="#HTTP-是不保存状态的协议" class="headerlink" title="HTTP 是不保存状态的协议"></a>HTTP 是不保存状态的协议</h3><p>HTTP 是一种不保存状态，即无状态（stateless）协议.HTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。使用 HTTP 协议，每当有新的请求发送时，就会有对应的新响应产生。协议本身并不保留之前一切的请求或响应报文的信息。</p>
<p>HTTP/1.1 虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。</p>
<h3 id="请求-URI-定位资源"><a href="#请求-URI-定位资源" class="headerlink" title="请求 URI 定位资源"></a>请求 URI 定位资源</h3><p>HTTP 协议使用 URI 定位互联网上的资源。正是因为 URI 的特定功能，在互联网上任意位置的资源都能访问到。</p>
<h3 id="告知服务器意图的-HTTP-方法"><a href="#告知服务器意图的-HTTP-方法" class="headerlink" title="告知服务器意图的 HTTP 方法"></a>告知服务器意图的 HTTP 方法</h3><p>GET ：获取资源<br>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回；如果是像 CGI（Common Gateway Interface，通用网关接口）那样的程序，则返回经过执行后的输出结果。</p>
<p>POST：传输实体主体<br>虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但POST 的主要目的并不是获取响应的主体内容。</p>
<p>PUT：传输文件<br>PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。但是，鉴于 HTTP/1.1 的 PUT 方法自身不带验证机制，任何人都可以上传文件 , 存在安全性问题，因此一般的 Web 网站不使用该方法。若配合 Web 应用程序的验证机制，或架构设计采用<br>REST（REpresentational State Transfer，表征状态转移）标准的同类Web 网站，就可能会开放使用 PUT 方法。</p>
<p>HEAD：获得报文首部<br>HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认URI 的有效性及资源更新的日期时间等。</p>
<p>DELETE：删除文件<br>DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。<br>HTTP/1.1 的 DELETE 方法本身和 PUT 方法一样不带验证机制，所以一般的 Web 网站也不使用 DELETE 方法。当配合 Web 应用程序的验证机制，或遵守 REST 标准时还是有可能会开放使用的。</p>
<p>OPTIONS：询问支持的方法<br>OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。</p>
<p>TRACE：追踪路径<br>TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器端就将该数字减 1，当数值刚好减到 0 时，就停止继续传输，最后接收到请求的服务器端则返回状态码 200 OK 的响应。客户端通过 TRACE 方法可以查询发送出去的请求是怎样被加工修改/ 篡改的。这是因为，请求想要连接到源目标服务器可能会通过代理中转，TRACE 方法就是用来确认连接过程中发生的一系列操作。但是，TRACE 方法本来就不怎么常用，再加上它容易引发XST（Cross-Site Tracing，跨站追踪）攻击，通常就更不会用到了。</p>
<p>CONNECT：要求用隧道协议连接代理<br>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加 密后经网络隧道传输。CONNECT 方法的格式:CONNECT 代理服务器名:端口号 HTTP版本</p>
<h3 id="持久连接节省通信量"><a href="#持久连接节省通信量" class="headerlink" title="持久连接节省通信量"></a>持久连接节省通信量</h3><p>HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP连接。为解决上述 TCP 连接的问题，HTTP/1.1 和一部分的 HTTP/1.0 想出了持久连接（HTTP Persistent Connections，也称为 HTTP keep-alive 或HTTP connection reuse）的方法。持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使<br>HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相应提高了。<br>在 HTTP/1.1 中，所有的连接默认都是持久连接，但在 HTTP/1.0 内并未标准化。虽然有一部分服务器通过非标准的手段实现了持久连接，但服务器端不一定能够支持持久连接。毫无疑问，除了服务器端，客户端也需要支持持久连接。</p>
<h3 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h3><p>持久连接使得多数请求以管线化（pipelining）方式发送成为可能。从前发送请求后需等待并收到响应，才能发送下一个请求。管线化技术出现后，不用等待响应亦可直接发送下一个请求。这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。</p>
<h3 id="使用-Cookie-的状态管理"><a href="#使用-Cookie-的状态管理" class="headerlink" title="使用 Cookie 的状态管理"></a>使用 Cookie 的状态管理</h3><p>HTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的 CPU 及内存资源的消耗。</p>
<p>Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。<br>Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask之数据库使用]]></title>
      <url>http://arvin-he.github.io/2017/04/12/flask-DB-2017-04-12/</url>
      <content type="html"><![CDATA[<h3 id="1-Flask-中的数据库"><a href="#1-Flask-中的数据库" class="headerlink" title="1. Flask 中的数据库"></a>1. Flask 中的数据库</h3><p>使用 Flask-SQLAlchemy 扩展来管理应用程序的数据。这个扩展封装了SQLAlchemy项目，这是一个 对象关系映射器或者ORM。</p>
<h3 id="2-数据库迁移"><a href="#2-数据库迁移" class="headerlink" title="2. 数据库迁移"></a>2. 数据库迁移</h3><p>使用 SQLAlchemy-migrate 来跟踪数据库的更新。它只是在开始建立数据库的时候多花费些工作.<br>SQLAlchemy-migrate 包自带命令行和 APIs，这些 APIs 以一种将来允许容易升级的方式来创建数据库。<br>一个空的 sqlite 数据库，创建一开始就支持迁移。同样你还将有一个 db_repository 文件夹，里面还有一些文件，这是 SQLAlchemy-migrate 存储它的数据文件的地方。<br>请注意，我们不会再生的存储库，如果它已经存在。这将使我们重新创建数据库，同时保留现有的存储库，如果我们需要。<br>SQLAlchemy-migrate 迁移的方式就是比较数据库(在本例中从 app.db 中获取)与我们模型的结构(从文件 app/models.py 获取)。两者间的不同将会被记录成一个迁移脚本存放在迁移仓库中。迁移脚本知道如何去迁移或撤销它，所以它始终是可能用于升级或降级一个数据库。</p>
<p>在使用脚本自动地完成迁移的时候也不是没有问题的，有时候它很难识别新老格式的变化。为了让 SQLAlchemy-migrate 容易地识别出变化，绝不要重命名存在的字段，仅限于增加或者删除模型或者字段，或者改变已存在字段的类型。当然我一直会检查生成的迁移脚本，确保它是正确。<br>不应该在没有备份下去尝试迁移数据库。当然也不能在生产环境下直接运行迁移脚本，必须在开发环境下确保迁移运转正常。</p>
<h3 id="3-数据库配置"><a href="#3-数据库配置" class="headerlink" title="3. 数据库配置"></a>3. 数据库配置</h3><p>小型的应用，采用 sqlite 数据库。sqlite 数据库是小型应用的最方便的选择，每一个数据库都是存储在单个文件里。大型的可以采用MySql.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">basedir = os.path.abspath(os.path.dirname(__file__))</div><div class="line"></div><div class="line">SQLALCHEMY_DATABASE_URI = &apos;sqlite:///&apos; + os.path.join(basedir, &apos;app.db&apos;)</div><div class="line">SQLALCHEMY_MIGRATE_REPO = os.path.join(basedir, &apos;db_repository&apos;)</div></pre></td></tr></table></figure></p>
<p>SQLALCHEMY_DATABASE_URI 是 Flask-SQLAlchemy 扩展需要的。这是数据库文件的路径。<br>SQLALCHEMY_MIGRATE_REPO 是文件夹，把 SQLAlchemy-migrate 数据文件存储在这里。</p>
<h3 id="4-数据库模型"><a href="#4-数据库模型" class="headerlink" title="4. 数据库模型"></a>4. 数据库模型</h3><p>存储在数据库中数据将会以类的集合来表示，称之为数据库模型。ORM 层需要做的翻译就是将从这些类创建的对象映射到适合的数据库表的行.</p>
<h3 id="5-数据库升级和回退"><a href="#5-数据库升级和回退" class="headerlink" title="5. 数据库升级和回退"></a>5. 数据库升级和回退</h3><p>假设有一个应用程序在开发机器上，同时有一个拷贝部署在到线上的生产机器上。在下一个版本中，你的数据模型有一个变化，比如新增了一个表。如果没有迁移脚本，可能必须要琢磨着如何修改数据库格式在开发和生产机器上，这会花费很大的工作。</p>
<p>如果有数据库迁移的支持，当准备发布新版的时候，只需要录制一个新的迁移，拷贝迁移脚本到生产服务器上接着运行脚本，所有事情就完成了。数据库升级也只需要一点 Python 脚本(文件 db_upgrade.py):<br>当你运行上述脚本的时候，数据库将会升级到最新版本。<br>通常情况下，没有必要把数据库降低到旧版本，但是，SQLAlchemy-migrate 支持这么做(文件 db_downgrade.py)<br>这个脚本会回退数据库一个版本。你可以运行多次来回退多个版本。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask表单]]></title>
      <url>http://arvin-he.github.io/2017/04/10/flask-wtf-2017-04-10/</url>
      <content type="html"><![CDATA[<p>处理 web 表单，我们将使用 Flask-WTF扩展.<br>在 Flask-WTF 中，表单是表示成对象，Form 类的子类。一个表单子类简单地把表单的域定义成类的变量。</p>
<h3 id="1-配置Flask-WTF"><a href="#1-配置Flask-WTF" class="headerlink" title="1. 配置Flask-WTF"></a>1. 配置Flask-WTF</h3><p>Flaks-WTF 扩展只需要两个配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CSRF_ENABLED = True</div><div class="line">SECRET_KEY = &apos;you-will-never-guess&apos;</div></pre></td></tr></table></figure></p>
<p>CSRF_ENABLED 配置是为了激活跨站点请求伪造保护。在大多数情况下，你需要激活该配置使得你的应用程序更安全些。<br>SECRET_KEY 配置仅仅当 CSRF 激活的时候才需要，它是用来建立一个加密的令牌，用于验证一个表单。当你编写自己的应用程序的时候，请务必设置很难被猜测到密钥。</p>
<h3 id="2-用户登录表单"><a href="#2-用户登录表单" class="headerlink" title="2. 用户登录表单"></a>2. 用户登录表单</h3><p>创建一个登录表单，用户用于认证系统,我们导入 Form 类，接着导入两个我们需要的字段类，TextField 和 BooleanField。DataRequired 验证器只是简单地检查相应域提交的数据是否是空。在 Flask-WTF 中有许多的验证器.</p>
<h3 id="3-登录表单模板"><a href="#3-登录表单模板" class="headerlink" title="3. 登录表单模板"></a>3. 登录表单模板</h3><p>重用base.html 模板通过 extends 模板继承声明语句,好处是以确保所有网页的布局一致性。<br>模板与常规的 HTML 表单之间存在一些不同处。模板期望一个实例化自我们刚才创建地表单类的表单对象储存成一个模板参数，称为 form。当我们编写渲染这个模板的视图函数的时候，我们将会特别注意传送这个模板参数到模板中。<br>form.hidden_tag() 模板参数将被替换为一个隐藏字段，用来是实现在配置中激活的 CSRF 保护.如果你已经激活了 CSRF，这个字段需要出现在你所有的表单中。</p>
<h3 id="4-表单视图"><a href="#4-表单视图" class="headerlink" title="4. 表单视图"></a>4. 表单视图</h3><p>导入 LoginForm 类，从这个类实例化一个对象，接着把它传入到模板中。这就是我们渲染表单所有要做的。<br>注意:路由装饰器的 methods 参数。参数告诉 Flask 这个视图函数接受 GET 和 POST 请求。如果不带参数的话，视图只接受 GET 请求。</p>
<h3 id="5-接收表单数据"><a href="#5-接收表单数据" class="headerlink" title="5. 接收表单数据"></a>5. 接收表单数据</h3><p>Flask-WTF 使得工作变得简单的另外一点就是处理提交的数据.form表单对象中validate_on_submit 方法做了所有表单处理工作</p>
<p>当表单正在展示给用户的时候调用它，它会返回 False.</p>
<p>如果 validate_on_submit 在表单提交请求中被调用，它将会收集所有的数据，对字段进行验证，如果所有的事情都通过的话，它将会返回 True，表示数据都是合法的。这就是说明数据是安全的，并且被应用程序给接受了。</p>
<p>如果至少一个字段验证失败的话，它将会返回 False，接着表单会重新呈现给用户，这也将给用户一次机会去修改错误。</p>
<h3 id="6-加强字段验证"><a href="#6-加强字段验证" class="headerlink" title="6. 加强字段验证"></a>6. 加强字段验证</h3><p>加强字段验证是为了提示用户表单哪里出错了.当字段验证失败的时候， Flask-WTF 会向表单对象中添加描述性的错误信息。这些信息是可以在模板中使用的，因此我们只需要增加一些逻辑来获取它。<br>通常情况下，任何需要验证的字段都会把错误信息放入 form.field_name.errors 下。在我们的例子中，我们使用 form.openid.errors 。我们以红色的字体颜色显示这些错误信息以引起用户的注意。</p>
<h3 id="7-处理-OpenIDs"><a href="#7-处理-OpenIDs" class="headerlink" title="7. 处理 OpenIDs"></a>7. 处理 OpenIDs</h3><p>一些大的互联网服务提供商支持 OpenID 认证自己的会员。比如，如果你有一个 Google 的账号，你也就有了一个它们的 OpenID</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL基本命令]]></title>
      <url>http://arvin-he.github.io/2017/04/09/mysql-cmds-2017-04-09/</url>
      <content type="html"><![CDATA[<h3 id="MySQL基本命令"><a href="#MySQL基本命令" class="headerlink" title="MySQL基本命令"></a>MySQL基本命令</h3><ol>
<li>创建一个数据库:<code>create database gogs;</code></li>
<li>显示所有数据库:<code>show databases;</code></li>
<li>使用指定数据库:<code>use gogs;</code></li>
<li>创建表:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE pages (id BIGINT(7) NOT NULL AUTO_INCREMENT, title VARCHAR(200),</div><div class="line">content VARCHAR(10000), created TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY</div><div class="line">(id));</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意:</strong>mysql数据表必须至少有一列,否则不能创建.<br>每个字段定义由三部分组成：</p>
<ul>
<li>名称（ id 、 title 、 created 等）</li>
<li>数据类型（ BIGINT(7) 、 VARCHAR 、 TIMESTAMP ）</li>
<li>其他可选属性（ NOT NULL AUTO_INCREMENT ）<br>在字段定义列表的最后，还要定义一个“主键”（key）.</li>
</ul>
<ol>
<li>查看数据表的结构:<code>describe pages;</code></li>
<li>插入数据:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">insert into pages (title, content) VALUES (&quot;Test page title&quot;, &quot;This is some te</div><div class="line">st page content. It can be up to 10,000 characters long.&quot;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意:</strong> pages 表里有四个字段（ id 、 title 、 content 、 created ），但实际上<br>你只需要插入两个字段（ title 和 content ）的数据即可。因为 id 字段是自动递增的（每<br>次新插入数据行时 MySQL 自动增加 1），通常不用处理。另外， created 字段的类型是<br>timestamp ，默认就是数据加入时的时间戳。</p>
<ol>
<li><p>查询数据:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 精确查询</div><div class="line">select * from pages where id = 2;</div><div class="line"># 模糊查询</div><div class="line">select * from pages where title like &quot;%test%&quot;;</div><div class="line"># 返回部分字段查询</div><div class="line">select id, title from pages where content like &quot;%page content%&quot;;</div></pre></td></tr></table></figure>
</li>
<li><p>删除数据:<code>delete from pages where id = 1;</code></p>
</li>
<li>更新数据:<code>update pages set title=&quot;a new title&quot;, content=&quot;some new content&quot; where id=2;</code></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL免安装配置]]></title>
      <url>http://arvin-he.github.io/2017/04/07/mysqlsetup-2017-04-07/</url>
      <content type="html"><![CDATA[<h3 id="1-MySQL下载"><a href="#1-MySQL下载" class="headerlink" title="1. MySQL下载"></a>1. MySQL下载</h3><p>下载mysql-5.7.17-winx64.zip,32位机器下载mysql-5.7.17-wix32.zip,<br>不要下载mysql-installer-community-5.7.17.0.msi.<br><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">mysql下载链接</a></p>
<h3 id="2-解压mysql"><a href="#2-解压mysql" class="headerlink" title="2. 解压mysql"></a>2. 解压mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#解压目录</div><div class="line">D:\Program Files\mysql-5.7.17-winx64</div></pre></td></tr></table></figure>
<h3 id="3-配置mysql"><a href="#3-配置mysql" class="headerlink" title="3. 配置mysql"></a>3. 配置mysql</h3><ol>
<li>在mysql解压目录下复制my-default.ini,放到mysql的解压目录,并重命名为my.ini.</li>
<li>my.ini里修改为<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line"># port=3306</div><div class="line">default-character-set = utf8</div><div class="line"></div><div class="line">[mysql]</div><div class="line">default-character-set = utf8</div><div class="line"></div><div class="line">[mysqld]</div><div class="line"># basedir 为安装文件解压后的目录 ｜ basedir和datadir 可以使用相对路径</div><div class="line">basedir = D:/Program Files/mysql-5.7.17-winx64</div><div class="line"># datadir 为用来存放数据的目录</div><div class="line">datadir = D:/Program Files/mysql-5.7.17-winx64/data</div><div class="line">character_set_server = utf8</div><div class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="4-添加mysql的环境变量"><a href="#4-添加mysql的环境变量" class="headerlink" title="4. 添加mysql的环境变量"></a>4. 添加mysql的环境变量</h3><p>将<code>D:\Program Files\mysql-5.7.17-winx64\bin</code>添加到环境变量.</p>
<h3 id="5-将mysql注册为windows系统服务"><a href="#5-将mysql注册为windows系统服务" class="headerlink" title="5. 将mysql注册为windows系统服务"></a>5. 将mysql注册为windows系统服务</h3><ol>
<li>从控制台中进入到mysql解压目录下的bin目录</li>
<li>输入命令:<code>mysqld -install</code></li>
</ol>
<h3 id="6-初始化mysql数据目录"><a href="#6-初始化mysql数据目录" class="headerlink" title="6. 初始化mysql数据目录"></a>6. 初始化mysql数据目录</h3><p><strong>注意:</strong>mysql5.7解压后没有数据目录,即在解压目录中没有data文件夹.这会导致启动mysql服务失败.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqld --defaults-file=&quot;D:\Program Files\mysql-5.7.17-winx64\my.ini&quot; --initialize-insecure</div></pre></td></tr></table></figure></p>
<ol>
<li>它会初始化 data 目录，在执行此命令前请先把data目录下的所有文件先删除，否则会失败.</li>
<li>可以选择用 –initialize-insecure 或者 –initialize 来初始化，–initialize-insecure 初始化root密码为空，如果用 –initialize来初始化，会产生一个随机密码.</li>
<li>执行成功后，在data目录下会生成mysql，perofrmance_schema，sys等目录文件.</li>
</ol>
<h3 id="7-启动mysql服务"><a href="#7-启动mysql服务" class="headerlink" title="7. 启动mysql服务"></a>7. 启动mysql服务</h3><p>在控制台输入:<code>net start mysql</code></p>
<h3 id="8-mysql一些命令"><a href="#8-mysql一些命令" class="headerlink" title="8. mysql一些命令"></a>8. mysql一些命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#安装服务</div><div class="line">mysqld -install</div><div class="line"></div><div class="line">#启动服务</div><div class="line">net start mysql</div><div class="line"></div><div class="line">#进入mysql</div><div class="line">mysql -u root -p</div><div class="line"></div><div class="line">#移除mysql服务</div><div class="line">mysqld -remove</div><div class="line"></div><div class="line">#停止服务</div><div class="line">net stop mysql</div></pre></td></tr></table></figure>
<h3 id="9-修改root帐号密码"><a href="#9-修改root帐号密码" class="headerlink" title="9. 修改root帐号密码"></a>9. 修改root帐号密码</h3><p>刚安装完成时root账号默认密码为空，此时可以将密码修改为指定的密码。如：123456<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;mysql –u root</div><div class="line"> mysql&gt;show databases;  # 注意:分号不能丢</div><div class="line"> mysql&gt;use mysql; # 使用sql数据库,这个是初始化data目录自动生成的</div><div class="line"> mysql&gt;set password=password(&apos;123456&apos;); # 修改密码</div><div class="line"> mysql&gt;FLUSH PRIVILEGES;</div><div class="line"> mysql&gt;QUIT</div></pre></td></tr></table></figure></p>
<h3 id="10-一些其他命令"><a href="#10-一些其他命令" class="headerlink" title="10. 一些其他命令"></a>10. 一些其他命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p #-u表示用户, -p表示需要输入密码</div></pre></td></tr></table></figure>
<h3 id="11-一些问题"><a href="#11-一些问题" class="headerlink" title="11. 一些问题"></a>11. 一些问题</h3><ol>
<li>MYSQL服务无法启动<br>MYSQL服务无法启动的原因是:没有初始化mysql数据目录,mysql5.7解压后,在解压目录中没有data文件夹.</li>
</ol>
<p>解决方法:<br>在bin目录下输入命令:<code>mysqld --initialize-insecure --user=mysql</code>,然后在mysql根目录下会自动生成一个data文件夹.</p>
<ol>
<li>Error 1045: Access denied for user ‘root’@’localhost’ (using password: YES)<br>解决方法:</li>
</ol>
<ul>
<li><blockquote>
<p>net stop mysql  (停用MySQL服务,没启动的可以省略)</p>
</blockquote>
</li>
<li>找到安装路径 MySQL Server 5.7下的my.ini打开 my.ini,找到  [mysqld]  然后在下面加上<br>这句： skip_grant_tables （意思好像是 启动MySQL服务的时候跳过权限表认证  ）</li>
<li>启动数据库修改密码了   <blockquote>
<p>  net start mysql   (启动MySQL服务)—&gt;   mysql  回车   (如果成功，将出现MySQL提示符)</p>
</blockquote>
</li>
<li>输入use mysql; （连接权限数据库）。</li>
<li>改密码：update user set authentication_string=password(“123”) where user=”root”;（别忘了最后加分号)</li>
<li>刷新权限（必须步骤）：flush privileges; </li>
<li>退出 quit</li>
<li>将第3 步的 my.ini里的 skip_grant_tables  去掉（启动MySQL服务的时候不能让他跳过权限表认证 ）</li>
<li>重启MySQL ，再进入，使用用户名root和刚才设置的新密码123就可以登录了。 </li>
</ul>
<ol>
<li>MySQL5.7更改密码时出现ERROR 1054 (42S22): Unknown column ‘password’ in ‘field list’.<br>新安装的MySQL5.7，登录时提示密码错误，安装的时候并没有更改密码，后来通过免密码登录的方式更改密码，输入update mysql.user  set password=password(‘123’) where user=’root’时提示ERROR 1054 (42S22): Unknown column ‘password’ in ‘field list’，<br>原因:原来是mysql数据库下已经没有password这个字段了，password字段改成了authentication_string.<br>解决方法:update user set authentication_string=password(“123”) where user=”root”;（别忘了最后加分号)</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Http读书笔记第一章]]></title>
      <url>http://arvin-he.github.io/2017/04/06/http-note1-2017-04-06/</url>
      <content type="html"><![CDATA[<h3 id="1-一些名词概念"><a href="#1-一些名词概念" class="headerlink" title="1. 一些名词概念"></a>1. 一些名词概念</h3><ol>
<li>HTTP（HyperText Transfer Protocol，超文本传输协议</li>
<li>URL（Uniform Resource Locator，统一资源定位符）</li>
<li>URI 是 Uniform Resource Identifier 的缩写,统一资源标识符</li>
<li>TCP/IP 是互联网相关的各类协议族的总称</li>
<li>RFC（Request for Comments，征求修正意见书）RFC 是<br>互联网的设计文档，要是不按照 RFC 标准执行，就有可能导致无<br>法通信的状况。</li>
</ol>
<h3 id="2-TCP-IP分层"><a href="#2-TCP-IP分层" class="headerlink" title="2. TCP/IP分层"></a>2. TCP/IP分层</h3><p>TCP/IP 协议族按层次分别分为以下 4 层：应用层、传输层、网络层和数据链路层</p>
<ol>
<li>应用层:决定了向用户提供应用服务时通信的活动.TCP/IP 协议族内预存了各类通用的应用服务。比如，FTP（File Transfer Protocol，文件传输协议）和 DNS（Domain Name System，域名系统）服务就是其中两类。HTTP 协议也处于该层。</li>
<li>传输层:传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。传输层有两个性质不同的协议：TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）。</li>
<li>网络层:网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</li>
<li>链路层(网络接口层):用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等<br>物理可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。</li>
</ol>
<h3 id="3-与-HTTP-关系密切的协议-IP、TCP-和DNS"><a href="#3-与-HTTP-关系密切的协议-IP、TCP-和DNS" class="headerlink" title="3. 与 HTTP 关系密切的协议 : IP、TCP 和DNS"></a>3. 与 HTTP 关系密切的协议 : IP、TCP 和DNS</h3><ol>
<li><p>IP协议<br>IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC地址（Media Access Control Address）。IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC地址基本上不会更改。使用 ARP 协议凭借 MAC 地址进行通信,IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网（LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输路线。这种机制称为路由选择（routing）.</p>
</li>
<li><p>TCP协议<br>TCP 位于传输层，提供可靠的字节流服务,所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。为了准确无误地将数据送达目标处，TCP 协议采用了三次握手（three-way handshaking）策略。用 TCP 协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了 TCP 的标志（flag） —— SYN（synchronize） 和ACK（acknowledgement）。发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。除了上述三次握手，TCP 协议还有其他各种手段来保证通信的可靠性。</p>
</li>
<li><p>DNC服务协议<br>DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的协议。它提供域名到 IP 地址之间的解析服务。DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p>
</li>
</ol>
<h3 id="4-URI-统一资源标识符"><a href="#4-URI-统一资源标识符" class="headerlink" title="4. URI(统一资源标识符)"></a>4. URI(统一资源标识符)</h3><p>URI 就是由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。URI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联<br>网上所处的位置）。可见 URL 是 URI 的子集。</p>
<p>使用 http: 或 https: 等协议方案名获取访问资源时要指定协议类型。不区分字母大小写，最后附一个冒号（:）。也可使用 data: 或 javascript: 这类指定数据或脚本程序的方案名。</p>
<p>登录信息（认证）<br>指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。此项是可选项。</p>
<p>服务器地址<br>使用绝对 URI 必须指定待访问的服务器地址。地址可以是类似hackr.jp 这种 DNS 可解析的名称，或是 192.168.1.1 这类 IPv4 地址名，还可以是 [0:0:0:0:0:0:0:1] 这样用方括号括起来的 IPv6 地址名。</p>
<p>服务器端口号<br>指定服务器连接的网络端口号。此项也是可选项，若用户省略则自动使用默认端口号。</p>
<p>带层次的文件路径<br>指定服务器上的文件路径来定位特指的资源。这与 UNIX 系统的文件目录结构相似。</p>
<p>查询字符串<br>针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。此项可选。</p>
<p>片段标识符<br>使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个位置）。但在 RFC 中并没有明确规定其使用方法。该项也为可选项。</p>
<h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h3><ul>
<li>1997 年 1 月公布的 HTTP/1.1 是目前主流的 HTTP 协议版本</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask模板]]></title>
      <url>http://arvin-he.github.io/2017/04/05/flask-module-2017-04-05/</url>
      <content type="html"><![CDATA[<p><img src="/2017/04/05/flask-module-2017-04-05/5.jpg" alt=""></p>
<h3 id="1-jinjia2模版分隔符"><a href="#1-jinjia2模版分隔符" class="headerlink" title="1. jinjia2模版分隔符"></a>1. jinjia2模版分隔符</h3><p>jinjia2模版有两种分隔符</p>
<ol>
<li><code>{</code>% … %<code>}</code> # 用于执行类似 for 循环或者赋值的声明，</li>
<li><code>{</code>{ … }<code>}</code> # 用于输出表达的结果到模板中</li>
</ol>
<h3 id="2-如何组织模版"><a href="#2-如何组织模版" class="headerlink" title="2. 如何组织模版"></a>2. 如何组织模版</h3><p>模板/目录结构反映应用程序的 URL 结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">templates/</div><div class="line">    layout.html</div><div class="line">    index.html</div><div class="line">    about.html</div><div class="line">    profile/</div><div class="line">        layout.html</div><div class="line">        index.html</div><div class="line">    photos.html</div><div class="line">    admin/</div><div class="line">        layout.html</div><div class="line">        index.html</div><div class="line">        analytics.html</div></pre></td></tr></table></figure></p>
<h3 id="3-模版继承"><a href="#3-模版继承" class="headerlink" title="3. 模版继承"></a>3. 模版继承</h3><p>通常有一个顶层的 layout.html，它定义了应用程序的通用布局以及网站的每一部分。<br>如果看看上面的目录的话，会看到一个顶层的 myapp/templates/layout.html，<br>同样还有 myapp/templates/profile/layout.html 和<br>myapp/templates/admin/layout.html。最后两个文件继承和修改第一个文件。<br>继承是用 <code>{</code>% extends %<code>}</code> 和 <code>{</code>% block %<code>}</code> 标签实现的。</p>
<p>在父模板中，我们能定义由子模板来填充的块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;# _myapp/templates/layout.html_ #&#125;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    &#123;% block body %&#125;</div><div class="line">        &lt;h1&gt;This heading is defined in the parent.&lt;/h1&gt;</div><div class="line">    &#123;% endblock %&#125;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>子模版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;# _myapp/templates/index.html_ #&#125;</div><div class="line">&#123;% extends &quot;layout.html&quot; %&#125;</div><div class="line">&#123;% block title %&#125;Hello world!&#123;% endblock %&#125;</div><div class="line">&#123;% block body %&#125;</div><div class="line">    &#123;&#123; super() &#125;&#125;</div><div class="line">    &lt;h2&gt;This heading is defined in the child.&lt;/h2&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p>
<p>super() 函数让我们渲染父级块的内容。</p>
<h3 id="4-创建宏"><a href="#4-创建宏" class="headerlink" title="4. 创建宏"></a>4. 创建宏</h3><p>宏就像由模板代码构成的函数。<br>抽象出重复出现的代码片段到宏,以减少大量的重复代码.<br>在应用程序导航的HTML上，需要给一个 “活跃的”链接一个 class(class=”active”)。<br>没有宏的话，要编写一大段 if … else 语句检查每一个链接来找到正处于活跃的一个。<br>宏提供了一种模块化代码的方式；像函数一样工作.</p>
<ol>
<li>如何使用宏标记一个活跃的链接<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;# myapp/templates/layout.html #&#125;</div><div class="line">&#123;% from &quot;macros.html&quot; import nav_link with context %&#125;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &#123;% block head %&#125;</div><div class="line">        &lt;title&gt;My application&lt;/title&gt;</div><div class="line">    &#123;% endblock %&#125;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul class=&quot;nav-list&quot;&gt;</div><div class="line">            &#123;&#123; nav_link(&apos;home&apos;, &apos;Home&apos;) &#125;&#125;</div><div class="line">            &#123;&#123; nav_link(&apos;about&apos;, &apos;About&apos;) &#125;&#125;</div><div class="line">            &#123;&#123; nav_link(&apos;contact&apos;, &apos;Get in touch&apos;) &#125;&#125;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &#123;% block body %&#125;</div><div class="line">    &#123;% endblock %&#125;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在模板中就是调用一个未定义的宏 - nav_link,<br>并向其传递两个参数：目标端点（例如，目标视图的函数名）以及要显示的文本。</p>
<ol>
<li>如何定义宏<br>定义在模板中使用的 nav_link 宏<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;# myapp/templates/macros.html #&#125;</div><div class="line"></div><div class="line">&#123;% macro nav_link(endpoint, text) %&#125;</div><div class="line">&#123;% if request.endpoint.endswith(endpoint) %&#125;</div><div class="line">    &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;&#123;&#123; url_for(endpoint) &#125;&#125;&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class="line">&#123;% else %&#125;</div><div class="line">    &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(endpoint) &#125;&#125;&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/a&gt;&lt;/li&gt;</div><div class="line">&#123;% endif %&#125;</div><div class="line">&#123;% endmacro %&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意:</strong>导入语句中指定了 with context。<br>Jinja 的 context 是由传递到 render_template() 函数的参数以及来自Python代码的Jinja环境上下文组成。<br>对于模板来说，这些变量在模板被渲染的时候是可用的。<br>一些变量是明显地由我们传入，例如，render_template(“index.html”, color=”red”)，<br>但是还有一些变量和函数是由 Flask 自动地包含在上下文中，例如，request, g 和 session。<br>当我们说{<code>% from ... import ... with context %</code>}的时候，就是告诉 Jinja 这些变量对宏也可用。</p>
<h3 id="5-自定义过滤器"><a href="#5-自定义过滤器" class="headerlink" title="5. 自定义过滤器"></a>5. 自定义过滤器</h3><p>过滤器就是由Python代码组成的函数并且能在模板中使用<br>Jinja 过滤器是一个函数，它能够在{<code>{ ... }</code>}中用于处理一个表达式的结果。在表达式结果输出到模板之前它就被调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h2&gt;&#123;&#123; article.title|title &#125;&#125;&lt;/h2&gt;</div></pre></td></tr></table></figure></p>
<p>在这段代码中，title 过滤器接收 article.title 作为参数并且返回一个过滤后的标题，接着过滤后的标题将会输出到模板中。<br>这就像 UNIX 的“管道化”一个程序到另一个程序的输出。</p>
<p>现在要在myapp/util/filters.py 中定义我们的过滤器。这里给出一个 util 包，它里面有各种各样的模块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># myapp/util/filters.py</div><div class="line"></div><div class="line">from .. import app</div><div class="line"></div><div class="line">@app.template_filter()</div><div class="line">def caps(text):</div><div class="line">    &quot;&quot;&quot;Convert a string to all caps.&quot;&quot;&quot;</div><div class="line">    return text.uppercase()</div></pre></td></tr></table></figure></p>
<p>在这段代码中我们使用 @app.template_filter() 装饰器注册我们的函数成一个 Jinja 过滤器。</p>
<p>默认的过滤器名称就是函数的名称，但是你可以传入一个参数到装饰器中来改变它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@app.template_filter(&apos;make_caps&apos;)</div><div class="line">def caps(text):</div><div class="line">    &quot;&quot;&quot;Convert a string to all caps.&quot;&quot;&quot;</div><div class="line">    return text.uppercase()</div></pre></td></tr></table></figure></p>
<p>现在我们可以在模板中调用 make_caps 而不是caps：{<code>{ &quot;hello world!&quot;|make_caps }</code>}。<br>为了要让我们的过滤器在模板中可用的话，我们只需要在我们的顶层 __init.py__ 的中导入它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># myapp/__init__.py</div><div class="line"></div><div class="line"># Make sure app has been initialized first to prevent circular imports.</div><div class="line">from .util import filters</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flask环境设置]]></title>
      <url>http://arvin-he.github.io/2017/04/04/flask-setup-2017-04-04/</url>
      <content type="html"><![CDATA[<h2 id="1-flask环境搭建"><a href="#1-flask环境搭建" class="headerlink" title="1. flask环境搭建"></a>1. flask环境搭建</h2><ol>
<li>创建一个文件夹microblog: mkdir microblog</li>
<li>进入microblog目录中:cd microblog</li>
<li>在microblog创建虚拟环境: python -m venv flask, 该命令是在 flask 文件夹中创建一个完整的 Python 环境。<br>如果你的python版本低于3.4(包括2.7),需要手动下载安装virtualenv,然后通过命令安装:<br>virtualenv flask</li>
<li>虚拟环境是能够激活和关闭的,一个激活的环境可以将它的bin文件夹加到系统路径.但我不喜欢这个特色,所以我从来不激活任何环境,通过输入我想调用的解释器的路径.如想要使用pip工具,则我会输入:flask/scripit/pip install [packagename]</li>
<li><p>安装flask及扩展</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ flask\Scripts\pip install flask</div><div class="line">$ flask\Scripts\pip install flask-login</div><div class="line">$ flask\Scripts\pip install flask-openid</div><div class="line">$ flask\Scripts\pip install flask-mail</div><div class="line">$ flask\Scripts\pip install flask-sqlalchemy</div><div class="line">$ flask\Scripts\pip install sqlalchemy-migrate</div><div class="line">$ flask\Scripts\pip install flask-whooshalchemy</div><div class="line">$ flask\Scripts\pip install flask-wtf</div><div class="line">$ flask\Scripts\pip install flask-babel</div><div class="line">$ flask\Scripts\pip install guess_language</div><div class="line">$ flask\Scripts\pip install flipflop</div><div class="line">$ flask\Scripts\pip install coverage</div></pre></td></tr></table></figure>
</li>
<li><p>现在你的microblog文件夹下有一个flask子文件夹,这个flask子文件夹中有python解释器以及flask框架和扩展,环境搭建好后就可以使用flask去创建web应用程序了.</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python Coroutine(协程)浅析]]></title>
      <url>http://arvin-he.github.io/2017/04/03/python-coroutine-2017-04-03/</url>
      <content type="html"><![CDATA[<h3 id="1-协程简介"><a href="#1-协程简介" class="headerlink" title="1. 协程简介"></a>1. 协程简介</h3><p>协程，即协作式程序，又称微线程、纤程，英文名Coroutine。<br>思想是，一系列互相依赖的协程间依次使用CPU，每次只有一个协程工作，而其他协程处于休眠状态。<br>协程可以在运行期间的某个点上暂停执行，并在恢复运行时从暂停的点上继续执行。<br>协程已经被证明是一种非常有用的程序组件，不仅被python、lua、ruby等脚本语言广泛采用，而且被新一代面向多核的编程语言如golang rust-lang等采用作为并发的基本单位。<br>协程可以被认为是一种用户空间线程，与传统的线程相比，有2个主要的优点：</p>
<ul>
<li>与线程不同，协程是自己主动让出CPU，并交付他期望的下一个协程运行，而不是在任何时候都有可能被系统调度打断。因此协程的使用更加清晰易懂，并且多数情况下不需要锁机制。</li>
<li>与线程相比，协程的切换由程序控制，发生在用户空间而非内核空间，因此切换的代价非常小。<br>总结起来是一句话：协程可以认为是一种用户态线程，与系统提供的线程不同点是，它需要主动让出CPU时间，而不是由系统进行调度，即控制权在程序员手上。</li>
</ul>
<h3 id="2-Python协程史"><a href="#2-Python协程史" class="headerlink" title="2. Python协程史"></a>2. Python协程史</h3><ul>
<li>Python 2.2 中的生成器让代码执行过程可以暂停 (yield)</li>
<li>Python 2.5 中可以将值返回给暂停的生成器，这使得 Python 中协程的概念成为可能 (send)</li>
<li>Python 3.3 中的 yield from，使得重构生成器与将它们串联起来都很简单 (yield from)</li>
<li>Python 3.4 以后通过标准库 asyncio 获得了事件循环的特性 (asyncio)</li>
<li>Python 3.5 使用async/await语法引入对协程的显式支持 (async/await)</li>
<li>Python 3.6 增强asyncio，支持异步生成器、异步解析式</li>
</ul>
<h3 id="3-yield关键字"><a href="#3-yield关键字" class="headerlink" title="3. yield关键字"></a>3. yield关键字</h3><p>为了理解什么是 yield, 你必须理解什么是生成器(generator)。<br>关于生成器我的理解是是：生成器保存的是算法，需要时再计算(惰性计算)<br>创建生成器有两种方式：<br>第一种方法：把一个列表生成式的[]改成()，就创建了一个generator：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">l = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]    <span class="comment"># l [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></div><div class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))    <span class="comment"># g &lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt;</span></div></pre></td></tr></table></figure></p>
<p>第二种方式：在函数中使用yield关键字，函数就变成了一个generator。<br>函数里有了yield后，执行到yield就会停住，当需要再往下算时才会再往下算。所以生成器函数即使是有无限循环也没关系，它需要算到多少就会算多少，不需要就不往下算。<br>例如你想要自己实现一个 range() 函数，你可以用立即计算的方式创建一个整数列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">eager_range</span><span class="params">(up_to)</span>:</span></div><div class="line">    <span class="string">"""Create a list of integers, from 0 to up_to, exclusive."""</span></div><div class="line">    sequence = []</div><div class="line">    index = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> index &lt; up_to:</div><div class="line">        sequence.append(index)</div><div class="line">        index += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> sequence</div><div class="line"></div><div class="line">l = eager_range(<span class="number">1000000</span>)</div></pre></td></tr></table></figure></p>
<p>然而这里存在的问题是，如果你想创建从0到1,000,000这样一个很大的序列，你不得不创建能容纳1,000,000个整数的列表。<br>但是当加入了生成器之后，你可以不用创建完整的序列，你只需要能够每次保存一个整数的内存即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_range</span><span class="params">(up_to)</span>:</span></div><div class="line">    <span class="string">"""Generator to return the sequence of integers from 0 to up_to, exclusive."""</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> index &lt; up_to:</div><div class="line">        <span class="keyword">yield</span> index</div><div class="line">        index += <span class="number">1</span></div><div class="line"></div><div class="line">g = lazy_range(<span class="number">1000000</span>)    <span class="comment"># &lt;generator object lazy_range at 0x040A25D0&gt;</span></div><div class="line">next(g)</div><div class="line">...</div><div class="line">...</div><div class="line">...</div><div class="line">next(g)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div></pre></td></tr></table></figure>
<p>让函数遇到 yield 表达式时暂停执行 – 虽然在 Python 2.5 以前它只是一条语句 – 并且能够在后面重新执行，这对于减少内存使用、生成无限序列非常有用。<br>你有可能已经发现，生成器完全就是关于迭代器的。有一种更好的方式生成迭代器当然很好（尤其是当你可以给一个生成器对象添加 <strong>iter</strong>() 方法时），<br>但是人们知道，如果可以利用生成器“暂停”的部分，添加“将东西发送回生成器”的功能，那么 Python 突然就有了协程的概念（当然这里的协程仅限于 Python 中的概念；Python 中真实的协程在后面才会讨论）。<br>将东西发送回暂停了的生成器这一特性通过 PEP 342添加到了 Python 2.5。<br>与其它特性一起，PEP 342 为生成器引入了 send() 方法。这让我们不仅可以暂停生成器，而且能够传递值到生成器暂停的地方。<br>还是以我们的 range() 为例，你可以让序列向前或向后跳过几个值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jumping_range</span><span class="params">(up_to)</span>:</span></div><div class="line">    <span class="string">"""Generator for the sequence of integers from 0 to up_to, exclusive.</span></div><div class="line"><span class="string">    Sending a value into the generator will shift the sequence by that amount.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> index &lt; up_to:</div><div class="line">        jump = <span class="keyword">yield</span> index</div><div class="line">        <span class="keyword">if</span> jump <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            jump = <span class="number">1</span></div><div class="line">        index += jump</div><div class="line"></div><div class="line">iterator = jumping_range(<span class="number">5</span>)</div><div class="line">print(next(iterator))     <span class="comment"># 0</span></div><div class="line">print(iterator.send(<span class="number">2</span>))   <span class="comment"># 2</span></div><div class="line">print(next(iterator))     <span class="comment"># 3</span></div><div class="line">print(iterator.send(<span class="number">-1</span>))  <span class="comment"># 2</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> iterator:</div><div class="line">    print(x)              <span class="comment"># 3, 4</span></div></pre></td></tr></table></figure>
<p>其实next()和send()在一定意义上作用是相似的，区别是send()可以传递yield表达式的值进去，而next()不能传递特定的值，只能传递None进去。</p>
<p>因此，我们可以看做next(g) == g.send(None)</p>
<p>需要注意的是，第一次调用时，请使用next()语句或是send(None)，不能使用send发送一个非None的值，否则会出错，因为没有yield语句来接收这个值。</p>
<h3 id="4-yield-from"><a href="#4-yield-from" class="headerlink" title="4. yield from"></a>4. yield from</h3><p>在PEP 380 为 Python 3.3 添加了 yield from之前，生成器都没有变动。<br>严格来说，这一特性让你能够从迭代器（生成器刚好也是迭代器）中返回任何值，从而可以干净利索的方式重构生成器。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">yield</span> <span class="keyword">from</span> iterator</div><div class="line"><span class="comment"># (本质上)相当于：</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> iterator:</div><div class="line">    <span class="keyword">yield</span> x</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_range</span><span class="params">(up_to)</span>:</span></div><div class="line">    <span class="string">"""Generator to return the sequence of integers from 0 to up_to, exclusive."""</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gratuitous_refactor</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">while</span> index &lt; up_to:</div><div class="line">            <span class="keyword">yield</span> index</div><div class="line">            index += <span class="number">1</span></div><div class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> gratuitous_refactor()</div></pre></td></tr></table></figure>
<p>yield from 通过让重构变得简单，也让你能够将生成器串联起来，使返回值可以在调用栈中上下浮动，而不需对编码进行过多改动。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bottom</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""Returning the yield lets the value that goes up the call stack to come right back down"""</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">yield</span> <span class="number">42</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">middle</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">yield</span> <span class="keyword">from</span> bottom())</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">yield</span> <span class="keyword">from</span> middle())</div><div class="line"></div><div class="line"><span class="comment"># Get the generator.</span></div><div class="line">gen = top()</div><div class="line">value = next(gen)</div><div class="line">print(value)  <span class="comment"># Prints '42'.</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    value = gen.send(value * <span class="number">2</span>)</div><div class="line"><span class="keyword">except</span> StopIteration <span class="keyword">as</span> exc:</div><div class="line">    value = exc.value</div><div class="line">print(value)  <span class="comment"># Prints '84'.</span></div></pre></td></tr></table></figure>
<h3 id="5-asyncio"><a href="#5-asyncio" class="headerlink" title="5. asyncio"></a>5. asyncio</h3><p>asyncio是一个基于事件循环的异步I/O库，Python3.4将其引入标准库，Python3.3可通过pip安装<br>asyncio包括的内容很多很复杂，这里只会做基本的两点：协同程序和事件循环。</p>
<p>协程的基本概念前面已经讲过，这里先来说一下事件循环<br>通俗来说，事件循环 “是一种等待程序分配事件或消息的编程架构”，其提供一种循环机制，让你可以“在A发生时，执行B”。基本上来说事件循环就是监听当有什么发生时，同时事件循环也关心这件事并执行相应的代码，本质上是以队列的方式来重新分配时间片。<br>在asyncio中事件循环扮演的是个调度器的角色，被用来安排协同程序的执行。<br>PEP 342中通过asyncio.coroutine装饰的函数为协程，这里的协程是和asyncio及其事件循环一起使用的。<br>这赋予了 Python 第一个对于协程的明确定义，也就是基于生成器的协程<br>这意味着突然之间所有实现了协程接口的生成器，即便它们并不是要以协程方式应用，都符合这一定义。为了修正这一点，asyncio 要求所有要用作协程的生成器必须由asyncio.coroutine修饰。</p>
<p>使用以下语法声明生成器协程：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_coroutine</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">a = generator_coroutine()</div><div class="line">print(a)    <span class="comment"># &lt;generator object coro at 0x040F0B48&gt;</span></div></pre></td></tr></table></figure>
<p>yield from在asyncio模块中得以发扬光大。通过yield from，我们可以用asyncio.sleep将协程控制权交给事件循环，然后挂起当前协程；之后，由事件循环决定何时唤醒asyncio.sleep,接着向后执行代码。<br>先看示例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(number, n)</span>:</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        print(<span class="string">'T-minus'</span>, n, <span class="string">'(&#123;&#125;)'</span>.format(number))</div><div class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</div><div class="line">        n -= <span class="number">1</span></div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">tasks = [</div><div class="line">    asyncio.ensure_future(countdown(<span class="string">"A"</span>, <span class="number">2</span>)),</div><div class="line">    asyncio.ensure_future(countdown(<span class="string">"B"</span>, <span class="number">3</span>))]</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">loop.close()</div></pre></td></tr></table></figure>
<p>在解释上面例子之前，需要先简单了解一下asyncio.Future</p>
<p>Future可以理解为延迟结果的抽象，在其他语言中也称作Promise.<br>你可以对任何asyncio.Future对象使用 yield from，从而将其传递给事件循环，暂停协程的执行来等待某些事情的发生（ future 对象并不重要，只是asyncio细节的实现）。<br>一旦 future 对象获取了事件循环，它会一直在那里监听，直到完成它需要做的一切。<br>当 future 完成自己的任务之后，事件循环会察觉到，暂停并等待在那里的协程会通过send()方法获取future对象的返回值并开始继续执行。</p>
<p>以上面的代码为例, 事件循环启动每一个 countdown() 协程，一直执行到遇见其中一个协程的 yield from 和 asyncio.sleep() 。这样会返回一个 asyncio.Future对象并将其传递给事件循环，同时暂停这一协程的执行。事件循环会监控这一future对象，直到倒计时1秒钟之后（同时也会检查其它正在监控的对象，比如像其它协程）。1秒钟的时间一到，事件循环会选择刚刚传递了future对象并暂停了的 countdown() 协程，将future对象的结果返回给协程，然后协程可以继续执行。这一过程会一直持续到所有的 countdown() 协程执行完毕，事件循环也被清空。稍后我会给你展示一个完整的例子，用来说明协程/事件循环之类的这些东西究竟是如何运作的，但是首先我想要解释一下async和await。</p>
<p>关于asyncio这里只做了简单的介绍，它其实包括以下内容，大家可以去查看<a href="https://docs.python.org/3/library/asyncio.html?highlight=asyncio#module-asyncio" target="_blank" rel="external">官方文档</a>：</p>
<ul>
<li>事件循环</li>
<li>任务和协程</li>
<li>传输和协议</li>
<li>基于协程的流</li>
<li>子进程</li>
<li>同步原语</li>
<li>队列</li>
</ul>
<h3 id="6-async与await"><a href="#6-async与await" class="headerlink" title="6. async与await"></a>6. async与await</h3><p>PEP 492引入async/await语法，中明确了协程类型(原生协程)，用于区别于基于生成器的协程<br>在以前，我们可以用生成器实现协程（PEP 342），后来又对其进行了改进，引入了yield from语法（PEP 380）。但仍有一些缺点：</p>
<ol>
<li>协程和普通生成器使用相同的语法，所以很容易把它们搞混，初学者更是如此。</li>
<li>一个函数是否是一个协程，取决于它里面是否出现了yield或yield from语句。这并不明显，容易在重构函数的时候搞乱，导致出错。</li>
<li>异步调用被yield语法限制了，我们不能获得、使用更多的语法特性，比如with和for。<br>这个PEP把协程从生成器独立出来，成为Python的一个原生事物。这会消除协程和生成器之间的混淆，方便编写不依赖特定库的协程代码。<br>使用以下语法声明原生协程：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">native_coroutine</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">a = native_coroutine()</div><div class="line">print(a)    <span class="comment"># &lt;coroutine object a at 0x000000000567EFC0&gt;</span></div></pre></td></tr></table></figure>
<p>原生协程语法的关键点：</p>
<ul>
<li>async def函数必定是协程，即使里面不含有await语句。</li>
<li>如果在async函数里面使用yield或yield from语句，会引发SyntaxError异常。</li>
<li>协程在调用时会返回一个coroutine对象</li>
<li>协程不再抛出StopIteration异常，而是替代为RuntimeError</li>
<li>当协程进行垃圾回收时，一个从未被await的协程会抛出RuntimeWarning异常</li>
</ul>
<p><strong>await</strong>表达式<br>下面新的await表达式用于获取协程执行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(db)</span>:</span></div><div class="line">    data = <span class="keyword">await</span> db.fetch(<span class="string">'SELECT ...'</span>)</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>await与yield from相似，挂起read_data协程的执行直到db.fetch这个awaitable对象完成并返回结果数据。<br>原生协程与生成器协程的区别与联系</p>
<ul>
<li>原生协程对象不实现__iter__和__next__方法。因此，他们不能够通过iter()，list()，tuple()和其他一些内置函数进行迭代。他们也不能用于for…in循环。在原生协程中尝试使用__iter__或者__next会触发TypeError异常。</li>
<li>未被装饰的生成器不能够yield from一个原生协程：这样会引发TypeError。</li>
<li>基于生成器的协程(asyncio代码必须使用@asyncio.coroutine)可以yield from一个原生协程。</li>
<li>对原生协程对象和原生协程函数调用inspect.isgenerator()和inspect.isgeneratorfunction()会返回False。</li>
<li>协程内部基于生成器，原生协程与生成器协程共享实现过程。类似于生成器对象，原生协程包含throw()，send()和close()方法。</li>
</ul>
<h3 id="7-异步生成器与异步解析式"><a href="#7-异步生成器与异步解析式" class="headerlink" title="7. 异步生成器与异步解析式"></a>7. 异步生成器与异步解析式</h3><p>PEP 492 引入支持原生协程和async /await的语法到Python 3.5。 在Python 3.5实现里的一个值得注意的局限性就在于它不可能使用await和yield在同一个函数体中。<br>而在Python 3.6中，这个限制已解除，这使得定义异步生成器成为可能：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">ticker</span><span class="params">(delay, to)</span>:</span></div><div class="line">    <span class="string">"""Yield numbers from 0 to *to* every *delay* seconds."""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(to):</div><div class="line">        <span class="keyword">yield</span> i</div><div class="line">        <span class="keyword">await</span> asyncio.sleep(delay)</div></pre></td></tr></table></figure></p>
<p>PEP 530 添加了对async for在list、set、dict解析式以及generator表达式中的使用支持：<br>    result = [i async for i in aiter() if i % 2]<br>此外，所有解析式都支持“await”表达式：<br>    result = [await fun() for fun in funcs if await condition()]</p>
<h3 id="8-gevent使用"><a href="#8-gevent使用" class="headerlink" title="8. gevent使用"></a>8. gevent使用</h3><p>gevent是一个基于协同的Python网络库，它使用greenlet在libev事件循环之上提供高级同步API。<br>主要特性：</p>
<ul>
<li>基于libev的快速事件循环</li>
<li>基于greenlet的轻量级执行单元</li>
<li>重用python标准api(event,queue)</li>
<li>协同的socket和ssl模块</li>
<li>使用标准库和第三方模块写标准阻塞socket(gevent.monkey)</li>
<li>通过线程池或c-ares执行的DNS查询。</li>
<li>内置TCP/UDP/HTTP服务器</li>
<li>支持子进程(gevent.subprocess)</li>
<li>支持线程池</li>
</ul>
<p>下面简单介绍gevent的使用<br>gevent.spawn(function, <em>args, **kwargs)<br>创建一个新的Greenlet对象并安排它运行function(</em>args，**kwargs)<br>注意：这时function还没有启动，它的运行依赖于gevent的事件循环，只有启动事件循环，它才会被调度<br>gevent.sleep(seconds=0)<br>将当前的greenlet睡眠seconds秒<br>使用gevent.sleep相当于切换上下文，让出执行权<br>gevent.joinall<br>等待多个greenlet执行结束<br>有时需要知道greenlet运行的状态，在greenlet中有一些标志， 让你可以监视它的线程内部状态:</p>
<ul>
<li>started – Boolean, 指示此Greenlet是否已经启动</li>
<li>ready() – Boolean, 指示此Greenlet是否已经停止</li>
<li>successful() – Boolean, 指示此Greenlet是否已经停止而且没抛异常</li>
<li>value – 任意值, 此Greenlet代码返回的值</li>
<li>exception – 异常, 此Greenlet内抛出的未捕获异常</li>
</ul>
<p>更多<a href="http://www.gevent.org/gevent.html#module-gevent" target="_blank" rel="external">gevent api</a>介绍</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="external">Python官方文档</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0255/" target="_blank" rel="external">PEP 255 – Simple Generators</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0342/" target="_blank" rel="external">PEP 342 – Coroutines via Enhanced Generators</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0380/" target="_blank" rel="external">PEP 380 – Syntax for Delegating to a Subgenerator</a></li>
<li><a href="https://www.python.org/dev/peps/pep-3156/" target="_blank" rel="external">PEP 3156 – Asynchronous IO Support Rebooted: the “asyncio” Module</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0492/" target="_blank" rel="external">PEP 492 – Coroutines with async and await syntax</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">廖雪峰Python教程</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0525/" target="_blank" rel="external">PEP 525</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0530/" target="_blank" rel="external">PEP 530</a></li>
<li><a href="https://github.com/SimonXming/my-blog/issues/23" target="_blank" rel="external">Python 3.5协程原理</a></li>
<li><a href="http://www.gevent.org/contents.html" target="_blank" rel="external">gevent官方文档</a></li>
<li><a href="http://sdiehl.github.io/gevent-tutorial/" target="_blank" rel="external">gevent教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python之列表解析式]]></title>
      <url>http://arvin-he.github.io/2017/04/02/python-listgeneration-2017-04-02/</url>
      <content type="html"><![CDATA[<h3 id="列表解析式概念"><a href="#列表解析式概念" class="headerlink" title="列表解析式概念"></a>列表解析式概念</h3><p>列表解析式是将一个列表（实际上适用于任何可迭代对象（iterable））转换成另一个列表的工具。<br>在转换过程中，可以指定元素必须符合一定的条件，才能添加至新的列表中，这样每个元素都可以按需要进行转换。<br>如果熟悉函数式编程（functional programming），可以把列表解析式看作为结合了filter函数与map函数功能的语法糖：</p>
<h3 id="列表解析式应用"><a href="#列表解析式应用" class="headerlink" title="列表解析式应用"></a>列表解析式应用</h3><p>列表解析式可用来过滤列表中的元素,而不必使用循环加判断的方式</p>
<h3 id="循环与解析式"><a href="#循环与解析式" class="headerlink" title="循环与解析式"></a>循环与解析式</h3><p>每个列表解析式都可以重写为for循环，但不是每个for循环都能重写为列表解析式。</p>
<h3 id="无条件子句的列表解析式"><a href="#无条件子句的列表解析式" class="headerlink" title="无条件子句的列表解析式"></a>无条件子句的列表解析式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">1</span>, <span class="number">11</span>))</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div></pre></td></tr></table></figure>
<h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p>示例如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用两层循环，生成全排列</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</div><div class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</div></pre></td></tr></table></figure></p>
<p>下面是一个拉平（flatten）矩阵（以列表为元素的列表）的for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">flattened = []</div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> row:</div><div class="line">        flattened.append(n)</div></pre></td></tr></table></figure></p>
<p>下面这个列表解析式实现了相同的功能：<br><code>flattened = [n for row in matrix for n in row]</code></p>
<p>如果要在列表解析式中处理嵌套循环，请记住for循环子句的顺序与我们原来for循环的顺序是一致的。<br>若写成<code>flattened = [n for n in row for row in matrix]</code>则是错误的.<br>同样地原则也适用集合解析式（set comprehension）和字典解析式（dictionary comprehension）。</p>
<h3 id="带条件子句的列表解析式"><a href="#带条件子句的列表解析式" class="headerlink" title="带条件子句的列表解析式"></a>带条件子句的列表解析式</h3><p>列表生成式可用来过滤列表中的元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># for循环后面还可以加上if判断</div><div class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</div><div class="line">[4, 16, 36, 64, 100]</div></pre></td></tr></table></figure></p>
<h3 id="字典解析式"><a href="#字典解析式" class="headerlink" title="字典解析式"></a>字典解析式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flipped = &#123;value: key <span class="keyword">for</span> key, value <span class="keyword">in</span> original.items()&#125;</div></pre></td></tr></table></figure>
<h3 id="注意可读性"><a href="#注意可读性" class="headerlink" title="注意可读性"></a>注意可读性</h3><p>Python支持在括号和花括号之间断行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">doubled_odds = [</div><div class="line">    n * <span class="number">2</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers</div><div class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line">]</div><div class="line"></div><div class="line">flattened = [</div><div class="line">    n</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> matrix</div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> row</div><div class="line">]</div><div class="line">flipped = &#123;</div><div class="line">    value: key</div><div class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> original.items()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="external">Python官方文档</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">廖雪峰Python教程</a></li>
<li><a href="http://codingpy.com/article/python-list-comprehensions-explained-visually/" target="_blank" rel="external">http://codingpy.com/article/python-list-comprehensions-explained-visually/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python使用]]></title>
      <url>http://arvin-he.github.io/2017/04/01/python-skills-2017-04-01/</url>
      <content type="html"><![CDATA[<h3 id="1-windows下Python2与Python3共存的使用方法"><a href="#1-windows下Python2与Python3共存的使用方法" class="headerlink" title="1. windows下Python2与Python3共存的使用方法"></a>1. windows下Python2与Python3共存的使用方法</h3><p>windows下同时安装了Python2.7.13与Python3.6后,默认的使用python2.</p>
<ol>
<li>命令行分别使用python2和python3</li>
</ol>
<ul>
<li>调用python2,使用 py -2</li>
<li>调用python3,使用 py -3</li>
</ul>
<ol>
<li>使用pip安装库</li>
</ol>
<ul>
<li>安装到Python2时，就使用 pip2 install [name]</li>
<li>安装到Python3时，就使用pip3 install [name]</li>
</ul>
<h3 id="2-pip工具使用"><a href="#2-pip工具使用" class="headerlink" title="2. pip工具使用"></a>2. pip工具使用</h3><p>pip 命令使用:<br>  pip <command> [options]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Commands:</div><div class="line">  install                     Install packages.</div><div class="line">  download                    Download packages.</div><div class="line">  uninstall                   Uninstall packages.</div><div class="line">  freeze                      Output installed packages in requirements format.</div><div class="line">  list                        List installed packages.</div><div class="line">  show                        Show information about installed packages.</div><div class="line">  check                       Verify installed packages have compatible dependencies.</div><div class="line">  search                      Search PyPI for packages.</div><div class="line">  wheel                       Build wheels from your requirements.</div><div class="line">  hash                        Compute hashes of package archives.</div><div class="line">  completion                  A helper command used for command completion.</div><div class="line">  help                        Show help for commands.</div></pre></td></tr></table></figure></p>
<h3 id="3-Windows下python非官方第三方包地址"><a href="#3-Windows下python非官方第三方包地址" class="headerlink" title="3. Windows下python非官方第三方包地址"></a>3. Windows下python非官方第三方包地址</h3><p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy" target="_blank" rel="external">Windows下python非官方第三方包地址</a></p>
<h3 id="4-python中的对象引用"><a href="#4-python中的对象引用" class="headerlink" title="4. python中的对象引用"></a>4. python中的对象引用</h3><p>python中set,list,tuple,dict都是表示对象,这些对象在给新对象赋值的时候是传递引用,并不是传值.</p>
<h3 id="5-返回值问题"><a href="#5-返回值问题" class="headerlink" title="5. 返回值问题"></a>5. 返回值问题</h3><p>有时在一个循环里计算,然后将计算的结果一起返回,注意return语句的位置,不能放在循环里.尤其注意在循环语句比较多的情况下.</p>
<h3 id="6-Python-按给定的长度分割字符串"><a href="#6-Python-按给定的长度分割字符串" class="headerlink" title="6. Python 按给定的长度分割字符串"></a>6. Python 按给定的长度分割字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">aa = <span class="string">'asdf21232465'</span></div><div class="line">b=re.findall(<span class="string">r'.&#123;2&#125;'</span>,aa)</div><div class="line"><span class="keyword">print</span> b</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="keyword">print</span> [aa[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(aa), <span class="number">2</span>)]</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git命令使用]]></title>
      <url>http://arvin-he.github.io/2017/03/31/gitcmd-2017-03-31/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>版本管理基本上是多人协作开发中必不可少的工具，常用的版本管理工具有：svn和git。虽然都有可视化的工具帮助我们使用这些工具，然而当你用上命令行之后，我想你会选择抛弃这些可视化工具。下面是我整理的一些常用的Git命令。</p>
<p>一个比较全面很好的Git书: <a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git Pro 第二版</a></p>
<p>一些概念:</p>
<ol>
<li>工作区与暂存区<br>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。<br>工作区就是你在电脑里能看到的目录，比如我的testgit文件夹就是一个工作区,但不包括.git这个隐藏目录.<br>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的<strong>暂存区</strong>，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</li>
</ol>
<p>我们把文件往 Git 版本库里添加的时候，是分两步执行的：<br>第一步是用git add把文件添加进去，实际上就是把文件修改添加到<strong>暂存区</strong>；<br>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。<br>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以现在git commit就是往master分支上提交更改。<br>可以简单理解为，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后执行git commit就可以一次性把暂存区的所有修改提交到分支。<br>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的。</p>
<ol>
<li>global选项<br>配置Git的时候，加上–global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用</li>
</ol>
<h3 id="1-配置Git邮箱和用户名-因为每一次提交都需要这些信息"><a href="#1-配置Git邮箱和用户名-因为每一次提交都需要这些信息" class="headerlink" title="1. 配置Git邮箱和用户名, 因为每一次提交都需要这些信息"></a>1. 配置Git邮箱和用户名, 因为每一次提交都需要这些信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;John Doe&quot;</div><div class="line">$ git config --global user.email johndoe@example.com</div></pre></td></tr></table></figure>
<p><strong>注意:</strong><br>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。<br>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>
<h3 id="2-查看git配置信息"><a href="#2-查看git配置信息" class="headerlink" title="2. 查看git配置信息"></a>2. 查看git配置信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --list #检查已有的配置信息</div><div class="line">git config user.name #查看git用户名</div><div class="line">git config user.email #查看git邮箱</div></pre></td></tr></table></figure>
<h3 id="3-在本地保存github帐号的用户名和密码-不用每次输入用户名和密码"><a href="#3-在本地保存github帐号的用户名和密码-不用每次输入用户名和密码" class="headerlink" title="3. 在本地保存github帐号的用户名和密码,不用每次输入用户名和密码"></a>3. 在本地保存github帐号的用户名和密码,不用每次输入用户名和密码</h3><p>使用https协议时,在向远程仓库push提交内容时,总是每次要求输入你的github用户名和密码<br>解决办法:</p>
<ol>
<li><p>设置记住密码（默认15分钟）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global credential.helper cache</div></pre></td></tr></table></figure>
</li>
<li><p>自己设置记住密码时间,比如一小时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config credential.helper ‘cache --timeout=3600’</div></pre></td></tr></table></figure>
</li>
<li><p>长期存储密码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global credential.helper store</div></pre></td></tr></table></figure>
</li>
</ol>
<p>配置好后在 .gitconfig 文件中可以看到.</p>
<h3 id="4-配置github上ssh密匙-不用每次输入用户名和密码"><a href="#4-配置github上ssh密匙-不用每次输入用户名和密码" class="headerlink" title="4. 配置github上ssh密匙,不用每次输入用户名和密码"></a>4. 配置github上ssh密匙,不用每次输入用户名和密码</h3><p>使用ssh协议时,也要输入用户名和密码,要想不用每次输入用户名和密码,则在你的本地机器生成ssh的私匙和公匙,<br>私匙保存在本地机器,公匙保存在你的github网站上的帐号设置上.</p>
<ol>
<li><p>创建SSH Key<br>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，<br>如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>登陆GitHub，打开“Settings”，“SSH and GPG Keys”页面</p>
</li>
<li>点击“New SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容</li>
</ol>
<h3 id="5-移除跟踪但不删除文件，以便稍后在-gitignore-文件中补上，用-–cached-选项即可"><a href="#5-移除跟踪但不删除文件，以便稍后在-gitignore-文件中补上，用-–cached-选项即可" class="headerlink" title="5. 移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 –cached 选项即可"></a>5. 移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 –cached 选项即可</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached readme.txt</div></pre></td></tr></table></figure>
<h3 id="6-修改-gitignore并更新本地和远程仓库"><a href="#6-修改-gitignore并更新本地和远程仓库" class="headerlink" title="6. 修改.gitignore并更新本地和远程仓库"></a>6. 修改.gitignore并更新本地和远程仓库</h3><ol>
<li>在.gitignore修改过滤规则,并保存.</li>
<li>更新本地和远程仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 注意有个点“.”</div><div class="line">git rm -r --cached .</div><div class="line">git add -A</div><div class="line">git commit -m &quot;update .gitignore&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>配置.gitignore<br>所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a><br>当然也可以配置全局忽略的文件，这样就不用每个项目都加gitignore了：<code>git config --global core.excludesfile &#39;~/.gitignore&#39;</code></p>
<h3 id="7-丢弃本地修改-使用远程仓库的内容"><a href="#7-丢弃本地修改-使用远程仓库的内容" class="headerlink" title="7. 丢弃本地修改,使用远程仓库的内容"></a>7. 丢弃本地修改,使用远程仓库的内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git fetch --all</div><div class="line">git reset --hard origin/master</div><div class="line">git fetch 只是下载远程的库的内容，不做任何的合并,</div><div class="line">git reset 把HEAD指向刚刚下载的最新的版本</div></pre></td></tr></table></figure>
<h3 id="8-本地仓库首次推送到github远程仓库"><a href="#8-本地仓库首次推送到github远程仓库" class="headerlink" title="8. 本地仓库首次推送到github远程仓库"></a>8. 本地仓库首次推送到github远程仓库</h3><ol>
<li>在github上建立一个和本地同名的仓库名称</li>
<li>在本地命令行输入:<code>git remote add origin 远程仓库地址</code></li>
<li>将本地仓库同步到github远程仓库:<code>git push -u origin master</code></li>
</ol>
<h3 id="9-恢复本地删除的文件"><a href="#9-恢复本地删除的文件" class="headerlink" title="9. 恢复本地删除的文件"></a>9. 恢复本地删除的文件</h3><p>恢复已commit的文件:<code>Git checkout commit_id -- file_name</code><br>恢复未commit的文件:<code>git checkout -- file_name</code></p>
<h3 id="10-打标签"><a href="#10-打标签" class="headerlink" title="10. 打标签"></a>10. 打标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">git tag    #显示已有标签</div><div class="line">git tag -l &apos;v1.4.2.*&apos;   #用特定的搜索模式列出符合条件的标签</div><div class="line">#创建一个含附注类型的标签,-a （译注：取 annotated 的首字母）指定标签名字,-m 选项则指定了对应的标签说明</div><div class="line">git tag -a v1.4 -m &apos;my version 1.4&apos;  </div><div class="line">git show v1.4    #查看相应标签的版本信息，并连同显示打标签时的提交对象</div><div class="line">git tag v1.4   #创建轻量级标签,一个 -a，-s 或 -m 选项都不用，直接给出标签名字即可</div><div class="line">git push origin v1.5 #默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库</div><div class="line">git push origin --tags  # 一次推送所有本地新增的标签，可以使用 --tags 选项</div><div class="line"></div><div class="line"># 删除标签</div><div class="line">git tag -d v0.1 </div><div class="line"></div><div class="line"># 删除远程仓库标签,先从本地删除,再从远程删除</div><div class="line">git tag -d v0.9</div><div class="line">git push origin :refs/tags/v0.9</div></pre></td></tr></table></figure>
<h3 id="11-git将本地仓库上传到远程仓库"><a href="#11-git将本地仓库上传到远程仓库" class="headerlink" title="11. git将本地仓库上传到远程仓库"></a>11. git将本地仓库上传到远程仓库</h3><p>本地新建了一个文件夹,并执行了git init,初始化为一个git仓库了, 然后add,再commit后,想要把本地仓库内容上传到github上去,但此时github上没有这个仓库.<br>因此先到github上创建与你本地仓库同名的仓库,此时还是一个空仓库,需要把本地的内容上传到github上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/yourname/yourrepo.git</div><div class="line">git push -u origin master  # 第一次推送master分支时，加上了-u参数</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<h3 id="12-版本回退"><a href="#12-版本回退" class="headerlink" title="12. 版本回退"></a>12. 版本回退</h3><p>在 Git中，用HEAD表示当前版本，也就是最新的提交commit id，<br>上一个版本就是HEAD^，上上一个版本就是HEAD^^，<br>往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 查看日志</div><div class="line">git log</div><div class="line"># 简化日志信息</div><div class="line">git log  --pretty=oneline</div><div class="line"></div><div class="line"># 当前版本回退到上一个版本，就可以使用git reset命令:</div><div class="line">git reset --hard HEAD^</div><div class="line"></div><div class="line"># 当前版本是过去的某个版本,想回到当前版本的之后的版本</div><div class="line">git reset --hard 2e70fdf(commit id)</div></pre></td></tr></table></figure></p>
<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 把readme.md文件在工作区的修改全部撤销，即让这个文件回到最近一次git commit或git add时的状态,也可使用reset</div><div class="line">git checkout -- readme.md</div></pre></td></tr></table></figure>
<h3 id="Git显示颜色，会让命令输出看起来更醒目"><a href="#Git显示颜色，会让命令输出看起来更醒目" class="headerlink" title="Git显示颜色，会让命令输出看起来更醒目"></a>Git显示颜色，会让命令输出看起来更醒目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global color.ui true</div></pre></td></tr></table></figure>
<h3 id="fatal-remote-origin-already-exists"><a href="#fatal-remote-origin-already-exists" class="headerlink" title="fatal: remote origin already exists"></a>fatal: remote origin already exists</h3><p> 如果输入$ Git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git<br>提示出错信息：fatal: remote origin already exists.</p>
<p>解决办法如下：<br>1.先输入$ git remote rm origin</p>
<p>2.再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！</p>
<p>3.如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容</p>
<p>4.找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc</p>
<p>5.找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！</p>
<h3 id="使用git在本地创建一个项目的过程"><a href="#使用git在本地创建一个项目的过程" class="headerlink" title="使用git在本地创建一个项目的过程"></a>使用git在本地创建一个项目的过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 创建一个项目hello-world</div><div class="line">$ makdir ~/hello-world    </div><div class="line"># 打开这个项目</div><div class="line">$ cd ~/hello-world        </div><div class="line"># 初始化 </div><div class="line">$ git init                </div><div class="line">$ touch README</div><div class="line"># 更新README文件</div><div class="line">$ git add README          </div><div class="line"># 提交更新，并注释信息“first commit” </div><div class="line">$ git commit -m &apos;first commit&apos;</div><div class="line"># 连接远程github项目  </div><div class="line">$ git remote add origin git@github.com:defnngj/hello-world.git     </div><div class="line"># 将本地项目更新到github项目上去</div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<h3 id="如果输入-git-push-origin-master"><a href="#如果输入-git-push-origin-master" class="headerlink" title="如果输入$ git push origin master"></a>如果输入$ git push origin master</h3><p>提示出错信息：error:failed to push som refs to …<br>解决办法如下：</p>
<ol>
<li>先输入$ git pull origin master //先把远程服务器github上面的文件拉下来</li>
<li>再输入$ git push origin master</li>
<li>如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository.</li>
<li>则需要重新输入$ git remote add origin git@github.com:djqiang/gitdemo.git</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式使用]]></title>
      <url>http://arvin-he.github.io/2017/03/30/reg-tutorial-2017-03-30/</url>
      <content type="html"><![CDATA[<h3 id="1-常用元字符"><a href="#1-常用元字符" class="headerlink" title="1. 常用元字符"></a>1. 常用元字符</h3><table>
<thead>
<tr>
<th style="text-align:left">元字符</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">匹配字母或数字或下划线或汉字</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">匹配任意的空白符</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">匹配数字</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">匹配单词的开始或结束</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配字符串的开始</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配字符串的结束</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<ul>
<li>\b 代表着单词的开头或结尾,即单词的分界处.通常英文的单词是由空格,标点符号或者换行来分隔的,<br>但是\b并不匹配这些单词分隔字符中的任何一个,它只匹配一个<strong>位置</strong>. </li>
<li>. 点号也是一个元字符,匹配除换行符意外的任意任意字符.</li>
<li>* 星号元字符,代表的不是字符,也不是位置,而是数量.它指定*前面的内容可以连续重复使用任意次数来使整个表达式得到匹配.</li>
<li>.* 则表示匹配任意数量的不包含换行的字符</li>
<li>\d 元字符,匹配一位数字</li>
<li>\s 匹配任意的空白符,包括空格,制表符(Tab),换行符,中文全角空格等.</li>
<li>\w 匹配字母,数字,下划线或汉字等.</li>
<li>\d+ 匹配1个或者更多连续的数字</li>
<li>+ 与 * 的区别:</li>
<li>* 匹配重复任意次,也可能是0次</li>
<li>+ 匹配重复1次或更多次</li>
</ul>
<h3 id="2-字符转义"><a href="#2-字符转义" class="headerlink" title="2. 字符转义"></a>2. 字符转义</h3><p>查找匹配.或<em>或\等字符就得使用\来取消这些字符的特殊意义,因为它们会被解释成别的意思。<br>因此，应该使用.和\</em>和\. 例如：C:\Windows匹配C:\Windows。</p>
<h3 id="3-重复匹配次数的限定符"><a href="#3-重复匹配次数的限定符" class="headerlink" title="3. 重复匹配次数的限定符"></a>3. 重复匹配次数的限定符</h3><table>
<thead>
<tr>
<th style="text-align:left">代码/语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">重复零次或更多次</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">重复一次或更多次</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">重复零次或一次</td>
</tr>
<tr>
<td style="text-align:left">{n}</td>
<td style="text-align:left">重复n次</td>
</tr>
<tr>
<td style="text-align:left">{n,}</td>
<td style="text-align:left">重复n次或更多次</td>
</tr>
<tr>
<td style="text-align:left">{n,m}</td>
<td style="text-align:left">重复n到m次</td>
</tr>
</tbody>
</table>
<h3 id="4-指定匹配范围"><a href="#4-指定匹配范围" class="headerlink" title="4. 指定匹配范围"></a>4. 指定匹配范围</h3><p>匹配在指定字符范围或集合中的一个字符,用[指定你的字符范围或集合]<br>如[aeiou] 匹配任何一个英文元音字母<br>[.?!] 匹配标点符号(.或?或!)<br>[0-9]代表的含意与\d就是完全一致的：匹配一位数字</p>
<h3 id="5-多条件匹配"><a href="#5-多条件匹配" class="headerlink" title="5. 多条件匹配"></a>5. 多条件匹配</h3><p>多条件匹配,如果满足其中任意一个匹配条件则匹配,多个匹配条件使用|将多个匹配条件隔开.<br><strong>注意:</strong> 使用多条件匹配要注意各个条件的顺序,多条件匹配是从左到右地测试每个条件，如果满足了某个条件，就不会去再管其它的条件了。<br>例如:<br>\d{5}-\d{4}|\d{5}这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。<br>如果你把它改成\d{5}|\d{5}-\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。</p>
<h3 id="6-分组"><a href="#6-分组" class="headerlink" title="6. 分组"></a>6. 分组</h3><p>重复单个字符: 直接在字符后面加上限定符<br>重复多个字符: 使用括号指定子表达式,再对这个子表达式加次数限定符<br>组号分配原则：<br>分组0对应整个正则表达式<br>实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号<br>你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权<br>例如:匹配IP<br>((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)<br>常用分组语法:</p>
<table>
<thead>
<tr>
<th style="text-align:left">分类</th>
<th style="text-align:left">语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">捕获</td>
<td style="text-align:left">(exp)</td>
<td style="text-align:left">匹配exp,并捕获文本到自动命名的组里</td>
</tr>
<tr>
<td style="text-align:left">捕获</td>
<td style="text-align:left">(?<name>exp)</name></td>
<td style="text-align:left">匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td>
</tr>
<tr>
<td style="text-align:left">捕获</td>
<td style="text-align:left">(?:exp)</td>
<td style="text-align:left">匹配exp,不捕获匹配的文本，也不给此分组分配组号</td>
</tr>
<tr>
<td style="text-align:left">零宽断言</td>
<td style="text-align:left">(?=exp)</td>
<td style="text-align:left">匹配exp前面的位置</td>
</tr>
<tr>
<td style="text-align:left">零宽断言</td>
<td style="text-align:left">(?&lt;=exp)</td>
<td style="text-align:left">匹配 exp后面的位置</td>
</tr>
<tr>
<td style="text-align:left">零宽断言</td>
<td style="text-align:left">(?!exp)</td>
<td style="text-align:left">匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td style="text-align:left">零宽断言</td>
<td style="text-align:left">(?&lt;!exp)</td>
<td style="text-align:left">匹配前面不是exp的位置</td>
</tr>
<tr>
<td style="text-align:left">注释</td>
<td style="text-align:left">(?#comment)</td>
<td style="text-align:left">这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td>
</tr>
</tbody>
</table>
<p>第三个(?:exp)不会改变正则表达式的处理方式，只是这样的组匹配的内容不会像前两种那样被捕获到某个组里面，也不会拥有组号。</p>
<h3 id="7-反义"><a href="#7-反义" class="headerlink" title="7. 反义"></a>7. 反义</h3><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况.<br>常用到的反义：</p>
<table>
<thead>
<tr>
<th style="text-align:left">语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:left">匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:left">匹配任意非数字的字符</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">匹配不是单词开头或结束的位置</td>
</tr>
</tbody>
</table>
<p>例如:<br>[^x]    匹配除了x以外的任意字符<br>[^aeiou]    匹配除了aeiou这几个字母以外的任意字符</p>
<h3 id="8-后向引用"><a href="#8-后向引用" class="headerlink" title="8. 后向引用"></a>8. 后向引用</h3><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。后向引用用于重复搜索前面某个分组匹配的文本。</p>
<p>你也可以自己指定子表达式的组名。指定一个子表达式的组名语法：<br>(?<word>\w+)(或者把尖括号换成’也行：(?’Word’\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<word>,所以上一个例子也可以写成这样：\b(?<word>\w+)\b\s+\k<word>\b。</word></word></word></word></p>
<h3 id="9-注释"><a href="#9-注释" class="headerlink" title="9. 注释"></a>9. 注释</h3><p>小括号的另一种用途是通过语法(?#comment)来包含注释</p>
<p>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。<br>例如，我们可以前面的一个表达式写成这样：<br>(?&lt;=    # 断言要匹配的文本的前缀<br>&lt;(\w+)&gt; # 查找尖括号括起来的字母或数字(即HTML/XML标签)<br>)       # 前缀结束<br>.*      # 匹配任意文本<br>(?=     # 断言要匹配的文本的后缀<br>&lt;\/\1&gt;  # 查找尖括号括起来的内容：前面是一个”/“，后面是先前捕获的标签<br>)       # 后缀结束</p>
<h3 id="10-贪婪与懒惰"><a href="#10-贪婪与懒惰" class="headerlink" title="10. 贪婪与懒惰"></a>10. 贪婪与懒惰</h3><p>正则表达式通常的行为是贪婪匹配<br>贪婪匹配:一次匹配尽可能多的字符<br>懒惰匹配:一次匹配尽可能少的字符<br>贪婪匹配转懒惰匹配:只要在后面加上?<br>懒惰限定符:</p>
<table>
<thead>
<tr>
<th style="text-align:left">语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*?</td>
<td style="text-align:left">重复任意次，但尽可能少重复</td>
</tr>
<tr>
<td style="text-align:left">+?</td>
<td style="text-align:left">重复1次或更多次，但尽可能少重复</td>
</tr>
<tr>
<td style="text-align:left">??</td>
<td style="text-align:left">重复0次或1次，但尽可能少重复</td>
</tr>
<tr>
<td style="text-align:left">{n,m}?</td>
<td style="text-align:left">重复n到m次，但尽可能少重复</td>
</tr>
<tr>
<td style="text-align:left">{n,}?</td>
<td style="text-align:left">重复n次以上，但尽可能少重复</td>
</tr>
</tbody>
</table>
<h3 id="11-处理选项"><a href="#11-处理选项" class="headerlink" title="11. 处理选项"></a>11. 处理选项</h3><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">IgnoreCase(忽略大小写)</td>
<td style="text-align:left">匹配时不区分大小写。</td>
</tr>
<tr>
<td style="text-align:left">Multiline(多行模式)</td>
<td style="text-align:left">更改^和$的含义,使它们分别在任意一行的行首和行尾匹配,而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)</td>
</tr>
<tr>
<td style="text-align:left">Singleline(单行模式)</td>
<td style="text-align:left">更改.的含义，使它与每一个字符匹配（包括换行符\n）。</td>
</tr>
<tr>
<td style="text-align:left">IgnorePatternWhitespace(忽略空白)</td>
<td style="text-align:left">忽略表达式中的非转义空白并启用由#标记的注释。</td>
</tr>
<tr>
<td style="text-align:left">ExplicitCapture(显式捕获)</td>
<td style="text-align:left">仅捕获已被显式命名的组。</td>
</tr>
</tbody>
</table>
<h3 id="12-递归匹配-平衡组"><a href="#12-递归匹配-平衡组" class="headerlink" title="12. 递归匹配/平衡组"></a>12. 递归匹配/平衡组</h3><table>
<thead>
<tr>
<th style="text-align:left">语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">(?’group’)</td>
<td style="text-align:left">把捕获的内容命名为group,并压入堆栈(Stack)</td>
</tr>
<tr>
<td style="text-align:left">(?’-group’)</td>
<td style="text-align:left">从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败</td>
</tr>
<tr>
<td style="text-align:left">(?(group)yes&#124;no)</td>
<td style="text-align:left">如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分</td>
</tr>
<tr>
<td style="text-align:left">(?!)</td>
<td style="text-align:left">零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</td>
</tr>
</tbody>
</table>
<p>我们需要做的是每碰到了左括号，就在压入一个”Open”,每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;                         #最外层的左括号</div><div class="line">    [^&lt;&gt;]*                #最外层的左括号后面的不是括号的内容</div><div class="line">    (</div><div class="line">        (</div><div class="line">            (?&apos;Open&apos;&lt;)    #碰到了左括号，在黑板上写一个&quot;Open&quot;</div><div class="line">            [^&lt;&gt;]*       #匹配左括号后面的不是括号的内容</div><div class="line">        )+</div><div class="line">        (</div><div class="line">            (?&apos;-Open&apos;&gt;)   #碰到了右括号，擦掉一个&quot;Open&quot;</div><div class="line">            [^&lt;&gt;]*        #匹配右括号后面不是括号的内容</div><div class="line">        )+</div><div class="line">    )*</div><div class="line">    (?(Open)(?!))         #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的&quot;Open&quot;；如果还有，则匹配失败</div><div class="line"></div><div class="line">&gt;                         #最外层的右括号</div></pre></td></tr></table></figure></p>
<p>平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的<div>标签：</div></p>
<p><div[^>]<em>&gt;[^&lt;&gt;]</em>(((?’Open’<div[^>]<em>&gt;)[^&lt;&gt;]</em>)+((?’-Open’)[^&lt;&gt;]<em>)+)</em>(?(Open)(?!)).</div[^></div[^></p>
<h3 id="13-未详细讨论的语法"><a href="#13-未详细讨论的语法" class="headerlink" title="13. 未详细讨论的语法"></a>13. 未详细讨论的语法</h3><table>
<thead>
<tr>
<th style="text-align:left">代码/语法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\a</td>
<td style="text-align:left">报警字符(打印它的效果是电脑嘀一声)</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">通常是单词分界位置，但如果在字符类里使用代表退格</td>
</tr>
<tr>
<td style="text-align:left">\t</td>
<td style="text-align:left">制表符，Tab</td>
</tr>
<tr>
<td style="text-align:left">\r</td>
<td style="text-align:left">回车</td>
</tr>
<tr>
<td style="text-align:left">\v</td>
<td style="text-align:left">竖向制表符</td>
</tr>
<tr>
<td style="text-align:left">\f</td>
<td style="text-align:left">换页符</td>
</tr>
<tr>
<td style="text-align:left">\n</td>
<td style="text-align:left">换行符</td>
</tr>
<tr>
<td style="text-align:left">\e</td>
<td style="text-align:left">Escape</td>
</tr>
<tr>
<td style="text-align:left">\0nn</td>
<td style="text-align:left">ASCII代码中八进制代码为nn的字符</td>
</tr>
<tr>
<td style="text-align:left">\xnn</td>
<td style="text-align:left">ASCII代码中十六进制代码为nn的字符</td>
</tr>
<tr>
<td style="text-align:left">\unnnn</td>
<td style="text-align:left">Unicode代码中十六进制代码为nnnn的字符</td>
</tr>
<tr>
<td style="text-align:left">\cN</td>
<td style="text-align:left">ASCII控制字符。比如\cC代表Ctrl+C</td>
</tr>
<tr>
<td style="text-align:left">\A</td>
<td style="text-align:left">字符串开头(类似^，但不受处理多行选项的影响)</td>
</tr>
<tr>
<td style="text-align:left">\Z</td>
<td style="text-align:left">字符串结尾或行尾(不受处理多行选项的影响)</td>
</tr>
<tr>
<td style="text-align:left">\z</td>
<td style="text-align:left">字符串结尾(类似$，但不受处理多行选项的影响)</td>
</tr>
<tr>
<td style="text-align:left">\G</td>
<td style="text-align:left">当前搜索的开头</td>
</tr>
<tr>
<td style="text-align:left">\p{name}</td>
<td style="text-align:left">Unicode中命名为name的字符类，例如\p{IsGreek}</td>
</tr>
<tr>
<td style="text-align:left">(?&gt;exp)</td>
<td style="text-align:left">贪婪子表达式</td>
</tr>
<tr>
<td style="text-align:left">(?\<x>-<y>exp)</y></x></td>
<td style="text-align:left">平衡组</td>
</tr>
<tr>
<td style="text-align:left">(?im-nsx:exp)</td>
<td style="text-align:left">在子表达式exp中改变处理选项</td>
</tr>
<tr>
<td style="text-align:left">(?im-nsx)</td>
<td style="text-align:left">为表达式后面的部分改变处理选项</td>
</tr>
<tr>
<td style="text-align:left">(?(exp)yes\</td>
<td style="text-align:left">no)</td>
<td>把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no</td>
</tr>
<tr>
<td style="text-align:left">(?(exp)yes)</td>
<td style="text-align:left">同上，只是使用空表达式作为no</td>
</tr>
<tr>
<td style="text-align:left">(?(name)yes\</td>
<td style="text-align:left">no)</td>
<td>如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no</td>
</tr>
<tr>
<td style="text-align:left">(?(name)yes)</td>
<td style="text-align:left">同上，只是使用空表达式作为no</td>
</tr>
</tbody>
</table>
<h3 id="14-常用正则表达式"><a href="#14-常用正则表达式" class="headerlink" title="14. 常用正则表达式"></a>14. 常用正则表达式</h3><p><strong>说明：</strong>正则表达式通常用于两种任务：1.验证，2.搜索/替换。<br>用于验证时，通常需要在前后分别加上^和$，以匹配整个待验证字符串；<br>搜索/替换时是否加上此限定则根据搜索的要求而定，<br>此外，也有可能要在前后加上\b而不是^和$。<br>此表所列的常用正则表达式，除个别外均未在前后加上任何限定，请根据需要，自行处理。</p>
<table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">正则表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">网址（URL）</td>
<td style="text-align:left">[a-zA-z]+://[^\s]*</td>
</tr>
<tr>
<td style="text-align:left">IP地址(IP Address)</td>
<td style="text-align:left">((2[0-4]\d</td>
<td>25[0-5]</td>
<td>[01]?\d\d?).){3}(2[0-4]\d</td>
<td>25[0-5]</td>
<td>[01]?\d\d?)</td>
</tr>
<tr>
<td style="text-align:left">电子邮件(Email)</td>
<td style="text-align:left">\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</td>
</tr>
<tr>
<td style="text-align:left">QQ号码</td>
<td style="text-align:left">[1-9]\d{4,}</td>
</tr>
<tr>
<td style="text-align:left">HTML标记(包含内容或自闭合)</td>
<td style="text-align:left">&lt;(.<em>)(.</em>)&gt;.*&lt;\/\1&gt;</td>
<td>&lt;(.*) \/&gt;</td>
</tr>
<tr>
<td style="text-align:left">密码(由数字/大写字母/小写字母/标点符号组成，四种都必有，8位以上)</td>
<td style="text-align:left">(?=^.{8,}$)(?=.<em>\d)(?=.</em>\W+)(?=.<em>[A-Z])(?=.</em>[a-z])(?!.<em>\n).</em>$</td>
</tr>
<tr>
<td style="text-align:left">日期(年-月-日)</td>
<td style="text-align:left">(\d{4}</td>
<td>\d{2})-((1[0-2])</td>
<td>(0?[1-9]))-(([12][0-9])</td>
<td>(3[01])</td>
<td>(0?[1-9]))</td>
</tr>
<tr>
<td style="text-align:left">日期(月/日/年)</td>
<td style="text-align:left">((1[0-2])</td>
<td>(0?[1-9]))/(([12][0-9])</td>
<td>(3[01])</td>
<td>(0?[1-9]))/(\d{4}</td>
<td>\d{2})</td>
</tr>
<tr>
<td style="text-align:left">时间(小时:分钟, 24小时制)</td>
<td style="text-align:left">((1</td>
<td>0?)[0-9]</td>
<td>2[0-3]):([0-5][0-9])</td>
</tr>
<tr>
<td style="text-align:left">汉字(字符)</td>
<td style="text-align:left">[\u4e00-\u9fa5]</td>
</tr>
<tr>
<td style="text-align:left">中文及全角标点符号(字符)</td>
<td style="text-align:left">[\u3000-\u301e\ufe10-\ufe19\ufe30-\ufe44\ufe50-\ufe6b\uff01-\uffee]</td>
</tr>
<tr>
<td style="text-align:left">中国大陆固定电话号码</td>
<td style="text-align:left">(\d{4}-</td>
<td>\d{3}-)?(\d{8}</td>
<td>\d{7})</td>
</tr>
<tr>
<td style="text-align:left">中国大陆手机号码</td>
<td style="text-align:left">1\d{10}</td>
</tr>
<tr>
<td style="text-align:left">中国大陆邮政编码</td>
<td style="text-align:left">[1-9]\d{5}</td>
</tr>
<tr>
<td style="text-align:left">中国大陆身份证号(15位或18位)</td>
<td style="text-align:left">\d{15}(\d\d[0-9xX])?</td>
</tr>
<tr>
<td style="text-align:left">非负整数(正整数或零)</td>
<td style="text-align:left">\d+</td>
</tr>
<tr>
<td style="text-align:left">正整数</td>
<td style="text-align:left">[0-9]<em>[1-9][0-9]</em></td>
</tr>
<tr>
<td style="text-align:left">负整数</td>
<td style="text-align:left">-[0-9]<em>[1-9][0-9]</em></td>
</tr>
<tr>
<td style="text-align:left">整数</td>
<td style="text-align:left">-?\d+</td>
</tr>
<tr>
<td style="text-align:left">小数</td>
<td style="text-align:left">(-?\d+)(.\d+)?</td>
</tr>
<tr>
<td style="text-align:left">不包含abc的单词</td>
<td style="text-align:left">\b((?!abc)\w)+\b</td>
</tr>
</tbody>
</table>
<p><strong>说明:</strong>该文章参考<a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式教程</a></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RegExp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C/C++之const关键字]]></title>
      <url>http://arvin-he.github.io/2017/03/29/cpp-const-keyword-2017-03-29/</url>
      <content type="html"><![CDATA[<h3 id="1-C中的const关键字"><a href="#1-C中的const关键字" class="headerlink" title="1. C中的const关键字"></a>1. C中的const关键字</h3><p>const是C语言中保留的一个关键字，它用来限定一个变量是只读的.<br>注意:在C语言中，用const修饰的变量必须在声明时进行初始化(用来修饰函数的形参除外).<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> n;   <span class="comment">//这种声明方式是错误的</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">5</span>; <span class="comment">//正确</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> n)</span></span>; <span class="comment">//正确</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> a;  <span class="comment">//错误</span></div><div class="line"><span class="keyword">char</span> * <span class="keyword">const</span> p;  <span class="comment">//错误</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *p;  <span class="comment">//正确(注意这种为什么是正确的),因为这里const是修饰p指向的变量,而不是指针变量p本身</span></div></pre></td></tr></table></figure></p>
<p>注意: 一旦一个变量被const修饰后，在程序中除初始化外对这个变量进行的赋值都是错误的。<br>总结:</p>
<ul>
<li>在C语言中用const去修饰一个变量，表示这个变量是只读的，不可通过显式的调用a去修改a的值，并且此时a仍然是一个变 量，不能等同于常量;</li>
<li>要注意const在声明变量时所处的位置，位置不同，在意义上可能会有很大的不同。如果const在’<em>‘左边，则表示指针指向的变量的值不可变;如果const在’</em>‘右边，则表示指针的值是不可变的;</li>
</ul>
<h3 id="2-C-中的关键字"><a href="#2-C-中的关键字" class="headerlink" title="2. C++中的关键字"></a>2. C++中的关键字</h3><p>const修饰符把对象转变成常数对象，即用const进行修饰的变量的值在程序的任意位置将不能再被修改，就如同常数一样使用！任何修改该变量的尝试都会导致编译错误.<br><strong>注意：</strong>常量在定以后就不能被修改，所以定义时必须初始化.<br>对于类中的const成员变量则必须通过初始化列表进行初始化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    A(<span class="keyword">int</span> i);</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;r;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> b;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> A::b=<span class="number">10</span>;</div><div class="line">A::A(<span class="keyword">int</span> i):a(i), r(a)</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<h4 id="const对象作用域"><a href="#const对象作用域" class="headerlink" title="const对象作用域"></a>const对象作用域</h4><p>在全局作用域里定义非const变量时，它在整个程序中都可以访问，我们可以把一个非const变量定义在一个文件中，假设已经做了合适的声明，就可以在另外的文件中使用这个变量：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file1.cpp</span></div><div class="line"><span class="keyword">int</span> count;</div><div class="line"></div><div class="line"><span class="comment">// file2.cpp</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> count;</div><div class="line">++count;</div></pre></td></tr></table></figure></p>
<p>在全局作用域声明的const变量是定义该const变量的文件的局部变量。此const变量只存在于那个文件中，不能被其他文件访问。通过指定const变量为extern，就可以在整个程序中访问const对象。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//file1.cpp</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> count = <span class="number">10</span>;  <span class="comment">//定义的时候就要指定extern,假如在整个程序中访问的话</span></div><div class="line"></div><div class="line"><span class="comment">//file2.cpp</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> count;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index=<span class="number">0</span>; index!=count; ++index)</div><div class="line">&#123;...&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong>非const变量默认为extern。要使const变量能够在其他文件中访问，必须在文件中<strong>显式指定</strong>它为extern。</p>
<h4 id="const引用"><a href="#const引用" class="headerlink" title="const引用"></a>const引用</h4><p>const引用是指向const对象的引用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> count = <span class="number">1024</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;refCount = count; <span class="comment">//两者均为const对象</span></div><div class="line"><span class="keyword">int</span> &amp;ref2 = count;       <span class="comment">//错误!不能用非const引用指向const对象</span></div></pre></td></tr></table></figure></p>
<p>const 引用可以初始化为不同类型的对象或者初始化为右值。如字面值常量：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line"><span class="comment">//仅对const引用合法</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;j = <span class="number">10</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;k = j + i;</div></pre></td></tr></table></figure></p>
<p>同样的初始化对于非const引用却是不合法的，而且会导致编译时错误。其原因非常微妙，值得解释一下。观察将引用绑定到不同的类型时所发生的事情，最容易理解上述行为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;b = a; <span class="comment">//不合法</span></div><div class="line">编译器会做如下转换:</div><div class="line"><span class="keyword">int</span> temp = a;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;b = temp;</div></pre></td></tr></table></figure></p>
<p>注意：引用在内部存放的是一个对象的地址，它是该对象的别名。对于不可寻址的值，如文字常量，以及不同类型的对象，编译器为了实现引用，必须生成一个临时对象，引用实际上指向该对象，但用户不能访问它.<br>如果b不是const,修改b的同时也修改了temp,但不是a,而期望修改b的同时修改了a的程序员会发现a没有被修改,这会造成bug.所以仅允许const引用绑定到需要临时使用的值完全避免了这个问题，直接告诉程序员不能修改，因为const引用是只读的.(其实就是避免程序员心理预期产生反差)<br>注意：非const引用只能绑定到与该引用相同类型的对象。 const引用则可以绑定到不同但相关的类型的对象或绑定到右值。</p>
<h4 id="const对象的动态数组"><a href="#const对象的动态数组" class="headerlink" title="const对象的动态数组"></a>const对象的动态数组</h4><p>如果在自由存储区中创建的数组存储了内置类型的const对象，则必须为这个数组提供初始化： 因为数组元素都是const对象，无法赋值。实现这个要求的唯一方法是对数组做值初始化.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *pci = <span class="keyword">new</span> <span class="keyword">const</span> <span class="keyword">int</span>[<span class="number">100</span>];  <span class="comment">// error</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *pci_ok = <span class="keyword">new</span> <span class="keyword">const</span> <span class="keyword">int</span>[<span class="number">100</span>]();  <span class="comment">//OK</span></div></pre></td></tr></table></figure></p>
<p>C++允许定义类类型的const数组，但该类类型必须提供默认构造函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里便会调用string类的默认构造函数初始化数组元素</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> *pcs = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">100</span>]</div></pre></td></tr></table></figure></p>
<h4 id="指针和const限定符的关系"><a href="#指针和const限定符的关系" class="headerlink" title="指针和const限定符的关系"></a>指针和const限定符的关系</h4><p>指针常量:即指针本身的值是不可改变的，而指针指向的变量的值是可以改变的;</p>
<p>常量指针:即指针指向的变量的值是不可改变的，而指针本身的值是可以改变的;</p>
<p>可以这样理解:因为指针本身也是一个变量，只不过指针存放的是地址而已，而一旦指针变成了常量，即指针本身的值是不可变的，此时指针只能指向固定的存储单元;指针一般会指向一个变量，如果该变量成为一个常量，那么该变量的值就不能被修改，即常量指针，指针指向的是一个不可变的变量。</p>
<h4 id="函数和const限定符的关系"><a href="#函数和const限定符的关系" class="headerlink" title="函数和const限定符的关系"></a>函数和const限定符的关系</h4><ol>
<li>类中的const成员函数（常量成员函数）<br>在一个类中，任何不会修改数据成员的函数都应该声明为const类型。如果在编写const成员函数时，不慎修改了数据成员，或者调用了其它非const成员函数，编译器将指出错误，这无疑会提高程序的健壮性。使用const关键字进行说明的成员函数，称为常成员函数。只有常成员函数才有资格操作常量或常对象，没有使用const关键字说明的成员函数不能用来操作常对象。常成员函数说明格式如下：　&lt;类型说明符&gt; &lt;函数名&gt; (&lt;参数表&gt;) const;<br>其中，const是加在函数生明后面的类型修饰符，它是函数类型的一个组成部分，因此，在函数实现部分也要带const关键字。下面举一例子说明常成员函数的特征。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">int</span> m_num;</div><div class="line">  <span class="keyword">int</span> m_date[<span class="number">100</span>];</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> elem)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">GetCount</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">//定义为const函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> Stack::GetCount() <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">  ++m_num;  <span class="comment">// error 编译错误,企图修改数据成员m_num</span></div><div class="line">  Pop();    <span class="comment">// error 编译错误,企图调用非const函数</span></div><div class="line">  <span class="keyword">return</span> m_num;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>既然const是定义为const函数的组成部分，那么就可以通过添加const实现函数重载.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  R(<span class="keyword">int</span> r1, <span class="keyword">int</span> r2)</div><div class="line">  &#123;</div><div class="line">    R1 = r1;</div><div class="line">    R2 = r2;</div><div class="line">  &#125;  </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">int</span> R1, R2;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> R::print()</div><div class="line">&#123;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;R1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> R::print() <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;R2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="function">R <span class="title">a</span><span class="params">(<span class="number">5</span>, <span class="number">4</span>)</span></span>;</div><div class="line">  a.print();</div><div class="line">  <span class="function"><span class="keyword">const</span> R <span class="title">b</span><span class="params">(<span class="number">20</span>, <span class="number">52</span>)</span></span>;</div><div class="line">  b.print(); <span class="comment">//const对象默认调用const成员函数</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">52</span></div></pre></td></tr></table></figure></p>
<p>const 修饰函数返回值<br>const修饰函数返回值其实用的并不是很多，它的含义和const修饰普通变量以及指针的含义基本相同.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">()</span></span>; <span class="comment">//这个其实无意义,函数返回本身就是作为右值赋值.</span></div><div class="line"><span class="comment">// 调用时 const int *pValue = func2();</span></div><div class="line"><span class="comment">//func2可以看作一个变量,即指针内容不可变</span></div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="title">func2</span><span class="params">()</span></span>; </div><div class="line"><span class="comment">// 调用时 const int *pValue = func3();</span></div><div class="line"><span class="comment">//func3可以看作一个变量,即指针本身不可变</span></div><div class="line"><span class="function"><span class="keyword">int</span>* <span class="keyword">const</span> <span class="title">func3</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<p>一般情况下，函数的返回值为某个<strong>对象</strong>时，如果将其声明为const时，多用于操作符的重载。<br>通常不建议用const修饰函数的返回值类型为某个对象或对某个对象引用的情况。<br>原因如下：如果返回值为某个对象为const（const A test = A 实例）或某个对象的引用为const（const A&amp; test = A实例） ，则返回值具有const属性，则返回实例只能访问类A中的公有（保护）数据成员和const成员函数，并且不允许对其进行赋值操作，这在一般情况下很少用到。  </p>
<p>const修饰函数参数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传递过来的参数在函数内不可以改变(无意义，因为Var本身就是形参)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> var)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//参数指针所指内容为常量不可变</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* var)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 参数指针本身为常量不可变(也无意义，因为char* Var也是形参)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">(<span class="keyword">char</span>* <span class="keyword">const</span> var)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//参数为引用，为了增加效率同时防止修改。修饰引用参数时：</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">(<span class="keyword">const</span> Class&amp; var)</span></span>; <span class="comment">//引用参数在函数内不可以改变</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func5</span><span class="params">(<span class="keyword">const</span> TYPE&amp; Var)</span></span>;  <span class="comment">//引用参数在函数内为常量不可变</span></div></pre></td></tr></table></figure>
<p>这样的一个const引用传递和最普通的函数按值传递的效果是一模一样的,他禁止对引用的对象的一切修改,唯一不同的是按值传递会先建立一个类对象的副本, 然后传递过去,而它直接传递地址,所以这种传递比按值传递更有效.另外只有引用的const传递可以传递一个临时对象,因为临时对象都是const属性, 且是不可见的,他短时间存在一个局部域中,所以不能使用指针,只有引用的const传递能够捕捉到这个家伙.</p>
<h3 id="const限定符和static的区别"><a href="#const限定符和static的区别" class="headerlink" title="const限定符和static的区别"></a>const限定符和static的区别</h3><ol>
<li>const定义的常量在超出其作用域之后其空间会被释放，而static定义的静态常量在函数执行后不会释放其存储空间。</li>
<li>static表示的是静态的。类的静态成员函数、静态成员变量是和类相关的，而不是和类的具体对象相关的。即使没有具体对象，也能调用类的静态成员函数和成员变量。一般类的静态函数几乎就是一个全局函数，只不过它的作用域限于包含它的文件中。</li>
<li>在C++中，static静态成员变量不能在类的内部初始化。在类的内部只是声明，定义必须在类定义体的外部，通常在类的实现文件中初始化，如：double Account::Rate=2.25; static关键字只能用于类定义体内部的声明中，定义时不能标示为static</li>
<li>在C++中，const成员变量也不能在类定义处初始化，只能通过构造函数初始化列表进行，并且必须有构造函数。</li>
<li>const数据成员,只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其const数据成员的值可以不同。所以不能在类的声明中初始化const数据成员，因为类的对象没被创建时，编译器不知道const数据成员的值是什么。</li>
<li>const数据成员的初始化只能在类的构造函数的初始化列表中进行。要想建立在整个类中都恒定的常量，应该用类中的枚举常量来实现，或者static const。</li>
<li>const成员函数主要目的是防止成员函数修改对象的内容。即const成员函数不能修改成员变量的值，但可以访问成员变量。当方法成员函数时，该函数只能是const成员函数。</li>
<li>static成员函数主要目的是作为类作用域的全局函数。不能访问类的非静态数据成员。类的静态成员函数没有this指针，这导致：1、不能直接存取类的非静态成员变量，调用非静态成员函数2、不能被声明为virtual </li>
</ol>
<h4 id="关于static、const、static-cosnt、const-static成员的初始化问题"><a href="#关于static、const、static-cosnt、const-static成员的初始化问题" class="headerlink" title="关于static、const、static cosnt、const static成员的初始化问题"></a>关于static、const、static cosnt、const static成员的初始化问题</h4><ol>
<li><p>类里的const成员初始化<br>在一个类里建立一个const时，不能给他初值</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  foo():i(<span class="number">100</span>)&#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> i=<span class="number">100</span>;  <span class="comment">//error!!! 不能在类中初始化</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//或者通过这样的方式初始化</span></div><div class="line">foo::foo():i(<span class="number">100</span>)</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>类里的static成员初始化：<br>类中的static变量是属于类的，不属于某个对象，它在整个程序的运行过程中只有一个副本，因此不能在定义对象时 对变量进行初始化，就是不能用构造函数进行初始化，其正确的初始化方法是：<br>数据类型 类名::静态数据成员名=值</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  foo():i(<span class="number">100</span>)&#123;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> i;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> foo::i=<span class="number">20</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>初始化在类体外进行,且前面不佳static,以免与一般静态变量或对象混淆</li>
<li>初始化时不加该成员的访问权限控制符</li>
<li>初始化时使用作用域操作符表明所属的类</li>
</ul>
<ol>
<li>类里的static cosnt 和 const static成员初始化（这两种写法是一致的！！）</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> mask1;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> mask2;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Test::mask1 = <span class="number">0xffff</span>;</div><div class="line"><span class="keyword">const</span> Test::mask2 = <span class="number">0xffff</span>;</div></pre></td></tr></table></figure>
<ul>
<li>它们初始化没有区别,虽然一个是静态常量一个是常量静态</li>
<li>静态都将存储在全局变量区域,其实最后结果都一样</li>
<li>可能不同编译器处理不同,但最后结果都一样</li>
</ul>
<p>例子:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  A(<span class="keyword">int</span> a);</div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;  <span class="comment">//静态成员函数</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> aa;  <span class="comment">//静态数据成员的声明</span></div><div class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> count;  <span class="comment">//常量静态数据成员(可以在构造函数中初始化)</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> bb;  <span class="comment">//常量数据成员</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> A::aa=<span class="number">0</span>; <span class="comment">//静态成员定义+初始化</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> A::count=<span class="number">25</span>; <span class="comment">//静态常量成员定义+初始化</span></div><div class="line">A::A(<span class="keyword">int</span> a):bb(a)   <span class="comment">//常量成员的初始化</span></div><div class="line">&#123;</div><div class="line">  aa+=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> A::print()</div><div class="line">&#123;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"count="</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"aa="</span>&lt;&lt;aa&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="function">A <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</div><div class="line">  A::print();  <span class="comment">//通过类访问静态成员函数</span></div><div class="line">  a.print();   <span class="comment">//通过对象访问静态成员函数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="const的难点"><a href="#const的难点" class="headerlink" title="const的难点"></a>const的难点</h4><p>如果函数需要传入一个指针，面试官可能会问是否需要为该指针加上const，把const加在指针不同的位置有什么区别；如果写的函数需要传入的参数是一个复杂类型的实例，面试官可能会问传入值参数或者引用参数有什么区别，什么时候需要为传入的引用参数加上const。 const是用来声明一个常量的，当你不想让一个值被改变时就用const，const int max和int const max 是没有区别的，都可以。不涉及到指针const很好理解。一旦涉及到指针，则比较容易出问题。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> b = <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *a = &amp;b;   <span class="comment">//[1]</span></div><div class="line"><span class="keyword">int</span> <span class="keyword">const</span> *a = &amp;b;  <span class="comment">//[2]</span></div><div class="line"><span class="keyword">int</span>* <span class="keyword">const</span> a = &amp;b;  <span class="comment">//[3]</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> a = &amp;b;  <span class="comment">//[4]</span></div></pre></td></tr></table></figure></p>
<p>如果const位于星号的左侧，则const就是用来修饰指针所指向的变量，即指针指向的对象为常量；如果const位于星号的右侧，const就是修饰指针本身，即指针本身是常量。</p>
<p>因此，[1]和[2]的情况相同，都是指针所指向的内容为常量（const放在变量声明符的位置无关），这种情况下不允许对内容进行更改操作，如不能*a = 3 ；[3]为指针本身是常量，而指针所指向的内容不是常量，这种情况下不能对指针本身进行更改操作，如a++是错误的；[4]为指针本身和指向的内容均为常量。</p>
<p>参考:</p>
<ul>
<li><a href="http://www.cnblogs.com/jiabei521/p/3335676.html" target="_blank" rel="external">C++中的const关键字</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/archive/2011/04/18/2020248.html" target="_blank" rel="external">浅谈C和C++中的const关键字</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++知识积累]]></title>
      <url>http://arvin-he.github.io/2017/03/28/cpp-keywords-2017-03-28/</url>
      <content type="html"><![CDATA[<h3 id="1-宏函数"><a href="#1-宏函数" class="headerlink" title="1. 宏函数"></a>1. 宏函数</h3><p>在Ｃ/C++语言中允许用一个标识符来表示一个字符串，称为宏，该字符串可以是常数、表达式、格式串等。<br>在编译预处理时，对程序中所有出现的“宏名”，都用宏定义中的字符串去替换，这称为“宏替换”或“宏展开”。<br>宏定义是由源程序中的宏定义命令完成的。宏替换是由预处理程序自动完成的。若字符串是表达式，则称之为函数式宏定义.<br>普通函数式宏定义：<code>MAX(a,b) { return a&gt;b?a:b;}</code></p>
<p>几个比较经典的宏函数<br>1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#define TO_PROG_LEN(mm) ((mm) / (settings.prog_length_units == CANON_UNITS_INCHES ? 25.4 : 1.0))</div><div class="line">    </div><div class="line">#define TO_PROG_ANG(deg) (Rad2Deg(deg))</div><div class="line">    </div><div class="line">#define CHK(bad, error_code)            \</div><div class="line">do&#123;                                        \</div><div class="line">    if (bad) &#123; return error_code; &#125;        \</div><div class="line">&#125; while(0)</div></pre></td></tr></table></figure></p>
<h3 id="2-C-禁止对象拷贝复制"><a href="#2-C-禁止对象拷贝复制" class="headerlink" title="2. C++禁止对象拷贝复制"></a>2. C++禁止对象拷贝复制</h3><p>为什么有的时候需要禁止对象的拷贝复制?<br>在类的设计里，不去实现拷贝构造和赋值操作不就完了吗？<br>其实不行！C++会在背后偷偷的帮你现实一个默认的拷贝构造的版本，必须注意这个后门。</p>
<p>如何禁止对象的拷贝复制<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPeople</span>  </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">    <span class="comment">// ...  </span></div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    <span class="comment">// 将复制相关的操作定义为私有  </span></div><div class="line">     CPeople()&#123;...&#125;;  </div><div class="line">    <span class="keyword">const</span> CPeople&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CPeople&amp; rhis)&#123;...&#125;  </div><div class="line">&#125;; </div><div class="line">``` </div><div class="line"></div><div class="line">这样的设计，可以部分的禁止的类的复制，但是对于友元函数和类成员函数来说，还是可以调用其相关的复制操作的。</div><div class="line"></div><div class="line">```cpp</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPeople</span>  </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">    <span class="comment">// ...  </span></div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    <span class="comment">// 将复制相关的操作定义为私有  </span></div><div class="line">     CPeople(); <span class="comment">// 只声明不实现  </span></div><div class="line">    <span class="keyword">const</span> CPeople&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CPeople&amp; rhis); <span class="comment">// 只声明不实现  </span></div><div class="line">&#125;; </div><div class="line">``` </div><div class="line"></div><div class="line">将拷贝构造函数与赋值函数，声明为<span class="keyword">private</span>，并且不给出实现。这样就实现了类复制的完全禁止</div><div class="line">用户代码中的复制尝试将在编译时标记为错误，而成员函数与友元函数中的复制尝试将在链接时出现错误。</div><div class="line">上面介绍的这种技术在你熟悉的<span class="built_in">std</span>::iostream类中已经得到了很好的应用，诸如ios_base、basic_ios和sentry，都采用这样的方式不允许复制操作。</div><div class="line">Boost为我们提供了另一种解决方式，这种方式更加完美，因为它可以将链接错误提前到编译时，毕竟早一点发现错误比晚发现要好。特意声明一个不可复制的类</div><div class="line"></div><div class="line">```cpp</div><div class="line">boost::noncopyable</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BOOST_NONCOPYABLE_HPP_INCLUDED    </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BOOST_NONCOPYABLE_HPP_INCLUDED        </span></div><div class="line"><span class="keyword">namespace</span> boost &#123;    </div><div class="line"><span class="comment">//  Private copy constructor and copy assignment ensure classes derived from    </span></div><div class="line"><span class="comment">//  class noncopyable cannot be copied.    </span></div><div class="line"><span class="comment">//  Contributed by Dave Abrahams    </span></div><div class="line">    <span class="keyword">namespace</span> noncopyable_  <span class="comment">// protection from unintended ADL    </span></div><div class="line">    &#123;    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">noncopyable</span>    </span></div><div class="line"><span class="class">    &#123;</span>    </div><div class="line">    <span class="keyword">protected</span>:    </div><div class="line">        noncopyable() &#123;&#125;    </div><div class="line">        ~noncopyable() &#123;&#125;    </div><div class="line">    <span class="keyword">private</span>:  <span class="comment">// emphasize the following members are private    </span></div><div class="line">        noncopyable( <span class="keyword">const</span> noncopyable&amp; );    </div><div class="line">        <span class="keyword">const</span> noncopyable&amp; <span class="keyword">operator</span>=( <span class="keyword">const</span> noncopyable&amp; );    </div><div class="line">    &#125;;    </div><div class="line">    &#125;    </div><div class="line">    <span class="keyword">typedef</span> noncopyable_::noncopyable noncopyable;      </div><div class="line">&#125; <span class="comment">// namespace boost    </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// BOOST_NONCOPYABLE_HPP_INCLUDED</span></span></div></pre></td></tr></table></figure></p>
<p>为了禁止拷贝对象，我们只需要让其私有继承自boost::noncopyable</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class student:private boost::noncopyable</div><div class="line">&#123;</div><div class="line">......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当调用到派生类的拷贝构造函数或赋值函数进行复制时，不可避免的要调用基类对应的函数，因为这些操作是private，这样的操作会被编译器拒绝。<br>需要注意，多重继承有时会使空基类noncopyable优化失效，所以这不适合用于多重继承的情形。</p>
<p>另外，如果只是不想要使用默认的拷贝构造函数或赋值函数，可以使用C++11提供的delete，<br>C++11则使用delete关键字显式指示编译器不生成函数的默认版本。比如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">MyClass()=<span class="keyword">default</span>;</div><div class="line">MyClass(<span class="keyword">const</span> MyClass&amp; )=<span class="keyword">delete</span>;</div><div class="line">......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，一旦函数被delete过了，那么重载该函数也是非法的，该函数我们习惯上称为删除函数。</p>
<h3 id="3-C-虚析构函数"><a href="#3-C-虚析构函数" class="headerlink" title="3. C++虚析构函数"></a>3. C++虚析构函数</h3><p>什么情况下声明为虚析构函数<br>并不是要把所有类的析构函数都写成虚函数。因为当类里面有虚函数的时候，编译器会给类添加一个虚函数表，里面来存放虚函数指针，这样就会增加类的存储空间。所以，只有当一个类被用来作为基类的时候，才把析构函数写成虚函数。</p>
<p>为什么基类的析构函数要声明成虚析构函数<br>在实现多态时，当用基类操作派生类，在析构时防止只析构基类而不析构派生类的状况发生。<br>直接的讲，C++中基类采用virtual虚析构函数是为了防止内存泄漏。具体地说，如果派生类中申请了内存空间，<br>并在其析构函数中对这些内存空间进行释放。假设基类中采用的是非虚析构函数，当删除基类指针指向的派生类对象时就不会触发动态绑定，<br>因而只会调用基类的析构函数，而不会调用派生类的析构函数。那么在这种情况下，派生类中申请的空间就得不到释放从而产生内存泄漏。<br>所以，为了防止这种情况的发生，C++中基类的析构函数应采用virtual虚析构函数。</p>
<p>为什么派生类中定义了析构函数来释放其申请的资源，但是并没有得到调用。<br>原因是基类指针指向了派生类对象，而基类中的析构函数却是非virtual的，而虚函数是动态绑定的基础。<br>现在析构函数不是virtual的，因此不会发生动态绑定，而是静态绑定，指针的静态类型为基类指针，因此在delete时候只会调用基类的析构函数，而不会调用派生类的析构函数。<br>这样，在派生类中申请的资源就不会得到释放，就会造成内存泄漏，这是相当危险的：如果系统中有大量的派生类对象被这样创建和销毁，就会有内存不断的泄漏，久而久之，系统就会因为缺少内存而崩溃。<br>也就是说，在基类的析构函数为非虚析构函数的时候，并不一定会造成内存泄漏；当派生类对象的析构函数中有内存需要收回，并且在编程过程中采用了基类指针指向派生类对象，<br>如为了实现多态，并且通过基类指针将该对象销毁，这时，就会因为基类的析构函数为非虚析构函数而不触发动态绑定，从而没有调用派生类的析构函数而导致内存泄漏。<br>因此，为了防止这种情况下内存泄漏的发生，最好将基类的析构函数写成virtual虚析构函数。</p>
<h3 id="4-C-C-中的-if-defined-和-ifdef的区别"><a href="#4-C-C-中的-if-defined-和-ifdef的区别" class="headerlink" title="4. C/C++中的#if defined() 和 #ifdef的区别"></a>4. C/C++中的#if defined() 和 #ifdef的区别</h3><ol>
<li>使用#ifdef<br>如果使用#ifdef,则后面的内容不能加括号.If you use #ifdef syntax, remove the brackets.</li>
<li>#if defined() 和 #ifdef的区别<ul>
<li>#ifdef只能使用单个条件,</li>
<li>#if defined(NAME)则可以组合多个条件<br>The difference between the two is that #ifdef can only use a single condition,while #if defined(NAME) can do compound conditionals.</li>
</ul>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __EXPORT_H__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __EXPORT_H__</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (defined WIN32 || defined _WIN32 || defined WINCE) &amp;&amp; defined INTERPRETER_LIBRARY</span></div><div class="line"><span class="meta">#  <span class="meta-keyword">define</span> INTERP_API __declspec(dllexport)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#  <span class="meta-keyword">define</span> INTERP_API</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __EXPORT_H__</span></span></div></pre></td></tr></table></figure>
<h3 id="5-C-之throw"><a href="#5-C-之throw" class="headerlink" title="5. C++之throw"></a>5. C++之throw</h3><p>void myfunc(void)throw();<br>这样的函数声明只是告诉此函数的使用者说，我不会抛出异常，方便调用者捕捉异常。<br>而至于实现不实现异常捕获是你自己的事。函数是给别人用的，不是给自己用的。</p>
<h3 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">9. 指针</div><div class="line">10. 函数指针</div><div class="line">11. 回调函数</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++之static关键字]]></title>
      <url>http://arvin-he.github.io/2017/03/27/cpp-keywords-2017-03-27/</url>
      <content type="html"><![CDATA[<h2 id="1-static关键字"><a href="#1-static关键字" class="headerlink" title="1. static关键字"></a>1. static关键字</h2><p>C语言代码是以文件为单位来组织的，在一个源程序的所有源文件中，一个外部变量（注意不是局部变量）或者函数只能在一个源程序中定义一次，<br>如果有重复定义的话编译器就会报错。伴随着不同源文件变量和函数之间的相互引用以及相互独立的关系，产生了extern和static关键字。</p>
<h3 id="1-1-C中的static"><a href="#1-1-C中的static" class="headerlink" title="1.1 C中的static"></a>1.1 C中的static</h3><p>一个进程在内存中的布局如下表所示:</p>
<p>|栈区      |<br>|堆栈增长区|<br>|堆区      |<br>|其他段    |<br>|.bss段    |<br>|.data段   |<br>|.text段   |</p>
<p>其中<br>.text段保存进程所执行的程序二进制文件，<br>.data段保存进程所有的已初始化的全局变量，<br>.bss段保存进程未初始化的全局变量。<br>在进程的整个生命周期中，.data段和.bss段内的数据时跟整个进程同生共死的，也就是在进程结束之后这些数据内存才会被释放。</p>
<p>当一个进程的全局变量被声明为static之后，它的中文名叫静态全局变量。静态全局变量和其他的全局变量的存储地点并没有区别，都是在.data段（已初始化）或者.bss段（未初始化）内，但是它只在定义它的源文件内有效，其他源文件无法访问它。所以，普通全局变量加上static关键字修饰后,就只能被定义它的源文件中的变量或函数访问。</p>
<p>static局部变量</p>
<p>普通的局部变量在栈空间上分配，这个局部变量所在的函数被多次调用时，每次调用这个局部变量在栈上的位置都不一定相同。局部变量也可以在堆上动态分配，但是记得使用完这个堆空间后要释放之。</p>
<p>static局部变量中文名叫静态局部变量。它与普通的局部变量比起来有如下几个区别：</p>
<ol>
<li><p>位置：静态局部变量被编译器放在全局存储区.data（注意：不在.bss段内，原因见3）），所以它虽然是局部的，但是在程序的整个生命周期中存在。</p>
</li>
<li><p>访问权限：静态局部变量只能被其作用域内的变量或函数访问。也就是说虽然它会在程序的整个生命周期中存在，由于它是static的，它不能被其他的函数和源文件访问。</p>
</li>
<li><p>值：静态局部变量如果没有被用户初始化，则会被编译器自动赋值为0，以后每次调用静态局部变量的时候都用上次调用后的值。这个比较好理解，每次函数调用静态局部变量的时候都修改它然后离开，下次读的时候从全局存储区读出的静态局部变量就是上次修改后的值。</p>
</li>
</ol>
<p>static函数<br>相信大家还记得C++面向对象编程中的private函数，私有函数只有该类的成员变量或成员函数可以访问。在C语言中，也有“private函数”，它就是接下来要说的static函数，完成面向对象编程中private函数的功能。</p>
<p>当你的程序中有很多个源文件的时候，你肯定会让某个源文件只提供一些外界需要的接口，其他的函数可能是为了实现这些接口而编写，这些其他的函数你可能并不希望被外界（非本源文件）所看到，这时候就可以用static修饰这些“其他的函数”.所以static函数的作用域是本源文件，把它想象为面向对象中的private函数就可以了。</p>
<h3 id="1-2-类中的static关键字"><a href="#1-2-类中的static关键字" class="headerlink" title="1.2 类中的static关键字"></a>1.2 类中的static关键字</h3><p>面向对象的static关键字</p>
<h4 id="1-2-1-静态数据成员"><a href="#1-2-1-静态数据成员" class="headerlink" title="1.2.1 静态数据成员"></a>1.2.1 静态数据成员</h4><p>在类内数据成员的声明前加上关键字static，该数据成员就是类内的静态数据成员。先举一个静态数据成员的例子。 </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//头文件</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"> 　　Myclass(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c);</div><div class="line"> 　　<span class="function"><span class="keyword">void</span> <span class="title">GetSum</span><span class="params">()</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line"> 　　<span class="keyword">int</span> a,b,c;</div><div class="line"> 　　<span class="keyword">static</span> <span class="keyword">int</span> Sum;<span class="comment">//声明静态数据成员</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> Myclass::Sum=<span class="number">0</span>;<span class="comment">//定义并初始化静态数据成员</span></div><div class="line"></div><div class="line"><span class="comment">//源文件</span></div><div class="line">Myclass::Myclass(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</div><div class="line">&#123;</div><div class="line"> 　　<span class="keyword">this</span>-&gt;a=a;</div><div class="line"> 　　<span class="keyword">this</span>-&gt;b=b;</div><div class="line"> 　　<span class="keyword">this</span>-&gt;c=c;</div><div class="line"> 　　Sum+=a+b+c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Myclass::GetSum()</div><div class="line">&#123;</div><div class="line"> 　　<span class="built_in">cout</span>&lt;&lt;<span class="string">"Sum="</span>&lt;&lt;Sum&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"> 　　<span class="function">Myclass <span class="title">M</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>;</div><div class="line"> 　　M.GetSum();</div><div class="line">　　 <span class="function">Myclass <span class="title">N</span><span class="params">(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span></span>;</div><div class="line"> 　　N.GetSum();</div><div class="line"> 　　M.GetSum();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，静态数据成员有以下特点： </p>
<ol>
<li>对于非静态数据成员，每个类对象都有自己的拷贝。而静态数据成员被当作是类的成员,是类本身的一部分。无论这个类的对象被定义了多少个，静态数据成员在程序中也只有一份拷贝，被该类型的所有对象共享访问。也就是说，静态数据成员是该类的所有对象所共有的。对该类的多个对象来说，静态数据成员只分配一次内存，供所有对象共用。所以，静态数据成员的值对每个对象都是一样的，它的值可以更新.</li>
<li>静态数据成员存储在全局数据区。静态数据成员定义时要分配空间，所以不能在类的声明中定义。上例语句int Myclass::Sum=0;是定义静态数据成员,<br><strong>注意:</strong>这条语句是在整个类声明之外的,即static数据成员是类内声明，类外定义,static成员不通过类构造函数初始化，而是在定义时进行初始化.<br>一个例外：初始化式为常量表达式，整型static const 数据成员（static const int） 可以在类的定义体内进行初始化.</li>
<li>静态数据成员和普通数据成员一样遵从public,protected,private访问规则.</li>
<li>因为静态数据成员在全局数据区分配内存，属于本类的所有对象共享，所以，它不属于特定的类对象，在没有产生类对象时其作用域就可见，即在没有产生类的实例时，我们就可以操作访问它. </li>
<li>静态数据成员初始化与一般数据成员初始化不同。静态数据成员初始化的格式为：<br>＜数据类型＞＜类名＞::＜静态数据成员名＞=＜值＞ </li>
<li>类的<strong>静态数据成员</strong>有两种访问形式：<br>＜类对象名＞.＜静态数据成员名＞ 或 ＜类类型名＞::＜静态数据成员名＞<br>如果静态数据成员的访问权限允许的话（即public的成员），可在程序中，按上述格式来引用静态数据成员 ； </li>
<li>静态数据成员主要应用在各个对象都有相同的某项属性的时候.<br>比如对于一个存款类，每个实例的利息都是相同的。所以，应该把利息设为存款类的静态数据成员。这有两个好处:<br>第一，不管定义多少个存款类对象，利息数据成员都共享分配在全局数据区的内存，所以节省存储空间。<br>第二，一旦利息需要改变时，只要改变一次，则所有存款类对象的利息全改变过来了； </li>
<li>同全局变量相比，使用静态数据成员有两个优势： <ul>
<li>静态数据成员没有进入程序的全局名字空间，因此不存在与程序中其它全局名字冲突的可能性</li>
<li>可以实现信息隐藏。静态数据成员可以是private成员，而全局变量不能,不破坏类的封装</li>
</ul>
</li>
</ol>
<h4 id="1-2-2-静态成员函数"><a href="#1-2-2-静态成员函数" class="headerlink" title="1.2.2 静态成员函数"></a>1.2.2 静态成员函数</h4><p>与静态数据成员一样，我们也可以创建一个<strong>静态成员函数</strong>，它为类的全部服务而不是为某一个类的具体对象服务。<br>静态成员函数与静态数据成员一样，都是类的内部实现，属于类定义的一部分。<br>普通的成员函数一般都隐含了一个this指针，this指针指向类的对象本身，因为普通成员函数总是具体的属于某个类的具体对象的。<br>通常情况下，this是缺省的。如函数fn()实际上是this-&gt;fn()。但是与普通函数相比，静态成员函数由于不是与任何的对象相联系，<br>因此它不具有this指针。从这个意义上讲，它无法访问属于类对象的非静态数据成员，也无法访问非静态成员函数，它只能调用其余的静态成员函数。<br>下面举个静态成员函数的例子。 </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//头文件</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"> 　　Myclass(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c);</div><div class="line"> 　　<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetSum</span><span class="params">()</span></span>;    <span class="comment">//声明静态成员函数</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line"> 　　<span class="keyword">int</span> a,b,c;</div><div class="line">　　 <span class="keyword">static</span> <span class="keyword">int</span> Sum;      <span class="comment">//声明静态数据成员</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> Myclass::Sum=<span class="number">0</span>;     <span class="comment">//定义并初始化静态数据成员</span></div><div class="line"></div><div class="line"><span class="comment">//源文件</span></div><div class="line">Myclass::Myclass(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</div><div class="line">&#123;</div><div class="line"> 　　<span class="keyword">this</span>-&gt;a=a;</div><div class="line"> 　　<span class="keyword">this</span>-&gt;b=b;</div><div class="line"> 　　<span class="keyword">this</span>-&gt;c=c;</div><div class="line"> 　　Sum+=a+b+c; <span class="comment">//非静态成员函数可以访问静态数据成员</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Myclass::GetSum() <span class="comment">//静态成员函数的实现</span></div><div class="line">&#123;</div><div class="line">　　<span class="comment">// cout&lt;&lt;a&lt;&lt;endl; //错误代码，a是非静态数据成员</span></div><div class="line"> 　　<span class="built_in">cout</span>&lt;&lt;<span class="string">"Sum="</span>&lt;&lt;Sum&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"> 　　<span class="function">Myclass <span class="title">M</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>;</div><div class="line"> 　　M.GetSum();</div><div class="line"> 　　<span class="function">Myclass <span class="title">N</span><span class="params">(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span></span>;</div><div class="line"> 　　N.GetSum();</div><div class="line"> 　　Myclass::GetSum();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于类的静态成员函数，可以总结为以下几点： </p>
<ol>
<li>出现在类体外的函数定义不能指定关键字static； </li>
<li>静态成员之间可以相互访问，包括静态成员函数访问静态数据成员和访问静态成员函数； </li>
<li>非静态成员函数可以任意地访问静态成员函数和静态数据成员； </li>
<li>静态成员函数不能访问非静态成员函数和非静态数据成员； </li>
<li>由于没有this指针的额外开销，因此静态成员函数与类的全局函数相比速度上会有少许的增长； </li>
<li>调用静态成员函数，可以用成员访问操作符(.)和(-&gt;)为一个类的对象或指向类对象的指针调用静态成员函数，也可以直接使用如下格式：<br>＜类名＞::＜静态成员函数名＞（＜参数表＞）调用类的静态成员函数。</li>
</ol>
<p>成员函数声明为const说明该成员函数不会修改该成员函数所属的对象，所以static成员函数不能声明为const。<br>static成员通过作用域操作符（直接调用）、对象、引用、指向该类类型对象的指针（间接调用）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line"><span class="class">&#123;</span> </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> age = <span class="number">30</span>;</div><div class="line">    <span class="built_in">string</span> school;</div><div class="line">&#125;;</div><div class="line">Person xiaoming;</div><div class="line">Person *someone = &amp;xiaoming;</div><div class="line"><span class="keyword">double</span> height;</div><div class="line"></div><div class="line">height = Person::getHeight();       <span class="comment">//static成员通过作用域操作符（直接调用）</span></div><div class="line">height = xiaoming.getHeight();　　　<span class="comment">//static成员通过对象（间接调用）</span></div><div class="line">height = someone-&gt;getHeight();　　　<span class="comment">//static成员通过指向该类类型对象的指针（间接调用）</span></div></pre></td></tr></table></figure>
<p>static数据成员定义：</p>
<ol>
<li>一般情况下，static数据成员是类内声明，类外定义;</li>
<li>static成员不通过类构造函数初始化，而是在定义时进行初始化；</li>
<li>一个例外：初始化式为常量表达式，整型static const 数据成员（static const int） 可以在类的定义体内进行初始化：<br>值得注意的是：const static数据成员在类的定义体中出始化时，该数据成员仍必须在类的定义体外定义，只是不再指定初始值：const int Person::age;<br>常实型 static const数据成员不可在类内初始化。一个好的解决方法是使用宏定义： #define age 30<br>常整型静态数据成员可以在类中直接初始化，而常实型静态数据成员不可以</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">circle</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> a; 　　　　　　　　　　　　　　　　　　　　   <span class="comment">// 普通变量，不能在类中初始化</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> b; 　　　　　　　　　　　　　　　　　　<span class="comment">// 静态变量，不能在类中初始化</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> c=<span class="number">2</span>; 　　　　　　　　　　　　　　<span class="comment">// 静态常整型变量，可以在类中初始化</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="number">3.1416</span>;<span class="comment">//error C2864: //只有静态常量整型数据成员才可以在类中初始化</span></div><div class="line">&#125; ;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> cicle::c ; <span class="comment">//const static数据成员在类的定义体中出始化时，该数据成员仍必须在类的定义体外定义，只是不再指定初始值</span></div></pre></td></tr></table></figure>
<p>b可以在类外进行初始化，且所有对象共享一个b的值：<br>int circle::b = 2;<br>double circle::PI = 3.1416;</p>
<p>知乎问答:static函数在头文件中定义有什么好处么？</p>
<ol>
<li>没有好处，不要这么做。除非该头文件只会被一个翻译单元（translation unit）所使用，那么static是可用作表示内部链接（internal linkage）。不过这种头文件和一般所指的头文件不同，通常会使用.inc文件后缀.</li>
<li>为了内联. 一般定义成static inline.<br>隐患: 头文件中的 static 函数会在每个文件中生成一份代码，这造成代码冗余倒不是最大的问题，最大的问题是可能带来库文件与工程文件同一函数的代码的不一致性，这有风险。</li>
</ol>
<ul>
<li><a href="http://blog.csdn.net/keyeagle/article/details/6708077" target="_blank" rel="external">参考文章</a></li>
<li><a href="http://www.cnblogs.com/BeyondAnyTime/archive/2012/06/08/2542315.html" target="_blank" rel="external">参考文章</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下工具使用和技巧]]></title>
      <url>http://arvin-he.github.io/2017/03/25/tool-skill-2017-03-25/</url>
      <content type="html"><![CDATA[<h2 id="1-cmder简介"><a href="#1-cmder简介" class="headerlink" title="1. cmder简介"></a>1. cmder简介</h2><p>cmder是windows下一款很好用的命令行工具,支持绝大部分linux命令,自带git和vim.</p>
<h3 id="1-1-解决cmder中文乱码问题"><a href="#1-1-解决cmder中文乱码问题" class="headerlink" title="1.1 解决cmder中文乱码问题"></a>1.1 解决cmder中文乱码问题</h3><p>win+alt+p打开设置面板，找到Startup-Envrioment选项<br>在下面的文本框里添加一行 set LANG=zh_CN.UTF-8<br>然后重启cmder</p>
<h3 id="1-2-解决文字重叠问题"><a href="#1-2-解决文字重叠问题" class="headerlink" title="1.2 解决文字重叠问题"></a>1.2 解决文字重叠问题</h3><p>Win + Alt + P 打开设置界面<br>在mian &gt; font &gt; monospce 的勾去掉.</p>
<h3 id="1-3-设置cmder分屏显示"><a href="#1-3-设置cmder分屏显示" class="headerlink" title="1.3 设置cmder分屏显示"></a>1.3 设置cmder分屏显示</h3><p>设置快捷键<br>打开设置面板选择keys &amp; Macro,或者右击标题栏,在help中的Hotkeys中做如下设置<br>找到Split: spliter Duplicate active “shell” to right:split,并选中<br>在下面设置快捷键,如ctrl+Alt+1<br>保存设置,然后重启.</p>
<h3 id="1-4-cmder目录"><a href="#1-4-cmder目录" class="headerlink" title="1.4 cmder目录"></a>1.4 cmder目录</h3><p>cmder不要放在c:/program files目录下,因为当你修改cmder设置,然后要保存设置时无法保存,因为往c:/program files写设置信息需要管理员权限,<br>所以cmder还是放在C盘根目录下,或者其他盘的目录下.</p>
<h2 id="2-通过命令行追加环境变量"><a href="#2-通过命令行追加环境变量" class="headerlink" title="2. 通过命令行追加环境变量"></a>2. 通过命令行追加环境变量</h2><p>例如添加C:\phantomjs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SETX PATH &quot;%PATH%;C:\\phantomjs&quot; /M</div></pre></td></tr></table></figure></p>
<p>如果写成下面的形式,则通过窗口查看机器的环境变量时会发现已经用C:\phantomjs覆盖以前所有的环境变量,之前的环境变量全部没了.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SETX PATH C:\\phantomjs /M</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong>重启才能生效,只要当前还没有关机或者重启机器,则之前的环境变量还是能够在命令行中显示,<br>覆盖的环境变量还没有生效,我们将之前的环境变量导入到文件中再拷贝回去就好了,然后重启机器生效.</p>
<h2 id="3-windows下临时导入环境变量"><a href="#3-windows下临时导入环境变量" class="headerlink" title="3. windows下临时导入环境变量"></a>3. windows下临时导入环境变量</h2><p>在windwos下添加环境变量后,不会立刻生效,必须要重启电脑后才能生效.有的时候不想重启电脑或者不能重启电脑该如何做呢?<br>例如:在windows下安装了MingW编译器,想要使用gcc<br>方法1: 切换到gcc.exe所在的目录下,直接调用gcc<br>方法2: 临时导入环境变量: set PATH=C:\MinGW\bin;%PATH%</p>
<h2 id="4-关于每个文件夹下都有一个文件夹的快捷方式的问题"><a href="#4-关于每个文件夹下都有一个文件夹的快捷方式的问题" class="headerlink" title="4. 关于每个文件夹下都有一个文件夹的快捷方式的问题"></a>4. 关于每个文件夹下都有一个文件夹的快捷方式的问题</h2><p>这是Skypee快捷方式病毒(AutoIt3木马).杀毒软件和安全卫士都弄不干净的.</p>
<ol>
<li>显示隐藏文件，找到病毒<br>进入“文件夹选项”界面。点击“查看”，把“隐藏受保护的操作系统文件（推荐）”前面的勾去掉。选择 “显示隐藏的文件、文件夹和驱动器”。在everything中输入”AutoIt3.exe”,搜索出所有的AutoIt3.exe并删除</li>
<li>删除开机启动项<br>打开“任务管理器”，点击“启动”，禁用AutoIt3.exe之类的，病毒还可能伪装成GoogleUpda、WindowsUpdate神马的，右键“属性”可以看到启动项实际位置，把C:\Google下的都删了。</li>
<li>清理注册表<br>Win+R，再输入regedit，打开注册表编辑器。搜索“C:\Google”，把相关结果删除即可。<br>注意：在注册器编辑表中，【数据】的选项框如果存在AutoIt之类的字样也一定要将词条注册表数据删除</li>
<li>删除病毒及其创建的快捷方式<br>我们这里用批处理的方式快速删除。将以下内容保存为Skypee（AutoIt3木马）专杀工具.bat，复制到各个盘中，双击运行即可。<br>先打开 记事本,复制以下的内容到记事本中。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">title 快捷方式病毒专杀</div><div class="line">echo ------ 查找中 ...</div><div class="line">attrib -a -s -h -r skypee</div><div class="line">del /f /s /q skypee</div><div class="line">echo -----Skypee 已删除本盘的毒源------</div><div class="line">echo.</div><div class="line">ping  -t -n 1 127.0.0.1&gt;nul</div><div class="line">echo -----清除此盘一级目录下的病毒快捷方式------</div><div class="line">for /f &quot;tokens=*&quot; %%i in (&apos;dir /ad /b *&apos;) do (</div><div class="line">del /f /s /q  &quot;%%i\%%i.lnk&quot;</div><div class="line">)</div><div class="line">echo -----清除结束 ^-^------</div><div class="line">ping  -t -n 3 127.0.0.1&gt;nul</div><div class="line">exit</div></pre></td></tr></table></figure>
</li>
</ol>
<p>另存为到 你所中招的盘中，文件名就写上：Skypee（AutoIt3木马）专杀工具.bat，文件类型选择：所有<br>保存文件后，复制到所需盘双击运行Skypee（AutoIt3木马）专杀工具.bat即可删除该盘中的Skypee（AutoIt3木马）的源头和它所生成的快捷方式的了。<br> 你哪个分区有，就把这个 Skypee（AutoIt3木马）专杀工具.bat 复制到那个盘中运行就可以了。</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown使用]]></title>
      <url>http://arvin-he.github.io/2017/03/24/markdown-tutorial-2017-03-24/</url>
      <content type="html"><![CDATA[<h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h3><ol>
<li>使用 # 表示标题，一级标题使用一个 # ，二级标题使用两个 ## ，以此类推，共有六级标题。</li>
<li>使用 ===== 表示高阶标题，使用 ——- 表示次阶标题。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 这是一级标题</div><div class="line">========</div><div class="line">## 这是二级标题</div><div class="line">--------------</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意:</strong> </p>
<ol>
<li>==== 和 —- 表示标题时，大于等于2个都可以表示。</li>
<li>===和—数目任意,但是至少要大于等于3个</li>
<li>不同的markdown编辑器对===和—支持不同,有的支持有的不支持,<br>根据具体的编辑器而定.</li>
</ol>
<h3 id="2-目录"><a href="#2-目录" class="headerlink" title="2. 目录"></a>2. 目录</h3><p>使用 [TOC] 生成目录。如一开始的目录所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[TOC]</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> </p>
<ol>
<li>如果你的标题都是按照Markdown语法书写的话，可以自动生成层级目录。</li>
<li>[TOC] 标记可能只能放在一级标题的前面，视不同的编译器而定。</li>
</ol>
<h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h3><p>使用 &gt; 表示引用， &gt;&gt; 表示引用里面再套一层引用，依次类推。<br>示例:<br>例1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; 这是一级引用</div><div class="line">&gt;&gt; 这是二级引用</div><div class="line">&gt;&gt;&gt; 这是三级引用</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这是一级引用</p>
<blockquote>
<p>这是二级引用</p>
<blockquote>
<p>这是三级引用</p>
</blockquote>
</blockquote>
</blockquote>
<p><strong>注意:</strong></p>
<ol>
<li>如果 &gt; 和 &gt;&gt; 嵌套使用的话，从 &gt;&gt; 退到 &gt; 时，必须之间要加一个空格或者 &gt; 作为过渡，否则默认为下一行和上一行是同一级别的引用。最好都加空格.</li>
<li>引用标记里可以使用其他标记，如：有序列表或无序列表标记，代码标记等。</li>
</ol>
<h3 id="4-代码引用"><a href="#4-代码引用" class="headerlink" title="4.代码引用"></a>4.代码引用</h3><ol>
<li>引用的代码语句只有一段,不分行,可以用 ` 将语句包起来.</li>
<li>引用的代码语句为多行,可以将```置于这段代码的首行和末行.</li>
<li>行内代码用``表示,即在文字行中插入代码.</li>
</ol>
<p>例如:这是<code>python code</code>代码</p>
<h3 id="5-列表"><a href="#5-列表" class="headerlink" title="5. 列表"></a>5. 列表</h3><p>使用 1. 2. 3. 表示有序列表，使用 * 或 - 或 + 表示无序列表.</p>
<ol>
<li>无序列表或有序列表标记和后面的文字之间要有一个空格隔开.</li>
<li>有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的.</li>
<li>无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的,通常情况下，同一层级使用同一种标记.便于自己查看和管理.</li>
<li>层级缩进,下一层级要比上一层级缩进4空格，否则仍然表示同一层级.</li>
</ol>
<ul>
<li>hello<ul>
<li>hello<ul>
<li>hello</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-粗体和斜体"><a href="#6-粗体和斜体" class="headerlink" title="6. 粗体和斜体"></a>6. 粗体和斜体</h3><p>使用 <em>* 或者 __ 表示粗体.<br>使用 </em> 或者 <em> 表示斜体.<br>注意:前后的 * 或 </em> 与要 加粗或倾斜的字体之间不能有空格.</p>
<h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7. 表格"></a>7. 表格</h3><p>语法格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|head1|head2|head3|</div><div class="line">|:----|:----:|-----:|</div><div class="line">|content1|content2|content3|</div></pre></td></tr></table></figure></p>
<p>其中:</p>
<ul>
<li>——: 为右对齐<br>:—— 为左对齐<br>:——: 为居中对齐<br>——- 为使用默认居中对齐</li>
<li>head可有可无</li>
<li>表格中含所有|字符,使用转义字符没有效果,使用ASCII字符集<br>| 的ASCII 字符集为:124,在markdown下的格式”&#124;”,引号内的内容</li>
<li>每个Markdown解析器都不一样，可能左右居中对齐方式的表示方式不一样</li>
</ul>
<h3 id="8-首行缩进"><a href="#8-首行缩进" class="headerlink" title="8. 首行缩进"></a>8. 首行缩进</h3><ol>
<li>不断行的空白格&nbsp;或&#160;(半个英文空格)</li>
<li>半方大的空白&ensp;或&#8194;(一个英文空格)</li>
<li>全方大的空白&emsp;或&#8195;(两个英文空格)<br>hello<br>&nbsp;hello<br>&ensp;hello<br>&emsp;hello<br><strong>注意:</strong>Markdown语法会忽略首行开头的空格，如果要体现出首行开头空两个的效果，可以使用全角符号下的空格 ，windows下使用 shift+空格 切换。</li>
</ol>
<h3 id="9-分割线"><a href="#9-分割线" class="headerlink" title="9. 分割线"></a>9. 分割线</h3><p>使用 — 或者 <em>** 或者 </em> <em> </em> 表示水平分割线<br>注意:</p>
<ol>
<li>只要 * 或者 - 大于等于三个就可组成一条平行线。</li>
<li>使用 — 作为水平分割线时，要在它的前后都空一行，防止 — 被当成标题标记的表示方式。</li>
</ol>
<h3 id="10-插入图片"><a href="#10-插入图片" class="headerlink" title="10. 插入图片"></a>10. 插入图片</h3><ol>
<li>使用! [Alt text] (/path/to/img.jpg “Optional title”) 导入图片.<br>其中：</li>
</ol>
<ul>
<li>Alt text 为如果图片无法显示时显示的文字；</li>
<li>/path/to/img.jpg 为图片所在路径；</li>
<li>Optional title 为显示标题.显示效果为在你将鼠标放到图片上后,会显示一个小框提示，提示的内容就是 Optional title 里的内容。<br>注意:!和[]以及()之间的连接处不能有空格</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ol>
<li>参考式图片<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">![][1]</div><div class="line"></div><div class="line">[1]: http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</div><div class="line">注意: ![][1]之间不能有空格,引用的链接不能和![][1]相连接,要隔行.</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/2017/03/24/markdown-tutorial-2017-03-24/www.baidu.com" alt="" title="百度一下，你就知道"></p>
<h3 id="11-插入链接"><a href="#11-插入链接" class="headerlink" title="11. 插入链接"></a>11. 插入链接</h3><p>使用 [] (link “Optional title”) 表示行内链接.<br>注意:</p>
<ul>
<li>[]和()之间不能有空格</li>
<li>[] 内的内容为要添加链接的文字。</li>
<li>link 为链接地址。</li>
<li>Optional title 为显示标题。显示效果为在你将鼠标放到链接上后，会显示一个小框提示，提示的内容就是 Optional title 里的内容</li>
</ul>
<ol>
<li><p>行内链接<br>这就是我们常用的地址：<a href="www.baidu.com" title="百度一下，你就知道">Baidu</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Baidu](www.baidu.com &quot;百度一下，你就知道&quot; )</div></pre></td></tr></table></figure>
</li>
<li><p>参考式链接<br>这就是我们常用的地址：<a href="www.baidu.com" title="百度一下，你就知道">Baidu</a></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[Baidu][1]</div><div class="line"></div><div class="line">[1]:www.baidu.com &quot;百度一下，你就知道&quot;</div></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li>参考式链接和行内链接的效果是一样的，各有利弊。</li>
<li>行内连接清晰易懂，可以清楚的知道链接的地址，但是不便于多次利用。</li>
<li>参考式链接可以重复使用，但不能即刻知道链接的地址。</li>
</ul>
<h3 id="12-下划线和删除线"><a href="#12-下划线和删除线" class="headerlink" title="12.下划线和删除线"></a>12.下划线和删除线</h3><ol>
<li>使用 ~~ 表示删除线。<br>示例:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~这是一条删除线~~</div></pre></td></tr></table></figure>
</li>
</ol>
<p><del>这是一条删除线</del><br>注意: ~~ 和 要添加删除线的文字之间不能有空格。</p>
<ol>
<li>下划线</li>
</ol>
<ul>
<li><code>&lt;u&gt;Underlined Text&lt;/u&gt;</code></li>
</ul>
<p><u>Underlined Text</u></p>
<ul>
<li><code>&lt;span style=&quot;border-bottom:2px dashed yellow;&quot;&gt;所添加下划线的行内文字&lt;/span&gt;</code></li>
</ul>
<p><span style="border-bottom:2px dashed yellow;">所添加下划线的行内文字</span></p>
<h3 id="13-反斜杠"><a href="#13-反斜杠" class="headerlink" title="13. 反斜杠"></a>13. 反斜杠</h3><p>使用 \ 表示反斜杠,这是一个转义字符,在你不想显示Markdown标记时可以使用反斜杠.</p>
<h3 id="14-标签和分类"><a href="#14-标签和分类" class="headerlink" title="14. 标签和分类"></a>14. 标签和分类</h3><p>使用 标签: 或者 Tags: 表示标签标记.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">标签: 数学 英语</div><div class="line">Tags: 数学 英语</div></pre></td></tr></table></figure></p>
<p>标签: 数学 英语<br>Tags: 数学 英语<br><strong>注意:</strong>标签: 或者 Tags: 的冒号要使用半角冒号,即英文冒号。</p>
<h3 id="15-注脚"><a href="#15-注脚" class="headerlink" title="15. 注脚"></a>15. 注脚</h3><p>使用 [^footer] 表示注脚.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这是一个注脚测试[^footer1]</div><div class="line"></div><div class="line">[^footer1]: 这是一个测试，用来阐释注脚。</div></pre></td></tr></table></figure></p>
<p>这是一个注脚测试<a href="这是一个测试，用来阐释注脚。">^footer1</a></p>
<p><strong>注意:</strong>在需要解释一个名词，或者一本书，或者一个人时使用脚注标记。</p>
<h3 id="16-页内跳转"><a href="#16-页内跳转" class="headerlink" title="16. 页内跳转"></a>16. 页内跳转</h3><p>使用html代码实现页内跳转。在要跳转到的位置定义个锚 <span id="jump">hehe</span> ，然后使用 <a href="#jump">你好</a>将 你好 设置为一单击即跳转到 hehe 所在位置的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[你好](#jump)</div><div class="line">&lt;span id = &quot;jump&quot;&gt;hehe&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<p><a href="#jump">你好</a><br><span id="jump">hehe</span></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitBook使用]]></title>
      <url>http://arvin-he.github.io/2017/03/22/gitbook-tutorial-2017-03-22/</url>
      <content type="html"><![CDATA[<h2 id="1-安装gitbook"><a href="#1-安装gitbook" class="headerlink" title="1. 安装gitbook"></a>1. 安装gitbook</h2><ol>
<li>安装nodejs和npm</li>
<li>安装gitbook命令行, npm install -g gitbook-cli</li>
<li>查看gitbook是否安装, gitbook -V, 没有安装的话就会自动安装gitbook</li>
<li>安装phantomjs-1.9.7<br>方法:<br>windows下:<br>网上下载phantomjs-1.9.7-windows版本,解压缩,并设置环境变量.<br>Linux下:<br>1.从github上clone一份代码,<a href="https://github.com/ariya/phantomjs.git" target="_blank" rel="external">phantomjs的github网址</a>,<br>2.进入这个clone下的仓库,查看发布的版本信息,git tag<br>3.检出phantom1.9.7版本,git checkout 1.9.7<br>4.将这个目录放到C盘根目录下,并设置环境变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd phantomjs</div><div class="line">$ git checkout 1.9.7  #注意：这里的1.9.7是phantom的版本号，可以由错误报告的第一行找出 </div><div class="line">$ ./build.sh --jobs 4</div><div class="line">$ sudo cp bin/phantomjs /bin/</div><div class="line">$ sudo npm install gitbook-pdf -g  #重新进行安装</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意:</strong>因为gitbook-pdf依赖这个,直接安装gitbook-pdf会报下面的错.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Error: connect ETIMEDOUT</div><div class="line">    at exports._errnoException (util.js:746:11)</div><div class="line">    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1010:19)</div><div class="line">npm ERR! Linux 3.2.0-4-686-pae</div><div class="line">npm ERR! argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;install&quot; &quot;gitbook-pdf&quot; &quot;-g&quot;</div><div class="line">npm ERR! node v0.12.7</div><div class="line">npm ERR! npm  v2.11.3</div><div class="line">npm ERR! code ELIFECYCLE</div><div class="line">npm ERR! phantomjs@1.9.7-5 install: `node install.js`</div><div class="line">npm ERR! Exit status 1</div><div class="line">npm ERR! </div><div class="line">npm ERR! Failed at the phantomjs@1.9.7-5 install script &apos;node install.js&apos;.</div><div class="line">npm ERR! This is most likely a problem with the phantomjs package,</div><div class="line">npm ERR! not with npm itself.</div><div class="line">npm ERR! Tell the author that this fails on your system:</div><div class="line">npm ERR!     node install.js</div><div class="line">npm ERR! You can get their info via:</div><div class="line">npm ERR!     npm owner ls phantomjs</div><div class="line">npm ERR! There is likely additional logging output above.</div><div class="line">npm ERR! Please include the following file with any support request:</div><div class="line">npm ERR!     /home/wangxq/repository/phantomjs/npm-debug.log</div></pre></td></tr></table></figure></p>
<ol>
<li>安装gitbook生成PDF模块, npm install gitbook-pdf -g</li>
<li>如果开始安装gitbook-pdf失败后,在安装了phantomjs之后需要重新安装npm install gitbook-pdf -g</li>
</ol>
<h2 id="2-使用gitbook"><a href="#2-使用gitbook" class="headerlink" title="2. 使用gitbook"></a>2. 使用gitbook</h2><h3 id="2-1-README-md-与-SUMMARY-md创建和编写"><a href="#2-1-README-md-与-SUMMARY-md创建和编写" class="headerlink" title="2.1 README.md 与 SUMMARY.md创建和编写"></a>2.1 README.md 与 SUMMARY.md创建和编写</h3><p>README.md 这个文件相当于一本Gitbook的简介。<br>SUMMARY.md 这个文件是一本书的目录结构，使用Markdown语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir mybook</div><div class="line">$ vim SUMMARY.md</div></pre></td></tr></table></figure></p>
<p>输入</p>
<ul>
<li><a href="README.md">简介</a></li>
<li><a href="chapter1/README.md">第一章</a><ul>
<li><a href="chapter1/section1.md">第一节</a></li>
<li><a href="chapter1/section2.md">第二节</a></li>
</ul>
</li>
<li><a href="chapter2/README.md">第二章</a><ul>
<li><a href="chapter2/section1.md">第一节</a></li>
<li><a href="chapter2/section2.md">第二节</a></li>
</ul>
</li>
<li><a href="end/README.md">结束</a></li>
</ul>
<h3 id="2-2-生成图书目录结构"><a href="#2-2-生成图书目录结构" class="headerlink" title="2.2 生成图书目录结构"></a>2.2 生成图书目录结构</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitbook init</div></pre></td></tr></table></figure>
<h3 id="2-3-本地图书预览"><a href="#2-3-本地图书预览" class="headerlink" title="2.3 本地图书预览"></a>2.3 本地图书预览</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitbook serve .</div></pre></td></tr></table></figure>
<p>然后浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 就可以预览生成的以网页形式组织的书籍。<br>在你的图书项目的目录中多了一个名为_book的文件目录，而这个目录中的文件，即是生成的静态<br>网站内容。</p>
<h3 id="2-4-指定图书生成目录"><a href="#2-4-指定图书生成目录" class="headerlink" title="2.4 指定图书生成目录"></a>2.4 指定图书生成目录</h3><p>使用build参数生成到指定目录,与直接预览生成的静态网站文件不一样的是，使用这个命令，<br>你可以将内容输入到你所想要的目录中去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir /tmp/gitbook</div><div class="line">$ gitbook build --output=/tmp/gitbook</div></pre></td></tr></table></figure></p>
<h2 id="3-生成PDF"><a href="#3-生成PDF" class="headerlink" title="3. 生成PDF"></a>3. 生成PDF</h2><p><strong>注意:</strong>转pdf时需要calibre的ebook-convert组件支持,不然会保存,转换失败.<br>解决办法:<br>下载calibre,有windows和linux版的,安装好后,添加环境变量,再重执行gitbook pdf .,新生成pdf<br>在你的图书的目录中执行下面命令生成PDF.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitbook pdf .</div></pre></td></tr></table></figure></p>
<p><strong>补充：</strong>生成的pdf可以用calibre转成你想要的设备尺寸.</p>
<h2 id="4-生成epub和mobi与电子书"><a href="#4-生成epub和mobi与电子书" class="headerlink" title="4. 生成epub和mobi与电子书"></a>4. 生成epub和mobi与电子书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gitbook epub .</div><div class="line">gitbook mobi .</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maupassant-hexo主题使用]]></title>
      <url>http://arvin-he.github.io/2017/03/21/hexo-maupassant-2017-03-21/</url>
      <content type="html"><![CDATA[<h2 id="1-maupassant主题简介"><a href="#1-maupassant主题简介" class="headerlink" title="1. maupassant主题简介"></a>1. maupassant主题简介</h2><p>Maupassant最初是由Cho为Typecho平台设计开发的一套响应式模板，体积只有20KB，在各种尺寸的设备上表现出色。<br><a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">主题地址</a></p>
<h2 id="2-maupassant主题安装"><a href="#2-maupassant主题安装" class="headerlink" title="2. maupassant主题安装"></a>2. maupassant主题安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd &apos;hexo博客目录&apos;</div><div class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class="line">npm install hexo-renderer-jade --save // 渲染器</div><div class="line">npm install hexo-renderer-sass --save</div><div class="line">npm install hexo-generator-feed --save // rss支持</div></pre></td></tr></table></figure>
<h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h2><ol>
<li>Hexo中_config.yml配置文件修改有两处</li>
</ol>
<ul>
<li>language: zh-CN</li>
<li>theme: maupassant<br>maupassant已经支持简体中文,以前用next主题时,language: zh-Hans</li>
</ul>
<ol>
<li>maupassant主题下的_config.yml配置文件修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">fancybox: true ## 是否启用Fancybox图片灯箱效果</div><div class="line">duoshuo: ## 多说评论</div><div class="line">disqus: ## Disqus评论</div><div class="line">uyan: ## 友言评论</div><div class="line">gentie: ## 网易云跟帖</div><div class="line">google_search: false ## google搜索</div><div class="line">baidu_search: ## 百度搜索</div><div class="line">swiftype: ## swifttypekey站内搜索</div><div class="line">tinysou: ## 微搜索</div><div class="line">self_search: true ## 使用本地搜索</div><div class="line">google_analytics: ## Google Analytics 跟踪ID </div><div class="line">baidu_analytics: ## 百度统计 跟踪ID </div><div class="line">show_category_count: true ## 是否显示侧边栏分类数目</div><div class="line">shareto: true ## 是否使用分享按钮</div><div class="line">busuanzi: true ## 是否使用卜算子页面访问计数</div><div class="line">widgets_on_small_screens: false ## 是否在移动设备屏幕底部显示侧边栏</div><div class="line"></div><div class="line">menu:</div><div class="line">  - page: home</div><div class="line">    directory: .</div><div class="line">    icon: fa-home</div><div class="line">  - page: archive</div><div class="line">    directory: archives/</div><div class="line">    icon: fa-archive</div><div class="line">  - page: about</div><div class="line">    directory: about/</div><div class="line">    icon: fa-user</div><div class="line">  - page: commonweal</div><div class="line">    directory: 404.html</div><div class="line">    icon: fa-heartbeat</div><div class="line">  # - page: rss</div><div class="line">  #   directory: atom.xml</div><div class="line">  #   icon: fa-rss</div><div class="line"></div><div class="line"># 选择和排列希望使用的侧边栏小工具</div><div class="line">widgets: ## Six widgets in sidebar provided: search, category, tag, recent_posts, rencent_comments and links.</div><div class="line">  - search</div><div class="line">  - category</div><div class="line">  - tag</div><div class="line">  - recent_posts</div><div class="line">  - recent_comments</div><div class="line">  - links</div><div class="line"></div><div class="line">#  友情链接，请依照格式填写。</div><div class="line">links:</div><div class="line">  # - title: site-name1</div><div class="line">  #   url: http://www.example1.com/</div><div class="line">  # - title: site-name2</div><div class="line">  #   url: http://www.example2.com/</div><div class="line">  # - title: site-name3</div><div class="line">  #   url: http://www.example3.com/</div><div class="line"></div><div class="line">timeline:</div><div class="line">  - num: 1</div><div class="line">    word: 2014/06/12-Start</div><div class="line">  - num: 2</div><div class="line">    word: 2014/11/29-XXX</div><div class="line">  - num: 3</div><div class="line">    word: 2015/02/18-DDD</div><div class="line">  - num: 4</div><div class="line">    word: More</div><div class="line"></div><div class="line"># Static files</div><div class="line"># 静态文件存储路径，方便设置CDN缓存</div><div class="line">js: js</div><div class="line">css: css</div><div class="line"></div><div class="line"># Theme version</div><div class="line"># 主题版本，便于静态文件更新后刷新CDN缓存</div><div class="line">version: 0.0.0</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="4-生成部署"><a href="#4-生成部署" class="headerlink" title="4. 生成部署"></a>4. 生成部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo s</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<h2 id="5-更换Maupassant遇到的问题"><a href="#5-更换Maupassant遇到的问题" class="headerlink" title="5. 更换Maupassant遇到的问题"></a>5. 更换Maupassant遇到的问题</h2><h3 id="5-1-安装好并设置好相应配置文件后-执行hexo-clean出现错误"><a href="#5-1-安装好并设置好相应配置文件后-执行hexo-clean出现错误" class="headerlink" title="5.1 安装好并设置好相应配置文件后,执行hexo clean出现错误"></a>5.1 安装好并设置好相应配置文件后,执行hexo clean出现错误</h3><p>ERROR Plugin load failed: hexo-renderer-sass<br>Error: %1 is not a valid Win32 application.<br>原因: hexo-renderer-sass没有安装好<br>解决办法: 将node_modules文件夹删除,重新安装hexo和Maupassant的依赖,执行npm install<br><strong>注意:</strong>执行npm install之前请检查下package.json下的依赖模块是否遗漏,下面是我的package.json.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</div><div class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;hexo&quot;: &#123;</div><div class="line">    &quot;version&quot;: &quot;3.2.2&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;hexo&quot;: &quot;^3.2.2&quot;,</div><div class="line">    &quot;hexo-deployer-git&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</div><div class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</div><div class="line">    &quot;hexo-generator-feed&quot;: &quot;^1.2.0&quot;,</div><div class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-generator-json-content&quot;: &quot;^3.0.1&quot;,</div><div class="line">    &quot;hexo-generator-search&quot;: &quot;^1.0.4&quot;,</div><div class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-renderer-jade&quot;: &quot;^0.3.0&quot;,</div><div class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</div><div class="line">    &quot;hexo-renderer-sass&quot;: &quot;^0.3.1&quot;,</div><div class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</div><div class="line">    &quot;hexo-server&quot;: &quot;^0.2.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-2-本地运行hexo-s出现页面布局错乱"><a href="#5-2-本地运行hexo-s出现页面布局错乱" class="headerlink" title="5.2 本地运行hexo s出现页面布局错乱"></a>5.2 本地运行hexo s出现页面布局错乱</h3><p>原因:hexo-renderer-sass没有安装好,虽然页面能显示,但是总是错乱.<br>出现这种情况是因为之前使用的主题是next主题,虽然配置文件都修改好,<br>在安装hexo-renderer-sass依赖时出了点问题,在hexo-renderer-sass需要python2.7,<br>而我安装的是python3,安装python2.7,并重新安装hexo-renderer-sass.如果还有问题<br>就删除node_modules文件夹,重新安装吧.<br>解决办法: 重新安装hexo-renderer-sass</p>
<h3 id="5-3-设置本地搜索"><a href="#5-3-设置本地搜索" class="headerlink" title="5.3 设置本地搜索"></a>5.3 设置本地搜索</h3><p>Maupassant默认使用google搜索,如果要使用本地搜索需要做两件事:</p>
<ol>
<li><p>安装依赖模块:hexo-generator-search</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd &apos;hexo博客目录&apos;</div><div class="line">npm install -g hexo-generator-search --save</div></pre></td></tr></table></figure>
</li>
<li><p>修改Maupassant主题的配置文件<br>将默认的google搜索设置为false,将本地搜索设置true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">google_search: false ## google搜索</div><div class="line">baidu_search:        ## 百度搜索</div><div class="line">swiftype:            ## swifttypekey站内搜索</div><div class="line">tinysou:             ## 微搜索</div><div class="line">self_search: true    ## 使用本地搜索</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Next-hexo主题使用]]></title>
      <url>http://arvin-he.github.io/2017/03/20/hexo-next-2017-03-20/</url>
      <content type="html"><![CDATA[<h3 id="1-next主题简介"><a href="#1-next主题简介" class="headerlink" title="1. next主题简介"></a>1. next主题简介</h3><p>Next主题是我比较喜欢的主题之一,也是一开始使用的主题,风格简约.</p>
<h3 id="2-下载next主题"><a href="#2-下载next主题" class="headerlink" title="2. 下载next主题"></a>2. 下载next主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd &apos;hexo目录&apos;</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h3 id="3-next主题配置"><a href="#3-next主题配置" class="headerlink" title="3. next主题配置"></a>3. next主题配置</h3><p><strong>注意:</strong> 在Hexo中的根目录下有一个_config.yml配置文件,而next主题中source目录下也有一个_config.yml配置文件.<br>Hexo根目录的配置文件是配置hexo本身的配置,next主题下的配置则由主题作者提供，主要用于配置主题相关的选项.<br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">hexo-next官方配置教程</a></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建github博客]]></title>
      <url>http://arvin-he.github.io/2017/03/12/hexo-tutorial-2017-03-12/</url>
      <content type="html"><![CDATA[<p><img src="/2017/03/12/hexo-tutorial-2017-03-12/5.jpg" alt=""></p>
<h2 id="1-安装Hexo及依赖"><a href="#1-安装Hexo及依赖" class="headerlink" title="1. 安装Hexo及依赖"></a>1. 安装Hexo及依赖</h2><h3 id="1-1-准备条件"><a href="#1-1-准备条件" class="headerlink" title="1.1 准备条件"></a>1.1 准备条件</h3><ol>
<li>安装git</li>
<li>有github帐号,并有仓库username.github.io</li>
<li>本地机器保存github的帐号和密码</li>
</ol>
<h3 id="1-2-安装hexo"><a href="#1-2-安装hexo" class="headerlink" title="1.2 安装hexo"></a>1.2 安装hexo</h3><ol>
<li>安装nodejs</li>
<li>安装hexo, npm install -g hexo, 或者 npm install hexo-cli -g<br>这里hexo需要全局安装,因为在终端要用到hexo命令,至于hexo的依赖就不需要全局安装了,在所在的项目目录下安装即可.</li>
</ol>
<h3 id="1-3-安装hexo依赖"><a href="#1-3-安装hexo依赖" class="headerlink" title="1.3 安装hexo依赖"></a>1.3 安装hexo依赖</h3><p>在hexo的根目录下有一个package.json文件,里面是hexo需要的依赖.依赖需要一个一个安装好.<br>如果要添加其他模块的依赖,比如增加本地搜索功能时,需要安装hexo-generator-search模块,则使用命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure></p>
<p>在hexo根目录下node_modules文件夹下就会安装hexo-generator-search模块,并在package.json中写入对应的<br>hexo-generator-search依赖条目.<br>下面是我的package.json文件所用到的hexo依赖.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</div><div class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">  &quot;private&quot;: true,</div><div class="line">  &quot;hexo&quot;: &#123;</div><div class="line">    &quot;version&quot;: &quot;3.2.2&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;hexo&quot;: &quot;^3.3.7&quot;,</div><div class="line">    &quot;hexo-asset-image&quot;: &quot;git+https://github.com/CodeFalling/hexo-asset-image.git&quot;,</div><div class="line">    &quot;hexo-deployer-git&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</div><div class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</div><div class="line">    &quot;hexo-generator-feed&quot;: &quot;^1.2.0&quot;,</div><div class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</div><div class="line">    &quot;hexo-generator-json-content&quot;: &quot;^3.0.1&quot;,</div><div class="line">    &quot;hexo-generator-search&quot;: &quot;^1.0.4&quot;,</div><div class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</div><div class="line">    &quot;hexo-renderer-jade&quot;: &quot;^0.3.0&quot;,</div><div class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.2.11&quot;,</div><div class="line">    &quot;hexo-renderer-sass&quot;: &quot;^0.3.2&quot;,</div><div class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</div><div class="line">    &quot;hexo-server&quot;: &quot;^0.2.1&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> 这些依赖不是全部必须的,根据你个人喜好和所需的功能以及不同主题的不同依赖所决定的,<br>一开始hexo只安装基本的依赖.例如你安装了hexo-next主题,可查看<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">hexo-next官方配置教程</a>.</p>
<h2 id="2-配置Hexo"><a href="#2-配置Hexo" class="headerlink" title="2. 配置Hexo"></a>2. 配置Hexo</h2><p>在Hexo中的根目录下有一个_config.yml配置文件,根据你需要的功能进行配置.<br>下面我指列出了常见的配置,没有列出的都是默认配置.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">title: &quot;你的站点名&quot;  #站点名，站点左上角</div><div class="line">subtitle: &quot;你站点的副标题&quot;</div><div class="line">description: &quot;你站点的描述&quot; #给搜索引擎看的，对站点的描述，可以自定义</div><div class="line">author: &quot;站点作者&quot;</div><div class="line">language: &quot;语言&quot; # 注意:不同的主题支持的语言配置会不一样,请注意你所选主题支持的语言.如next支持中文语言的配置是zh-Hans,不是zh-CN,当然后期也可能支持.</div><div class="line">url: http://username.github.io  # 如果你用到站内搜索,需要配置一下你的url, 否则搜索正常但页面跳转不出来.</div><div class="line">tag_dir: tags # 你的标签目录,不打开则点击标签时没反应</div><div class="line">archive_dir: archives # 你的归档目录</div><div class="line">category_dir: categories # 你的分类目录</div><div class="line">per_page: 10 # 配置你一页显示文章数目,默认是10篇</div><div class="line"># 设置站内检索功能</div><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: all</div><div class="line">theme: next # 主题设置,根据你所选主题,在这里设置你的主题,没配置的话,就是空白也</div><div class="line"># 部署</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/username/username.github.io.git # 根据你的github帐号的usename来替换</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h2 id="3-常用的功能配置"><a href="#3-常用的功能配置" class="headerlink" title="3. 常用的功能配置"></a>3. 常用的功能配置</h2><h3 id="3-1-设置Tags-标签-页面"><a href="#3-1-设置Tags-标签-页面" class="headerlink" title="3.1 设置Tags(标签)页面"></a>3.1 设置Tags(标签)页面</h3><p><strong>注意:</strong> Tags目录不会自动生成,需要你先配置再手动生成.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd &quot;hexo目录&quot;</div><div class="line">$ hexo new page tags              # 会在source/tags/目录下生成index.md</div><div class="line">$ vim source/tags/index.md </div><div class="line">在你的文章的开头即front-matter中添加一项:</div><div class="line">type: &quot;tags&quot;</div></pre></td></tr></table></figure></p>
<ol>
<li>也就是首先要确认站点配置文件里有tag_dir: tags这个配置选项打开,<br>然后确认你所选主题配置文件里有tags: /tags这个配置选项打开(假如你选择next主题的话)</li>
<li>使用hexo new命令新建文章则会自动生成标签目录</li>
<li>在你的文章的开头即front-matter中添加一项type: “tags”,添加如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 你的题目</div><div class="line">tags: 你的标签</div><div class="line">category: 你的分类</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
</ol>
<p>多个标签的设置<br>方式一：仿照Hexo配置文件中的写法<br>tags:</p>
<ul>
<li>Hexo</li>
<li>HTML</li>
<li>JavaScript</li>
</ul>
<p>方式二：伪JavaScript数组写法<br>tags: [Hexo,HTML,JavaScript]</p>
<h3 id="3-2-设置categories-分类-页面"><a href="#3-2-设置categories-分类-页面" class="headerlink" title="3.2 设置categories(分类)页面"></a>3.2 设置categories(分类)页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd &quot;hexo目录&quot;</div><div class="line">$ hexo new page categories        # 会在source/categories/目录下生成index.md</div><div class="line">$ vim source/categories/index.md</div><div class="line">在你的文章的开头即front-matter中添加一项:</div><div class="line">type: &quot;categories&quot;</div></pre></td></tr></table></figure>
<ol>
<li>也就是首先要确认站点配置文件里有category_dir: categories这个配置选项打开,<br>然后确认你所选主题配置文件里有category_dir: /category_dir这个配置选项打开(假如你选择next主题的话)</li>
<li>使用hexo new命令新建文章则会自动生成分类目录</li>
<li>在你的文章的开头即front-matter中添加一项type: “categories”,添加如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 你的题目</div><div class="line">tags: 你的标签</div><div class="line">category: 你的分类</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
</ol>
<p>多个分类设置<br>方式一：仿照Hexo配置文件中的写法<br>categories:</p>
<ul>
<li>Hexo</li>
<li>HTML</li>
<li>JavaScript</li>
</ul>
<p>方式二：伪JavaScript数组写法<br>categories: [Hexo,HTML,JavaScript]</p>
<h3 id="3-3-设置about页面"><a href="#3-3-设置about页面" class="headerlink" title="3.3 设置about页面"></a>3.3 设置about页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd path/to/hexo</div><div class="line">$ hexo new page &quot;about&quot;              # 会在source/about/目录下生成index.md</div></pre></td></tr></table></figure>
<p>然后在souce/about/index.md中写入你想表达的内容.</p>
<h3 id="3-4-设置索引目录里的图片"><a href="#3-4-设置索引目录里的图片" class="headerlink" title="3.4 设置索引目录里的图片"></a>3.4 设置索引目录里的图片</h3><p>因为索引设置为提取文档前150个字符，所以想在索引目录中插入图片，就在文章开头插入图片即可。</p>
<h3 id="3-5-文章摘要"><a href="#3-5-文章摘要" class="headerlink" title="3.5 文章摘要"></a>3.5 文章摘要</h3><p>首页默认显示文章摘要而非全文，可以在文章的front-matter中填写一项description:来设置你想显示的摘要，<br>或者直接在文章内容中插入&lt;!–more–&gt;以隐藏后面的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--More--&gt;</div></pre></td></tr></table></figure></p>
<p>若两者都未设置，则自动截取文章第一段作为摘要。然后重新生成部署,就会看到折叠效果了.</p>
<h3 id="3-6-使用hexo站内搜索"><a href="#3-6-使用hexo站内搜索" class="headerlink" title="3.6 使用hexo站内搜索"></a>3.6 使用hexo站内搜索</h3><ol>
<li><p>安装 hexo-generator-search，在站点的根目录下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
</li>
<li><p>站点配置文件_config.yml配置<br><strong>注意:</strong>在<strong>站点</strong>下的_config.yml配置,不是主题里的_config.yml.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: all</div></pre></td></tr></table></figure>
</li>
<li><p>主题_config.yml配置<br>本地搜索设置为true,否则界面上不会显示搜索按钮</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Local search</div><div class="line">local_search:</div><div class="line">  enable: true</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="3-7-在文章中插入本地图片"><a href="#3-7-在文章中插入本地图片" class="headerlink" title="3.7 在文章中插入本地图片"></a>3.7 在文章中插入本地图片</h3><ol>
<li>配置hexo下的_config.yml中post_asset_folder: true</li>
<li><p>安装CodeFalling/hexo-asset-image的插件来加载本地图片,<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">插件地址</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure>
</li>
<li><p>插入图片<br><img src="/2017/03/12/hexo-tutorial-2017-03-12/5.jpg" alt="cute cat"><br><strong>注意:</strong>当设置post_asset_folder为true参数后，在Hexo new newfile时会自动建立一个与文章同名的文件夹，<br>可以把与该文章相关的所有资源都放到那个文件夹，如此一来，便可以方便的管理使用资源。</p>
</li>
</ol>
<h2 id="4-使用hexo"><a href="#4-使用hexo" class="headerlink" title="4. 使用hexo"></a>4. 使用hexo</h2><p>新建一个目录如:’hexo目录’<br>cd ‘hexo目录’<br>hexo init       //文件夹自动生成建网站所需的文件<br>npm install     //在文件夹下安装node_modules,即安装依赖<br>hexo g          //生成静态文件<br>hexo s          //本地运行<br>hexo d          //部署到github上去</p>
<h2 id="5-hexo使用"><a href="#5-hexo使用" class="headerlink" title="5. hexo使用"></a>5. hexo使用</h2><h3 id="5-1-hexo命令详解"><a href="#5-1-hexo命令详解" class="headerlink" title="5.1 hexo命令详解"></a>5.1 hexo命令详解</h3><p>hexo init<br>hexo new “postName” #新建文章<br>hexo new draft “postName” #新建草稿文章<br>hexo new page “pageName” #新建页面<br>hexo clean #清除生成的静态文件<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口(默认端口4000，’ctrl + c’关闭server)<br>hexo deploy #将.deploy目录部署到GitHub<br>hexo help  # 查看帮助<br>hexo version  #查看Hexo的版本<br>hexo deploy -g  #生成加部署<br>hexo server -g  #生成加预览<br>hexo server –draft  #本地预览包括草稿文件<br><br>常用命令的简写<br>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br><br>常用组合<br>hexo d -g #生成部署<br>hexo s -g #生成预览</p>
<h3 id="5-2-hexo使用流程"><a href="#5-2-hexo使用流程" class="headerlink" title="5.2 hexo使用流程"></a>5.2 hexo使用流程</h3><p>一般用<code>hexo new &lt;article&gt;</code>来新建一篇文章, 这样新建的一篇文章是放在<code>source/_post</code>目录下的, 然后使用<code>hexo g</code>指令编译markldown<br>文件, 将编译的HTML结果放在public目下, 之后<code>hexo d</code>,命令将public目录下的所有文档部署到github上去.<br>但有时写了多篇文章,但是只有一篇文章需要发布,其他文章没有完成. 我们并不希望未完成的文章也发布出去, 这时就需要hexo的draft机制.</p>
<h4 id="5-2-1-新建草稿"><a href="#5-2-1-新建草稿" class="headerlink" title="5.2.1 新建草稿"></a>5.2.1 新建草稿</h4><p>使用<code>hexo new draft &lt;article&gt;</code> 命令新建一个草稿, 新建的文章放在<code>source/_drafts</code>目录下, <code>hexo g</code> 和 <code>hexo d</code>命令不会编译部署<br><code>source/_drafts</code>目录下的文章.</p>
<h4 id="5-2-2-本机预览草稿"><a href="#5-2-2-本机预览草稿" class="headerlink" title="5.2.2 本机预览草稿"></a>5.2.2 本机预览草稿</h4><p>使用<code>hexo server --draft</code>命令, 其中Hexo的Hexo server另外提供<code>--draft</code>参数，同时搭配<code>hexo-browsersync plugins</code>，就可以实现一边<br>使用文本编辑器编辑markdown文章，一边使用浏览器预览文章。</p>
<h4 id="5-2-3-将草稿发布为正式文章"><a href="#5-2-3-将草稿发布为正式文章" class="headerlink" title="5.2.3 将草稿发布为正式文章"></a>5.2.3 将草稿发布为正式文章</h4><p>使用<code>hexo publish &lt;filename&gt;</code>命令, 该命令只是将文章从<code>source/_drafts</code>目录移到<code>source/_posts</code>目录下而已。之后的<code>hexo generate</code>与<br><code>hexo deploy</code>的用法还是完全一样的。<br><strong>注意:</strong>若日后想將正式文章反悔成为草稿，只需<strong>手动</strong>將文章从<code>source/_posts</code>目录移动到<code>source/_drafts</code>目录即可。</p>
<h2 id="6-搭建hexo过程中遇到的问题"><a href="#6-搭建hexo过程中遇到的问题" class="headerlink" title="6. 搭建hexo过程中遇到的问题"></a>6. 搭建hexo过程中遇到的问题</h2><h3 id="6-1-hexo无法上传到github-但在本地localhost-4000是可以打开的"><a href="#6-1-hexo无法上传到github-但在本地localhost-4000是可以打开的" class="headerlink" title="6.1 hexo无法上传到github, 但在本地localhost:4000是可以打开的"></a>6.1 hexo无法上传到github, 但在本地localhost:4000是可以打开的</h3><p>On branch master<br>nothing to commit, working directory clean<br>bash: /dev/tty: No such device or address<br>error: failed to execute prompt script (exit code 1)<br>fatal: could not read Username for ‘<a href="https://github.com" target="_blank" rel="external">https://github.com</a>‘: No error<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">http://hexo.io/docs/troubleshooting.html</a><br>Error: bash: /dev/tty: No such device or address<br>error: failed to execute prompt script (exit code 1)<br>fatal: could not read Username for ‘<a href="https://github.com" target="_blank" rel="external">https://github.com</a>‘: No error<br>原因:本地没有保存github用户名和密码,因为hexo d,是直接将生成的静态文件部署到github上去,一步到位的,<br>意思就是部署的时候就要能拿到github的用户名和密码,如果拿不到就报错,部署不上去.<br><strong>注意:</strong> 使用的是https协议,因为当没有在本地保存你的github帐号的用户名<br>和密码时,使用https协议push内容到github上去时就要每次手动输入github帐号上用户名和密码.<br>而hexo d部署是一步到位的,中间没有机会让你输入你的github账户用户名和密码.<br>解决办法:</p>
<ol>
<li>使用https协议时,本地保存你的github账户的用户名和密码<br>deploy:<br>type: git<br>repository: <a href="https://github.com/yourusername/yourusername.github.io.git" target="_blank" rel="external">https://github.com/yourusername/yourusername.github.io.git</a><br>branch: master<br></li>
<li>使用ssh协议,本地生成ssh key,并将公匙放到你的github上<br>deploy:<br>type: git<br>repository: ssh://git@github.com/yourusername/yourusername.github.io.git<br>branch: master</li>
</ol>
<h3 id="6-2-hexo部署失败-ERROR-Deployer-not-found-git"><a href="#6-2-hexo部署失败-ERROR-Deployer-not-found-git" class="headerlink" title="6.2 hexo部署失败 ERROR Deployer not found: git"></a>6.2 hexo部署失败 ERROR Deployer not found: git</h3><p>原因: 缺少nodejs的依赖<br>解决办法: 在’hexo目录’的目录下执行 npm install hexo-deployer-git –save </p>
<h3 id="6-3-Error-fatal-Not-a-git-repository-or-any-of-the-parent-directories-git"><a href="#6-3-Error-fatal-Not-a-git-repository-or-any-of-the-parent-directories-git" class="headerlink" title="6.3 Error: fatal: Not a git repository (or any of the parent directories): .git"></a>6.3 Error: fatal: Not a git repository (or any of the parent directories): .git</h3><p>FATAL Something’s wrong. Maybe you can find the solution here: <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">http://hexo.io/docs/troubleshooting.html</a><br>Error: fatal: Not a git repository (or any of the parent directories): .git<br>    at ChildProcess.<anonymous> (F:\blogs\node_modules\hexo-util\lib\spawn.js:37:17)<br>    at emitTwo (events.js:106:13)<br>    at ChildProcess.emit (events.js:194:7)<br>    at ChildProcess.cp.emit (F:\blogs\node_modules\cross-spawn\lib\enoent.js:40:29)<br>    at maybeClose (internal/child_process.js:899:16)<br>    at Socket.<anonymous> (internal/child_process.js:342:11)<br>    at emitOne (events.js:96:13)<br>    at Socket.emit (events.js:191:7)<br>    at Pipe._handle.close [as _onclose] (net.js:513:12)<br>FATAL fatal: Not a git repository (or any of the parent directories): .git<br>Error: fatal: Not a git repository (or any of the parent directories): .git<br>    at ChildProcess.<anonymous> (F:\blogs\node_modules\hexo-util\lib\spawn.js:37:17)<br>    at emitTwo (events.js:106:13)<br>    at ChildProcess.emit (events.js:194:7)<br>    at ChildProcess.cp.emit (F:\blogs\node_modules\cross-spawn\lib\enoent.js:40:29)<br>    at maybeClose (internal/child_process.js:899:16)<br>    at Socket.<anonymous> (internal/child_process.js:342:11)<br>    at emitOne (events.js:96:13)<br>    at Socket.emit (events.js:191:7)<br>    at Pipe._handle.close [as _onclose] (net.js:513:12)<br><strong>解决办法:</strong><br>    删除.deploy_git/ 文件夹,然后再次,hexo deploy, 就好了.</anonymous></anonymous></anonymous></anonymous></p>
<h3 id="6-4-ERROR-Local-hexo-not-found-in-F-username-github-io"><a href="#6-4-ERROR-Local-hexo-not-found-in-F-username-github-io" class="headerlink" title="6.4 ERROR Local hexo not found in F:\username.github.io"></a>6.4 ERROR Local hexo not found in F:\username.github.io</h3><p>Hexo搭建博客之后用Git已经将所有的source都同步到了git上，在另一台电脑上将源代码clone下来之后，直接执行hexo g,出现错误.<br>$ hexo g&lt;<br>ERROR Local hexo not found<br>ERROR Try running: ‘npm install hexo –save’<br><strong>原因:</strong> 在另外一台机器上clone下来的内容,缺少hexo的依赖,因为在.gitignore里忽略将node_nodules文件夹push到github上去.就是hexo所依赖的nodejs的模块,所以用npm重新安装即可.<br><strong>解决办法:</strong><br>cd ‘hexo目录’<br>npm install<br>hexo g</p>
<h3 id="6-5-执行hexo-g或hexo本地测试运行重启后页面空白-提示-WARN-No-layout-index-html"><a href="#6-5-执行hexo-g或hexo本地测试运行重启后页面空白-提示-WARN-No-layout-index-html" class="headerlink" title="6.5 执行hexo g或hexo本地测试运行重启后页面空白,提示 : WARN No layout: index.html"></a>6.5 执行hexo g或hexo本地测试运行重启后页面空白,提示 : WARN No layout: index.html</h3><p>此时页面都是白的，使用hexo clean  然后从新Generated再次运行还是空白<br><strong>原因:</strong> 在themes/文件夹的next主题是空的,因为在我的github上的next主题是作为submodule,是引用别人的仓库,在clone到一台新的机器上时并没有clone到本地来,如果你没有通过submodule引用别人的仓库,就不会出现这个问题.<br><strong>解决办法:</strong><br>cd ‘hexo目录’<br>git submodule init<br>git submodule update<br><strong>注意:</strong> 克隆含有子模块的项目:<br>克隆一个含有子模块的项目。 当你在克隆这样的项目时，默认会包含该子模块目录，但其中还没有任何文件.<br>你必须运行两个命令：git submodule init 用来初始化本地配置文件，<br>而 git submodule update 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。</p>
<h3 id="6-6-部署到github上去后发现没有更新-还是上次的页面"><a href="#6-6-部署到github上去后发现没有更新-还是上次的页面" class="headerlink" title="6.6 部署到github上去后发现没有更新,还是上次的页面"></a>6.6 部署到github上去后发现没有更新,还是上次的页面</h3><p><strong>解决办法:</strong></p>
<ol>
<li>删除.deploy_git/文件夹<br></li>
<li>hexo clean //清除上次生成的静态文件<br></li>
<li>hexo g //重新生成静态文件<br></li>
<li>hexo d //部署到github上去<br></li>
</ol>
<h3 id="6-7-点击”标签”和”分类”没有跳出标签和分类"><a href="#6-7-点击”标签”和”分类”没有跳出标签和分类" class="headerlink" title="6.7 点击”标签”和”分类”没有跳出标签和分类"></a>6.7 点击”标签”和”分类”没有跳出标签和分类</h3><p>原因:Tags和Category需要手动生成,即需要输入命令生成.<br>方法:<br>生成Tags和categories<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cd path/to/hexo</div><div class="line">$ hexo new page tags              # 会在source/tags/目录下生成index.md</div><div class="line">$ hexo new page categories         # 会在source/categories/目录下生成index.md</div><div class="line">$ vim source/tags/index.md </div><div class="line">在date下面一行输入: </div><div class="line">type: &quot;tags&quot;</div><div class="line">$ vim source/categories/index.md</div><div class="line">在date下面一行输入: </div><div class="line">type: &quot;categories&quot;</div></pre></td></tr></table></figure></p>
<h3 id="6-8-关于404页面在本地正常显示-在Github上不显示问题"><a href="#6-8-关于404页面在本地正常显示-在Github上不显示问题" class="headerlink" title="6.8 关于404页面在本地正常显示,在Github上不显示问题"></a>6.8 关于404页面在本地正常显示,在Github上不显示问题</h3><p>原因:Github Pages强制要求https，所以文档内对js和css的请求都需要经过https传输的才行，而腾讯的404公益页面使用的默认为http.<br>其中search_children.js主要提取了data.js及page.js两个文件，前者是寻找儿童的数据，在Github中没问题,<br>后者中默认都是用http加载的js和css，所以不能直接用，故修改为https方式获取js与css，直接将page.js内容加入404.html页面，<br>具体内容详见我的Github上的404页面.<br><a href="https://www.zhihu.com/question/49153090/answer/146374701" target="_blank" rel="external">知乎上解决办法链接</a></p>
<h3 id="6-9-hexo使用hexo-generator-search站内搜索"><a href="#6-9-hexo使用hexo-generator-search站内搜索" class="headerlink" title="6.9 hexo使用hexo-generator-search站内搜索"></a>6.9 hexo使用hexo-generator-search站内搜索</h3><p>问题: 可以搜索。但是搜索的页面跳转不对.<br>原因: 站点下的_config.yml配置文件的url没有配置.<br>解决: 将url设置你github.io的站点的url.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://username.github.io</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div></pre></td></tr></table></figure></p>
<h3 id="7-nodejs版本问题"><a href="#7-nodejs版本问题" class="headerlink" title="7. nodejs版本问题"></a>7. nodejs版本问题</h3><p>nodejs版本不要太高,最好不用最新版本,最新版本会废弃一些API, 如果hexo或者hexo插件里用到了那些废弃的api,这会让你的应用跑不起来.</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://arvin-he.github.io/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTML>
<html>
<head>
	<meta http-equiv="content-type" content="text/html;charset=utf-8;">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
	<meta name="robots" content="all">
	<meta name="robots" content="index,follow">
</head>
<body>
		<script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页">
		</script>
<script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script>
<script charset="utf-8">
	var QZONE = window.QZONE || {};
	function imagezoom(imgobj, box_w, box_h) {
		var src_w = imgobj.width;
		var src_h = imgobj.height;
		var r1 = src_w / src_h, r2 = box_w / box_h;
		var dst_w, dst_h;
		if (r1 > r2) {
			dst_w = box_w;
			dst_h = Math.round(dst_w / src_w * src_h);
		} else {
			if (r1 < r2) {
				dst_h = box_h;
				dst_w = Math.round(dst_h / src_h * src_w);
			} else {
				dst_w = box_w;
				dst_h = box_h;
			}
		}
		imgobj.style.marginLeft = (box_w - dst_w) / 2 + "px";
		imgobj.style.marginTop = (box_h - dst_h) / 2 + "px";
		imgobj.style.width = dst_w + "px";
		imgobj.style.height = dst_h + "px";
		imgobj.style.opacity = 1;
	}
	(function(_w, _d) {
		var ha = _d.head || _d.getElementsByTagName("head")[0];
		var $scope = {};
		var current;
		var tmnow;
		var chId;
		var homePageUrl, homePageName;
		var scs = document.getElementsByTagName("script");
		if (location.href.indexOf("fm.qq.com") > -1 || location.href.indexOf("fm.qzone.qq.com") > -1) {
			homePageName = "\u8fd4\u56de\u4f01\u9e45FM";
			homePageUrl = "http://fm.qq.com";
		} else {
			if (location.href.indexOf("qzone.qq.com") > -1) {
				homePageName = "\u8fd4\u56de\u6211\u7684\u7a7a\u95f4";
				homePageUrl = "http://qzone.qq.com";
			} else {
				homePageName = "\u8fd4\u56de\u817e\u8baf\u7f51";
				homePageUrl = "http://www.qq.com";
			}
		}
		for (var i = 0;i < scs.length;i++) {
			if (scs[i].src.indexOf("404/search_children.js") > -1) {
				if (scs[i].getAttribute("homePageUrl")) {
					homePageUrl = scs[i].getAttribute("homePageUrl");
				}
				if (scs[i].getAttribute("homePageName")) {
					homePageName = scs[i].getAttribute("homePageName");
				}
				break;
			}
		}
		$scope.rettext = homePageName;
		$scope.retlink = homePageUrl;
		function getData(srcUrl, callback) {
			var sc = _d.createElement("script");
			function orc() {
				if (sc.readyState === "loaded") {
					setTimeout(function() {
						callback && callback();
					}, 0);
				}
			}
			if (sc.addEventListener) {
				if (callback) {
					sc.addEventListener("load", callback, false);
				}
			} else {
				sc.attachEvent("onreadystatechange", orc);
			}
			ha && ha.appendChild(sc);
			sc.src = srcUrl;
		}
		function resolveData(d) {
			var tid, len, ddata = [], tdata;
			if ("object" == typeof d && (d.data && (len = d.data.length))) {
				for (var i = 0;i < len;i++) {
					var expire = d.data[i].expire;
					d.data[i]._id = new Date * Math.random() * Math.random() * 1E7;
					if (expire && tmnow * 1E3 < Date.parse(expire.replace(/\s[\s\S]*$/, "").replace(/\-/g, "/"))) {
						var _c = d.data[i].city, _p = d.data[i].province;
						if (_c && city) {
							if (("_" + _c + "_").indexOf("_" + city + "_") > -1) {
								ddata.push(d.data[i]);
								continue;
							}
						}
						if (_p && province) {
							if (("_" + _p + "_").indexOf("_" + province + "_") > -1) {
								ddata.push(d.data[i]);
							}
						}
					}
				}
				tid = Math.floor(Math.random() * (ddata.length || len));
				tdata = (ddata.length ? ddata : d.data)[chId = tid];
				if (_w.foundjsondata) {
					tdata.ta = tdata.sex.indexOf("\u5973") > -1 ? "\u5979" : "\u4ed6";
					tdata.name = "\u201c7\u00b718\u7279\u5927\u62d0\u5356\u5a74\u513f\u6848\u201d\u544a\u7834\uff0c\u88ab\u89e3\u6551\u768415\u540d\u5b69\u5b50\u4e2d\uff0c2\u4eba\u7531\u4eb2\u751f\u7236\u6bcd\u9886\u56de\uff0c\u4ecd\u670913\u540d\u5b69\u5b50\u672a\u627e\u5230\u4eb2\u751f\u7236\u6bcd\uff0c\u88ab\u5b89\u7f6e\u5728\u60e0\u5dde\u5e02\u793e\u4f1a\u798f\u5229\u9662\uff0c" + tdata.ta + "\u662f\u5176\u4e2d\u4e4b\u4e00\u3002";
					tdata.url = tdata.url.replace(/#p=(\d{1,2})/, function(a, n) {
						return "#p=" + (+n + 1);
					});
					return format(tmpl2, tdata);
				}
				if (!tdata.ext1) {
					tdata.ext1 = "\u4f46\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u5bfb\u627e\u5931\u8e2a\u5b9d\u8d1d";
				}
				return tdata;
			}
		}
		function setTopData(tdata) {
			current = tdata;
			$scope.topname = tdata.name;
			$scope.topgender = tdata.sex;
			$scope.topbirth = tdata.birth_time;
			$scope.toplostdate = tdata.lost_time;
			$scope.toplostplace = tdata.lost_place;
			$scope.toplostdesc = tdata.child_feature;
			$scope.toplink = tdata.url;
			$scope.topimg = tdata.child_pic;
			$scope.topid = tdata._id;
			document.body.innerHTML = template("body", $scope);
		}
		function init(data) {
			tmnow = data.tm_now * 1E3;
			var tdata = resolveData(jsondata);
			$scope.whichin = 0;
			jsondata.data.splice(chId, 1);
			$scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5));
			setTopData(tdata);
		}
		var timeout;
		window._Callback = function(d) {
			clearTimeout(timeout);
			init(d);
		};
		timeout = setTimeout(function() {
			_Callback({tm_now:(new Date).getTime() / 1E3});
		}, 2E3);
		_w.share = function(target) {
			var summary = ["\u80cc\u666f\uff1a", current.name, "\uff0c\u6027\u522b\uff1a", current.sex, "\uff0c\u51fa\u751f\u65f6\u95f4\uff1a", current.birth_time, "\uff0c\u5931\u8e2a\u65f6\u95f4\uff1a", current.lost_time, "\uff0c\u7279\u5f81\u63cf\u8ff0\uff1a", current.child_feature].join("");
			if (summary) {
				summary = "#\u5bfb\u627e\u5931\u8e2a\u7684\u5b9d\u8d1d#" + summary;
			}
			var stitle = "\u5931\u8e2a\u7684\u5b9d\u8d1d\u8be6\u60c5";
			var desc = "\u5931\u8e2a\u7684\u5b9d\u8d1d\u8981\u56de\u5bb6\uff0c\u5feb\u6765\u53c2\u4e0e\u7231\u5fc3\u7684\u4f20\u9012\u5427\uff01";
			var encode = encodeURIComponent;
			var opts = {"surl":"http://qzone.qq.com/gy/404/" + current.id + "/lostchild.html", "site":"QQ\u7a7a\u95f4", "summary":summary || "#\u5b9d\u8d1d\u56de\u5bb6#\u817e\u8baf\u5fd7\u613f\u8005\u7528\u6280\u672f\u70b9\u4eae\u516c\u76ca\uff0c\u8ba9\u6211\u4eec\u4e00\u8d77\u5bfb\u627e\u8d70\u5931\u7684\u513f\u7ae5\u5427\uff01", "stitle":stitle, "pics":current.child_pic, "desc":desc, "origin_url":current.url};
			var surl = opts.surl || "http://www.qq.com/404/", summary = opts.summary || "\u8fd9\u4e2a\u662f\u5206\u4eab\u7684\u5185\u5bb9", stitle = opts.stitle || "\u8fd9\u4e2a\u662f\u5206\u4eab\u7684\u6807\u9898", pics = opts.pics || "http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png", site = opts.site || "\u8fd9\u4e2a\u662f\u5206\u4eab\u94fe\u63a5\u7684\u6587\u5b57", desc = opts.desc || "\u5931\u8e2a\u7684\u5b9d\u8d1d\u8981\u56de\u5bb6\uff0c\u5feb\u6765\u53c2\u4e0e\u7231\u5fc3\u7684\u4f20\u9012\u5427\uff01", 
			origin_url = opts.origin_url || "http://www.qq.com/404/";
			var shareList = {weibo:{method:function(evt) {
				var w = "http://v.t.qq.com/share/share.php", q = ["?site=", encode(surl + "#via=share_t_weib"), "&title=", encode(summary), "&pic=", encode(pics), "&url=", encode(surl)].join(""), p = [w, q].join("");
				openit(p, "weibo", "width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no");
			}}, qzone:{method:function(evt) {
				var buff = [], ps = {url:surl + "#via=404-qzoneshare", desc:desc || "\u5931\u8e2a\u7684\u5b9d\u8d1d\u8981\u56de\u5bb6\uff0c\u5feb\u6765\u53c2\u4e0e\u7231\u5fc3\u7684\u4f20\u9012\u5427\uff01", summary:summary, title:stitle, pics:pics, site:site};
				for (var k in ps) {
					buff.push(k + "=" + encode(ps[k] || ""));
				}
				var w = "http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?" + buff.join("&"), q = ["#via=share_t_qzone", "&title=", encode(summary), "&pic=", encode(pics), "&url=", encode(surl)].join(""), p = [w, q].join("");
				openit(p, "qzone", "width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no");
			}}, sina:{method:function() {
				var w = "http://v.t.sina.com.cn/share/share.php", q = ["?url=", encode(surl + "#via=share_x_weib"), "&title=", encode(summary), "&source=", "&sourceUrl=", surl, "&content=utf-8", "&pic=", encode(pics)].join(""), p = [w, q].join("");
				openit(p, "sina", "toolbar=0,status=0,resizable=1,width=440,height=430");
			}}, kaixin:{method:function() {
				var n = "http://www.kaixin001.com/repaste/bshare.php?rurl=" + encode(surl + "#via=share_kaixin") + "&rcontent=&rtitle=" + encode(summary);
				openit(n, "kaixin", "toolbar=0,status=0,resizable=1,width=600,height=360");
			}}, renren:{method:function() {
				var n = "http://www.connect.renren.com/share/sharer?title=" + encode(summary) + "&url=" + encode(surl + "#via=share_renren"), p = window.open(n, "rr", "toolbar=0,status=0,resizable=1,width=510,height=300");
				if (p) {
					p.focus();
				}
			}}, weixin:{method:function() {
				var n = "http://qzone.qq.com/gy/404/page/qrcode.html?url=" + encode(origin_url + "#via=share_weixin"), p = window.open(n, "rr", "toolbar=0,status=0,resizable=1,width=620,height=430");
				if (p) {
					p.focus();
				}
			}}};
			var openit = function(u, n, p) {
				function o() {
					var z;
					if (!(z = window.open(u, n, p))) {
						location.href = u;
					} else {
						z.focus();
					}
				}
				o();
			};
			shareList[target] && shareList[target].method();
		};
		_w.toThis = function(id) {
			for (var i = 0;i < $scope.otherdata.length;i++) {
				if ($scope.otherdata[i]._id == id) {
					setTopData($scope.otherdata[i]);
					break;
				}
			}
			return false;
		};
		var meta = document.createElement("meta");
		meta.name = "viewport";
		meta.content = "width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no";
		ha.appendChild(meta);
		(function registerStyle() {
			var link = document.createElement("link");
			link.rel = "stylesheet";
			link.type = "text/css";
			link.href = "https://qzone.qq.com/gy/404/style/404style.css";
			ha.appendChild(link);
		})();
		(function initStat() {
			var qqDomainNameRE = /\.qq\.com$/i, qzoneDomainNameRE = /\bqzone\.qq\.com$/i, qzsDomainNameRE = /\bqzonestyle\.gtimg\.cn$/i;
			function cb() {
				var url = location.host;
				var src = "";
				if (qzoneDomainNameRE.test(url)) {
					src = "new404.qzone";
				} else {
					if (qqDomainNameRE.test(url)) {
						src = "new404.qq";
					} else {
						if (qzsDomainNameRE.test(url)) {
							src = "new404.qzonestyle";
						} else {
							src = url.replace(".", "_");
						}
					}
				}
				_w.TCISD && (_w.TCISD.pv && _w.TCISD.pv("hat.qzone.qq.com", "/gy/lostchild/" + src));
			}
			getData("https://qzonestyle.gtimg.cn/ac/qzfl/stat.js", cb);
		})();
		})(window, document);
		!function() {
			function a(a, b) {
				return(/string|function/.test(typeof b) ? h : g)(a, b);
			}
			function b(a, c) {
				return "string" != typeof a && (c = typeof a, "number" === c ? a += "" : a = "function" === c ? b(a.call(a)) : ""), a;
			}
			function c(a) {
				return l[a];
			}
			function d(a) {
				return b(a).replace(/&(?![\w#]+;)|[<>"']/g, c);
			}
			function e(a, b) {
				if (m(a)) {
					for (var c = 0, d = a.length;d > c;c++) {
						b.call(a, a[c], c, a);
					}
				} else {
					for (c in a) {
						b.call(a, a[c], c);
					}
				}
			}
			function f(a, b) {
				var c = /(\/)[^/]+\1\.\.\1/, d = ("./" + a).replace(/[^/]+$/, ""), e = d + b;
				for (e = e.replace(/\/\.\//g, "/");e.match(c);) {
					e = e.replace(c, "/");
				}
				return e;
			}
			function g(b, c) {
				var d = a.get(b) || i({filename:b, name:"Render Error", message:"Template not found"});
				return c ? d(c) : d;
			}
			function h(a, b) {
				if ("string" == typeof b) {
					var c = b;
					b = function() {
						return new k(c);
					};
				}
				var d = j[a] = function(c) {
					try {
						return new b(c, a) + "";
					} catch (d) {
						return i(d)();
					}
				};
				return d.prototype = b.prototype = n, d.toString = function() {
					return b + "";
				}, d;
			}
			function i(a) {
				var b = "{Template Error}", c = a.stack || "";
				if (c) {
					c = c.split("\n").slice(0, 2).join("\n");
				} else {
					for (var d in a) {
						c += "<" + d + ">\n" + a[d] + "\n\n";
					}
				}
				return function() {
					return "object" == typeof console && console.error(b + "\n\n" + c), b;
				};
			}
			var j = a.cache = {}, k = this.String, l = {"<":"&#60;", ">":"&#62;", '"':"&#34;", "'":"&#39;", "&":"&#38;"}, m = Array.isArray || function(a) {
				return "[object Array]" === {}.toString.call(a);
			}, n = a.utils = {$helpers:{}, $include:function(a, b, c) {
				return a = f(c, a), g(a, b);
			}, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers;
			a.get = function(a) {
				return j[a.replace(/^\.\//, "")];
			}, a.helper = function(a, b) {
				o[a] = b;
			}, "function" == typeof define ? define(function() {
				return a;
			}) : "undefined" != typeof exports ? module.exports = a : this.template = a, a("body", function(a) {
				var b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, "");
				return r += '<div class="mod_404"> <div class="wrapper" id="mainWrap"> <div class="mod_hd"> <h1 class="title"><span class="title_inner">404\uff0c\u60a8\u8bbf\u95ee\u7684\u9875\u9762\u627e\u4e0d\u56de\u6765\u4e86\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u5e2e\u4ed6\u4eec\u56de\u5bb6\uff01</span></h1> <div class="desc"><a href="', r += c(d), r += '" class="desc_link">', r += c(e), r += '</a></div> </div> <div class="mod_bd"> <div class="child_box"> <div class="mod_404_child child_in" data-id="', 
				r += c(f), r += '" id="top_', r += c(f), r += '"> <div class="child_main cf"> <div class="child_avatar"><img src="', r += c(g), r += '" onload="imagezoom(this, 160, 216);" style="opacity:0"></div> <div class="child_info"> <div class="info_name"> <h2><span class="name_inner">', r += c(h), r += '</span><span class="info_sex">(', r += c(i), r += ')</span></h2> </div> <div class="info_item info_birth"><span class="info_lbl">\u51fa\u751f\u65e5\u671f\uff1a</span><span class="item_inner">', r += c(j), 
				r += '</span></div> <div class="info_item info_time"><span class="info_lbl">\u5931\u8e2a\u65f6\u95f4\uff1a</span><span class="item_inner">', r += c(l), r += '</span></div> <div class="info_item info_address"><span class="info_lbl">\u5931\u8e2a\u5730\u70b9\uff1a</span><span class="item_inner">', r += c(m), r += '</span></div> <div class="info_item info_desc"><span class="info_lbl">\u5931\u8e2a\u4eba\u7279\u5f81\u63cf\u8ff0\uff1a</span><span class="item_inner">', r += c(n), r += '</span></div> <a href="', 
				r += c(o), r += '" class="link_view" title="\u67e5\u770b\u8be6\u60c5"><span class="link_inner">\u67e5\u770b\u8be6\u60c5</span></a> </div> </div> <div class="child_bottom cf"> <div class="bottom_logo"> <ul class="logo_list"> <li><a href="http://e.t.qq.com/Tencent-Volunteers" title="\u817e\u8baf\u5fd7\u613f\u8005"><img src="http://qzone.qq.com/gy/404/style/image/logo_tencentvolunteers.png"></a></li> <li><a href="http://bbs.baobeihuijia.com/forum.php" title="\u5b9d\u8d1d\u56de\u5bb6"><img src="http://qzone.qq.com/gy/404/style/image/logo_baobeihuijia.png"></a></li> </ul> </div> <div class="bottom_right"> <div class="mod_share" onmouseover="this.className += \' mod_share_hover\';" onmouseout="this.className = this.className.replace(\' mod_share_hover\',\'\')"> <span class="share_inner">\u5206\u4eab</span> <ul class="share_list"> <li><a href="javascript:void(0);" class="share_link" onclick="share(\'weibo\');return false;" title="\u817e\u8baf\u5fae\u535a"><span class="link_inner">\u817e\u8baf\u5fae\u535a</span><i class="ico_tencentweibo"></i></a></li> <li><a href="javascript:void(0);" class="share_link" onclick="share(\'qzone\');return false;" title="QQ\u7a7a\u95f4"><span class="link_inner">QQ\u7a7a\u95f4</span><i class="ico_qzone"></i></a></li> <li><a href="javascript:void(0);" class="share_link" onclick="share(\'sina\');return false;" title="\u65b0\u6d6a\u5fae\u535a"><span class="link_inner">\u65b0\u6d6a\u5fae\u535a</span><i class="ico_sinaweibo"></i></a></li> <li><a href="javascript:void(0);" class="share_link" onclick="share(\'weixin\');return false;" title="\u5fae\u4fe1"><span class="link_inner">\u5fae\u4fe1</span><i class="ico_weixin"></i></a></li> </ul> <span style="clear: both;"></span> </div> </div> </div> </div> <i class="ico_corner"></i> </div> </div> <div class="mod_fd"> <div class="mod_404_children"> <ul class="children_list"> ', 
				p(q, function(a) {
					r += ' <li class="', r += c(f == a._id ? "current" : ""), r += '"><a href="javascript:;" onclick="toThis(\'', r += c(a._id), r += '\');" title="', r += c(a.name), r += '" ><img src="', r += c(a.child_pic), r += '"></a></li> ';
				}), r += " </ul> </div> </div> </div> </div>", new k(r);
			});
	}();
</script>
</body>
</html>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[404 Not Found：该页无法显示]]></title>
      <url>http://arvin-he.github.io/404/index.html</url>
      <content type="html"><![CDATA[<style type="text/css">
    .article-header {
        padding: 0;
        padding-top: 26px;
        border-left: none;
        text-align: center;
    }
    .article-header:hover {
        border-left: none;
    }
    .article-title {
        font-size: 2.1em;
    }
    strong a {
        color: #747474;
    }
    .article-meta {
        display: none;
    }
    .share {
        display: none;
    }
    .ds-meta {
        display: none;
    }
    .player {
        margin-left: -10px;
    }
    .sign {
        text-align: right;
        font-style: italic;
    }
      #page-visit {
        display: none;
    }
    .center {
        text-align: center;
        height: 2.5em;
        font-weight: bold;
    }
    .article-entry hr {
        margin: 0;
    }
    .pic {
        text-align: center;
        margin: 0;
    }
    .pic br {
          display: none;
      }
    #container .article-info-post.article-info {
      display: none;
      }
    #container .article .article-title {
    padding: 0;
    }
</style>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>http://arvin-he.github.io/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[essay]]></title>
      <url>http://arvin-he.github.io/essay/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[life]]></title>
      <url>http://arvin-he.github.io/life/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Arvin]]></title>
      <url>http://arvin-he.github.io/about/index.html</url>
      <content type="html"><![CDATA[<hr>
<p>其实关于我没有什么想说的,只是想好好生活,做好自己喜欢的事.<br>喜欢简单舒适的格调.<br>Motto: To be a better man.</p>
<h1 id="喜欢做的事"><a href="#喜欢做的事" class="headerlink" title="喜欢做的事"></a>喜欢做的事</h1><hr>
<p>喜欢读书<br>喜欢健身<br>喜欢写写文章<br>…</p>
<h1 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h1><p>以技术学习与分享为主，主要关注：</p>
<ul>
<li>Python3</li>
<li>Web全栈</li>
<li>Node.js</li>
<li>JavaScript</li>
<li>Linux</li>
<li>BigData</li>
<li>AI</li>
</ul>
<h1 id="联系Arvin"><a href="#联系Arvin" class="headerlink" title="联系Arvin"></a>联系Arvin</h1><hr>
<p>微信: JUNHE_1218<br>E-mail: junhe3209@gmail.com<br>GitHub: <a href="https://github.com/Arvin-He" target="_blank" rel="external">https://github.com/Arvin-He</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[readnotes]]></title>
      <url>http://arvin-he.github.io/readnotes/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://arvin-he.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
